&apos;Calls hooks for `setup _ wizard _ complete` , sets home page as `desktop` DCNL and clears cache . If wizard breaks , calls `setup _ wizard _ exception` hook&apos;
&apos;The main function . Instantiates the module and calls process _ request . DCNL : return : none&apos;
&apos;Return a guessed dataset by filename&apos;
&apos;If any node is a pending _ xref , attempt to resolve it . If it cannot be DCNL resolved , replace it with its children . &apos; 
&apos;Prepare to run system tests . DCNL If on Travis during a PR , exit the entire program ; there is DCNL no need to run the system tests . DCNL If on Travis during a build for a non-PR merge to master , DCNL decrypts stored keyfile . &apos; 
&apos;Test download exit status code when no requirements specified&apos;
&apos;Obtain the OS version from the show version output DCNL Print output to STDOUT&apos;
&apos;Output a string&apos;
&apos; &lt; query &gt; - returns the first bing image search result for &lt; query &gt; &apos;
&apos;Create a fake OptionValueContainer with appropriate defaults for the given `Optionable` type . &quot; DCNL : param type optionable _ type : An : class : `pants.option.optionable.Optionable` subclass . DCNL : param * * options : Keyword args representing option values explicitly set via the command line . DCNL : returns : A fake `OptionValueContainer` , ie : the value returned from `get _ options ( ) ` . &apos; 
&apos;Log likelihood for the probit&apos;
&apos;From github issue # 1463&apos;
&apos;Plot of influence in regression . Plots studentized resids vs. leverage . DCNL Parameters DCNL results : results instance DCNL A fitted model . DCNL external : bool DCNL Whether to use externally or internally studentized residuals . It is DCNL recommended to leave external as True . DCNL alpha : float DCNL The alpha value to identify large studentized residuals . Large means DCNL abs ( resid _ studentized ) &gt; t.ppf ( 1-alpha / 2 , dof = results.df _ resid ) DCNL criterion : str { \ &apos; DFFITS \ &apos; , \ &apos; Cooks \ &apos; } DCNL Which criterion to base the size of the points on . Options are DCNL DFFITS or Cook \ &apos; s D. DCNL size : float DCNL The range of `criterion` is mapped to 10 * * 2 - size * * 2 in points . DCNL plot _ alpha : float DCNL The `alpha` of the plotted points . DCNL ax : matplotlib Axes instance DCNL An instance of a matplotlib Axes . DCNL Returns DCNL fig : matplotlib figure DCNL The matplotlib figure that contains the Axes . DCNL Notes DCNL Row labels for the observations in which the leverage , measured by the DCNL diagonal of the hat matrix , is high or the residuals are large , as the DCNL combination of large residuals and a high influence value indicates an DCNL influence point . The value of large residuals can be controlled using the DCNL `alpha` parameter . Large leverage points are identified as DCNL hat _ i &gt; 2 * ( df _ model + 1 ) / nobs . &apos; 
&apos;Send file to result server&apos;
&apos;In the edX wiki , we don \ &apos; t show the root _ create view . Instead , we DCNL just create the root automatically if it doesn \ &apos; t exist . &apos; 
&apos;Update an entry of block device mapping . DCNL If not existed , create a new entry&apos;
&apos;Get the list of available instance sizes ( flavors )  . &apos; 
&apos;Appends character encoding to the provided format if not already present . &apos; 
&apos;Assign a random category to a resource&apos;
&apos;Temporarily set the attr on a particular object to a given value then DCNL revert when finished . DCNL One use of this is to temporarily set the read _ deleted flag on a context DCNL object : DCNL with temporary _ mutation ( context , read _ deleted = &quot; yes &quot; ) : DCNL do _ something _ that _ needed _ deleted _ objects ( ) &apos;
&apos;Returns True if Harvard Annotation Tool is enabled for the course , DCNL False otherwise . DCNL Checks for \ &apos; textannotation \ &apos; , \ &apos; imageannotation \ &apos; , \ &apos; videoannotation \ &apos; in the list DCNL of advanced modules of the course . &apos; 
&apos;Extract labels and seqs from file&apos;
&apos;Sørensen – Dice coefficient for comparing the similarity of two distributions , DCNL usually be used for binary image segmentation i.e. labels are binary . DCNL The coefficient = &#91; 0 , 1 &#93; , 1 if totally match . DCNL Parameters DCNL output : tensor DCNL A distribution with shape : &#91; batch _ size , .... &#93; , ( any dimensions ) . DCNL target : tensor DCNL A distribution with shape : &#91; batch _ size , .... &#93; , ( any dimensions ) . DCNL epsilon : float DCNL An optional name to attach to this layer . DCNL Examples DCNL &gt; &gt; &gt; outputs = tl.act.pixel _ wise _ softmax ( network.outputs ) DCNL &gt; &gt; &gt; dice _ loss = 1 - tl.cost.dice _ coe ( outputs , y _ , epsilon = 1e-5 ) DCNL References DCNL - `wiki-dice &lt; https : / / en.wikipedia.org / wiki / Sørensen – Dice _ coefficient &gt; ` _ &apos;
&apos;``create _ test _ db`` implementation that skips both creation and flushing DCNL The idea is to re-use the perfectly good test DB already created by an DCNL earlier test run , cutting the time spent before any tests run from 5-13s DCNL ( depending on your I / O luck ) down to 3 . &apos; 
&apos;Upload a mission from a file . &apos; 
&apos;Evaluate an expression ; that is , take a string of math and return a float . DCNL -Variables are passed as a dictionary from string to value . They must be DCNL python numbers . DCNL -Unary functions are passed as a dictionary from string to function . &apos; 
&apos;Write interactive piechart DCNL data : &#91; fraction : label , ... &#93; DCNL trunc _ len : truncates labels after this many chars&apos;
&apos;Test whether a path is a mount point . This will catch any DCNL exceptions and translate them into a False return value DCNL Use ismount _ raw to have the exceptions raised instead . &apos; 
&apos;Get vlm _ media instance title number by name or instance id . DCNL @ param p _ instance : a libvlc instance . DCNL @ param psz _ name : name of vlm media instance . DCNL @ param i _ instance : instance id . DCNL @ return : title as number or -1 on error . DCNL @ bug : will always return 0 . &apos; 
&apos;Choose the correct Information Element class . &apos; 
&apos;Concatenate the given sequences into a list . Ignore None values . DCNL Resolve `` ~ `` ( home dir ) and environment variables , and expand globs DCNL that refer to the local filesystem . DCNL .. versionchanged : : 0.4.6 DCNL Can take single strings as well as lists . &apos; 
&apos;Return the first IPv4 address in network DCNL Args : DCNL network ( str ) : network in CIDR format DCNL Returns : DCNL str : first IPv4 address&apos;
&apos;Load the train , valid , test data for the dataset `name` and return it in DCNL sparse format . DCNL We suppose the data was created with ift6266h11 / pretraitement / to _ npy.py DCNL that shuffle the train . So the train should already be shuffled . DCNL name : \ &apos; avicenna \ &apos; , \ &apos; harry \ &apos; , \ &apos; rita \ &apos; , \ &apos; sylvester \ &apos; or \ &apos; ule \ &apos; DCNL Which dataset to load DCNL normalize : bool DCNL If True , we normalize the train dataset before returning it DCNL transfer : DCNL If True also return the transfer label DCNL randomize _ valid : bool DCNL Do we randomize the order of the valid set ? We always use the same DCNL random order If False , return in the same order as downloaded on the DCNL web DCNL randomize _ test : bool DCNL Do we randomize the order of the test set ? We always use the same DCNL random order If False , return in the same order as downloaded on the DCNL web DCNL Returns DCNL train , valid , test : ndarrays DCNL Datasets returned if transfer = False DCNL train , valid , test , transfer : ndarrays DCNL Datasets returned if transfer = False&apos;
&apos;Get the description of available video subtitles . DCNL @ param p _ mi : the media player . DCNL @ return : list containing description of available video subtitles . It must be freed with L { libvlc _ track _ description _ list _ release } ( )  . &apos; 
&apos;Driver for ``gpu _ single _ block _ sum`` kernel&apos;
&apos;Test to ensure hug \ &apos; s contains _ one _ of validation function works as expected to ensure presence of a field&apos;
&apos;Get and transfer the closest remaining nested ring . &apos; 
&apos; @ param required : Whether the selection is optional or mandatory DCNL @ param realms : Whether the list should be filtered to just those DCNL belonging to a list of realm entities DCNL @ param updateable : Whether the list should be filtered to just those DCNL which the user has Write access to DCNL @ ToDo : Option to remove Branches DCNL @ ToDo : Option to only include Branches&apos;
&apos;Return unique identifier for feed / sensor . &apos; 
&apos;Configure Network DCNL CLI Example : DCNL .. code-block : : bash DCNL salt dell drac.set _ network &#91; DRAC IP &#93; &#91; NETMASK &#93; &#91; GATEWAY &#93; DCNL salt dell drac.set _ network 192.168.0.2 255.255.255.0 192.168.0.1&apos;
&apos;Pickle object `obj` to file `fname` . DCNL `protocol` defaults to 2 so pickled objects are compatible across DCNL Python 2.x and 3.x . &apos; 
&apos;Split the repository-relative filename into a tuple of ( branchname , DCNL branch _ relative _ filename ) . If you have no branches , this should just DCNL return ( None , changed _ file )  . &apos; 
&apos;Merge the entries of two trees . DCNL : param path : A path to prepend to all tree entry names . DCNL : param tree1 : The first Tree object to iterate , or None . DCNL : param tree2 : The second Tree object to iterate , or None . DCNL : return : A list of pairs of TreeEntry objects for each pair of entries in DCNL the trees . If an entry exists in one tree but not the other , the other DCNL entry will have all attributes set to None . If neither entry \ &apos; s path is DCNL None , they are guaranteed to match . &apos; 
&apos;Tasks to be performed after a new user registers&apos;
&apos;Compute ``f * a`` where ``f`` in ``GF ( p ) &#91; x &#93; `` and ``a`` in ``GF ( p ) `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.galoistools import gf _ mul _ ground DCNL &gt; &gt; &gt; gf _ mul _ ground ( &#91; 3 , 2 , 4 &#93; , 2 , 5 , ZZ ) DCNL &#91; 1 , 4 , 3 &#93; &apos;
&apos;Closes all review requests for the Google Code repository . &apos; 
&apos;Verfies the encoding argument by lookup . DCNL ( Directive option conversion function . ) DCNL Raises ValueError for unknown encodings . &apos; 
&apos;Set global configuration options . DCNL Each keyword argument sets one global option . &apos; 
&apos;Get a specific item by name out of the results dict . DCNL The format of itemName is a string of dictionary keys separated by colons , DCNL each key being one level deeper into the results dict . For example , DCNL \ &apos; key1 : key2 \ &apos; would fetch results &#91; \ &apos; key1 \ &apos; &#93; &#91; \ &apos; key2 \ &apos; &#93; . DCNL If itemName is not found in results , then None is returned&apos;
&apos;Get all the inner text of a DOM node ( recursively )  . &apos; 
&apos;Resolve a ROS name to its global , canonical form . Private ~ names DCNL are resolved relative to the node name . DCNL @ param name : name to resolve . DCNL @ type name : str DCNL @ param namespace _ : node name to resolve relative to . DCNL @ type namespace _ : str DCNL @ param remappings : Map of resolved remappings . Use None to indicate no remapping . DCNL @ return : Resolved name . If name is empty / None , resolve _ name DCNL returns parent namespace _ . If namespace _ is empty / None , DCNL @ rtype : str&apos;
&apos;Parse the content of a wordpress post or page and separate qtranslate languages . DCNL qtranslate tags : &lt; ! -- : LL-- &gt; blabla &lt; ! -- : -- &gt; &apos;
&apos;Get item from value ( value &#91; item &#93; ) . DCNL If the item is not found , return the default . DCNL Handles XML elements , regex matches and anything that has _ _ getitem _ _  . &apos; 
&apos;Tries to determine the paragraph type of the document . DCNL block : Paragraphs are separated by a blank line . DCNL single : Each line is a paragraph . DCNL print : Each paragraph starts with a 2 + spaces or a tab DCNL and ends when a new paragraph is reached . DCNL unformatted : most lines have hard line breaks , few / no blank lines or indents DCNL returns block , single , print , unformatted&apos;
&apos;Creates a unique file name based on the specified base name . DCNL @ base _ name - The base name to use for the unique file name . DCNL @ extension - The file extension to use for the unique file name . DCNL Returns a unique file string . &apos; 
&apos;Takes an iterator and returns an iterator that returns only the DCNL first occurence of each entry&apos;
&apos;Return a new block , try to preserve dtype if possible . DCNL Parameters DCNL v : `values` , updated in-place ( array like ) DCNL m : `mask` , applies to both sides ( array like ) DCNL n : `new values` either scalar or an array like aligned with `values`&apos;
&apos;Helper function to avoid duplicating functionality between DCNL traverse _ depth _ first and traverse _ topologically . DCNL If get _ parents is None , do a pre-order traversal . DCNL Else , do a topological traversal . DCNL The topological traversal has a worse time complexity than DCNL pre-order does , as it needs to check whether each node \ &apos; s DCNL parents have been visited . DCNL Arguments : DCNL See description in traverse _ topologically . &apos; 
&apos;Get the quadratic path . &apos; 
&apos;Detect Log ( Softmax ( x ) ) and replace it with LogSoftmax ( x ) DCNL Note : only forward pass is affected&apos;
&apos;This function initializes the chroma matrices used in the calculation of the chroma features&apos;
&apos;Annotate corresponding NXM header&apos;
&apos;See : meth : `I18n.gettext` . &apos; 
&apos;Modified Weiszfeld step . DCNL This function defines one iteration step in order to approximate the DCNL spatial median ( L1 median ) . It is a form of an iteratively re-weighted DCNL least squares method . DCNL Parameters DCNL X : array , shape = &#91; n _ samples , n _ features &#93; DCNL Training vector , where n _ samples is the number of samples and DCNL n _ features is the number of features . DCNL x _ old : array , shape = &#91; n _ features &#93; DCNL Current start vector . DCNL Returns DCNL x _ new : array , shape = &#91; n _ features &#93; DCNL New iteration step . DCNL References DCNL - On Computation of Spatial Median for Robust Data Mining , 2005 DCNL T. Kärkkäinen and S. Äyrämö DCNL http : / / users.jyu.fi / ~ samiayr / pdf / ayramo _ eurogen05.pdf&apos;
&apos;Translates all translatable elements of the given exception . &apos; 
&apos;Generate a random UUID hex string DCNL : return : a random UUID ( e.g. \ &apos; 0b98cf96d90447bda4b46f31aeb1508c \ &apos; ) DCNL : rtype : string&apos;
&apos;Retrieve the current time , this function is mocked out in unit testing . &apos; 
&apos;Returns change status of command&apos;
&apos;Send summary to everyone&apos;
&apos;Sets a driver . DCNL : param drivers : Dictionary to store providers . DCNL : param provider : Id of provider to set driver for DCNL : type provider : : class : `libcloud.types.Provider` DCNL : param module : The module which contains the driver DCNL : type module : L DCNL : param klass : The driver class name DCNL : type klass : &apos;
&apos;Return the class name that should be used , given the name DCNL of a table . DCNL The default implementation is : : DCNL return str ( tablename ) DCNL Alternate implementations can be specified using the DCNL : paramref : `.AutomapBase.prepare.classname _ for _ table` DCNL parameter . DCNL : param base : the : class : `.AutomapBase` class doing the prepare . DCNL : param tablename : string name of the : class : `.Table`. DCNL : param table : the : class : `.Table` object itself . DCNL : return : a string class name . DCNL .. note : : DCNL In Python 2 , the string used for the class name * * must * * be a non-Unicode DCNL object , e.g. a ``str ( ) `` object . The ``.name`` attribute of DCNL : class : `.Table` is typically a Python unicode subclass , so the ``str ( ) `` DCNL function should be applied to this name , after accounting for any non-ASCII DCNL characters . &apos; 
&apos;Get vertex given obj vertex line . &apos; 
&apos;filter packets by there tcp-state and DCNL returns codes for specific states&apos;
&apos;Pretty-format a memcache.set ( ) request . DCNL Arguments : DCNL request - The memcache.set ( ) request object , e.g. , DCNL { \ &apos; item \ &apos; : &#91; { \ &apos; Item \ &apos; : { \ &apos; flags \ &apos; : \ &apos; 0L \ &apos; , \ &apos; key \ &apos; : \ &apos; memcache _ key \ &apos; ... DCNL Returns : DCNL The keys of the memcache.get ( ) response as a string . If there are DCNL multiple keys , they are separated by newline characters . &apos; 
&apos;Compute the spline for the antiderivative ( integral ) of a given spline . DCNL Parameters DCNL tck : BSpline instance or a tuple of ( t , c , k ) DCNL Spline whose antiderivative to compute DCNL n : int , optional DCNL Order of antiderivative to evaluate . Default : 1 DCNL Returns DCNL BSpline instance or a tuple of ( t2 , c2 , k2 ) DCNL Spline of order k2 = k + n representing the antiderivative of the input DCNL spline . DCNL A tuple is returned iff the input argument `tck` is a tuple , otherwise DCNL a BSpline object is constructed and returned . DCNL See Also DCNL splder , splev , spalde DCNL BSpline DCNL Notes DCNL The `splder` function is the inverse operation of this function . DCNL Namely , ``splder ( splantider ( tck ) ) `` is identical to `tck` , modulo DCNL rounding error . DCNL .. versionadded : : 0.13.0 DCNL Examples DCNL &gt; &gt; &gt; from scipy.interpolate import splrep , splder , splantider , splev DCNL &gt; &gt; &gt; x = np.linspace ( 0 , np.pi / 2 , 70 ) DCNL &gt; &gt; &gt; y = 1 / np.sqrt ( 1 - 0.8 * np.sin ( x ) * * 2 ) DCNL &gt; &gt; &gt; spl = splrep ( x , y ) DCNL The derivative is the inverse operation of the antiderivative , DCNL although some floating point error accumulates : DCNL &gt; &gt; &gt; splev ( 1.7 , spl ) , splev ( 1.7 , splder ( splantider ( spl ) ) ) DCNL ( array ( 2.1565429877197317 ) , array ( 2.1565429877201865 ) ) DCNL Antiderivative can be used to evaluate definite integrals : DCNL &gt; &gt; &gt; ispl = splantider ( spl ) DCNL &gt; &gt; &gt; splev ( np.pi / 2 , ispl ) - splev ( 0 , ispl ) DCNL 2.2572053588768486 DCNL This is indeed an approximation to the complete elliptic integral DCNL : math : `K ( m ) = \ int _ 0 ^ { \ pi / 2 } &#91; 1 - m \ sin ^ 2 x &#93; ^ { -1 / 2 } dx` : DCNL &gt; &gt; &gt; from scipy.special import ellipk DCNL &gt; &gt; &gt; ellipk ( 0.8 ) DCNL 2.2572053268208538&apos;
&apos;Print a list of objects&apos;
&apos;Get the sysfs path based on the PCI address of the device . DCNL Assumes a networking device - will not check for the existence of the path . &apos; 
&apos;Unpack an AE descriptor to a python object&apos;
&apos;Convert between strings and numbers . &apos; 
&apos;Verifies that the specified incron job is absent for the specified user ; only DCNL the name is matched when removing a incron job . DCNL name DCNL Unique comment describing the entry DCNL path DCNL The path that should be watched DCNL user DCNL The name of the user who \ &apos; s crontab needs to be modified , defaults to DCNL the root user DCNL mask DCNL The mask of events that should be monitored for DCNL cmd DCNL The cmd that should be executed&apos;
&apos;Return a list of all known user names . &apos; 
&apos;Get a frame class from the input `frame` , which could be a frame name DCNL string , or frame class . &apos; 
&apos;Return the ground trailing coefficient . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.densebasic import dmp _ ground _ TC DCNL &gt; &gt; &gt; f = ZZ.map ( &#91; &#91; &#91; 1 &#93; , &#91; 2 , 3 &#93; &#93; &#93; ) DCNL &gt; &gt; &gt; dmp _ ground _ TC ( f , 2 , ZZ ) DCNL 3&apos;
&apos;Generate a chromosome with random information about it . &apos; 
&apos;Return an imdb that uses the top k proposals from the selective search DCNL IJCV code . &apos; 
&apos;If file _ ignore _ regex or file _ ignore _ glob were given in config , DCNL compare the given file path against all of them and return True DCNL on the first match . &apos; 
&apos;Generate a warning for an IERSRangeerror DCNL Parameters DCNL ierserr : An ` ~ astropy.utils.iers.IERSRangeError`&apos;
&apos;Mean of a tensor , alongside the specified axis . DCNL # Arguments DCNL x : A tensor or variable . DCNL axis : A list of integer . Axes to compute the mean . DCNL keepdims : A boolean , whether to keep the dimensions or not . DCNL If `keepdims` is `False` , the rank of the tensor is reduced DCNL by 1 for each entry in `axis` . If `keep _ dims` is `True` , DCNL the reduced dimensions are retained with length 1 . DCNL # Returns DCNL A tensor with the mean of elements of `x` . &apos; 
&apos;Morph an existing source space to a different subject . DCNL .. warning : : This can be used in place of morphing source estimates for DCNL multiple subjects , but there may be consequences in terms DCNL of dipole topology . DCNL Parameters DCNL src _ from : instance of SourceSpaces DCNL Surface source spaces to morph . DCNL subject _ to : str DCNL The destination subject . DCNL surf : str DCNL The brain surface to use for the new source space . DCNL subject _ from : str &#124; None DCNL The &quot; from &quot; subject . For most source spaces this shouldn \ &apos; t need DCNL to be provided , since it is stored in the source space itself . DCNL subjects _ dir : string , or None DCNL Path to SUBJECTS _ DIR if it is not set in the environment . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL src : instance of SourceSpaces DCNL The morphed source spaces . DCNL Notes DCNL .. versionadded : : 0.10.0&apos;
&apos;Generic reader of line files . &apos; 
&apos;Get the stack address for a specific ETag from the configuration file . &apos; 
&apos;Set up the libcloud functions and check for dimensiondata configurations . &apos; 
&apos;Return partial derivative of ``p`` with respect to ``x`` . DCNL Parameters DCNL x : : class : `PolyElement` with respect to which ``p`` is differentiated . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import QQ DCNL &gt; &gt; &gt; from sympy.polys.rings import ring DCNL &gt; &gt; &gt; from sympy.polys.ring _ series import rs _ diff DCNL &gt; &gt; &gt; R , x , y = ring ( \ &apos; x , y \ &apos; , QQ ) DCNL &gt; &gt; &gt; p = x + x * * 2 * y * * 3 DCNL &gt; &gt; &gt; rs _ diff ( p , x ) DCNL 2 * x * y * * 3 + 1&apos;
&apos;Recursive subroutine for building dependency list and python path DCNL : raises : : exc : `rospkg.ResourceNotFound` If an error occurs while attempting to load package or dependencies&apos;
&apos;Launch tail on a set of files and merge their output into outstream . DCNL Args : DCNL follow _ paths : list ; Local paths to launch tail on . DCNL outstream : file ; Output stream to write aggregated lines to . DCNL lastlines _ dirpath : Local dirpath to record last lines seen in . DCNL waitsecs : int ; Timeout for poll _ tail _ pipes . &apos; 
&apos;This returns a list , which contains the value portions for the keys DCNL Ex : data = { \ &apos; a \ &apos; : 1 , \ &apos; b \ &apos; : 2 , \ &apos; c \ &apos; : 3 } DCNL keys = &#91; \ &apos; a \ &apos; , \ &apos; c \ &apos; &#93; DCNL returns &#91; 1 , 3 &#93; &apos;
&apos;Checks to see if the given user has access to user a particular API . DCNL Args : DCNL user : The current user email DCNL api _ name : The API we \ &apos; re checking to see if the user has permission DCNL Returns : DCNL True is capable , False otherwise&apos;
&apos;Wrapper around c _ extract that initializes py _ name from storage . &apos; 
&apos;Internal function . &apos; 
&apos;Produce messages&apos;
&apos;Add to threads from the last location from loop . &apos; 
&apos;Used to format an error message which differs DCNL slightly in 4 places . &apos; 
&apos;train ( xs , ys &#91; , update _ fn &#93; ) - &gt; LogisticRegression DCNL Train a logistic regression classifier on a training set. xs is a DCNL list of observations and ys is a list of the class assignments , DCNL which should be 0 or 1. xs and ys should contain the same number DCNL of elements. update _ fn is an optional callback function that DCNL takes as parameters that iteration number and log likelihood . &apos; 
&apos;Create a new volume DCNL .. versionadded : : 2015.8.4 DCNL name DCNL name of volume DCNL driver DCNL Driver of the volume DCNL driver _ opts DCNL Options for the driver volume DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion dockerng.create _ volume my _ volume driver = local&apos;
&apos;Register the reporter classes with the linter . &apos; 
&apos;Vertical Scharr on an edge should be a vertical line . &apos; 
&apos;Returns context _ lines before and after lineno from file . DCNL Returns ( pre _ context _ lineno , pre _ context , context _ line , post _ context )  . &apos; 
&apos;Parses the options and stores them in the global options variable . &apos; 
&apos;Downloads libxml2 , returning the filename where the library was downloaded&apos;
&apos;Enqueues a task for push notification for the given update for the given course if DCNL ( 1 ) the feature is enabled and DCNL ( 2 ) push _ notification is selected for the update&apos;
&apos;Helper function for mocking os.walk ( ) where must test that manipulation DCNL of the returned dirs variable works as expected&apos;
&apos;Get all children of an object recursively as a string . &apos; 
&apos;Construct the email using templates and then send it . DCNL `student` is the student \ &apos; s email address ( a `str` ) , DCNL `param _ dict` is a `dict` with keys DCNL `site _ name` : name given to edX instance ( a `str` ) DCNL `registration _ url` : url for registration ( a `str` ) DCNL `display _ name` : display name of a course ( a `str` ) DCNL `course _ id` : id of course ( a `str` ) DCNL `auto _ enroll` : user input option ( a `str` ) DCNL `course _ url` : url of course ( a `str` ) DCNL `email _ address` : email of student ( a `str` ) DCNL `full _ name` : student full name ( a `str` ) DCNL `message` : type of email to send and template to use ( a `str` ) DCNL `is _ shib _ course` : ( a `boolean` ) DCNL `language` is the language used to render the email . If None the language DCNL of the currently-logged in user ( that is , the user sending the email ) will DCNL be used . DCNL Returns a boolean indicating whether the email was sent successfully . &apos; 
&apos;Given the directory of a profiler client , find the client log path . &apos; 
&apos;Execute command in a subshell , return status code . &apos; 
&apos;Raises a webob.exc.HTTPConflict instance containing a message DCNL appropriate to return via the API based on the original DCNL InstanceInvalidState exception . &apos; 
&apos;returns the ith order statistic DCNL in the array a in linear time DCNL &gt; &gt; &gt; from random import sample DCNL &gt; &gt; &gt; test _ cases = &#91; sample ( range ( 20 ) , 10 ) for i in range ( 10 ) &#93; DCNL &gt; &gt; &gt; orders = &#91; randint ( 0 , 9 ) for i in range ( 10 ) &#93; DCNL &gt; &gt; &gt; results = &#91; sorted ( test _ cases &#91; i &#93; ) &#91; orders &#91; i &#93; &#93; = = random _ selection ( test _ cases &#91; i &#93; , 0 , len ( test _ cases &#91; i &#93; ) -1 , orders &#91; i &#93; ) for i in range ( 10 ) &#93; DCNL &gt; &gt; &gt; print sum ( results ) DCNL 10&apos;
&apos;Script to deprecate any repositories that are older than n days , and have been empty since creation . &apos; 
&apos;This routine produces a list of ( source , dest ) non-Python ( i.e. data ) DCNL files which reside in package . Its results can be directly assigned to DCNL ``datas`` in a hook script ; see , for example , hook-sphinx.py. The DCNL package parameter must be a string which names the package . DCNL By default , all Python executable files ( those ending in .py , .pyc , DCNL and so on ) will NOT be collected ; setting the include _ py _ files DCNL argument to True collects these files as well . This is typically used DCNL with Python routines ( such as those in pkgutil ) that search a given DCNL directory for Python executable files then load them as extensions or DCNL plugins . The optional subdir give a subdirectory relative to package to DCNL search , which is helpful when submodules are imported at run-time from a DCNL directory lacking _ _ init _ _ .py DCNL This function does not work on zipped Python eggs . DCNL This function is used only for hook scripts , but not by the body of DCNL PyInstaller . &apos; 
&apos;Return the message `plaintext` encrypted . DCNL The encrypted message will have its salt prepended and will be URL encoded DCNL to make it suitable for use in URLs and Cookies . DCNL NOTE : this function is here for backwards compatibility . Please do not DCNL use it for new code . &apos; 
&apos;Parses a standard Swift ACL string into a referrers list and groups list . DCNL See : func : `clean _ acl` for documentation of the standard Swift ACL format . DCNL : param acl _ string : The standard Swift ACL string to parse . DCNL : returns : A tuple of ( referrers , groups ) where referrers is a list of DCNL referrer designations ( without the leading .r : ) and groups is a DCNL list of groups to allow access . &apos; 
&apos;Create a process in the same way as popen _ sp , but patch the file DCNL descriptors so they can be accessed from Python / gevent DCNL in a non-blocking manner . &apos; 
&apos;Evaluate functional transformation ``q * * n * f ( p / q ) `` in ``K &#91; x &#93; `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys import ring , ZZ DCNL &gt; &gt; &gt; R , x = ring ( &quot; x &quot; , ZZ ) DCNL &gt; &gt; &gt; R.dup _ transform ( x * * 2 - 2 * x + 1 , x * * 2 + 1 , x - 1 ) DCNL x * * 4 - 2 * x * * 3 + 5 * x * * 2 - 4 * x + 4&apos;
&apos;Save a collection item to database DCNL @ param Collection collection collection DCNL @ param Item item collection item&apos;
&apos;Creates and returns the Serato script&apos;
&apos;REST Controller DCNL @ ToDo : Filter out fulfilled Items ? &apos;
&apos;Check status of a particular service on a host on it in Nagios . DCNL By default statuses are returned in a numeric format . DCNL Parameters : DCNL hostname DCNL The hostname to check the status of the service in Nagios . DCNL service DCNL The service to check the status of in Nagios . DCNL numeric DCNL Turn to false in order to return status in text format DCNL ( \ &apos; OK \ &apos; instead of 0 , \ &apos; Warning \ &apos; instead of 1 etc ) DCNL : return : status : \ &apos; OK \ &apos; , \ &apos; Warning \ &apos; , \ &apos; Critical \ &apos; or \ &apos; Unknown \ &apos; DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nagios _ rpc.service _ status hostname = webserver.domain.com service = \ &apos; HTTP \ &apos; DCNL salt \ &apos; * \ &apos; nagios _ rpc.service _ status hostname = webserver.domain.com service = \ &apos; HTTP \ &apos; numeric = False&apos;
&apos;Display the text for this problem&apos;
&apos;This is a backwards compatibility function . Its result is the same as DCNL calling : : DCNL request.current _ route _ url ( * elements , * * kw ) DCNL See : meth : `pyramid.request.Request.current _ route _ url` for more DCNL information . &apos; 
&apos;Try to clean powershell script ( perhaps in the future \ &apos; obfuscation \ &apos; ... ) . DCNL Comments are deteleted and some strings are replaced in some powershell functions to bypass AV detection&apos;
&apos;Rewrite metadata since llvm3.6 dropped the &quot; metadata &quot; type prefix . &apos; 
&apos;Returns an : class : `.ArrowFactory` for the specified : class : `Arrow &lt; arrow.arrow.Arrow &gt; ` DCNL or derived type . DCNL : param type : the type , : class : `Arrow &lt; arrow.arrow.Arrow &gt; ` or derived . &apos; 
&apos;Get filesize and metadata for all streams , return dict . &apos; 
&apos;Return a ( tsig _ rdata , mac , ctx ) tuple containing the HMAC TSIG rdata DCNL for the input parameters , the HMAC MAC calculated by applying the DCNL TSIG signature algorithm , and the TSIG digest context . DCNL @ rtype : ( string , string , hmac.HMAC object ) DCNL @ raises ValueError : I { other _ data } is too long DCNL @ raises NotImplementedError : I { algorithm } is not supported&apos;
&apos;Return an error response with multiple errors . DCNL `status` is an integer representing an HTTP status code corresponding to an DCNL error response . DCNL `errors` is a list of error dictionaries , each of which must satisfy the DCNL requirements of the JSON API specification . DCNL This function returns a two-tuple whose left element is a dictionary DCNL representing a JSON API response document and whose right element is DCNL simply `status` . DCNL The keys within each error object are described in the `Errors` _ DCNL section of the JSON API specification . DCNL .. _ Errors : http : / / jsonapi.org / format / # errors&apos;
&apos;Computes the indefinite integral of ``f`` in ``x _ j`` in ``K &#91; X &#93; `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys import ring , QQ DCNL &gt; &gt; &gt; R , x , y = ring ( &quot; x , y &quot; , QQ ) DCNL &gt; &gt; &gt; R.dmp _ integrate _ in ( x + 2 * y , 1 , 0 ) DCNL 1 / 2 * x * * 2 + 2 * x * y DCNL &gt; &gt; &gt; R.dmp _ integrate _ in ( x + 2 * y , 1 , 1 ) DCNL x * y + y * * 2&apos;
&apos;Dumps all thread stacks to a file&apos;
&apos;Return the metadata for the books as a JSON dictionary . DCNL Query parameters : ? ids = all &amp; category _ urls = true &amp; id _ is _ uuid = false &amp; device _ for _ template = None DCNL If category _ urls is true the returned dictionary also contains a DCNL mapping of category ( field ) names to URLs that return the list of books in the DCNL given category . DCNL If id _ is _ uuid is true then the book _ id is assumed to be a book uuid instead . &apos; 
&apos;return a rendered network template for the given network _ info DCNL : param network _ info : DCNL : py : meth : ` ~ nova.network.manager.NetworkManager.get _ instance _ nw _ info` DCNL Note : this code actually depends on the legacy network _ info , but will DCNL convert the type itself if necessary . &apos; 
&apos;Clean up standarddir arguments before and after each test . &apos; 
&apos;Updates the remote repos database . DCNL full : False DCNL Set to ``True`` to force a refresh of the pkg DB from all publishers , DCNL regardless of the last refresh time . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.refresh _ db DCNL salt \ &apos; * \ &apos; pkg.refresh _ db full = True&apos;
&apos;When time zone support is enabled , convert naive datetimes DCNL entered in the current time zone to aware datetimes . &apos; 
&apos;A helper for defining boolean options . &apos; 
&apos;Load language setting from language config file if it exists , otherwise DCNL try to use the local settings if Spyder provides a translation , or DCNL return the default if no translation provided . &apos; 
&apos;Decorate a function without preserving the name of the original function . DCNL Always return a function with the same name . &apos; 
&apos;Search the environment for the relative path . &apos; 
&apos;Load the China smoking / lung cancer data and return a Dataset class . DCNL Returns DCNL Dataset instance : DCNL See DATASET _ PROPOSAL.txt for more information . &apos; 
&apos;Returns a generator of flattened nested containers DCNL For example : DCNL &gt; &gt; &gt; from matplotlib.cbook import flatten DCNL &gt; &gt; &gt; l = ( ( \ &apos; John \ &apos; , &#91; \ &apos; Hunter \ &apos; &#93; ) , ( 1 , 23 ) , &#91; &#91; ( &#91; 42 , ( 5 , 23 ) &#93; , ) &#93; &#93; ) DCNL &gt; &gt; &gt; print ( list ( flatten ( l ) ) ) DCNL &#91; \ &apos; John \ &apos; , \ &apos; Hunter \ &apos; , 1 , 23 , 42 , 5 , 23 &#93; DCNL By : Composite of Holger Krekel and Luther Blissett DCNL From : https : / / code.activestate.com / recipes / 121294 / DCNL and Recipe 1.12 in cookbook&apos;
&apos;Determine if the line is intersecting loops . &apos; 
&apos;Takes the output of compare _ expected , and returns a string DCNL description of the differences . &apos; 
&apos;View a tax&apos;
&apos;Run some function , and return ( RunTimeInSeconds , Result ) &apos;
&apos;Converts an HTTP date string to a datetime instance . DCNL Args : DCNL http _ date ( str ) : An RFC 1123 date string , e.g. : DCNL &quot; Tue , 15 Nov 1994 12 : 45 : 26 GMT &quot; . DCNL obs _ date ( bool , optional ) : Support obs-date formats according to DCNL RFC 7231 , e.g. : DCNL &quot; Sunday , 06-Nov-94 08 : 49 : 37 GMT &quot; ( default ``False`` ) . DCNL Returns : DCNL datetime : A UTC datetime instance corresponding to the given DCNL HTTP date . DCNL Raises : DCNL ValueError : http _ date doesn \ &apos; t match any of the available time formats&apos;
&apos;Setup the USPS platform . &apos; 
&apos;Enable flocker-control service . We need to be able to indicate whether DCNL we want to start the service , when we are deploying a new cluster , DCNL or if we want to restart it , when we are using an existent cluster in DCNL managed mode . DCNL : param bytes distribution : name of the distribution where the flocker DCNL controls currently runs . The supported distros are : DCNL - ubuntu-14.04 DCNL - ubuntu-16.04 DCNL - centos- &lt; centos version &gt; DCNL : param bytes action : action to perform with the flocker control service . DCNL Currently , we support : DCNL -start DCNL -stop DCNL : raises ``DistributionNotSupported`` if the ``distribution`` is not DCNL currently supported DCNL ``UnknownAction`` if the action passed is not a valid one&apos;
&apos;Return a conn object for the passed VM data&apos;
&apos;Returns the autocorrelation of signal s at all lags . Adheres to the DCNL definition r ( k ) = E { s ( n ) s * ( n-k ) } where E { } is the expectation operator . &apos; 
&apos;Check if user has access to a course . DCNL Arguments : DCNL user ( User ) : the user whose course access we are checking . DCNL action ( string ) : The action that is being checked . DCNL courselike ( CourseDescriptor or CourseOverview ) : The object DCNL representing the course that the user wants to access . DCNL Valid actions : DCNL \ &apos; load \ &apos; -- load the courseware , see inside the course DCNL \ &apos; load _ forum \ &apos; -- can load and contribute to the forums ( one access level for now ) DCNL \ &apos; load _ mobile \ &apos; -- can load from a mobile context DCNL \ &apos; enroll \ &apos; -- enroll . Checks for enrollment window . DCNL \ &apos; see _ exists \ &apos; -- can see that the course exists . DCNL \ &apos; staff \ &apos; -- staff access to course . DCNL \ &apos; see _ in _ catalog \ &apos; -- user is able to see the course listed in the course catalog . DCNL \ &apos; see _ about _ page \ &apos; -- user is able to see the course about page . &apos; 
&apos;Add special start token ( id ) in the beginning of each sequence . DCNL Examples DCNL &gt; &gt; &gt; sentences _ ids = &#91; &#91; 4,3,5,3,2,2,2,2 &#93; , &#91; 5,3,9,4,9,2,2,3 &#93; &#93; DCNL &gt; &gt; &gt; sentences _ ids = sequences _ add _ start _ id ( sentences _ ids , start _ id = 2 ) DCNL ... &#91; &#91; 2 , 4 , 3 , 5 , 3 , 2 , 2 , 2 , 2 &#93; , &#91; 2 , 5 , 3 , 9 , 4 , 9 , 2 , 2 , 3 &#93; &#93; DCNL &gt; &gt; &gt; sentences _ ids = sequences _ add _ start _ id ( sentences _ ids , start _ id = 2 , remove _ last = True ) DCNL ... &#91; &#91; 2 , 4 , 3 , 5 , 3 , 2 , 2 , 2 &#93; , &#91; 2 , 5 , 3 , 9 , 4 , 9 , 2 , 2 &#93; &#93; DCNL - For Seq2seq DCNL &gt; &gt; &gt; input = &#91; a , b , c &#93; DCNL &gt; &gt; &gt; target = &#91; x , y , z &#93; DCNL &gt; &gt; &gt; decode _ seq = &#91; start _ id , a , b &#93; &lt; -- sequences _ add _ start _ id ( input , start _ id , True ) &apos;
&apos;Test either if an error is raised when sample is called before DCNL fitting&apos;
&apos;Proxy for either true _ div or int _ div , depending on types of x , y . &apos; 
&apos;Set effective user id . &apos; 
&apos;Create a Python list from a native set \ &apos; s items . &apos; 
&apos;Get the one-line summary out of a module file . &apos; 
&apos;Function for deleting Autoscale Groups&apos;
&apos;Get system default Download directory , append mps dir . &apos; 
&apos;List all floating IP pools DCNL .. versionadded : : 2016.3.0&apos;
&apos;Delete a DynamoDB table . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ dynamodb.delete table _ name region = us-east-1&apos;
&apos;Given a Python qualified name , this function yields a 2-tuple of the most DCNL specific qualified name first , followed by the next-most-specific qualified DCNL name , and so on , paired with the remainder of the qualified name . DCNL @ param qualName : A Python qualified name . DCNL @ type qualName : L { str } &apos;
&apos;Tests special characters are unique . &apos; 
&apos;Ensure the SQS queue exists . DCNL name DCNL Name of the SQS queue . DCNL attributes DCNL A dict of key / value SQS attributes . DCNL region DCNL Region to connect to . DCNL key DCNL Secret key to be used . DCNL keyid DCNL Access key to be used . DCNL profile DCNL A dict with region , key and keyid , or a pillar key ( string ) DCNL that contains a dict with region , key and keyid . &apos; 
&apos;Return &#91; a , b , r &#93; for p.match ( a + b * sqrt ( r ) ) where , in addition to DCNL matching , sqrt ( r ) also has then maximal sqrt _ depth among addends of p . DCNL Examples DCNL &gt; &gt; &gt; from sympy.functions.elementary.miscellaneous import sqrt DCNL &gt; &gt; &gt; from sympy.simplify.sqrtdenest import _ sqrt _ match DCNL &gt; &gt; &gt; _ sqrt _ match ( 1 + sqrt ( 2 ) + sqrt ( 2 ) * sqrt ( 3 ) + 2 * sqrt ( 1 + sqrt ( 5 ) ) ) DCNL &#91; 1 + sqrt ( 2 ) + sqrt ( 6 ) , 2 , 1 + sqrt ( 5 ) &#93; &apos;
&apos;Event edit&apos;
&apos;Check if a request is a media request . &apos; 
&apos;Finds a list of subnets , each identified either by a raw ID , a unique DCNL \ &apos; Name \ &apos; tag , or a CIDR such as 10.0.0.0 / 8 . DCNL Note that this function is duplicated in other ec2 modules , and should DCNL potentially be moved into potentially be moved into a shared module _ utils&apos;
&apos;Test list data with input mask or mask _ value ( # 3268 )  . &apos; 
&apos;Read data from a lush file with uint8 data ( scalar ) . DCNL Note : When you write a scalar from Koray \ &apos; s matlab code it always makes DCNL everything 3D . Writing it straight from lush you might be able to get DCNL a true scalar&apos;
&apos;If path is relative , return the given path inside the project data dir , DCNL otherwise return the path unmodified&apos;
&apos;Bind an interface to a zone DCNL .. versionadded : : 2016.3.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; firewalld.add _ interface zone eth0&apos;
&apos;A dylib name can take one of the following four forms : DCNL Location / Name.SomeVersion _ Suffix.dylib DCNL Location / Name.SomeVersion.dylib DCNL Location / Name _ Suffix.dylib DCNL Location / Name.dylib DCNL returns None if not found or a mapping equivalent to : DCNL dict ( DCNL location = \ &apos; Location \ &apos; , DCNL name = \ &apos; Name.SomeVersion _ Suffix.dylib \ &apos; , DCNL shortname = \ &apos; Name \ &apos; , DCNL version = \ &apos; SomeVersion \ &apos; , DCNL suffix = \ &apos; Suffix \ &apos; , DCNL Note that SomeVersion and Suffix are optional and may be None DCNL if not present . &apos; 
&apos;Takes as input a Sum instance and returns the difference between the sum DCNL with the upper index incremented by 1 and the original sum . For example , DCNL if S ( n ) is a sum , then finite _ diff _ kauers will return S ( n + 1 ) - S ( n ) . DCNL Examples DCNL &gt; &gt; &gt; from sympy.series.kauers import finite _ diff _ kauers DCNL &gt; &gt; &gt; from sympy import Sum DCNL &gt; &gt; &gt; from sympy.abc import x , y , m , n , k DCNL &gt; &gt; &gt; finite _ diff _ kauers ( Sum ( k , ( k , 1 , n ) ) ) DCNL n + 1 DCNL &gt; &gt; &gt; finite _ diff _ kauers ( Sum ( 1 / k , ( k , 1 , n ) ) ) DCNL 1 / ( n + 1 ) DCNL &gt; &gt; &gt; finite _ diff _ kauers ( Sum ( ( x * y * * 2 ) , ( x , 1 , n ) , ( y , 1 , m ) ) ) DCNL ( m + 1 ) * * 2 * ( n + 1 ) DCNL &gt; &gt; &gt; finite _ diff _ kauers ( Sum ( ( x * y ) , ( x , 1 , m ) , ( y , 1 , n ) ) ) DCNL ( m + 1 ) * ( n + 1 ) &apos;
&apos;Get a list of dictionaries with information about disks on this system . DCNL : param std _ mounts _ only : Whether the function should return only disks that DCNL have a mount point defined ( True ) or even devices that doesn \ &apos; t DCNL ( False ) . DCNL : param get _ all _ disks : Whether the function should return only partitioned DCNL disks ( False ) or return every disk , regardless of being partitioned DCNL or not ( True ) . DCNL : return : List of dictionaries with disk information ( see more below ) . DCNL The \ &apos; disk _ list \ &apos; array returned by get _ disk _ list ( ) has an entry for each DCNL disk drive we find on the box . Each of these entries is a map with the DCNL following 3 string values : DCNL \ &apos; device \ &apos; disk device name ( i.e. the part after / dev / ) DCNL \ &apos; mountpt \ &apos; disk mount path DCNL \ &apos; tunable \ &apos; disk name for setting scheduler tunables ( / sys / block / sd ? ? ) DCNL The last value is an integer that indicates the current mount status DCNL of the drive : DCNL \ &apos; mounted \ &apos; 0 = not currently mounted DCNL 1 = mounted r / w on the expected path DCNL -1 = mounted readonly or at an unexpected path DCNL When the \ &apos; std _ mounts _ only \ &apos; argument is True we don \ &apos; t include drives DCNL mounted on \ &apos; unusual \ &apos; mount points in the result . If a given device is DCNL partitioned , it will return all partitions that exist on it . If it \ &apos; s not , DCNL it will return the device itself ( ie , if there are / dev / sdb1 and / dev / sdb2 , DCNL those will be returned but not / dev / sdb. if there is only a / dev / sdc , that DCNL one will be returned )  . &apos; 
&apos;Checks if AFNI is available&apos;
&apos;The entry point for CodeDeploy high level commands . &apos; 
&apos;Resets the state of the random number generator with a seed . DCNL This function resets the state of the global random number generator for DCNL the current device . Be careful that generators for other devices are not DCNL affected . DCNL Args : DCNL seed ( None or int ) : Seed for the random number generator . If ``None`` , DCNL it uses : func : `os.urandom` if available or : func : `time.clock` DCNL otherwise . Note that this function does not support seeding by an DCNL integer array . &apos; 
&apos;Checks to ensure our PEP _ REPO _ PATH is setup correctly&apos;
&apos;Display a confirmation prompt . &apos; 
&apos;Returns a key whose value in `dictionary` is `element` DCNL or , if none exists , None . DCNL &gt; &gt; &gt; d = { 1 : 2 , 3 : 4 } DCNL &gt; &gt; &gt; dictfind ( d , 4 ) DCNL 3 DCNL &gt; &gt; &gt; dictfind ( d , 5 ) &apos;
&apos;The main loop of the program that runs when we \ &apos; re not in stdin mode . &apos; 
&apos;Remove the root Tk widget from the reactor . DCNL Call this before destroy ( ) ing the root widget . &apos; 
&apos;Compute mutual information between two variables . DCNL This is a simple wrapper which selects a proper function to call based on DCNL whether `x` and `y` are discrete or not . &apos; 
&apos;Helper for checking bem surface sizes . &apos; 
&apos;Given a block , returns the block \ &apos; s URL name . DCNL Arguments : DCNL block ( XModuleMixin &#124; CourseOverview &#124; BlockStructureBlockData ) : DCNL Block that is being accessed&apos;
&apos;Creates a `storage` object from dictionary d , raising `KeyError` if DCNL d doesn \ &apos; t have all of the keys in `requireds` and using the default DCNL values for keys found in `defaults` . DCNL For example , `storify ( { \ &apos; a \ &apos; : 1 , \ &apos; c \ &apos; : 3 } , b = 2 , c = 0 ) ` will return the equivalent of DCNL `storage ( { \ &apos; a \ &apos; : 1 , \ &apos; b \ &apos; : 2 , \ &apos; c \ &apos; : 3 } ) ` . &apos; 
&apos;Peform a login . This only works if session is currently not logged DCNL in . This will also automatically throttle too quick attempts . DCNL Kwargs : DCNL name ( str ) : Player name DCNL password ( str ) : Plain-text password&apos;
&apos;Butler-Portugal algorithm for tensor canonicalization with dummy indices DCNL dummies DCNL list of lists of dummy indices , DCNL one list for each type of index ; DCNL the dummy indices are put in order contravariant , covariant DCNL &#91; d0 , -d0 , d1 , -d1 , ... &#93; . DCNL sym DCNL list of the symmetries of the index metric for each type . DCNL possible symmetries of the metrics DCNL * 0 symmetric DCNL * 1 antisymmetric DCNL * None no symmetry DCNL b _ S DCNL base of a minimal slot symmetry BSGS . DCNL sgens DCNL generators of the slot symmetry BSGS . DCNL S _ transversals DCNL transversals for the slot BSGS . DCNL g DCNL permutation representing the tensor . DCNL Return 0 if the tensor is zero , else return the array form of DCNL the permutation representing the canonical form of the tensor . DCNL A tensor with dummy indices can be represented in a number DCNL of equivalent ways which typically grows exponentially with DCNL the number of indices . To be able to establish if two tensors DCNL with many indices are equal becomes computationally very slow DCNL in absence of an efficient algorithm . DCNL The Butler-Portugal algorithm &#91; 3 &#93; is an efficient algorithm to DCNL put tensors in canonical form , solving the above problem . DCNL Portugal observed that a tensor can be represented by a permutation , DCNL and that the class of tensors equivalent to it under slot and dummy DCNL symmetries is equivalent to the double coset `D * g * S` DCNL ( Note : in this documentation we use the conventions for multiplication DCNL of permutations p , q with ( p * q ) ( i ) = p &#91; q &#91; i &#93; &#93; which is opposite DCNL to the one used in the Permutation class ) DCNL Using the algorithm by Butler to find a representative of the DCNL double coset one can find a canonical form for the tensor . DCNL To see this correspondence , DCNL let `g` be a permutation in array form ; a tensor with indices `ind` DCNL ( the indices including both the contravariant and the covariant ones ) DCNL can be written as DCNL `t = T ( ind &#91; g &#91; 0 &#93; , ... , ind &#91; g &#91; n-1 &#93; &#93; ) ` , DCNL where `n = len ( ind ) ` ; DCNL `g` has size `n + 2` , the last two indices for the sign of the tensor DCNL ( trick introduced in &#91; 4 &#93; ) . DCNL A slot symmetry transformation `s` is a permutation acting on the slots DCNL `t - &gt; T ( ind &#91; ( g * s ) &#91; 0 &#93; &#93; , ... , ind &#91; ( g * s ) &#91; n-1 &#93; &#93; ) ` DCNL A dummy symmetry transformation acts on `ind` DCNL `t - &gt; T ( ind &#91; ( d * g ) &#91; 0 &#93; &#93; , ... , ind &#91; ( d * g ) &#91; n-1 &#93; &#93; ) ` DCNL Being interested only in the transformations of the tensor under DCNL these symmetries , one can represent the tensor by `g` , which transforms DCNL as DCNL `g - &gt; d * g * s` , so it belongs to the coset `D * g * S` . DCNL Let us explain the conventions by an example . DCNL Given a tensor `T ^ { d3 d2 d1 } { } _ { d1 d2 d3 } ` with the slot symmetries DCNL `T ^ { a0 a1 a2 a3 a4 a5 } = -T ^ { a2 a1 a0 a3 a4 a5 } ` DCNL `T ^ { a0 a1 a2 a3 a4 a5 } = -T ^ { a4 a1 a2 a3 a0 a5 } ` DCNL and symmetric metric , find the tensor equivalent to it which DCNL is the lowest under the ordering of indices : DCNL lexicographic ordering `d1 , d2 , d3` then and contravariant index DCNL before covariant index ; that is the canonical form of the tensor . DCNL The canonical form is `-T ^ { d1 d2 d3 } { } _ { d1 d2 d3 } ` DCNL obtained using `T ^ { a0 a1 a2 a3 a4 a5 } = -T ^ { a2 a1 a0 a3 a4 a5 } ` . DCNL To convert this problem in the input for this function , DCNL use the following labelling of the index names DCNL ( - for covariant for short ) `d1 , -d1 , d2 , -d2 , d3 , -d3` DCNL `T ^ { d3 d2 d1 } { } _ { d1 d2 d3 } ` corresponds to `g = &#91; 4 , 2 , 0 , 1 , 3 , 5 , 6 , 7 &#93; ` DCNL where the last two indices are for the sign DCNL `sgens = &#91; Permutation ( 0 , 2 ) ( 6 , 7 ) , Permutation ( 0 , 4 ) ( 6 , 7 ) &#93; ` DCNL sgens &#91; 0 &#93; is the slot symmetry `- ( 0 , 2 ) ` DCNL `T ^ { a0 a1 a2 a3 a4 a5 } = -T ^ { a2 a1 a0 a3 a4 a5 } ` DCNL sgens &#91; 1 &#93; is the slot symmetry `- ( 0 , 4 ) ` DCNL `T ^ { a0 a1 a2 a3 a4 a5 } = -T ^ { a4 a1 a2 a3 a0 a5 } ` DCNL The dummy symmetry group D is generated by the strong base generators DCNL ` &#91; ( 0 , 1 ) , ( 2 , 3 ) , ( 4 , 5 ) , ( 0 , 1 ) ( 2 , 3 ) , ( 2 , 3 ) ( 4 , 5 ) &#93; ` DCNL The dummy symmetry acts from the left DCNL `d = &#91; 1 , 0 , 2 , 3 , 4 , 5 , 6 , 7 &#93; ` exchange `d1 - &gt; -d1` DCNL `T ^ { d3 d2 d1 } { } _ { d1 d2 d3 } = = T ^ { d3 d2 } { } _ { d1 } { } ^ { d1 } { } _ { d2 d3 } ` DCNL `g = &#91; 4 , 2 , 0 , 1 , 3 , 5 , 6 , 7 &#93; - &gt; &#91; 4 , 2 , 1 , 0 , 3 , 5 , 6 , 7 &#93; = _ af _ rmul ( d , g ) ` DCNL which differs from ` _ af _ rmul ( g , d ) ` . DCNL The slot symmetry acts from the right DCNL `s = &#91; 2 , 1 , 0 , 3 , 4 , 5 , 7 , 6 &#93; ` exchanges slots 0 and 2 and changes sign DCNL `T ^ { d3 d2 d1 } { } _ { d1 d2 d3 } = = -T ^ { d1 d2 d3 } { } _ { d1 d2 d3 } ` DCNL `g = &#91; 4,2,0,1,3,5,6,7 &#93; - &gt; &#91; 0 , 2 , 4 , 1 , 3 , 5 , 7 , 6 &#93; = _ af _ rmul ( g , s ) ` DCNL Example in which the tensor is zero , same slot symmetries as above : DCNL `T ^ { d3 } { } _ { d1 , d2 } { } ^ { d1 } { } _ { d3 } { } ^ { d2 } ` DCNL ` = -T ^ { d3 } { } _ { d1 , d3 } { } ^ { d1 } { } _ { d2 } { } ^ { d2 } ` under slot symmetry `- ( 2,4 ) ` ; DCNL ` = T _ { d3 d1 } { } ^ { d3 } { } ^ { d1 } { } _ { d2 } { } ^ { d2 } ` under slot symmetry `- ( 0,2 ) ` ; DCNL ` = T ^ { d3 } { } _ { d1 d3 } { } ^ { d1 } { } _ { d2 } { } ^ { d2 } ` symmetric metric ; DCNL ` = 0` since two of these lines have tensors differ only for the sign . DCNL The double coset D * g * S consists of permutations `h = d * g * s` corresponding DCNL to equivalent tensors ; if there are two `h` which are the same apart DCNL from the sign , return zero ; otherwise DCNL choose as representative the tensor with indices DCNL ordered lexicographically according to ` &#91; d1 , -d1 , d2 , -d2 , d3 , -d3 &#93; ` DCNL that is `rep = min ( D * g * S ) = min ( &#91; d * g * s for d in D for s in S &#93; ) ` DCNL The indices are fixed one by one ; first choose the lowest index DCNL for slot 0 , then the lowest remaining index for slot 1 , etc . DCNL Doing this one obtains a chain of stabilizers DCNL `S - &gt; S _ { b0 } - &gt; S _ { b0 , b1 } - &gt; ... ` and DCNL `D - &gt; D _ { p0 } - &gt; D _ { p0 , p1 } - &gt; ... ` DCNL where ` &#91; b0 , b1 , ... &#93; = range ( b ) ` is a base of the symmetric group ; DCNL the strong base `b _ S` of S is an ordered sublist of it ; DCNL therefore it is sufficient to compute once the DCNL strong base generators of S using the Schreier-Sims algorithm ; DCNL the stabilizers of the strong base generators are the DCNL strong base generators of the stabilizer subgroup . DCNL `dbase = &#91; p0 , p1 , ... &#93; ` is not in general in lexicographic order , DCNL so that one must recompute the strong base generators each time ; DCNL however this is trivial , there is no need to use the Schreier-Sims DCNL algorithm for D. DCNL The algorithm keeps a TAB of elements ` ( s _ i , d _ i , h _ i ) ` DCNL where `h _ i = d _ i * g * s _ i` satisfying `h _ i &#91; j &#93; = p _ j` for `0 &lt; = j &lt; i` DCNL starting from `s _ 0 = id , d _ 0 = id , h _ 0 = g` . DCNL The equations `h _ 0 &#91; 0 &#93; = p _ 0 , h _ 1 &#91; 1 &#93; = p _ 1 , ... ` are solved in this order , DCNL choosing each time the lowest possible value of p _ i DCNL For `j &lt; i` DCNL `d _ i * g * s _ i * S _ { b _ 0 , ... , b _ { i-1 } } * b _ j = D _ { p _ 0 , ... , p _ { i-1 } } * p _ j` DCNL so that for dx in `D _ { p _ 0 , ... , p _ { i-1 } } ` and sx in DCNL `S _ { base &#91; 0 &#93; , ... , base &#91; i-1 &#93; } ` one has `dx * d _ i * g * s _ i * sx * b _ j = p _ j` DCNL Search for dx , sx such that this equation holds for `j = i` ; DCNL it can be written as `s _ i * sx * b _ j = J , dx * d _ i * g * J = p _ j` DCNL `sx * b _ j = s _ i * * -1 * J ; sx = trace ( s _ i * * -1 , S _ { b _ 0 , ... , b _ { i-1 } } ) ` DCNL `dx * * -1 * p _ j = d _ i * g * J ; dx = trace ( d _ i * g * J , D _ { p _ 0 , ... , p _ { i-1 } } ) ` DCNL `s _ { i + 1 } = s _ i * trace ( s _ i * * -1 * J , S _ { b _ 0 , ... , b _ { i-1 } } ) ` DCNL `d _ { i + 1 } = trace ( d _ i * g * J , D _ { p _ 0 , ... , p _ { i-1 } } ) * * -1 * d _ i` DCNL `h _ { i + 1 } * b _ i = d _ { i + 1 } * g * s _ { i + 1 } * b _ i = p _ i` DCNL `h _ n * b _ j = p _ j` for all j , so that `h _ n` is the solution . DCNL Add the found ` ( s , d , h ) ` to TAB1 . DCNL At the end of the iteration sort TAB1 with respect to the `h` ; DCNL if there are two consecutive `h` in TAB1 which differ only for the DCNL sign , the tensor is zero , so return 0 ; DCNL if there are two consecutive `h` which are equal , keep only one . DCNL Then stabilize the slot generators under `i` and the dummy generators DCNL under `p _ i` . DCNL Assign `TAB = TAB1` at the end of the iteration step . DCNL At the end `TAB` contains a unique ` ( s , d , h ) ` , since all the slots DCNL of the tensor `h` have been fixed to have the minimum value according DCNL to the symmetries . The algorithm returns `h` . DCNL It is important that the slot BSGS has lexicographic minimal base , DCNL otherwise there is an `i` which does not belong to the slot base DCNL for which `p _ i` is fixed by the dummy symmetry only , while `i` DCNL is not invariant from the slot stabilizer , so `p _ i` is not in DCNL general the minimal value . DCNL This algorithm differs slightly from the original algorithm &#91; 3 &#93; : DCNL the canonical form is minimal lexicographically , and DCNL the BSGS has minimal base under lexicographic order . DCNL Equal tensors `h` are eliminated from TAB . DCNL Examples DCNL &gt; &gt; &gt; from sympy.combinatorics.permutations import Permutation DCNL &gt; &gt; &gt; from sympy.combinatorics.perm _ groups import PermutationGroup DCNL &gt; &gt; &gt; from sympy.combinatorics.tensor _ can import double _ coset _ can _ rep , get _ transversals DCNL &gt; &gt; &gt; gens = &#91; Permutation ( x ) for x in &#91; &#91; 2 , 1 , 0 , 3 , 4 , 5 , 7 , 6 &#93; , &#91; 4 , 1 , 2 , 3 , 0 , 5 , 7 , 6 &#93; &#93; &#93; DCNL &gt; &gt; &gt; base = &#91; 0 , 2 &#93; DCNL &gt; &gt; &gt; g = Permutation ( &#91; 4 , 2 , 0 , 1 , 3 , 5 , 6 , 7 &#93; ) DCNL &gt; &gt; &gt; transversals = get _ transversals ( base , gens ) DCNL &gt; &gt; &gt; double _ coset _ can _ rep ( &#91; list ( range ( 6 ) ) &#93; , &#91; 0 &#93; , base , gens , transversals , g ) DCNL &#91; 0 , 1 , 2 , 3 , 4 , 5 , 7 , 6 &#93; DCNL &gt; &gt; &gt; g = Permutation ( &#91; 4 , 1 , 3 , 0 , 5 , 2 , 6 , 7 &#93; ) DCNL &gt; &gt; &gt; double _ coset _ can _ rep ( &#91; list ( range ( 6 ) ) &#93; , &#91; 0 &#93; , base , gens , transversals , g ) DCNL 0&apos;
&apos;Setup root logger for Sphinx&apos;
&apos;Task to move built documentation to web servers DCNL : param version _ pk : Version id to sync files for DCNL : param hostname : Hostname to sync to DCNL : param html : Sync HTML DCNL : type html : bool DCNL : param localmedia : Sync local media files DCNL : type localmedia : bool DCNL : param search : Sync search files DCNL : type search : bool DCNL : param pdf : Sync PDF files DCNL : type pdf : bool DCNL : param epub : Sync ePub files DCNL : type epub : bool&apos;
&apos;Generates a unique reset password token for the specified user . DCNL : param user : The user to work with&apos;
&apos;Converts a # rrggbb color to the tuple ( red , green , blue )  . &apos; 
&apos;Suggest terms starting with given input&apos;
&apos;Assign `assignee _ id` to the given role and subscribes the assignee DCNL to future exploration updates . DCNL The caller should ensure that assignee _ id corresponds to a valid user in DCNL the system . DCNL Args : DCNL - committer _ id : str . The user _ id of the user who is performing the action . DCNL - exploration _ id : str . The exploration id . DCNL - assignee _ id : str . The user _ id of the user whose role is being changed . DCNL - new _ role : str . The name of the new role : either \ &apos; owner \ &apos; , \ &apos; editor \ &apos; or DCNL \ &apos; viewer \ &apos;  . &apos; 
&apos;Manages the communication between this process and the worker processes . DCNL This function is run in a local thread . DCNL Args : DCNL executor _ reference : A weakref.ref to the ProcessPoolExecutor that owns DCNL this thread . Used to determine if the ProcessPoolExecutor has been DCNL garbage collected and that this function can exit . DCNL process : A list of the multiprocessing.Process instances used as DCNL workers . DCNL pending _ work _ items : A dict mapping work ids to _ WorkItems e.g. DCNL { 5 : &lt; _ WorkItem ... &gt; , 6 : &lt; _ WorkItem ... &gt; , ... } DCNL work _ ids _ queue : A queue.Queue of work ids e.g. Queue ( &#91; 5 , 6 , ... &#93; ) . DCNL call _ queue : A multiprocessing.Queue that will be filled with _ CallItems DCNL derived from _ WorkItems for processing by the process workers . DCNL result _ queue : A multiprocessing.Queue of _ ResultItems generated by the DCNL process workers . &apos; 
&apos;Benchmark * func * and print out its runtime . &apos; 
&apos;A demonstration showing how Trees and Trees can be DCNL used . This demonstration creates a Tree , and loads a DCNL Tree from the Treebank corpus , DCNL and shows the results of calling several of their methods . &apos; 
&apos;This optimization makes the folowing changes in the graph : DCNL T.mul ( A , T.switch ( cond , 0 , iff ) , B ) -- &gt; T.switch ( cond , 0 , T.mul ( A , B , iff ) ) DCNL T.mul ( A , T.switch ( cond , ift , 0 ) , B ) -- &gt; T.switch ( cond , T.mul ( A , B , ift ) , 0 ) DCNL A and B being several ( or none ) symbolic variables . DCNL This is useful because A and B may not be numerically stable and give DCNL NaN or inf values for cases where the switch returns 0 . DCNL With this optimization T.grad ( T.switch ( ... ) ) has the right behavior . DCNL Examples DCNL x - &gt; f ( x ) DCNL x - &gt; g ( x ) DCNL y = T.switch ( cond , f ( x ) , g ( x ) ) DCNL * * without the optimization DCNL T.grad ( y , x ) - &gt; grad ( f ( x ) , x ) * grad ( y , f ( x ) ) + grad ( g ( x ) , x ) * grad ( y , g ( x ) ) DCNL * * with the optimization DCNL T.grad ( y , x ) - &gt; switch ( cond , grad ( f ( x ) , x ) , 0 ) + switch ( cond , 0 , grad ( g ( x ) , x ) ) DCNL This will be particularly useful for the lazyif because we skip DCNL an entire part of the graph . &apos; 
&apos;Number of due follow-ups&apos;
&apos;removes the string `remove` from the right of `text`&apos;
&apos;Craft a file , display dialog . &apos; 
&apos;Recursively move a file or directory to another location . This is DCNL similar to the Unix &quot; mv &quot; command . DCNL If the destination is a directory or a symlink to a directory , the source DCNL is moved inside the directory . The destination path must not already DCNL exist . DCNL If the destination already exists but is not a directory , it may be DCNL overwritten depending on os.rename ( ) semantics . DCNL If the destination is on our current filesystem , then rename ( ) is used . DCNL Otherwise , src is copied to the destination and then removed . DCNL A lot more could be done here ... A look at a mv.c shows a lot of DCNL the issues this implementation glosses over . &apos; 
&apos;Convert an Internationalized Resource Identifier ( IRI ) portion to a URI DCNL portion that is suitable for inclusion in a URL . DCNL This is the algorithm from section 3.1 of RFC 3987 . However , since we are DCNL assuming input is either UTF-8 or unicode already , we can simplify things a DCNL little from the full method . DCNL Returns an ASCII string containing the encoded result . &apos; 
&apos;Perform the update check , and report to the user . DCNL Arguments : DCNL prerelease ( bool ) : Whether or not to include pre-release versions . DCNL Returns : DCNL A list of arguments to the update command . DCNL &gt; &gt; &gt; from packaging.version import Version DCNL &gt; &gt; &gt; pwnlib.update.current _ version = Version ( &quot; 999.0.0 &quot; ) DCNL &gt; &gt; &gt; print perform _ check ( ) DCNL None DCNL &gt; &gt; &gt; pwnlib.update.current _ version = Version ( &quot; 0.0.0 &quot; ) DCNL &gt; &gt; &gt; perform _ check ( ) # doctest : + ELLIPSIS DCNL &#91; \ &apos; pip \ &apos; , \ &apos; install \ &apos; , \ &apos; -U \ &apos; , ... &#93; DCNL &gt; &gt; &gt; def bail ( * a ) : raise Exception ( ) DCNL &gt; &gt; &gt; pypi = pwnlib.update.available _ on _ pypi DCNL &gt; &gt; &gt; perform _ check ( prerelease = False ) DCNL &#91; \ &apos; pip \ &apos; , \ &apos; install \ &apos; , \ &apos; -U \ &apos; , \ &apos; pwntools \ &apos; &#93; DCNL &gt; &gt; &gt; perform _ check ( prerelease = True ) # doctest : + ELLIPSIS DCNL &#91; \ &apos; pip \ &apos; , \ &apos; install \ &apos; , \ &apos; -U \ &apos; , \ &apos; pwntools ... \ &apos; &#93; &apos;
&apos;Provided any : term : `resource` and a : term : `request` object , return DCNL the resource object representing the : term : `virtual root` of the DCNL current : term : `request` . Using a virtual root in a DCNL : term : `traversal` -based : app : `Pyramid` application permits DCNL rooting . For example , the resource at the traversal path `` / cms`` will DCNL be found at ``http : / / example.com / `` instead of rooting it at DCNL ``http : / / example.com / cms / `` . DCNL If the ``resource`` passed in is a context obtained via DCNL : term : `traversal` , and if the ``HTTP _ X _ VHM _ ROOT`` key is in the DCNL WSGI environment , the value of this key will be treated as a DCNL \ &apos; virtual root path \ &apos; : the : func : `pyramid.traversal.find _ resource` DCNL API will be used to find the virtual root resource using this path ; DCNL if the resource is found , it will be returned . If the DCNL ``HTTP _ X _ VHM _ ROOT`` key is not present in the WSGI environment , DCNL the physical : term : `root` of the resource tree will be returned instead . DCNL Virtual roots are not useful at all in applications that use DCNL : term : `URL dispatch` . Contexts obtained via URL dispatch don \ &apos; t DCNL really support being virtually rooted ( each URL dispatch context DCNL is both its own physical and virtual root ) . However if this API DCNL is called with a ``resource`` argument which is a context obtained DCNL via URL dispatch , the resource passed in will be returned DCNL unconditionally . &apos; 
&apos; .. versionchanged : : 2016.3.0 DCNL Return data now contains just the contents of the rsyncd.conf as a DCNL string , instead of a dictionary as returned from : py : func : `cmd.run _ all DCNL &lt; salt.modules.cmdmod.run _ all &gt; ` . DCNL Returns the contents of the rsync config file DCNL conf _ path : / etc / rsyncd.conf DCNL Path to the config file DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; rsync.config&apos;
&apos;The time in integer seconds . Pass scale = 1000 to get milliseconds . &apos; 
&apos;Returns a list of columns from `column _ key` for `table` representing DCNL potentially a compound key . The `column _ key` can be a name of a single DCNL column or list of column names . &apos; 
&apos;Resolve a service name discovered via DNSServiceBrowse ( ) to a DCNL target host name , port number , and txt record . DCNL Note : Applications should NOT use DNSServiceResolve ( ) solely for DCNL txt record monitoring ; use DNSServiceQueryRecord ( ) instead , as it DCNL is more efficient for this task . DCNL Note : When the desired results have been returned , the client MUST DCNL terminate the resolve by closing the returned DNSServiceRef . DCNL Note : DNSServiceResolve ( ) behaves correctly for typical services DCNL that have a single SRV record and a single TXT record . To resolve DCNL non-standard services with multiple SRV or TXT records , DCNL DNSServiceQueryRecord ( ) should be used . DCNL flags : DCNL Currently ignored , reserved for future use . DCNL interfaceIndex : DCNL The interface on which to resolve the service . If this DCNL resolve call is as a result of a currently active DCNL DNSServiceBrowse ( ) operation , then the interfaceIndex should DCNL be the index reported in the browse callback . If this resolve DCNL call is using information previously saved ( e.g. in a DCNL preference file ) for later use , then use DCNL kDNSServiceInterfaceIndexAny ( 0 ) , because the desired service DCNL may now be reachable via a different physical interface . DCNL name : DCNL The name of the service instance to be resolved , as reported DCNL to the DNSServiceBrowse ( ) callback . DCNL regtype : DCNL The type of the service instance to be resolved , as reported DCNL to the DNSServiceBrowse ( ) callback . DCNL domain : DCNL The domain of the service instance to be resolved , as reported DCNL to the DNSServiceBrowse ( ) callback . DCNL callBack : DCNL The function to be called when a result is found , or if the DCNL call asynchronously fails . Its signature should be DCNL callBack ( sdRef , flags , interfaceIndex , errorCode , fullname , DCNL hosttarget , port , txtRecord ) . DCNL return value : DCNL A DNSServiceRef instance . The resolve operation will run DCNL indefinitely until the client terminates it by closing the DCNL DNSServiceRef . DCNL Callback Parameters : DCNL sdRef : DCNL The DNSServiceRef returned by DNSServiceResolve ( ) . DCNL flags : DCNL Currently unused , reserved for future use . DCNL interfaceIndex : DCNL The interface on which the service was resolved . DCNL errorCode : DCNL Will be kDNSServiceErr _ NoError ( 0 ) on success , otherwise will DCNL indicate the failure that occurred . Other parameters are DCNL undefined if an error occurred . DCNL fullname : DCNL The full service domain name , in the form DCNL &lt; servicename &gt; . &lt; protocol &gt; . &lt; domain &gt; . DCNL hosttarget : DCNL The target hostname of the machine providing the service . DCNL port : DCNL The port , in host ( not network ) byte order , on which DCNL connections are accepted for this service . DCNL txtRecord : DCNL A string containing the service \ &apos; s primary txt record , in DCNL standard txt record format . &apos; 
&apos;Find and Register a package . DCNL Assumes the core registry setup correctly . DCNL In addition , if the location located by the package is already DCNL in the * * core * * path , then an entry is registered , but no path . DCNL ( no other paths are checked , as the application whose path was used DCNL may later be uninstalled . This should not happen with the core ) &apos;
&apos;Return kernel _ info information from osquery DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; osquery.kernel _ info&apos;
&apos;geometry is string . DCNL atoms is dict of atoms with proper positions . DCNL Example : DCNL correct _ answer = vsepr _ build _ correct _ answer ( geometry = &quot; AX4E0 &quot; , atoms = { &quot; c0 &quot; : &quot; N &quot; , &quot; p0 &quot; : &quot; H &quot; , &quot; p1 &quot; : &quot; ( ep ) &quot; , &quot; p2 &quot; : &quot; H &quot; , &quot; p3 &quot; : &quot; H &quot; } ) DCNL returns a dictionary composed from input values : DCNL { \ &apos; geometry \ &apos; : geometry , \ &apos; atoms \ &apos; : atoms } &apos;
&apos;Get enabled tax rules from the db for given parameters . DCNL Returned rules are ordered desceding by override group and then DCNL ascending by priority ( as required by ` _ filter _ and _ group _ rules` ) . DCNL : type taxing _ context : shuup.core.taxing.TaxingContext DCNL : type tax _ class : shuup.core.models.TaxClass&apos;
&apos;Create a Hilbert matrix of order `n` . DCNL Returns the `n` by `n` array with entries `h &#91; i , j &#93; = 1 / ( i + j + 1 ) ` . DCNL Parameters DCNL n : int DCNL The size of the array to create . DCNL Returns DCNL h : ( n , n ) ndarray DCNL The Hilbert matrix . DCNL See Also DCNL invhilbert : Compute the inverse of a Hilbert matrix . DCNL Notes DCNL .. versionadded : : 0.10.0 DCNL Examples DCNL &gt; &gt; &gt; from scipy.linalg import hilbert DCNL &gt; &gt; &gt; hilbert ( 3 ) DCNL array ( &#91; &#91; 1 . , 0.5 , 0.33333333 &#93; , DCNL &#91; 0.5 , 0.33333333 , 0.25 &#93; , DCNL &#91; 0.33333333 , 0.25 , 0.2 &#93; &#93; ) &apos;
&apos;Sum the elements of the iterable , and return the result as a float . &apos; 
&apos;Extract selected fields from a file of line-separated JSON tweets and DCNL write to a file in CSV format . DCNL This utility function allows a file of full Tweets to be easily converted DCNL to a CSV file for easier processing of Twitter entities . For example , the DCNL hashtags or media elements of a tweet can be extracted . DCNL It returns one line per entity of a Tweet , e.g. if a tweet has two hashtags DCNL there will be two lines in the output file , one per hashtag DCNL : param tweets _ file : the file-like object containing full Tweets DCNL : param str outfile : The path of the text file where results should be written DCNL : param list main _ fields : The list of fields to be extracted from the main object , usually the tweet . Useful examples : \ &apos; id _ str \ &apos; for the tweetID . See &lt; https : / / dev.twitter.com / overview / api / tweets &gt; for a full list of fields . DCNL e. g . : &#91; \ &apos; id _ str \ &apos; &#93; , &#91; \ &apos; id \ &apos; , \ &apos; text \ &apos; , \ &apos; favorite _ count \ &apos; , \ &apos; retweet _ count \ &apos; &#93; DCNL If `entity _ type` is expressed with hierarchy , then it is the list of fields of the object that corresponds to the key of the entity _ type , ( e.g. , for entity _ type = \ &apos; user.urls \ &apos; , the fields in the main _ fields list belong to the user object ; for entity _ type = \ &apos; place.bounding _ box \ &apos; , the files in the main _ field list belong to the place object of the tweet ) . DCNL : param list entity _ type : The name of the entity : \ &apos; hashtags \ &apos; , \ &apos; media \ &apos; , \ &apos; urls \ &apos; and \ &apos; user _ mentions \ &apos; for the tweet object . For a user object , this needs to be expressed with a hierarchy : ` \ &apos; user.urls \ &apos; ` . For the bounding box of the Tweet location , use ` \ &apos; place.bounding _ box \ &apos; ` . DCNL : param list entity _ fields : The list of fields to be extracted from the entity . E.g. ` &#91; \ &apos; text \ &apos; &#93; ` ( of the Tweet ) DCNL : param error : Behaviour for encoding errors , see https : / / docs.python.org / 3 / library / codecs.html # codec-base-classes DCNL : param gzip _ compress : if `True` , ouput files are compressed with gzip&apos;
&apos;Update allocated quota to subprojects or raise if it does not exist . DCNL : raises : cinder.exception.ProjectQuotaNotFound&apos;
&apos;Asynchronously allocates a range of IDs . DCNL Identical to datastore.AllocateIds ( ) except returns an asynchronous object . DCNL Call get _ result ( ) on the return value to block on the call and get the DCNL results . &apos; 
&apos;Unpacks P.A.C.K.E.R. packed js code . &apos; 
&apos;Encode the message \ &apos; s payload in quoted-printable . DCNL Also , add an appropriate Content-Transfer-Encoding header . &apos; 
&apos;Dump metadata about the parquet object with the given filename . DCNL Dump human-readable metadata to specified `out` . Optionally dump the row group metadata as well . &apos; 
&apos;Return a query dictionary based on the settings in the filter . DCNL : param sample _ filter : SampleFilter instance DCNL : param require _ meter : If true and the filter does not have a meter , DCNL raise an error . &apos; 
&apos;Pauses test execution and asks user to input a value . DCNL Value typed by the user , or the possible default value , is returned . DCNL Returning an empty value is fine , but pressing ``Cancel`` fails the keyword . DCNL ``message`` is the instruction shown in the dialog and ``default _ value`` is DCNL the possible default value shown in the input field . DCNL If ``hidden`` is given a true value , the value typed by the user is hidden . DCNL ``hidden`` is considered true if it is a non-empty string not equal to DCNL ``false`` or ``no`` , case-insensitively . If it is not a string , its truth DCNL value is got directly using same DCNL &#91; http : / / docs.python.org / 2 / library / stdtypes.html # truth-value-testing &#124; rules DCNL as in Python &#93; . DCNL Example : DCNL &#124; $ { username } = &#124; Get Value From User &#124; Input user name &#124; default &#124; DCNL &#124; $ { password } = &#124; Get Value From User &#124; Input password &#124; hidden = yes &#124; DCNL Possibility to hide the typed in value is new in Robot Framework 2.8.4 . DCNL Considering strings ``false`` and ``no`` to be false is new in 2.9 . &apos; 
&apos;Utility function to check if an IP address is inside a private subnet . DCNL : type ip : ``str`` DCNL : param ip : IP address to check DCNL : return : ``bool`` if the specified IP address is private . &apos; 
&apos;Emits certificate event . &apos; 
&apos;write intermediate results to checkpoint file DCNL current _ key : the identifier of the current denoiser round DCNL ctr : a uniq counter to label the checkpoint DCNL cluster _ mapping : an intermediate cluster mapping as dict DCNL ids : the dict of active ids DCNL order : a list of ids , which defines the order of which flowgrams are clustered DCNL bestscores : a dict of&apos;
&apos;Lists a nexusport binding&apos;
&apos;Filter out private items in a user dict . DCNL \ &apos; password \ &apos; , \ &apos; tenants \ &apos; and \ &apos; groups \ &apos; are never returned . DCNL : returns : user _ ref&apos;
&apos;Exception hook which handles `BdbQuit` exceptions . DCNL All other exceptions are processed using the `excepthook` DCNL parameter . &apos; 
&apos;Load current redirect to context . &apos; 
&apos;Returns the User model that is active in this project . &apos; 
&apos;Removes useless ( for database ) attributes from the table \ &apos; s meta . &apos; 
&apos;Bidirectional RNN . DCNL Build a bidirectional recurrent neural network , it requires 2 RNN Cells DCNL to process sequence in forward and backward order . Any RNN Cell can be DCNL used i.e. SimpleRNN , LSTM , GRU ... with its own parameters . But the two DCNL cells number of units must match . DCNL Input : DCNL 3-D Tensor Layer &#91; samples , timesteps , input dim &#93; . DCNL Output : DCNL if `return _ seq` : 3-D Tensor &#91; samples , timesteps , output dim &#93; . DCNL else : 2-D Tensor Layer &#91; samples , output dim &#93; . DCNL Arguments : DCNL incoming : `Tensor` . The incoming Tensor . DCNL rnncell _ fw : `RNNCell` . The RNN Cell to use for foward computation . DCNL rnncell _ bw : `RNNCell` . The RNN Cell to use for backward computation . DCNL return _ seq : `bool` . If True , returns the full sequence instead of DCNL last sequence output only . DCNL return _ states : `bool` . If True , returns a tuple with output and DCNL states : ( output , states ) . DCNL initial _ state _ fw : `Tensor` . An initial state for the forward RNN . DCNL This must be a tensor of appropriate type and shape &#91; batch _ size DCNL x cell.state _ size &#93; . DCNL initial _ state _ bw : `Tensor` . An initial state for the backward RNN . DCNL This must be a tensor of appropriate type and shape &#91; batch _ size DCNL x cell.state _ size &#93; . DCNL dynamic : `bool` . If True , dynamic computation is performed . It will not DCNL compute RNN steps above the sequence length . Note that because TF DCNL requires to feed sequences of same length , 0 is used as a mask . DCNL So a sequence padded with 0 at the end must be provided . When DCNL computation is performed , it will stop when it meets a step with DCNL a value of 0 . DCNL scope : `str` . Define this layer scope ( optional ) . A scope can be DCNL used to share variables between layers . Note that scope will DCNL override name . DCNL name : `str` . A name for this layer ( optional )  . &apos; 
&apos;A scenario may own outlines&apos;
&apos;Returns the string with special characters decoded . &apos; 
&apos;Create a continuous random variable with a non-central Chi distribution . DCNL The density of the non-central Chi distribution is given by DCNL .. math : : DCNL f ( x ) : = \ frac { e ^ { - ( x ^ 2 + \ lambda ^ 2 ) / 2 } x ^ k \ lambda } DCNL { ( \ lambda x ) ^ { k / 2 } } I _ { k / 2-1 } ( \ lambda x ) DCNL with `x \ geq 0` . Here , `I _ \ nu ( x ) ` is the DCNL : ref : `modified Bessel function of the first kind &lt; besseli &gt; ` . DCNL Parameters DCNL k : A positive Integer , `k &gt; 0` , the number of degrees of freedom DCNL l : Shift parameter DCNL Returns DCNL A RandomSymbol . DCNL Examples DCNL &gt; &gt; &gt; from sympy.stats import ChiNoncentral , density , E , std DCNL &gt; &gt; &gt; from sympy import Symbol , simplify DCNL &gt; &gt; &gt; k = Symbol ( &quot; k &quot; , integer = True ) DCNL &gt; &gt; &gt; l = Symbol ( &quot; l &quot; ) DCNL &gt; &gt; &gt; z = Symbol ( &quot; z &quot; ) DCNL &gt; &gt; &gt; X = ChiNoncentral ( &quot; x &quot; , k , l ) DCNL &gt; &gt; &gt; density ( X ) ( z ) DCNL l * z * * k * ( l * z ) * * ( -k / 2 ) * exp ( -l * * 2 / 2 - z * * 2 / 2 ) * besseli ( k / 2 - 1 , l * z ) DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Noncentral _ chi _ distribution&apos;
&apos;Return the attribute name that should be used to refer from one DCNL class to another , for a collection reference . DCNL The default implementation is : : DCNL return referred _ cls . _ _ name _ _ .lower ( ) + &quot; _ collection &quot; DCNL Alternate implementations DCNL can be specified using the DCNL : paramref : `.AutomapBase.prepare.name _ for _ collection _ relationship` DCNL parameter . DCNL : param base : the : class : `.AutomapBase` class doing the prepare . DCNL : param local _ cls : the class to be mapped on the local side . DCNL : param referred _ cls : the class to be mapped on the referring side . DCNL : param constraint : the : class : `.ForeignKeyConstraint` that is being DCNL inspected to produce this relationship . &apos; 
&apos;Exemplify repr ( Rule ) ( see also str ( Rule ) and Rule.format ( &quot; verbose &quot; ) ) &apos;
&apos;Return the EC2 region to use , in this order : DCNL - CLI parameter DCNL - VM parameter DCNL - Cloud profile setting&apos;
&apos;Test that a column of unicode strings is still written as one DCNL byte-per-character in the FITS table ( so long as the column can be ASCII DCNL encoded ) . DCNL Regression test for one of the issues fixed in DCNL https : / / github.com / astropy / astropy / pull / 4228&apos;
&apos;Testcase for py2exe logic , un-compressed lib&apos;
&apos;Converts a given value to a percentage if specified as &quot; x % &quot; , DCNL otherwise converts the given value to an integer . &apos; 
&apos;Zip timeseries data while gracefully handling gaps in the data . DCNL Timeseries data is expected to be a sequence of two-tuples ( date , values ) . DCNL Values is expected itself to be a tuple . The width of the values tuples DCNL should be the same across all elements in a timeseries sequence . The result DCNL will be a single sequence in timeseries format . DCNL Gaps in sequences are filled with an appropriate number of zeros based on DCNL the size of the first value-tuple of that sequence . &apos; 
&apos;Given an input string , returns an HTML fragment as a string . DCNL The return value is the contents of the &lt; body &gt; element . DCNL Parameters ( see `html _ parts ( ) ` for the remainder ) : DCNL - `output _ encoding` : The desired encoding of the output . If a Unicode DCNL string is desired , use the default value of &quot; unicode &quot;  . &apos; 
&apos;Return a pen representing the given wavelength&apos;
&apos;defrag ( plist ) - &gt; plist defragmented as much as possible&apos;
&apos;Validate that \ &apos; value \ &apos; is a positive integer or None . &apos; 
&apos;yield tuples of hex and ASCII display in multiples of 16 . Includes a DCNL space after 8 bytes and ( None , None ) after 16 bytes and at the end . &apos; 
&apos;Demonstrate how a transform would work . &apos; 
&apos;Helper for getting the text of an element&apos;
&apos;Conditional.get _ vae returns its VAE&apos;
&apos;Create a task object&apos;
&apos;Get the evaluated value as an int . &apos; 
&apos;Translate an application error to a datastore Error , if possible . DCNL Args : DCNL error : An ApplicationError to translate . &apos; 
&apos;Solutions of f ( x ) congruent 0 mod ( p * * e ) . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.galoistools import csolve _ prime DCNL &gt; &gt; &gt; csolve _ prime ( &#91; 1 , 1 , 7 &#93; , 3 , 1 ) DCNL &#91; 1 &#93; DCNL &gt; &gt; &gt; csolve _ prime ( &#91; 1 , 1 , 7 &#93; , 3 , 2 ) DCNL &#91; 1 , 4 , 7 &#93; DCNL Solutions &#91; 7 , 4 , 1 &#93; ( mod 3 * * 2 ) are generated by `` _ raise _ mod _ power ( ) `` DCNL from solution &#91; 1 &#93; ( mod 3 )  . &apos; 
&apos;Get networks for the given VIF and subnet DCNL : param vif : Neutron VIF DCNL : param subnet : Neutron subnet DCNL : param version : IP version as an int , either \ &apos; 4 \ &apos; or \ &apos; 6 \ &apos; DCNL : param net _ num : Network index for generating name of each network DCNL : param link _ id : Arbitrary identifier for the link the networks are DCNL attached to&apos;
&apos;Access via the .json representation to avoid work rendering menus , etc&apos;
&apos;Return a boto connection for the service . DCNL .. code-block : : python DCNL conn = _ _ utils _ _ &#91; \ &apos; boto.get _ connection \ &apos; &#93; ( \ &apos; ec2 \ &apos; , profile = \ &apos; custom _ profile \ &apos; ) &apos;
&apos;yaml : trigger DCNL Trigger non-parametrised builds of other jobs . DCNL : arg str project : name of the job to trigger DCNL : arg str threshold : when to trigger the other job ( default \ &apos; SUCCESS \ &apos; ) , DCNL alternatives : SUCCESS , UNSTABLE , FAILURE DCNL Example : DCNL .. literalinclude : : / .. / .. / tests / publishers / fixtures / trigger _ success.yaml DCNL : language : yaml&apos;
&apos;Supress all output from pySerial and gsmmodem&apos;
&apos;Read 64bit float from bti file . &apos; 
&apos;Get profile for one tooth of a cylindrical gear . &apos; 
&apos;Start a WSGI application . Optional features include a reloader , DCNL multithreading and fork support . DCNL This function has a command-line interface too : : DCNL python -m werkzeug.serving --help DCNL .. versionadded : : 0.5 DCNL `static _ files` was added to simplify serving of static files as well DCNL as `passthrough _ errors` . DCNL .. versionadded : : 0.6 DCNL support for SSL was added . DCNL .. versionadded : : 0.8 DCNL Added support for automatically loading a SSL context from certificate DCNL file and private key . DCNL .. versionadded : : 0.9 DCNL Added command-line interface . DCNL .. versionadded : : 0.10 DCNL Improved the reloader and added support for changing the backend DCNL through the `reloader _ type` parameter . See : ref : `reloader` DCNL for more information . DCNL : param hostname : The host for the application. eg : `` \ &apos; localhost \ &apos; `` DCNL : param port : The port for the server. eg : ``8080`` DCNL : param application : the WSGI application to execute DCNL : param use _ reloader : should the server automatically restart the python DCNL process if modules were changed ? DCNL : param use _ debugger : should the werkzeug debugging system be used ? DCNL : param use _ evalex : should the exception evaluation feature be enabled ? DCNL : param extra _ files : a list of files the reloader should watch DCNL additionally to the modules . For example configuration DCNL files . DCNL : param reloader _ interval : the interval for the reloader in seconds . DCNL : param reloader _ type : the type of reloader to use . The default is DCNL auto detection . Valid values are `` \ &apos; stat \ &apos; `` and DCNL `` \ &apos; watchdog \ &apos; `` . See : ref : `reloader` for more DCNL information . DCNL : param threaded : should the process handle each request in a separate DCNL thread ? DCNL : param processes : if greater than 1 then handle each request in a new process DCNL up to this maximum number of concurrent processes . DCNL : param request _ handler : optional parameter that can be used to replace DCNL the default one . You can use this to replace it DCNL with a different DCNL : class : ` ~ BaseHTTPServer.BaseHTTPRequestHandler` DCNL subclass . DCNL : param static _ files : a dict of paths for static files . This works exactly DCNL like : class : `SharedDataMiddleware` , it \ &apos; s actually DCNL just wrapping the application in that middleware before DCNL serving . DCNL : param passthrough _ errors : set this to `True` to disable the error catching . DCNL This means that the server will die on errors but DCNL it can be useful to hook debuggers in ( pdb etc . ) DCNL : param ssl _ context : an SSL context for the connection . Either an DCNL : class : `ssl.SSLContext` , a tuple in the form DCNL `` ( cert _ file , pkey _ file ) `` , the string `` \ &apos; adhoc \ &apos; `` if DCNL the server should automatically create one , or ``None`` DCNL to disable SSL ( which is the default )  . &apos; 
&apos;generate summary table of outlier and influence similar to SAS DCNL Parameters DCNL alpha : float DCNL significance level for confidence interval DCNL Returns DCNL st : SimpleTable instance DCNL table with results that can be printed DCNL data : ndarray DCNL calculated measures and statistics for the table DCNL ss2 : list of strings DCNL column _ names for table ( Note : rows of table are observations ) &apos;
&apos;Get the real filter sizes of each layer involved in DCNL convoluation . See Xudong Cao : DCNL https : / / www.kaggle.com / c / datasciencebowl / forums / t / 13166 / happy-lantern-festival-report-and-code DCNL This does not yet take into consideration feature pooling , DCNL padding , striding and similar gimmicks . &apos; 
&apos;Clear all registered actions . DCNL This method is really only intended to be used by unit tests . We might be DCNL able to remove this hack once we convert to djblets.registries. DCNL Warning : DCNL This will clear * * all * * actions , even if they were registered in DCNL separate extensions . &apos; 
&apos;Takes two datetime objects and returns the time between d and now DCNL as a nicely formatted string , e.g. &quot; 10 minutes &quot; . If d occurs after now , DCNL then &quot; 0 seconds &quot; is returned . If abbreviate is True , it truncates values to , DCNL for example , &quot; 10m &quot; or &quot; 4m 30s &quot; . Alternately it can take a second value DCNL and return the proper count . DCNL Units used are years , months , weeks , days , hours , minutes , and seconds . DCNL Microseconds are ignored . Up to two adjacent units will be DCNL displayed . For example , &quot; 2 weeks , 3 days &quot; and &quot; 1 year , 3 months &quot; are DCNL possible outputs , but &quot; 2 weeks , 3 hours &quot; and &quot; 1 year , 5 days &quot; are not . DCNL Adapted from the timesince filter in Django : DCNL http : / / docs.djangoproject.com / en / dev / ref / templates / builtins / # timesince&apos;
&apos;Add struct pack / unpack functions&apos;
&apos;Setup federated username . DCNL Function covers all the cases for properly setting user id , a primary DCNL identifier for identity objects . Initial version of the mapping engine DCNL assumed user is identified by ``name`` and his ``id`` is built from the DCNL name . We , however need to be able to accept local rules that identify user DCNL by either id or name / domain . DCNL The following use-cases are covered : DCNL 1 ) If neither user _ name nor user _ id is set raise exception.Unauthorized DCNL 2 ) If user _ id is set and user _ name not , set user _ name equal to user _ id DCNL 3 ) If user _ id is not set and user _ name is , set user _ id as url safe version DCNL of user _ name . DCNL : param request : current request object DCNL : param mapped _ properties : Properties issued by a RuleProcessor . DCNL : type : dictionary DCNL : raises keystone.exception.Unauthorized : If neither `user _ name` nor DCNL `user _ id` is set . DCNL : returns : tuple with user identification DCNL : rtype : tuple&apos;
&apos; .. versionchanged : : Nitrogen DCNL The ``expr _ form`` argument has been renamed to ``tgt _ type`` , earlier DCNL releases must use ``expr _ form`` . DCNL Disable the named worker from the lbn load balancers at the targeted DCNL minions . The worker will get traffic only for current sessions and won \ &apos; t DCNL get new ones . DCNL Example : DCNL .. code-block : : yaml DCNL disable-before-deploy : DCNL modjk _ worker.disable : DCNL - name : { { grains &#91; \ &apos; id \ &apos; &#93; } } DCNL - lbn : application DCNL - target : \ &apos; roles : balancer \ &apos; DCNL - tgt _ type : grain&apos;
&apos;This takes an arbitrary object and preps it for jsonifying safely , templating Inf / NaN . &apos; 
&apos;Returns the number of comlpeted , running , and failed jobs for a user . &apos; 
&apos;Create a filer.models.filemodels.File from an upload ( UploadedFile or such ) . DCNL If the `sha1` parameter is passed and a file with said SHA1 is found , it will be returned instead . DCNL : param request : Request , to figure out the owner for this file DCNL : type request : django.http.request.HttpRequest &#124; None DCNL : param path : Pathname string ( see `filer _ folder _ from _ path` ) or a Filer Folder . DCNL : type path : basestring &#124; filer.models.Folder DCNL : param upload _ data : Upload data DCNL : type upload _ data : django.core.files.base.File DCNL : param sha1 : SHA1 checksum . If given and a matching `model` with the SHA1 is found , it is returned instead . DCNL : type sha1 : basestring DCNL : rtype : filer.models.filemodels.File&apos;
&apos;Fixes document \ &apos; s LAST _ UPDATED field value . Flask-PyMongo returns DCNL timezone-aware values while stdlib datetime values are timezone-naive . DCNL Comparisons between the two would fail . DCNL If LAST _ UPDATE is missing we assume that it has been created outside of the DCNL API context and inject a default value , to allow for proper computing of DCNL Last-Modified header tag . By design all documents return a LAST _ UPDATED DCNL ( and we don \ &apos; t want to break existing clients ) . DCNL : param document : the document to be processed . DCNL .. versionchanged : : 0.1.0 DCNL Moved to common.py and renamed as public , so it can also be used by edit DCNL methods ( via get _ document ( ) ) . DCNL .. versionadded : : 0.0.5&apos;
&apos;Stubs an image update on the registry . DCNL : param stubs : Set of stubout stubs&apos;
&apos;Deletes the flag definitions done by the above DefineFlags ( )  . &apos; 
&apos;Retrieves all volumes associated with the group _ id . DCNL : param context : context to query under DCNL : param group _ id : consistency group ID for all volumes being retrieved DCNL : param filters : dictionary of filters ; values that are in lists , tuples , DCNL or sets cause an \ &apos; IN \ &apos; operation , while exact matching DCNL is used for other values , see _ process _ volume _ filters DCNL function for more information DCNL : returns : list of matching volumes&apos;
&apos;Writes the XML content to disk , touching the file only if it has changed . DCNL Visual Studio files have a lot of pre-defined structures . This function makes DCNL it easy to represent these structures as Python data structures , instead of DCNL having to create a lot of function calls . DCNL Each XML element of the content is represented as a list composed of : DCNL 1 . The name of the element , a string , DCNL 2 . The attributes of the element , a dictionary ( optional ) , and DCNL 3 + . The content of the element , if any . Strings are simple text nodes and DCNL lists are child elements . DCNL Example 1 : DCNL &lt; test / &gt; DCNL becomes DCNL &#91; \ &apos; test \ &apos; &#93; DCNL Example 2 : DCNL &lt; myelement a = \ &apos; value1 \ &apos; b = \ &apos; value2 \ &apos; &gt; DCNL &lt; childtype &gt; This is &lt; / childtype &gt; DCNL &lt; childtype &gt; it ! &lt; / childtype &gt; DCNL &lt; / myelement &gt; DCNL becomes DCNL &#91; \ &apos; myelement \ &apos; , { \ &apos; a \ &apos; : \ &apos; value1 \ &apos; , \ &apos; b \ &apos; : \ &apos; value2 \ &apos; } , DCNL &#91; \ &apos; childtype \ &apos; , \ &apos; This is \ &apos; &#93; , DCNL &#91; \ &apos; childtype \ &apos; , \ &apos; it ! \ &apos; &#93; , DCNL Args : DCNL content : The structured content to be converted . DCNL encoding : The encoding to report on the first XML line . DCNL pretty : True if we want pretty printing with indents and new lines . DCNL Returns : DCNL The XML content as a string . &apos; 
&apos;Add email to the exit survey campaign . &apos; 
&apos;Test LDA on empty document ( all-zero rows )  . &apos; 
&apos;helper method to compare salt state info with the PagerDuty API json structure , DCNL and determine if we need to update . DCNL returns the dict to pass to the PD API to perform the update , or empty dict if no update . &apos; 
&apos;Confirm a previous resize . &apos; 
&apos;Applies the linear operator &#124; A.T &#124; to the arguments . DCNL Parameters DCNL lin _ op : LinOp DCNL A linear operator . DCNL value : NumPy matrix DCNL A numeric value to apply the operator \ &apos; s transpose to . DCNL Returns DCNL NumPy matrix or SciPy sparse matrix . DCNL The result of applying the linear operator . &apos; 
&apos;Convert the given html document for the annotation UI DCNL This adds tags , removes scripts and optionally adds a base url&apos;
&apos;Run the given function under the given contextmanager , DCNL simulating the behavior of \ &apos; with \ &apos; to support older DCNL Python versions . DCNL This is not necessary anymore as we have placed 2.6 DCNL as minimum Python version , however some tests are still using DCNL this structure . &apos; 
&apos;Continuation lines indentation . DCNL Continuation lines should align wrapped elements either vertically DCNL using Python \ &apos; s implicit line joining inside parentheses , brackets DCNL and braces , or using a hanging indent . DCNL When using a hanging indent these considerations should be applied : DCNL - there should be no arguments on the first line , and DCNL - further indentation should be used to clearly distinguish itself as a DCNL continuation line . DCNL Okay : a = ( \ n ) DCNL E123 : a = ( \ n ) DCNL Okay : a = ( \ n 42 ) DCNL E121 : a = ( \ n 42 ) DCNL E122 : a = ( \ n42 ) DCNL E123 : a = ( \ n 42 \ n ) DCNL E124 : a = ( 24 , \ n 42 \ n ) DCNL E125 : if ( \ n b ) : \ n pass DCNL E126 : a = ( \ n 42 ) DCNL E127 : a = ( 24 , \ n 42 ) DCNL E128 : a = ( 24 , \ n 42 ) DCNL E129 : if ( a or \ n b ) : \ n pass DCNL E131 : a = ( \ n 42 \ n 24 ) &apos;
&apos;In `prompt _ and _ delete _ repo ( ) ` , if the user agrees to delete / reclone the DCNL repo , the repo should be deleted . &apos; 
&apos;Return integer part of given number . &apos; 
&apos;Uses non-local means to denoise 4D datasets&apos;
&apos;Print predefined zones DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; firewalld.get _ zones&apos;
&apos;test : comparison&apos;
&apos;Returns the current size of the terminal as tuple in the form DCNL `` ( width , height ) `` in columns and rows . &apos; 
&apos;Returns an `OrderedDict` of field names to `RelationInfo` . &apos; 
&apos;Lists the qos given a tenant _ id and qos _ id&apos;
&apos;Find destinations for resources files&apos;
&apos;Tell whether an alert entry is a template&apos;
&apos;Adds close action and shortcuts to a widget . &apos; 
&apos;Check that memcache is running&apos;
&apos;A decorator indicating abstract methods . DCNL Requires that the metaclass is ABCMeta or derived from it . A DCNL class that has a metaclass derived from ABCMeta cannot be DCNL instantiated unless all of its abstract methods are overridden . DCNL The abstract methods can be called using any of the normal DCNL \ &apos; super \ &apos; call mechanisms . DCNL Usage : DCNL class C : DCNL _ _ metaclass _ _ = ABCMeta DCNL @ abstractmethod DCNL def my _ abstract _ method ( self , ... ) : &apos;
&apos;Report any filter which is not allowed by `allowed _ filters` DCNL : param where : the where clause , as a dict . DCNL : param resource : the resource being inspected . DCNL .. versionchanged : 0.5 DCNL If the data layer supports a list of allowed operators , take them DCNL into consideration when validating the query string ( # 388 ) . DCNL Recursively validate the whole query string . DCNL .. versionadded : 0.0.9&apos;
&apos;test the behavior of --editable --uptodate flag in the list command&apos;
&apos;Get total size of file or files in dir ( recursive )  . &apos; 
&apos;get the api url for a pull request from the web one . DCNL : param unicode url : the web URL of the pull request . DCNL : return unicode : the API URL of the same pull request . &apos; 
&apos;Factory function to create a new identity service client . DCNL The returned client will be either a V3 or V2 client . Check the version DCNL using the : py : attr : ` ~ keystoneclient.v3.client.Client.version` property or DCNL the instance \ &apos; s class ( with instanceof ) . DCNL : param tuple version : The required version of the identity API . If DCNL specified the client will be selected such that the DCNL major version is equivalent and an endpoint provides DCNL at least the specified minor version . For example to DCNL specify the 3.1 API use `` ( 3 , 1 ) `` . ( optional ) DCNL : param bool unstable : Accept endpoints not marked as \ &apos; stable \ &apos; . ( optional ) DCNL : param session : A session object to be used for communication . If one is DCNL not provided it will be constructed from the provided DCNL kwargs . ( optional ) DCNL : type session : keystoneclient.session.Session DCNL : param kwargs : Additional arguments are passed through to the client DCNL that is being created . DCNL : returns : New keystone client object . DCNL : rtype : : py : class : `keystoneclient.v3.client.Client` or DCNL : py : class : `keystoneclient.v2 _ 0.client.Client` DCNL : raises keystoneclient.exceptions.DiscoveryFailure : if the server \ &apos; s DCNL response is invalid . DCNL : raises keystoneclient.exceptions.VersionNotAvailable : if a suitable client DCNL cannot be found . &apos; 
&apos;Nonexistent controller - simply returns None&apos;
&apos;Test that social media plugin ordering works as expected&apos;
&apos;Helper function to parse the backend configuration DCNL that doesn \ &apos; t use the URI notation . &apos; 
&apos;Run shell commands with `shell _ process` and wait . &apos; 
&apos;Format a timestamp ( string or numeric ) into a standardized DCNL xxxxxxxxxx.xxxxx ( 10.5 ) format . DCNL Note that timestamps using values greater than or equal to November 20th , DCNL 2286 at 17 : 46 UTC will use 11 digits to represent the number of DCNL seconds . DCNL : param timestamp : unix timestamp DCNL : returns : normalized timestamp as a string&apos;
&apos;send formatted chat message DCNL legacy notice : identical function in kludgy _ html _ parser DCNL the older function is &quot; overridden &quot; here for compatibility reasons&apos;
&apos;Write a projection operator to a file . DCNL Parameters DCNL fid : file DCNL The file descriptor of the open file . DCNL projs : dict DCNL The projection operator . &apos; 
&apos;Drop all temporary tables created by prepare _ data ( )  . &apos; 
&apos;Saves globally the value of SITEURL configuration parameter&apos;
&apos;Returns a list of paths to socket files to monitor . &apos; 
&apos;Non-local plugin decorator using local directories for the extra _ dirs ( job _ work and temp )  . &apos; 
&apos;Topological sort of graph \ &apos; s vertices . DCNL Parameters DCNL ``graph`` : ``tuple &#91; list , list &#91; tuple &#91; T , T &#93; &#93; `` DCNL A tuple consisting of a list of vertices and a list of edges of DCNL a graph to be sorted topologically . DCNL ``key`` : ``callable &#91; T &#93; `` ( optional ) DCNL Ordering key for vertices on the same level . By default the natural DCNL ( e.g. lexicographic ) ordering is used ( in this case the base type DCNL must implement ordering relations ) . DCNL Examples DCNL Consider a graph : : DCNL &#124; 7 &#124; \ &#124; 5 &#124; &#124; 3 &#124; DCNL V V V V &#124; DCNL &#124; 11 &#124; &#124; 8 &#124; &#124; DCNL V \ V V / V V DCNL &#124; 2 &#124; &#124; &#124; 9 &#124; &#124; &#124; 10 &#124; DCNL where vertices are integers . This graph can be encoded using DCNL elementary Python \ &apos; s data structures as follows : : DCNL &gt; &gt; &gt; V = &#91; 2 , 3 , 5 , 7 , 8 , 9 , 10 , 11 &#93; DCNL &gt; &gt; &gt; E = &#91; ( 7 , 11 ) , ( 7 , 8 ) , ( 5 , 11 ) , ( 3 , 8 ) , ( 3 , 10 ) , DCNL ... ( 11 , 2 ) , ( 11 , 9 ) , ( 11 , 10 ) , ( 8 , 9 ) &#93; DCNL To compute a topological sort for graph `` ( V , E ) `` issue : : DCNL &gt; &gt; &gt; from sympy.utilities.iterables import topological _ sort DCNL &gt; &gt; &gt; topological _ sort ( ( V , E ) ) DCNL &#91; 3 , 5 , 7 , 8 , 11 , 2 , 9 , 10 &#93; DCNL If specific tie breaking approach is needed , use ``key`` parameter : : DCNL &gt; &gt; &gt; topological _ sort ( ( V , E ) , key = lambda v : -v ) DCNL &#91; 7 , 5 , 11 , 3 , 10 , 8 , 9 , 2 &#93; DCNL Only acyclic graphs can be sorted . If the input graph has a cycle , DCNL then : py : exc : `ValueError` will be raised : : DCNL &gt; &gt; &gt; topological _ sort ( ( V , E + &#91; ( 10 , 7 ) &#93; ) ) DCNL Traceback ( most recent call last ) : DCNL ValueError : cycle detected DCNL .. seealso : : http : / / en.wikipedia.org / wiki / Topological _ sorting&apos;
&apos;Gets transcripts from youtube for youtube _ id . DCNL Parses only utf-8 encoded transcripts . DCNL Other encodings are not supported at the moment . DCNL Returns ( status , transcripts ) : bool , dict . &apos; 
&apos;Create core properties ( common document properties referred to in the DCNL \ &apos; Dublin Core \ &apos; specification ) . See appproperties ( ) for other stuff . &apos; 
&apos;Attach custom data on request object , and share it with parent DCNL requests during batch . &apos; 
&apos;Returns True if the given object is an ``adatetime`` where ``hour`` , DCNL ``minute`` , ``second`` and ``microsecond`` are all None . &apos; 
&apos;Band Stop Objective Function for order minimization . DCNL Returns the non-integer order for an analog band stop filter . DCNL Parameters DCNL wp : scalar DCNL Edge of passband `passb` . DCNL ind : int , { 0 , 1 } DCNL Index specifying which `passb` edge to vary ( 0 or 1 ) . DCNL passb : ndarray DCNL Two element sequence of fixed passband edges . DCNL stopb : ndarray DCNL Two element sequence of fixed stopband edges . DCNL gstop : float DCNL Amount of attenuation in stopband in dB . DCNL gpass : float DCNL Amount of ripple in the passband in dB . DCNL type : { \ &apos; butter \ &apos; , \ &apos; cheby \ &apos; , \ &apos; ellip \ &apos; } DCNL Type of filter . DCNL Returns DCNL n : scalar DCNL Filter order ( possibly non-integer )  . &apos; 
&apos;Decorator : renders a template for a handler . DCNL The handler can control its behavior like that : DCNL - return a dict of template vars to fill out the template DCNL - return something other than a dict and the view decorator will not DCNL process the template , but return the handler result as is . DCNL This includes returning a HTTPResponse ( dict ) to get , DCNL for instance , JSON with autojson or other castfilters . &apos; 
&apos;Simple test function DCNL Taken from http : / / www.huyng.com / posts / python-performance-analysis / &apos;
&apos;The subjunctive mood is a classical mood used to express a wish , judgment or opinion . DCNL It is marked by the verb wish / were , or infinitive form of a verb DCNL preceded by an &quot; it is &quot; -statement : DCNL &quot; It is recommended that he bring his own computer . &quot; &apos;
&apos;Create multiple locator with 0.7 base , and change it to something else . DCNL See if change was successful . DCNL Should not exception . &apos; 
&apos;A context manager which disables field overrides inside the context of a DCNL `with` statement , allowing code to get at the `original` value of a field . &apos; 
&apos;Collects and dumps stats from a MySQL server . &apos; 
&apos;Concatenate variables along a new axis . DCNL Args : DCNL xs ( list of chainer.Variable ) : Variables to be concatenated . DCNL axis ( int ) : Axis of result along which variables are stacked . DCNL Returns : DCNL ~ chainer.Variable : Output variable . &apos; 
&apos;Wrapper around utils . _ execute for fake _ network . &apos; 
&apos;Locate a file in a path supplied as a part of the file name , DCNL or the user \ &apos; s path , or a supplied path . DCNL The function yields full paths ( not necessarily absolute paths ) , DCNL in which the given file name matches an existing file in a directory on the path . DCNL &gt; &gt; &gt; def test _ which ( expected , * args , * * argd ) : DCNL ... result = list ( which _ files ( * args , * * argd ) ) DCNL ... assert result = = expected , \ &apos; which _ files : % s ! = % s \ &apos; % ( result , expected ) DCNL ... try : DCNL ... result = &#91; which ( * args , * * argd ) &#93; DCNL ... except IOError : DCNL ... result = &#91; &#93; DCNL ... assert result &#91; : 1 &#93; = = expected &#91; : 1 &#93; , \ &apos; which : % s ! = % s \ &apos; % ( result &#91; : 1 &#93; , expected &#91; : 1 &#93; ) DCNL &gt; &gt; &gt; if windows : cmd = environ &#91; \ &apos; COMSPEC \ &apos; &#93; DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , \ &apos; cmd \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , \ &apos; cmd.exe \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , \ &apos; cmd \ &apos; , path = dirname ( cmd ) ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , \ &apos; cmd \ &apos; , pathext = \ &apos; .exe \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , cmd ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , cmd , path = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , cmd , pathext = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , cmd &#91; : -4 &#93; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; cmd &#93; , cmd &#91; : -4 &#93; , path = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; &#93; , \ &apos; cmd \ &apos; , path = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; &#93; , \ &apos; cmd \ &apos; , pathext = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; &#93; , \ &apos; &lt; nonexistent &gt; / cmd \ &apos; ) DCNL &gt; &gt; &gt; if windows : test _ which ( &#91; &#93; , cmd &#91; : -4 &#93; , pathext = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if not windows : sh = \ &apos; / bin / sh \ &apos; DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; sh &#93; , \ &apos; sh \ &apos; ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; sh &#93; , \ &apos; sh \ &apos; , path = dirname ( sh ) ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; sh &#93; , \ &apos; sh \ &apos; , pathext = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; sh &#93; , sh ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; sh &#93; , sh , path = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; sh &#93; , sh , pathext = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; &#93; , \ &apos; sh \ &apos; , mode = W _ OK ) # not running as root , are you ? DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; &#93; , \ &apos; sh \ &apos; , path = \ &apos; &lt; nonexistent &gt; \ &apos; ) DCNL &gt; &gt; &gt; if not windows : test _ which ( &#91; &#93; , \ &apos; &lt; nonexistent &gt; / sh \ &apos; ) &apos;
&apos;Return all inline documentation for runner modules DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-run doc.runner&apos;
&apos;Tokenization / string cleaning for a datasets . &apos; 
&apos;Return label of variable node . &apos; 
&apos;Test if this is an valid android zip . &apos; 
&apos;Used as a validator within a wtforms.Form DCNL This implements a conditional DataRequired DCNL Each of the kwargs is a condition that must be met in the form DCNL Otherwise , no validation is done&apos;
&apos;Tests the creation of a file extension&apos;
&apos;Check virt drivers \ &apos; modules aren \ &apos; t imported by other drivers DCNL Modules under each virt driver \ &apos; s directory are DCNL considered private to that virt driver . Other drivers DCNL in Nova must not access those drivers . Any code that DCNL is to be shared should be refactored into a common DCNL module DCNL N311&apos;
&apos;Trim the text to `max _ width` , append dots when the text is too long . DCNL Returns ( text , width ) tuple . &apos; 
&apos;Compute labels and inertia using a full distance matrix . DCNL This will overwrite the \ &apos; distances \ &apos; array in-place . DCNL Parameters DCNL X : numpy array , shape ( n _ sample , n _ features ) DCNL Input data . DCNL x _ squared _ norms : numpy array , shape ( n _ samples , ) DCNL Precomputed squared norms of X. DCNL centers : numpy array , shape ( n _ clusters , n _ features ) DCNL Cluster centers which data is assigned to . DCNL distances : numpy array , shape ( n _ samples , ) DCNL Pre-allocated array in which distances are stored . DCNL Returns DCNL labels : numpy array , dtype = np.int , shape ( n _ samples , ) DCNL Indices of clusters that samples are assigned to . DCNL inertia : float DCNL Sum of distances of samples to their closest cluster center . &apos; 
&apos;Get aggregate statistics over all compute nodes . DCNL : param context : The security context DCNL : returns : Dictionary containing compute node characteristics summed up DCNL over all the compute nodes , e.g. \ &apos; vcpus \ &apos; , \ &apos; free _ ram _ mb \ &apos; etc . &apos; 
&apos;Do some necessary and / or useful substitutions for texts to be included in DCNL LaTeX documents . &apos; 
&apos;str to list&apos;
&apos;Generate a CSV containing all students \ &apos; problem grades within a given DCNL `course _ id` . &apos; 
&apos;Translate a string ip address to a packed number . DCNL @ param ipstr : the ip address to transform DCNL @ type ipstr : a string &quot; x.x.x.x &quot; DCNL @ return : an int32 number representing the ip address&apos;
&apos;Checks that all of the required keys , and possibly some of the optional DCNL keys , are in the given dict . DCNL Raises : DCNL AssertionError : if the validation fails . &apos; 
&apos;Wraps the given array into a DataObject . &apos; 
&apos;Create a new image volume cache entry . &apos; 
&apos;Check that Astropy gives consistent results with an IDL hor2eq example . DCNL See : http : / / idlastro.gsfc.nasa.gov / ftp / pro / astro / hor2eq.pro DCNL Test is against these run outputs , run at 2000-01-01T12 : 00 : 00 : DCNL # NORMAL ATMOSPHERE CASE DCNL IDL &gt; hor2eq , ten ( 37,54,41 ) , ten ( 264,55,06 ) , 2451545.0d , ra , dec , / verb , obs = \ &apos; kpno \ &apos; , pres = 781.0 , temp = 273.0 DCNL Latitude = + 31 57 48.0 Longitude = * * * 36 00.0 DCNL Julian Date = 2451545.000000 DCNL Az , El = 17 39 40.4 + 37 54 41 ( Observer Coords ) DCNL Az , El = 17 39 40.4 + 37 53 40 ( Apparent Coords ) DCNL LMST = + 11 15 26.5 DCNL LAST = + 11 15 25.7 DCNL Hour Angle = + 03 38 30.1 ( hh : mm : ss ) DCNL Ra , Dec : 07 36 55.6 + 15 25 02 ( Apparent Coords ) DCNL Ra , Dec : 07 36 55.2 + 15 25 08 ( J2000.0000 ) DCNL Ra , Dec : 07 36 55.2 + 15 25 08 ( J2000 ) DCNL IDL &gt; print , ra , dec DCNL 114.23004 15.418818 DCNL # NO PRESSURE CASE DCNL IDL &gt; hor2eq , ten ( 37,54,41 ) , ten ( 264,55,06 ) , 2451545.0d , ra , dec , / verb , obs = \ &apos; kpno \ &apos; , pres = 0.0 , temp = 273.0 DCNL Latitude = + 31 57 48.0 Longitude = * * * 36 00.0 DCNL Julian Date = 2451545.000000 DCNL Az , El = 17 39 40.4 + 37 54 41 ( Observer Coords ) DCNL Az , El = 17 39 40.4 + 37 54 41 ( Apparent Coords ) DCNL LMST = + 11 15 26.5 DCNL LAST = + 11 15 25.7 DCNL Hour Angle = + 03 38 26.4 ( hh : mm : ss ) DCNL Ra , Dec : 07 36 59.3 + 15 25 31 ( Apparent Coords ) DCNL Ra , Dec : 07 36 58.9 + 15 25 37 ( J2000.0000 ) DCNL Ra , Dec : 07 36 58.9 + 15 25 37 ( J2000 ) DCNL IDL &gt; print , ra , dec DCNL 114.24554 15.427022&apos;
&apos;Tests that the format _ as methods between Conv2DSpace DCNL and VectorSpace are invertible for the ( \ &apos; c \ &apos; , 0 , 1 , \ &apos; b \ &apos; ) DCNL axis format . &apos; 
&apos;Send connect to database . &apos; 
&apos;Translate the user / group info into uid / gid . &apos; 
&apos;Creates a copy of the constraint modified according to func . DCNL Parameters DCNL constr : LinConstraint DCNL The constraint to modify . DCNL func : function DCNL Function to modify the constraint expression . DCNL Returns DCNL LinConstraint DCNL A copy of the constraint with the specified changes . &apos; 
&apos;Only load if the postgres module is present and is new enough ( has ts funcs ) &apos;
&apos;Multiply two linear operators elementwise . DCNL Parameters DCNL lh _ op : LinOp DCNL The left-hand operator in the product . DCNL rh _ op : LinOp DCNL The right-hand operator in the product . DCNL Returns DCNL LinOp DCNL A linear operator representing the product . &apos; 
&apos;list all headers for a given category&apos;
&apos;Map vera classes to HA types . &apos; 
&apos;Authenticate against yubico server&apos;
&apos;Main program function for checking mapping file DCNL Checks mapping file for errors , warnings , writes log file , html file , DCNL and corrected mapping file . DCNL mapping _ fp : path to metadata mapping file DCNL output _ dir : output directory for log , html , corrected mapping file . DCNL has _ barcodes : If True , will test for perform barcodes test ( presence , DCNL uniqueness , valid IUPAC DNA chars ) . DCNL char _ replace : Character used to replace invalid characters in data DCNL fields . SampleIDs always use periods to be MIENS compliant . DCNL verbose : If True , a message about warnings and / or errors will be printed DCNL to stdout . DCNL variable _ len _ barcodes : If True , suppresses warnings about barcodes of DCNL varying length . DCNL disable _ primer _ check : If True , disables tests for valid primer sequences . DCNL added _ demultiplex _ field : If specified , references a field in the mapping DCNL file to use for demultiplexing . These are to be read from fasta labels DCNL during the actual demultiplexing step . All combinations of barcodes , DCNL primers , and the added _ demultiplex _ field must be unique . &apos; 
&apos;Upload a file to the device . DCNL Arguments : DCNL local _ path ( str ) : Path to the local file to push . DCNL remote _ path ( str ) : Path or directory to store the file on the device . DCNL Example : DCNL &gt; &gt; &gt; write ( \ &apos; . / filename \ &apos; , \ &apos; contents \ &apos; ) DCNL &gt; &gt; &gt; _ = adb.push ( \ &apos; . / filename \ &apos; , \ &apos; / data / local / tmp \ &apos; ) DCNL &gt; &gt; &gt; adb.read ( \ &apos; / data / local / tmp / filename \ &apos; ) DCNL \ &apos; contents \ &apos; DCNL &gt; &gt; &gt; adb.push ( \ &apos; . / filename \ &apos; , \ &apos; / does / not / exist \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL PwnlibException : Could not stat \ &apos; / does / not / exist \ &apos; &apos;
&apos;This takes a list of amis and an image name and attempts to return DCNL the latest ami . &apos; 
&apos;Return the platform-dependent extension for compiled modules . &apos; 
&apos;Sort FQDNs by SLD ( and if many , by their subdomains ) DCNL : param list FQDNs : list of domain names DCNL : returns : Sorted list of domain names DCNL : rtype : list&apos;
&apos;Serialize an XML object to a Unicode string . DCNL If an outer xmlns is provided using ``xmlns`` , then the current element \ &apos; s DCNL namespace will not be included if it matches the outer namespace . An DCNL exception is made for elements that have an attached stream , and appear DCNL at the stream root . DCNL : param XML xml : The XML object to serialize . DCNL : param string xmlns : Optional namespace of an element wrapping the XML DCNL object . DCNL : param stream : The XML stream that generated the XML object . DCNL : param string outbuffer : Optional buffer for storing serializations DCNL during recursive calls . DCNL : param bool top _ level : Indicates that the element is the outermost DCNL element . DCNL : param set namespaces : Track which namespaces are in active use so DCNL that new ones can be declared when needed . DCNL : type xml : : py : class : ` ~ xml.etree.ElementTree.Element` DCNL : type stream : : class : ` ~ sleekxmpp.xmlstream.xmlstream.XMLStream` DCNL : rtype : Unicode string&apos;
&apos;Safely join `directory` and zero or more untrusted `pathnames` DCNL components . DCNL Example usage : : DCNL @ app.route ( \ &apos; / wiki / &lt; path : filename &gt; \ &apos; ) DCNL def wiki _ page ( filename ) : DCNL filename = safe _ join ( app.config &#91; \ &apos; WIKI _ FOLDER \ &apos; &#93; , filename ) DCNL with open ( filename , \ &apos; rb \ &apos; ) as fd : DCNL content = fd.read ( ) # Read and process the file content ... DCNL : param directory : the trusted base directory . DCNL : param pathnames : the untrusted pathnames relative to that directory . DCNL : raises : : class : ` ~ werkzeug.exceptions.NotFound` if one or more passed DCNL paths fall out of its boundaries . &apos; 
&apos;Decode a query string in x-www-form-urlencoded format into a sequence DCNL of two-element tuples . DCNL Unlike urlparse.parse _ qsl ( ... , strict _ parsing = True ) urldecode will enforce DCNL correct formatting of the query string by validation . If validation fails DCNL a ValueError will be raised. urllib.parse _ qsl will only raise errors if DCNL any of name-value pairs omits the equals sign . &apos; 
&apos;A context manager that automatically handles KeyError . &apos; 
&apos;Deletes a device from Vistara based on DNS name or partial name . By default , DCNL delete _ device will only perform the delete if a single host is returned . Set DCNL safety _ on = False to delete all matches ( up to default API search page size ) DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-run vistara.delete _ device \ &apos; hostname-101.mycompany.com \ &apos; DCNL salt-run vistara.delete _ device \ &apos; hostname-101 \ &apos; DCNL salt-run vistara.delete _ device \ &apos; hostname-1 \ &apos; safety _ on = False&apos;
&apos;Write 3 byte integer to file . &apos; 
&apos;Build Avro Protocol from data parsed out of JSON string . &apos; 
&apos;Reshape `t` by inserting 1 at the dimension `axis` . DCNL Example DCNL &gt; &gt; &gt; tensor = theano.tensor.tensor3 ( ) DCNL &gt; &gt; &gt; theano.tensor.shape _ padaxis ( tensor , axis = 0 ) DCNL DimShuffle { x , 0,1,2 } .0 DCNL &gt; &gt; &gt; theano.tensor.shape _ padaxis ( tensor , axis = 1 ) DCNL DimShuffle { 0 , x , 1,2 } .0 DCNL &gt; &gt; &gt; theano.tensor.shape _ padaxis ( tensor , axis = 3 ) DCNL DimShuffle { 0,1,2 , x } .0 DCNL &gt; &gt; &gt; theano.tensor.shape _ padaxis ( tensor , axis = -1 ) DCNL DimShuffle { 0,1,2 , x } .0 DCNL See Also DCNL shape _ padleft DCNL shape _ padright DCNL Dimshuffle&apos;
&apos;Performs a pickle dumps on the given object , substituting all references to DCNL a TradingEnvironment or AssetFinder with tokenized representations . DCNL All arguments are passed to pickle.Pickler and are described therein . &apos; 
&apos;Remove a cluster on a Postgres server . By default it doesn \ &apos; t try DCNL to stop the cluster . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; postgres.cluster _ remove \ &apos; 9.3 \ &apos; DCNL salt \ &apos; * \ &apos; postgres.cluster _ remove \ &apos; 9.3 \ &apos; \ &apos; main \ &apos; DCNL salt \ &apos; * \ &apos; postgres.cluster _ remove \ &apos; 9.3 \ &apos; \ &apos; main \ &apos; stop = True&apos;
&apos;Return a response in an SMS message&apos;
&apos;Expanding quantile . DCNL Parameters DCNL arg : Series , DataFrame DCNL quantile : float DCNL 0 &lt; = quantile &lt; = 1 DCNL min _ periods : int , default None DCNL Minimum number of observations in window required to have a value DCNL ( otherwise result is NA ) . DCNL freq : string or DateOffset object , optional ( default None ) DCNL Frequency to conform the data to before computing the DCNL statistic . Specified as a frequency string or DateOffset object . DCNL Returns DCNL y : type of input argument DCNL Notes DCNL The `freq` keyword is used to conform time series data to a specified DCNL frequency by resampling the data . This is done with the default parameters DCNL of : meth : ` ~ pandas.Series.resample` ( i.e. using the `mean` ) . DCNL To learn more about the frequency strings , please see `this link DCNL &lt; http : / / pandas.pydata.org / pandas-docs / stable / timeseries.html # offset-aliases &gt; ` _ _  . &apos; 
&apos;A function variable must be a single uppercase character followed by DCNL zero or more digits . DCNL : param expr : str DCNL : return : bool True if expr is of the correct form&apos;
&apos;Returns the current local path for saving data locally DCNL Create folder if not exists&apos;
&apos;This handles the command line input of the runner , usually created by DCNL the evennia launcher&apos;
&apos;If we get TypeError from * ( possibly because one is float and the other is Decimal ) , then promote them both to Decimal . &apos; 
&apos;tests to verify that Symbol dictionaries do the right thing in dynamic scenarios&apos;
&apos;Factory function for a manager that subclasses \ &apos; superclass \ &apos; ( which is a DCNL Manager ) and adds behavior for generic related objects . &apos; 
&apos;Return metadata as a L { MetaInfo } object&apos;
&apos;Set up things for the interpreter to call our function like GNU readline . &apos; 
&apos;Write the code to a temporary file . &apos; 
&apos;Run PHP \ &apos; s composer with a specific action . DCNL If composer has not been installed globally making it available in the DCNL system PATH &amp; making it executable , the ``composer`` and ``php`` parameters DCNL will need to be set to the location of the executables . DCNL action DCNL The action to pass to composer ( \ &apos; install \ &apos; , \ &apos; update \ &apos; , \ &apos; selfupdate \ &apos; , etc ) . DCNL directory DCNL Directory location of the composer.json file . Required except when DCNL action = \ &apos; selfupdate \ &apos; DCNL composer DCNL Location of the composer.phar file . If not set composer will DCNL just execute &quot; composer &quot; as if it is installed globally . DCNL ( i.e. / path / to / composer.phar ) DCNL php DCNL Location of the php executable to use with composer . DCNL ( i.e. / usr / bin / php ) DCNL runas DCNL Which system user to run composer as . DCNL prefer _ source DCNL --prefer-source option of composer . DCNL prefer _ dist DCNL --prefer-dist option of composer . DCNL no _ scripts DCNL --no-scripts option of composer . DCNL no _ plugins DCNL --no-plugins option of composer . DCNL optimize DCNL --optimize-autoloader option of composer . Recommended for production . DCNL no _ dev DCNL --no-dev option for composer . Recommended for production . DCNL quiet DCNL --quiet option for composer . Whether or not to return output from composer . DCNL composer _ home DCNL $ COMPOSER _ HOME environment variable DCNL extra _ flags DCNL None , or a string containing extra flags to pass to composer . &apos; 
&apos;Set linestyles and colors for plot _ compare _ evokeds . &apos; 
&apos;Constructs the Schema from the JSON text . &apos; 
&apos;returns apps that are not within django.conf.settings.LETTUCE _ AVOID _ APPS&apos;
&apos;Grow labels while ensuring that they don \ &apos; t overlap . &apos; 
&apos;Perform t-test for all pairs of distributions . DCNL Computes corrected p-values in addition to uncorrected . &apos; 
&apos;Return the number of instances that are set for the given server version . DCNL This is only valid for fixed servers , an error will be raised for DCNL automatically-scheduled servers . Support for automatically-servers may be DCNL supported in the future . DCNL Args : DCNL server : String containing the name of the server to fetch this info for , if DCNL None the server of the current instance will be used . DCNL version : String containing the name of the version to fetch this info for , DCNL if None the version of the current instance will be used . If that version DCNL does not exist in the other server , then an InvalidVersionError is raised . DCNL Raises : DCNL InvalidVersionError on invalid input . &apos; 
&apos;Return the raw pillar data that is currently loaded into the minion . DCNL Contrast with : py : func : `items` which calls the master to fetch the most DCNL up-to-date Pillar . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pillar.raw DCNL With the optional key argument , you can select a subtree of the DCNL pillar raw data . : : DCNL salt \ &apos; * \ &apos; pillar.raw key = \ &apos; roles \ &apos; &apos;
&apos;Returns a bytestring version of \ &apos; s \ &apos; , encoded as specified in \ &apos; encoding \ &apos; . DCNL If strings _ only is True , don \ &apos; t convert ( some ) non-string-like objects . &apos; 
&apos;Forces a value to be rendered as a localized value , DCNL regardless of the value of ``settings.USE _ L10N`` . &apos; 
&apos;TODO&apos;
&apos;Test desktop GL backend for full functionality . &apos; 
&apos;SearchDataAdapter ( results , format , db ) - &gt; headers , 2D array of data . &apos; 
&apos;Remove an axes from the current figure . If * ax * DCNL doesn \ &apos; t exist , an error will be raised . DCNL ``delaxes ( ) `` : delete the current axes&apos;
&apos;Get all volumes belonging to a consistency group . &apos; 
&apos;Only for MacOS with atrun enabled&apos;
&apos;Convert an `asyncio.Future` to a `tornado.concurrent.Future`. DCNL .. versionadded : : 4.1&apos;
&apos;Return whether a string has open quotes . DCNL This simply counts whether the number of quote characters of either type in DCNL the string is odd . DCNL Returns DCNL If there is an open quote , the quote character is returned . Else , return DCNL False . &apos; 
&apos;Generate a zip file from the selected submissions&apos;
&apos;This is an intermediate function for Frangi and Hessian filters . DCNL Shares the common code for Frangi and Hessian functions . DCNL Parameters DCNL image : ( N , M ) ndarray DCNL Array with input image data . DCNL scale _ range : 2-tuple of floats , optional DCNL The range of sigmas used . DCNL scale _ step : float , optional DCNL Step size between sigmas . DCNL beta1 : float , optional DCNL Frangi correction constant that adjusts the filter \ &apos; s DCNL sensitivity to deviation from a blob-like structure . DCNL beta2 : float , optional DCNL Frangi correction constant that adjusts the filter \ &apos; s DCNL sensitivity to areas of high variance / texture / structure . DCNL Returns DCNL filtered _ list : list DCNL List of pre-filtered images . &apos; 
&apos;Configure the interface to get its DNS servers from the DHCP server DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; win _ dns _ client.dns _ dhcp &lt; interface &gt; &apos;
&apos;Compute weighted shortest path length and predecessors . DCNL Uses Dijkstra \ &apos; s Method to obtain the shortest weighted paths DCNL and return dictionaries of predecessors for each node and DCNL distance for each node from the `source` . DCNL Parameters DCNL G : NetworkX graph DCNL source : node label DCNL Starting node for path DCNL cutoff : integer or float , optional DCNL Depth to stop the search . Only return paths with length &lt; = cutoff . DCNL weight : string or function DCNL If this is a string , then edge weights will be accessed via the DCNL edge attribute with this key ( that is , the weight of the edge DCNL joining `u` to `v` will be ``G.edge &#91; u &#93; &#91; v &#93; &#91; weight &#93; `` ) . If no DCNL such edge attribute exists , the weight of the edge is assumed to DCNL be one . DCNL If this is a function , the weight of an edge is the value DCNL returned by the function . The function must accept exactly three DCNL positional arguments : the two endpoints of an edge and the DCNL dictionary of edge attributes for that edge . The function must DCNL return a number . DCNL Returns DCNL pred , distance : dictionaries DCNL Returns two dictionaries representing a list of predecessors DCNL of a node and the distance to each node . DCNL Notes DCNL Edge weight attributes must be numerical . DCNL Distances are calculated as sums of weighted edges traversed . DCNL The list of predecessors contains more than one element only when DCNL there are more than one shortest paths to the key node . &apos; 
&apos;Return interned JID . DCNL @ rtype : L { JID } &apos;
&apos;Retrieve all the available roles . DCNL : param exclude _ system : True to exclude system roles . DCNL : type exclude _ system : ``bool`` DCNL : rtype : ``list`` of : class : `RoleDB`&apos;
&apos;Get a hash identifying an user . DCNL It \ &apos; s a hash of session key , ip and user agent&apos;
&apos;Test max pooling for known result . &apos; 
&apos;Test either if an error is raised while a wrong type of NN is given&apos;
&apos;Compute the set of resource columns required to serve DCNL `columns` . &apos; 
&apos;Outputs the contents of a given file into the page . DCNL Like a simple &quot; include &quot; tag , the ``ssi`` tag includes the contents DCNL of another file -- which must be specified using an absolute path -- DCNL in the current page : : DCNL { % ssi &quot; / home / html / ljworld.com / includes / right _ generic.html &quot; % } DCNL If the optional &quot; parsed &quot; parameter is given , the contents of the included DCNL file are evaluated as template code , with the current context : : DCNL { % ssi &quot; / home / html / ljworld.com / includes / right _ generic.html &quot; parsed % } &apos;
&apos;Returns : the canonicalized absolute pathname . The resulting path will have no symbolic link , \ &apos; / . / \ &apos; or \ &apos; / .. / \ &apos; components . &apos; 
&apos;dfstats main loop&apos;
&apos;This method instantiates and returns a handle to a low-level DCNL base cipher . It will absorb named parameters in the process . &apos; 
&apos;Subtensor ( SetSubtensor ( x , y , idx ) , idx ) - &gt; y&apos;
&apos;Same logic as load _ check _ directory except it loads one specific check&apos;
&apos;Imports an object based on a string . This is useful if you want to DCNL use import paths as endpoints or something similar . An import path can DCNL be specified either in dotted notation ( ``xml.sax.saxutils.escape`` ) DCNL or with a colon as object delimiter ( ``xml.sax.saxutils : escape`` ) . DCNL If `silent` is True the return value will be `None` if the import fails . DCNL For better debugging we recommend the new : func : `import _ module` DCNL function to be used instead . DCNL : param import _ name : the dotted name for the object to import . DCNL : param silent : if set to `True` import errors are ignored and DCNL `None` is returned instead . DCNL : return : imported object&apos;
&apos;get session boot info&apos;
&apos;Comapare two english phrases ignoring starting prepositions . &apos; 
&apos;Returns the length of the value - useful for lists . &apos; 
&apos;Return a EventLoop instance . DCNL A new instance is created for each new HTTP request . We determine DCNL that we \ &apos; re in a new request by inspecting os.environ , which is reset DCNL at the start of each request . Also , each thread gets its own loop . &apos; 
&apos;return the visibility from a name : public , protected , private or special&apos;
&apos;Extract common elements of base64 keys from an entry in a hosts file . DCNL @ return : a 4-tuple of hostname data ( L { str } ) , ssh key type ( L { str } ) , key DCNL ( L { Key } ) , and comment ( L { str } or L { None } ) . The hostname data is simply the DCNL beginning of the line up to the first occurrence of whitespace . &apos; 
&apos;Tests that the four possible ways of creating DCNL a numpy RNG give the same results with the same seed&apos;
&apos;Helper function to translate a nucleotide string ( PRIVATE ) . DCNL Arguments : DCNL - sequence - a string DCNL - table - a CodonTable object ( NOT a table name or id number ) DCNL - stop _ symbol - a single character string , what to use for terminators . DCNL - to _ stop - boolean , should translation terminate at the first DCNL in frame stop codon ? If there is no in-frame stop codon DCNL then translation continues to the end . DCNL - pos _ stop - a single character string for a possible stop codon DCNL ( e.g. TAN or NNN ) DCNL - cds - Boolean , indicates this is a complete CDS . If True , this DCNL checks the sequence starts with a valid alternative start DCNL codon ( which will be translated as methionine , M ) , that the DCNL sequence length is a multiple of three , and that there is a DCNL single in frame stop codon at the end ( this will be excluded DCNL from the protein sequence , regardless of the to _ stop option ) . DCNL If these tests fail , an exception is raised . DCNL - gap - Single character string to denote symbol used for gaps . DCNL Defaults to None . DCNL Returns a string . DCNL e.g. DCNL &gt; &gt; &gt; from Bio.Data import CodonTable DCNL &gt; &gt; &gt; table = CodonTable.ambiguous _ dna _ by _ id &#91; 1 &#93; DCNL &gt; &gt; &gt; _ translate _ str ( &quot; AAA &quot; , table ) DCNL \ &apos; K \ &apos; DCNL &gt; &gt; &gt; _ translate _ str ( &quot; TAR &quot; , table ) DCNL &gt; &gt; &gt; _ translate _ str ( &quot; TAN &quot; , table ) DCNL \ &apos; X \ &apos; DCNL &gt; &gt; &gt; _ translate _ str ( &quot; TAN &quot; , table , pos _ stop = &quot; @ &quot; ) DCNL &gt; &gt; &gt; _ translate _ str ( &quot; TA ? &quot; , table ) DCNL Traceback ( most recent call last ) : DCNL TranslationError : Codon \ &apos; TA ? \ &apos; is invalid DCNL In a change to older versions of Biopython , partial codons are now DCNL always regarded as an error ( previously only checked if cds = True ) DCNL and will trigger a warning ( likely to become an exception in a DCNL future release ) . DCNL If * * cds = True * * , the start and stop codons are checked , and the start DCNL codon will be translated at methionine . The sequence must be an DCNL while number of codons . DCNL &gt; &gt; &gt; _ translate _ str ( &quot; ATGCCCTAG &quot; , table , cds = True ) DCNL \ &apos; MP \ &apos; DCNL &gt; &gt; &gt; _ translate _ str ( &quot; AAACCCTAG &quot; , table , cds = True ) DCNL Traceback ( most recent call last ) : DCNL TranslationError : First codon \ &apos; AAA \ &apos; is not a start codon DCNL &gt; &gt; &gt; _ translate _ str ( &quot; ATGCCCTAGCCCTAG &quot; , table , cds = True ) DCNL Traceback ( most recent call last ) : DCNL TranslationError : Extra in frame stop codon found . &apos; 
&apos;Decorator factory to track time changes . &apos; 
&apos;Encode payload using interoperable LZ4 framing . Requires Kafka &gt; = 0.10&apos;
&apos;Set the current rc params . Group is the grouping for the rc , e.g. , DCNL for ``lines.linewidth`` the group is ``lines`` , for DCNL ``axes.facecolor`` , the group is ``axes`` , and so on . Group may DCNL also be a list or tuple of group names , e.g. , ( * xtick * , * ytick * ) . DCNL * kwargs * is a dictionary attribute name / value pairs , e.g. , : : DCNL rc ( \ &apos; lines \ &apos; , linewidth = 2 , color = \ &apos; r \ &apos; ) DCNL sets the current rc params and is equivalent to : : DCNL rcParams &#91; \ &apos; lines.linewidth \ &apos; &#93; = 2 DCNL rcParams &#91; \ &apos; lines.color \ &apos; &#93; = \ &apos; r \ &apos; DCNL The following aliases are available to save typing for interactive DCNL users : DCNL Alias Property DCNL \ &apos; lw \ &apos; \ &apos; linewidth \ &apos; DCNL \ &apos; ls \ &apos; \ &apos; linestyle \ &apos; DCNL \ &apos; c \ &apos; \ &apos; color \ &apos; DCNL \ &apos; fc \ &apos; \ &apos; facecolor \ &apos; DCNL \ &apos; ec \ &apos; \ &apos; edgecolor \ &apos; DCNL \ &apos; mew \ &apos; \ &apos; markeredgewidth \ &apos; DCNL \ &apos; aa \ &apos; \ &apos; antialiased \ &apos; DCNL Thus you could abbreviate the above rc command as : : DCNL rc ( \ &apos; lines \ &apos; , lw = 2 , c = \ &apos; r \ &apos; ) DCNL Note you can use python \ &apos; s kwargs dictionary facility to store DCNL dictionaries of default parameters. e.g. , you can customize the DCNL font rc as follows : : DCNL font = { \ &apos; family \ &apos; : \ &apos; monospace \ &apos; , DCNL \ &apos; weight \ &apos; : \ &apos; bold \ &apos; , DCNL \ &apos; size \ &apos; : \ &apos; larger \ &apos; } DCNL rc ( \ &apos; font \ &apos; , * * font ) # pass in the font dict as kwargs DCNL This enables you to easily switch between several configurations . DCNL Use : func : ` ~ matplotlib.pyplot.rcdefaults` to restore the default DCNL rc params after changes . &apos; 
&apos;Wrapper function for Series arithmetic operations , to avoid DCNL code duplication . &apos; 
&apos;Generate a contribute.json&apos;
&apos;This code looks for any modules or packages in the given DCNL directory , loads them DCNL and then registers a blueprint DCNL - blueprints must be created with the name \ &apos; module \ &apos; DCNL Implemented directory scan DCNL Bulk of the code taken from : DCNL https : / / github.com / smartboyathome / DCNL Cheshire-Engine / blob / master / ScoringServer / utils.py&apos;
&apos;Performs the Bifid cipher encryption on plaintext ``msg`` , and DCNL returns the ciphertext . DCNL This is the version of the Bifid cipher that uses an `n \ times n` DCNL Polybius square . DCNL INPUT : DCNL ``msg`` : plaintext string DCNL ``key`` : short string for key ; duplicate characters are DCNL ignored and then it is padded with the characters in DCNL ``symbols`` that were not in the short key DCNL ``symbols`` : `n \ times n` characters defining the alphabet DCNL ( default is string.printable ) DCNL OUTPUT : DCNL ciphertext ( using Bifid5 cipher without spaces ) DCNL See Also DCNL decipher _ bifid , encipher _ bifid5 , encipher _ bifid6&apos;
&apos;Return the 4x4 matrix to convert view coordinates to display coordinates . DCNL It \ &apos; s assumed that the view should take up the entire window and that the DCNL origin of the window is in the upper left corner . &apos; 
&apos;Colorize debug message with prefix&apos;
&apos;Projects modified since a revision&apos;
&apos;Search a name in the directories of modules . &apos; 
&apos;Determine the disk info for the next device on disk _ bus . DCNL Considering the disks already listed in the disk mapping , DCNL determine the next available disk dev that can be assigned DCNL for the disk bus . DCNL Returns the disk _ info for the next available disk . &apos; 
&apos;Converts arrays to arrays with dimensions &gt; = 2 . DCNL If an input array has dimensions less than two , then this function inserts DCNL new axes at the head of dimensions to make it have two dimensions . DCNL Args : DCNL arys ( tuple of arrays ) : Arrays to be converted . All arguments must be DCNL : class : `cupy.ndarray` objects . DCNL Returns : DCNL If there are only one input , then it returns its converted version . DCNL Otherwise , it returns a list of converted arrays . DCNL .. seealso : : : func : `numpy.atleast _ 2d`&apos;
&apos;Return last day of this month&apos;
&apos;Set an explicit indentation level for a block scalar . &apos; 
&apos;Return volumes usage that have been updated after a specified time . &apos; 
&apos;Returns a global list of available roles . &apos; 
&apos;Run the default discovery and return an instance of DCNL : class : `QtWidgetRegistry` . &apos; 
&apos;Reduce a Python function and its globals to picklable components . DCNL If there are cell variables ( i.e. references to a closure ) , their DCNL values will be frozen . &apos; 
&apos;replace ( str , old , new &#91; , maxsplit &#93; ) - &gt; string DCNL Return a copy of string str with all occurrences of substring DCNL old replaced by new . If the optional argument maxsplit is DCNL given , only the first maxsplit occurrences are replaced . &apos; 
&apos; : param reactor : Reactor to use . DCNL : param list args : The arguments passed to the script . DCNL : param FilePath base _ path : The executable being run . DCNL : param FilePath top _ level : The top-level of the Flocker repository . &apos; 
&apos;Compute the analytic signal , using the Hilbert transform . DCNL The transformation is done along the last axis by default . DCNL Parameters DCNL x : array _ like DCNL Signal data . Must be real . DCNL N : int , optional DCNL Number of Fourier components . Default : ``x.shape &#91; axis &#93; `` DCNL axis : int , optional DCNL Axis along which to do the transformation . Default : -1 . DCNL Returns DCNL xa : ndarray DCNL Analytic signal of `x` , of each 1-D array along `axis` DCNL See Also DCNL scipy.fftpack.hilbert : Return Hilbert transform of a periodic sequence x . DCNL Notes DCNL The analytic signal ``x _ a ( t ) `` of signal ``x ( t ) `` is : DCNL .. math : : x _ a = F ^ { -1 } ( F ( x ) 2U ) = x + i y DCNL where `F` is the Fourier transform , `U` the unit step function , DCNL and `y` the Hilbert transform of `x` . &#91; 1 &#93; _ DCNL In other words , the negative half of the frequency spectrum is zeroed DCNL out , turning the real-valued signal into a complex signal . The Hilbert DCNL transformed signal can be obtained from ``np.imag ( hilbert ( x ) ) `` , and the DCNL original signal from ``np.real ( hilbert ( x ) ) `` . DCNL Examples DCNL In this example we use the Hilbert transform to determine the amplitude DCNL envelope and instantaneous frequency of an amplitude-modulated signal . DCNL &gt; &gt; &gt; import numpy as np DCNL &gt; &gt; &gt; import matplotlib.pyplot as plt DCNL &gt; &gt; &gt; from scipy.signal import hilbert , chirp DCNL &gt; &gt; &gt; duration = 1.0 DCNL &gt; &gt; &gt; fs = 400.0 DCNL &gt; &gt; &gt; samples = int ( fs * duration ) DCNL &gt; &gt; &gt; t = np.arange ( samples ) / fs DCNL We create a chirp of which the frequency increases from 20 Hz to 100 Hz and DCNL apply an amplitude modulation . DCNL &gt; &gt; &gt; signal = chirp ( t , 20.0 , t &#91; -1 &#93; , 100.0 ) DCNL &gt; &gt; &gt; signal * = ( 1.0 + 0.5 * np.sin ( 2.0 * np.pi * 3.0 * t ) ) DCNL The amplitude envelope is given by magnitude of the analytic signal . The DCNL instantaneous frequency can be obtained by differentiating the DCNL instantaneous phase in respect to time . The instantaneous phase corresponds DCNL to the phase angle of the analytic signal . DCNL &gt; &gt; &gt; analytic _ signal = hilbert ( signal ) DCNL &gt; &gt; &gt; amplitude _ envelope = np.abs ( analytic _ signal ) DCNL &gt; &gt; &gt; instantaneous _ phase = np.unwrap ( np.angle ( analytic _ signal ) ) DCNL &gt; &gt; &gt; instantaneous _ frequency = ( np.diff ( instantaneous _ phase ) / DCNL ... ( 2.0 * np.pi ) * fs ) DCNL &gt; &gt; &gt; fig = plt.figure ( ) DCNL &gt; &gt; &gt; ax0 = fig.add _ subplot ( 211 ) DCNL &gt; &gt; &gt; ax0.plot ( t , signal , label = \ &apos; signal \ &apos; ) DCNL &gt; &gt; &gt; ax0.plot ( t , amplitude _ envelope , label = \ &apos; envelope \ &apos; ) DCNL &gt; &gt; &gt; ax0.set _ xlabel ( &quot; time in seconds &quot; ) DCNL &gt; &gt; &gt; ax0.legend ( ) DCNL &gt; &gt; &gt; ax1 = fig.add _ subplot ( 212 ) DCNL &gt; &gt; &gt; ax1.plot ( t &#91; 1 : &#93; , instantaneous _ frequency ) DCNL &gt; &gt; &gt; ax1.set _ xlabel ( &quot; time in seconds &quot; ) DCNL &gt; &gt; &gt; ax1.set _ ylim ( 0.0 , 120.0 ) DCNL References DCNL .. &#91; 1 &#93; Wikipedia , &quot; Analytic signal &quot; . DCNL http : / / en.wikipedia.org / wiki / Analytic _ signal DCNL .. &#91; 2 &#93; Leon Cohen , &quot; Time-Frequency Analysis &quot; , 1995 . Chapter 2 . DCNL .. &#91; 3 &#93; Alan V. Oppenheim , Ronald W. Schafer . Discrete-Time Signal DCNL Processing , Third Edition , 2009 . Chapter 12 . DCNL ISBN 13 : 978-1292-02572-8&apos;
&apos;Convert the output of L { pickleStringO } into an appropriate type for the DCNL current python version . This may be called on Python 3 and will convert a DCNL cStringIO into an L { io.StringIO } . DCNL @ param val : The content of the file . DCNL @ type val : L { bytes } DCNL @ param sek : The seek position of the file . DCNL @ type sek : L { int } DCNL @ return : a file-like object which you can write bytes to . DCNL @ rtype : L { cStringIO.OutputType } on Python 2 , L { io.StringIO } on Python 3 . &apos; 
&apos;the django builtin server fails if the HTTP port is not available&apos;
&apos;Convert a value to lowercase . &apos; 
&apos;Converts a human readable size to bytes . DCNL : param value : A string such as &quot; 10MB &quot; . If a suffix is not included , DCNL then the value is assumed to be an integer representing the size DCNL in bytes . DCNL : returns : The converted value in bytes as an integer&apos;
&apos;fab -P ( or env.parallel ) should honor @ runs _ once&apos;
&apos;Calculate the percentage of scenario requests have a latency under the DCNL specified time limit . DCNL : param results : Results to extract values from . DCNL : param limit : Request latency limit in seconds . &apos; 
&apos;Test jsonreport output with no steps&apos;
&apos;we have a full length slice&apos;
&apos;The second element in a sequence DCNL &gt; &gt; &gt; second ( \ &apos; ABC \ &apos; ) DCNL \ &apos; B \ &apos; &apos;
&apos;Context manager to collect profile information . &apos; 
&apos;Guard against * value * being null or zero . DCNL * exc _ tuple * should be a ( exception type , arguments ... ) tuple . &apos; 
&apos;Solves separable 1st order differential equations . DCNL This is any differential equation that can be written as `P ( y ) DCNL \ tfrac { dy } { dx } = Q ( x ) ` . The solution can then just be found by DCNL rearranging terms and integrating : ` \ int P ( y ) \ , dy = \ int Q ( x ) \ , dx` . DCNL This hint uses : py : meth : `sympy.simplify.simplify.separatevars` as its back DCNL end , so if a separable equation is not caught by this solver , it is most DCNL likely the fault of that function . DCNL : py : meth : ` ~ sympy.simplify.simplify.separatevars` is DCNL smart enough to do most expansion and factoring necessary to convert a DCNL separable equation `F ( x , y ) ` into the proper form `P ( x ) \ cdot { } Q ( y ) ` . The DCNL general solution is : : DCNL &gt; &gt; &gt; from sympy import Function , dsolve , Eq , pprint DCNL &gt; &gt; &gt; from sympy.abc import x DCNL &gt; &gt; &gt; a , b , c , d , f = map ( Function , &#91; \ &apos; a \ &apos; , \ &apos; b \ &apos; , \ &apos; c \ &apos; , \ &apos; d \ &apos; , \ &apos; f \ &apos; &#93; ) DCNL &gt; &gt; &gt; genform = Eq ( a ( x ) * b ( f ( x ) ) * f ( x ) .diff ( x ) , c ( x ) * d ( f ( x ) ) ) DCNL &gt; &gt; &gt; pprint ( genform ) DCNL d DCNL a ( x ) * b ( f ( x ) ) * -- ( f ( x ) ) = c ( x ) * d ( f ( x ) ) DCNL dx DCNL &gt; &gt; &gt; pprint ( dsolve ( genform , f ( x ) , hint = \ &apos; separable _ Integral \ &apos; ) ) DCNL f ( x ) DCNL &#124; b ( y ) &#124; c ( x ) DCNL &#124; ---- dy = C1 + &#124; ---- dx DCNL &#124; d ( y ) &#124; a ( x ) DCNL Examples DCNL &gt; &gt; &gt; from sympy import Function , dsolve , Eq DCNL &gt; &gt; &gt; from sympy.abc import x DCNL &gt; &gt; &gt; f = Function ( \ &apos; f \ &apos; ) DCNL &gt; &gt; &gt; pprint ( dsolve ( Eq ( f ( x ) * f ( x ) .diff ( x ) + x , 3 * x * f ( x ) * * 2 ) , f ( x ) , DCNL ... hint = \ &apos; separable \ &apos; , simplify = False ) ) DCNL / 2 \ 2 DCNL log \ 3 * f ( x ) - 1 / x DCNL ---------------- = C1 + -- DCNL 6 2 DCNL References DCNL - M. Tenenbaum &amp; H. Pollard , &quot; Ordinary Differential Equations &quot; , DCNL Dover 1963 , pp. 52 DCNL # indirect doctest&apos;
&apos;Update topology description from a primary \ &apos; s ismaster response . DCNL Pass in a dict of ServerDescriptions , current replica set name , the DCNL ServerDescription we are processing , and the TopologyDescription \ &apos; s DCNL max _ set _ version and max _ election _ id if any . DCNL Returns ( new topology type , new replica _ set _ name , new max _ set _ version , DCNL new max _ election _ id )  . &apos; 
&apos;Given a list of localized language names return a mapping of the names to 3 DCNL letter ISO 639 language codes . If a name is not recognized , it is mapped to DCNL None . &apos; 
&apos;Fixture creating a Celery application instance . &apos; 
&apos;Compares the actual input with the predicted input and returns results DCNL Parameters : DCNL input : The actual input DCNL prediction : the predicted input DCNL verbosity : If &gt; 0 , print debugging messages DCNL sparse : If true , they are in sparse form ( list of DCNL active indices ) DCNL retval ( foundInInput , totalActiveInInput , missingFromInput , DCNL totalActiveInPrediction ) DCNL foundInInput : The number of predicted active elements that were DCNL found in the actual input DCNL totalActiveInInput : The total number of active elements in the input . DCNL missingFromInput : The number of predicted active elements that were not DCNL found in the actual input DCNL totalActiveInPrediction : The total number of active elements in the prediction&apos;
&apos;A backend can raise `PermissionDenied` to short-circuit permission checking . &apos; 
&apos;lxml * sometimes * represents non-ascii characters as hex entities in DCNL attribute values . I can \ &apos; t figure out exactly what circumstances cause it . DCNL It seems to happen when serializing a part of a larger tree . Since we need DCNL serialization to be the same when serializing full and partial trees , we DCNL manually replace all hex entities with their unicode codepoints . &apos; 
&apos;Remove HTML entities from a string . DCNL Adapted from http : / / effbot.org / zone / re-sub.htm # unescape-html&apos;
&apos;Test the show _ negative _ chains script main function&apos;
&apos;Return the crawleable url according to : DCNL http : / / code.google.com / web / ajaxcrawling / docs / getting-started.html DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html # ! key = value &quot; ) DCNL \ &apos; www.example.com / ajax.html ? _ escaped _ fragment _ = key % 3Dvalue \ &apos; DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html ? k1 = v1 &amp; k2 = v2 # ! key = value &quot; ) DCNL \ &apos; www.example.com / ajax.html ? k1 = v1 &amp; k2 = v2 &amp; _ escaped _ fragment _ = key % 3Dvalue \ &apos; DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html ? # ! key = value &quot; ) DCNL \ &apos; www.example.com / ajax.html ? _ escaped _ fragment _ = key % 3Dvalue \ &apos; DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html # ! &quot; ) DCNL \ &apos; www.example.com / ajax.html ? _ escaped _ fragment _ = \ &apos; DCNL URLs that are not &quot; AJAX crawlable &quot; ( according to Google ) returned as-is : DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html # key = value &quot; ) DCNL \ &apos; www.example.com / ajax.html # key = value \ &apos; DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html # &quot; ) DCNL \ &apos; www.example.com / ajax.html # \ &apos; DCNL &gt; &gt; &gt; escape _ ajax ( &quot; www.example.com / ajax.html &quot; ) DCNL \ &apos; www.example.com / ajax.html \ &apos; &apos;
&apos;Get a verbose , more humanized expression for a given ``lookup _ expr`` . DCNL Each part in the expression is looked up in the ``FILTERS _ VERBOSE _ LOOKUPS`` DCNL dictionary . Missing keys will simply default to itself . DCNL ex : : DCNL &gt; &gt; &gt; verbose _ lookup _ expr ( \ &apos; year _ _ lt \ &apos; ) DCNL \ &apos; year is less than \ &apos; DCNL # with `FILTERS _ VERBOSE _ LOOKUPS = { } ` DCNL &gt; &gt; &gt; verbose _ lookup _ expr ( \ &apos; year _ _ lt \ &apos; ) DCNL \ &apos; year lt \ &apos; &apos;
&apos;Ensures function performing broker commands completes DCNL despite intermittent connection failures . &apos; 
&apos;Read the special tEXt chunk indicating the depth from a PNG file . &apos; 
&apos;Detect decorator call chaining and see if the end result is a DCNL static or a classmethod . &apos; 
&apos;Resolve the name and return the TXT records . DCNL : param unicode name : Domain name being verified . DCNL : returns : A list of txt records , if empty the name could not be resolved DCNL : rtype : list of unicode&apos;
&apos;Spherical Bessel function of the second kind or its derivative . DCNL Defined as &#91; 1 &#93; _ , DCNL .. math : : y _ n ( z ) = \ sqrt { \ frac { \ pi } { 2z } } Y _ { n + 1 / 2 } ( z ) , DCNL where : math : `Y _ n` is the Bessel function of the second kind . DCNL Parameters DCNL n : int , array _ like DCNL Order of the Bessel function ( n &gt; = 0 ) . DCNL z : complex or float , array _ like DCNL Argument of the Bessel function . DCNL derivative : bool , optional DCNL If True , the value of the derivative ( rather than the function DCNL itself ) is returned . DCNL Returns DCNL yn : ndarray DCNL Notes DCNL For real arguments , the function is computed using the ascending DCNL recurrence &#91; 2 &#93; _ . For complex arguments , the definitional relation to DCNL the cylindrical Bessel function of the second kind is used . DCNL The derivative is computed using the relations &#91; 3 &#93; _ , DCNL .. math : : DCNL y _ n \ &apos; = y _ { n-1 } - \ frac { n + 1 } { 2 } y _ n . DCNL y _ 0 \ &apos; = -y _ 1 DCNL .. versionadded : : 0.18.0 DCNL References DCNL .. &#91; 1 &#93; http : / / dlmf.nist.gov / 10.47.E4 DCNL .. &#91; 2 &#93; http : / / dlmf.nist.gov / 10.51.E1 DCNL .. &#91; 3 &#93; http : / / dlmf.nist.gov / 10.51.E2&apos;
&apos;Write translation CSV file . DCNL : param path : File path , usually ` &#91; app &#93; / translations` . DCNL : param app _ messages : Translatable strings for this app . DCNL : param lang _ dict : Full translated dict . &apos; 
&apos;Returns a tuple ( year , week ) where year is the current year of the season DCNL and week is the current week number of games being played . DCNL i.e. , ( 2012 , 3 ) . DCNL N.B. This always downloads the schedule XML data . &apos; 
&apos; @ rtype : str&apos;
&apos;Friendly wrapper around Popen . DCNL Returns stdout output , stderr output and OS status code . &apos; 
&apos;Helper function to return a URL pattern for serving static files . &apos; 
&apos;Returns ``True`` if the pathname matches any of the given patterns . &apos; 
&apos;Get the list of parameters . DCNL Note that tparams must be OrderedDict&apos;
&apos;Deprecated ! Moved to cmdmod . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; test.tty tty0 \ &apos; This is a test \ &apos; DCNL salt \ &apos; * \ &apos; test.tty pts3 \ &apos; This is a test \ &apos; &apos;
&apos;main&apos;
&apos;Given a token , get the token information for it . &apos; 
&apos;Fill the main diagonal of the given array of any dimensionality . DCNL For an array `a` with ``a.ndim &gt; 2`` , the diagonal is the list of DCNL locations with indices ``a &#91; i , i , ... , i &#93; `` all identical . This function DCNL modifies the input array in-place , it does not return a value . DCNL Args : DCNL a ( cupy.ndarray ) : The array , at least 2-D . DCNL val ( scalar ) : The value to be written on the diagonal . DCNL Its type must be compatible with that of the array a . DCNL wrap ( bool ) : If specified , the diagonal is &quot; wrapped &quot; after N columns . DCNL This affects only tall matrices . DCNL Examples DCNL &gt; &gt; &gt; a = cupy.zeros ( ( 3 , 3 ) , int ) DCNL &gt; &gt; &gt; cupy.fill _ diagonal ( a , 5 ) DCNL &gt; &gt; &gt; a DCNL array ( &#91; &#91; 5 , 0 , 0 &#93; , DCNL &#91; 0 , 5 , 0 &#93; , DCNL &#91; 0 , 0 , 5 &#93; &#93; ) DCNL .. seealso : : : func : `numpy.fill _ diagonal`&apos;
&apos;Test either if an error is raised when the target are not binary DCNL type . &apos; 
&apos;Creates a constant-filled : class : `cupy.ndarray` object like the given array . DCNL Args : DCNL array ( cupy.ndarray or numpy.ndarray ) : Base array . DCNL fill _ value : Constant value to fill the array by . DCNL stream ( cupy.cuda.Stream ) : CUDA stream . DCNL Returns : DCNL cupy.ndarray : Constant-filled array . &apos; 
&apos;Query stored entities and time them . DCNL Returns : DCNL A tuple of two lists . A list of float times to query DCNL all entities , and a list of errors . A zero value signifies DCNL a failure . &apos; 
&apos;Associate the given security group with the given instance . &apos; 
&apos;Parse arguments and update global settings . &apos; 
&apos;Exposes internal helper method without breaking existing bindings / dependencies&apos;
&apos;Make an HTTP request with an HTTP object and arguments . DCNL Args : DCNL http : httplib2.Http , an http object to be used to make requests . DCNL uri : string , The URI to be requested . DCNL method : string , The HTTP method to use for the request . Defaults DCNL to \ &apos; GET \ &apos; . DCNL body : string , The payload / body in HTTP request . By default DCNL there is no payload . DCNL headers : dict , Key-value pairs of request headers . By default DCNL there are no headers . DCNL redirections : int , The number of allowed 203 redirects for DCNL the request . Defaults to 5 . DCNL connection _ type : httplib.HTTPConnection , a subclass to be used for DCNL establishing connection . If not set , the type DCNL will be determined from the ``uri`` . DCNL Returns : DCNL tuple , a pair of a httplib2.Response with the status code and other DCNL headers and the bytes of the content returned . &apos; 
&apos;Converts a list into an numpy array&apos;
&apos;Applies sim _ otu _ table over a range of parameters , writing output to file DCNL table : the input table to simulate samples from DCNL tree : tree related OTUs in input table DCNL simulated _ sample _ sizes : a list of ints defining how many DCNL output samples should be create per input sample DCNL dissimilarities : a list of floats containing the DCNL dissimilarities to use in simulating tables DCNL output _ dir : the directory where all output tables and DCNL mapping files should be written DCNL mapping _ f : file handle for metadata mapping file , if DCNL a mapping file should be created with the samples from DCNL each simulated table DCNL output _ table _ basename : basename for output table files DCNL ( default : table ) DCNL output _ map _ basename : basename for output mapping files DCNL ( default : map ) &apos;
&apos;Simple stateful parser&apos;
&apos;Set the local subnet name DCNL : param str name : The new local subnet name DCNL .. note : : DCNL Spaces are changed to dashes . Other special characters are removed . DCNL : return : True if successful , False if not DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL The following will be set as \ &apos; Mikes-Mac \ &apos; DCNL salt \ &apos; * \ &apos; system.set _ subnet _ name &quot; Mike \ &apos; s Mac &quot; &apos;
&apos;Test a subset of labels may be requested for SS&apos;
&apos;Get description of brainstorm ( bst _ phantom _ ctf ) dataset . &apos; 
&apos;use gradient descent to fit a ridge regression DCNL with penalty alpha&apos;
&apos;Find class / function / method specified by its fully qualified name . DCNL Fully qualified can be specified as : DCNL * &lt; module _ name &gt; . &lt; class _ name &gt; DCNL * &lt; module _ name &gt; . &lt; function _ name &gt; DCNL * &lt; module _ name &gt; . &lt; class _ name &gt; . &lt; method _ name &gt; ( an unbound method will be DCNL returned in this case ) . DCNL for _ name works by doing _ _ import _ _ for &lt; module _ name &gt; , and looks for DCNL &lt; class _ name &gt; / &lt; function _ name &gt; in module \ &apos; s _ _ dict _ _ / attrs . If fully qualified DCNL name doesn \ &apos; t contain \ &apos; . \ &apos; , the current module will be used . DCNL Args : DCNL fq _ name : fully qualified name of something to find DCNL Returns : DCNL class object . DCNL Raises : DCNL ImportError : when specified module could not be loaded or the class DCNL was not found in the module . &apos; 
&apos;Create an LVM volume group DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt mymachine lvm.vgcreate my _ vg / dev / sdb1 , / dev / sdb2 DCNL salt mymachine lvm.vgcreate my _ vg / dev / sdb1 clustered = y&apos;
&apos;call fn with given args and kwargs . DCNL This is used to represent Apply . _ _ call _ _ &apos;
&apos;Test that SpatialBatchNormalization raises an expected exception . &apos; 
&apos; .. versionadded : : 2014.7.0 DCNL Create new custom table . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nftables.new _ table filter DCNL IPv6 : DCNL salt \ &apos; * \ &apos; nftables.new _ table filter family = ipv6&apos;
&apos;Allows functions to be exponentiated , e.g. ``cos * * 2 ( x ) `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.parsing.sympy _ parser import ( parse _ expr , DCNL ... standard _ transformations , function _ exponentiation ) DCNL &gt; &gt; &gt; transformations = standard _ transformations + ( function _ exponentiation , ) DCNL &gt; &gt; &gt; parse _ expr ( \ &apos; sin * * 4 ( x ) \ &apos; , transformations = transformations ) DCNL sin ( x ) * * 4&apos;
&apos;Test Maxwell filter fine calibration . &apos; 
&apos;Parse core-site.xml and store in _ CORE _ SITE _ DICT&apos;
&apos;Compute incoming weight vector norms . DCNL Parameters DCNL array : numpy array or Theano expression DCNL Weight or bias . DCNL norm _ axes : sequence ( list or tuple ) DCNL The axes over which to compute the norm . This overrides the DCNL default norm axes defined for the number of dimensions DCNL in `array` . When this is not specified and `array` is a 2D array , DCNL this is set to ` ( 0 , ) ` . If `array` is a 3D , 4D or 5D array , it is DCNL set to a tuple listing all axes but axis 0 . The former default is DCNL useful for working with dense layers , the latter is useful for 1D , DCNL 2D and 3D convolutional layers . DCNL Finally , in case `array` is a vector , `norm _ axes` is set to an empty DCNL tuple , and this function will simply return the absolute value for DCNL each element . This is useful when the function is applied to all DCNL parameters of the network , including the bias , without distinction . DCNL ( Optional ) DCNL Returns DCNL norms : 1D array or Theano vector ( 1D ) DCNL 1D array or Theano vector of incoming weight / bias vector norms . DCNL Examples DCNL &gt; &gt; &gt; array = np.random.randn ( 100 , 200 ) DCNL &gt; &gt; &gt; norms = compute _ norms ( array ) DCNL &gt; &gt; &gt; norms.shape DCNL ( 200 , ) DCNL &gt; &gt; &gt; norms = compute _ norms ( array , norm _ axes = ( 1 , ) ) DCNL &gt; &gt; &gt; norms.shape DCNL ( 100 , ) &apos;
&apos;Persons Controller , defined in the model for use from DCNL multiple controllers for unified menus DCNL - used for access to component Tabs , Personal Profile &amp; Imports DCNL - includes components relevant to HRM&apos;
&apos;Stream info from AWS , via describe _ stream DCNL Only returns the first &quot; page &quot; of shards ( up to 100 ) ; use _ get _ full _ stream ( ) for all shards . DCNL CLI example : : DCNL salt myminion boto _ kinesis . _ get _ basic _ stream my _ stream existing _ conn&apos;
&apos; * musicpd.org , current playlist section : * DCNL ``addid { URI } &#91; POSITION &#93; `` DCNL Adds a song to the playlist ( non-recursive ) and returns the song id . DCNL ``URI`` is always a single file or URL . For example : : DCNL addid &quot; foo.mp3 &quot; DCNL Id : 999 DCNL OK DCNL * Clarifications : * DCNL - ``addid &quot; &quot; `` should return an error . &apos; 
&apos;Choose a sample of rows from a DataFrame . DCNL df : DataFrame DCNL nrows : number of rows DCNL replace : whether to sample with replacement DCNL returns : DataDf&apos;
&apos;Remove all keys from all databases DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; redis.flushall&apos;
&apos;Return common path for all paths in pathlist&apos;
&apos;get the windowview&apos;
&apos;Group items by backend type . &apos; 
&apos;Test that angles above 360 degrees can be output as strings , DCNL in repr , str , and to _ string . ( regression test for # 1413 ) &apos;
&apos;Creates bins of sequence lens DCNL Useful for checking for valid aligned sequences . DCNL input _ fasta _ fp : input fasta filepath&apos;
&apos;Scan the string s for a JSON string . End is the index of the DCNL character in s after the quote that started the JSON string . DCNL Unescapes all valid JSON string escape sequences and raises ValueError DCNL on attempt to decode an invalid string . If strict is False then literal DCNL control characters are allowed in the string . DCNL Returns a tuple of the decoded string and the index of the character in s DCNL after the end quote . &apos; 
&apos;Analysis / synthesis of a sound using the sinusoidal harmonic model DCNL x : input sound , fs : sampling rate , w : analysis window , DCNL N : FFT size ( minimum 512 ) , t : threshold in negative dB , DCNL nH : maximum number of harmonics , minf0 : minimum f0 frequency in Hz , DCNL maxf0 : maximim f0 frequency in Hz , DCNL f0et : error threshold in the f0 detection ( ex : 5 ) , DCNL returns y : output array sound&apos;
&apos;Build test cases for some common allocation _ units . &apos; 
&apos;Create a continuous random variable with a Gamma distribution . DCNL The density of the Gamma distribution is given by DCNL .. math : : DCNL f ( x ) : = \ frac { 1 } { \ Gamma ( k ) \ theta ^ k } x ^ { k - 1 } e ^ { - \ frac { x } { \ theta } } DCNL with : math : `x \ in &#91; 0,1 &#93; ` . DCNL Parameters DCNL k : Real number , `k &gt; 0` , a shape DCNL theta : Real number , ` \ theta &gt; 0` , a scale DCNL Returns DCNL A RandomSymbol . DCNL Examples DCNL &gt; &gt; &gt; from sympy.stats import Gamma , density , cdf , E , variance DCNL &gt; &gt; &gt; from sympy import Symbol , pprint , simplify DCNL &gt; &gt; &gt; k = Symbol ( &quot; k &quot; , positive = True ) DCNL &gt; &gt; &gt; theta = Symbol ( &quot; theta &quot; , positive = True ) DCNL &gt; &gt; &gt; z = Symbol ( &quot; z &quot; ) DCNL &gt; &gt; &gt; X = Gamma ( &quot; x &quot; , k , theta ) DCNL &gt; &gt; &gt; D = density ( X ) ( z ) DCNL &gt; &gt; &gt; pprint ( D , use _ unicode = False ) DCNL -z DCNL -k k - 1 theta DCNL theta * z * e DCNL gamma ( k ) DCNL &gt; &gt; &gt; C = cdf ( X , meijerg = True ) ( z ) DCNL &gt; &gt; &gt; pprint ( C , use _ unicode = False ) DCNL / / z \ DCNL &#124; k * lowergamma &#124; k , ----- &#124; DCNL &#124; k * lowergamma ( k , 0 ) \ theta / DCNL &lt; - ------------------ + ---------------------- for z &gt; = 0 DCNL &#124; gamma ( k + 1 ) gamma ( k + 1 ) DCNL \ 0 otherwise DCNL &gt; &gt; &gt; E ( X ) DCNL theta * gamma ( k + 1 ) / gamma ( k ) DCNL &gt; &gt; &gt; V = simplify ( variance ( X ) ) DCNL &gt; &gt; &gt; pprint ( V , use _ unicode = False ) DCNL 2 DCNL k * theta DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Gamma _ distribution DCNL .. &#91; 2 &#93; http : / / mathworld.wolfram.com / GammaDistribution.html&apos;
&apos;Remove the WSGI intercept call for ( host , port )  . &apos; 
&apos;Builds a traversal spec that will recurse through all objects .. or at DCNL least I think it does. additions welcome . DCNL See com.vmware.apputils.vim25.ServiceUtil.buildFullTraversal in the java DCNL API . Extended by Sebastian Tello \ &apos; s examples from pysphere to reach networks DCNL and datastores . &apos; 
&apos;Make a subprocess according to the given command-line string&apos;
&apos;Only works on Windows systems . &apos; 
&apos;Add a stream handler to the default logger . &apos; 
&apos;Snapshot indices&apos;
&apos;Adds a message with the ``INFO`` level . &apos; 
&apos;yaml : string DCNL A string parameter . DCNL : arg str name : the name of the parameter DCNL : arg str default : the default value of the parameter ( optional ) DCNL : arg str description : a description of the parameter ( optional ) DCNL Example : : DCNL parameters : DCNL - string : DCNL name : FOO DCNL default : bar DCNL description : &quot; A parameter named FOO , defaults to \ &apos; bar \ &apos; . &quot; &apos;
&apos;Parse a media-range into its component parts . DCNL Carves up a media range and returns a tuple of the ( type , subtype , DCNL params ) where \ &apos; params \ &apos; is a dictionary of all the parameters for the media DCNL range . For example , the media range \ &apos; application / * ; q = 0.5 \ &apos; would get parsed DCNL into : DCNL ( \ &apos; application \ &apos; , \ &apos; * \ &apos; , { \ &apos; q \ &apos; , \ &apos; 0.5 \ &apos; } ) DCNL In addition this function also guarantees that there is a value for \ &apos; q \ &apos; DCNL in the params dictionary , filling it in with a proper default if DCNL necessary . &apos; 
&apos;Tests whether the filename is an image file . If not will try some common DCNL alternatives ( e.g. extensions .jpg .tif ... ) &apos;
&apos;Discrete Fourier transform of a real sequence . DCNL Parameters DCNL x : array _ like , real-valued DCNL The data to transform . DCNL n : int , optional DCNL Defines the length of the Fourier transform . If `n` is not specified DCNL ( the default ) then ``n = x.shape &#91; axis &#93; `` . If ``n &lt; x.shape &#91; axis &#93; `` , DCNL `x` is truncated , if ``n &gt; x.shape &#91; axis &#93; `` , `x` is zero-padded . DCNL axis : int , optional DCNL The axis along which the transform is applied . The default is the DCNL last axis . DCNL overwrite _ x : bool , optional DCNL If set to true , the contents of `x` can be overwritten . Default is DCNL False . DCNL Returns DCNL z : real ndarray DCNL The returned real array contains : : DCNL &#91; y ( 0 ) , Re ( y ( 1 ) ) , Im ( y ( 1 ) ) , ... , Re ( y ( n / 2 ) ) &#93; if n is even DCNL &#91; y ( 0 ) , Re ( y ( 1 ) ) , Im ( y ( 1 ) ) , ... , Re ( y ( n / 2 ) ) , Im ( y ( n / 2 ) ) &#93; if n is odd DCNL where : : DCNL y ( j ) = sum &#91; k = 0 .. n-1 &#93; x &#91; k &#93; * exp ( -sqrt ( -1 ) * j * k * 2 * pi / n ) DCNL j = 0 .. n-1 DCNL Note that ``y ( -j ) = = y ( n-j ) .conjugate ( ) `` . DCNL See Also DCNL fft , irfft , scipy.fftpack.basic DCNL Notes DCNL Within numerical accuracy , ``y = = rfft ( irfft ( y ) ) `` . DCNL Both single and double precision routines are implemented . Half precision DCNL inputs will be converted to single precision . Non floating-point inputs DCNL will be converted to double precision . Long-double precision inputs are DCNL not supported . DCNL Examples DCNL &gt; &gt; &gt; from scipy.fftpack import fft , rfft DCNL &gt; &gt; &gt; a = &#91; 9 , -9 , 1 , 3 &#93; DCNL &gt; &gt; &gt; fft ( a ) DCNL array ( &#91; 4 . + 0.j , 8 . + 12.j , 16 . + 0.j , 8.-12.j &#93; ) DCNL &gt; &gt; &gt; rfft ( a ) DCNL array ( &#91; 4 . , 8 . , 12 . , 16 . &#93; ) &apos;
&apos;A decorator to require that a user be logged in to access a handler . DCNL To use it , decorate your get ( ) method like this : : DCNL @ login _ required DCNL def get ( self ) : DCNL user = users.get _ current _ user ( self ) DCNL self.response.out.write ( \ &apos; Hello , \ &apos; + user.nickname ( ) ) DCNL We will redirect to a login page if the user is not logged in . We always DCNL redirect to the request URI , and Google Accounts only redirects back as DCNL a GET request , so this should not be used for POSTs . &apos; 
&apos;Returns None if no writer is found for extension . &apos; 
&apos;Returns a dictionary of variable length solution trajectories . &apos; 
&apos;String concatenation aggregator for sqlite , sorted by supplied index&apos;
&apos;Shortcuts for generating request headers . DCNL : param keep _ alive : DCNL If ``True`` , adds \ &apos; connection : keep-alive \ &apos; header . DCNL : param accept _ encoding : DCNL Can be a boolean , list , or string . DCNL ``True`` translates to \ &apos; gzip , deflate \ &apos; . DCNL List will get joined by comma . DCNL String will be used as provided . DCNL : param user _ agent : DCNL String representing the user-agent you want , such as DCNL &quot; python-urllib3 / 0.6 &quot; DCNL : param basic _ auth : DCNL Colon-separated username : password string for \ &apos; authorization : basic ... \ &apos; DCNL auth header . DCNL : param proxy _ basic _ auth : DCNL Colon-separated username : password string for \ &apos; proxy-authorization : basic ... \ &apos; DCNL auth header . DCNL Example : : : DCNL &gt; &gt; &gt; make _ headers ( keep _ alive = True , user _ agent = &quot; Batman / 1.0 &quot; ) DCNL { \ &apos; connection \ &apos; : \ &apos; keep-alive \ &apos; , \ &apos; user-agent \ &apos; : \ &apos; Batman / 1.0 \ &apos; } DCNL &gt; &gt; &gt; make _ headers ( accept _ encoding = True ) DCNL { \ &apos; accept-encoding \ &apos; : \ &apos; gzip , deflate \ &apos; } &apos;
&apos;Returns an iterator over a series of lists of length size from iterable . DCNL &gt; &gt; &gt; list ( group ( &#91; 1,2,3,4 &#93; , 2 ) ) DCNL &#91; &#91; 1 , 2 &#93; , &#91; 3 , 4 &#93; &#93; DCNL &gt; &gt; &gt; list ( group ( &#91; 1,2,3,4,5 &#93; , 2 ) ) DCNL &#91; &#91; 1 , 2 &#93; , &#91; 3 , 4 &#93; , &#91; 5 &#93; &#93; &apos;
&apos;Only show up to logger _ settings &#91; \ &apos; reveal _ sensitive _ prefix \ &apos; &#93; characters DCNL from a sensitive header . DCNL : param name : Header name DCNL : param value : Header value DCNL : return : Safe header value&apos;
&apos;Like urllib2.quote but handles unicode properly . &apos; 
&apos;Delete an ElastiCache subnet group . DCNL CLI example : : DCNL salt myminion boto _ elasticache.delete _ subnet _ group my-subnet-group region = us-east-1&apos;
&apos;Detect if the code is running in the Compute Engine environment . DCNL Returns : DCNL True if running in the GCE environment , False otherwise . &apos; 
&apos;Use VM interactively - exit by pressing control- &#93; &apos;
&apos;Given b number of a \ &apos; s how big is our dimension ? DCNL &gt; &gt; &gt; dimension _ mul ( 2 , 5 ) DCNL 10 DCNL We round up DCNL &gt; &gt; &gt; dimension _ mul ( 9 , 3 ) DCNL 27 DCNL In the case of datashape.var , we resort to var DCNL &gt; &gt; &gt; from datashape import var DCNL &gt; &gt; &gt; dimension _ mul ( datashape.var , 5 ) DCNL Var ( ) DCNL &gt; &gt; &gt; dimension _ mul ( 10 , datashape.var ) DCNL Var ( ) &apos;
&apos;Return a mask of all of the datetimes in ``dts`` that are between DCNL ``start`` and ``end`` . DCNL Parameters DCNL dts : pd.DatetimeIndex DCNL The index to mask . DCNL start : time DCNL Mask away times less than the start . DCNL end : time DCNL Mask away times greater than the end . DCNL include _ start : bool , optional DCNL Inclusive on ``start`` . DCNL include _ end : bool , optional DCNL Inclusive on ``end`` . DCNL Returns DCNL mask : np.ndarray &#91; bool &#93; DCNL A bool array masking ``dts`` . DCNL See Also DCNL : meth : `pandas.DatetimeIndex.indexer _ between _ time`&apos;
&apos;Minimize over alpha , the function ``f ( xk + alpha pk ) `` . DCNL Parameters DCNL f : callable DCNL Function to be minimized . DCNL xk : array _ like DCNL Current point . DCNL pk : array _ like DCNL Search direction . DCNL gfk : array _ like DCNL Gradient of `f` at point `xk` . DCNL old _ fval : float DCNL Value of `f` at point `xk` . DCNL args : tuple , optional DCNL Optional arguments . DCNL c1 : float , optional DCNL Value to control stopping criterion . DCNL alpha0 : scalar , optional DCNL Value of `alpha` at start of the optimization . DCNL Returns DCNL alpha DCNL f _ count DCNL f _ val _ at _ alpha DCNL Notes DCNL Uses the interpolation algorithm ( Armijo backtracking ) as suggested by DCNL Wright and Nocedal in \ &apos; Numerical Optimization \ &apos; , 1999 , pg . 56-57&apos;
&apos;Compile the client into a temporary directory , if successful DCNL call install _ completed _ client to install the new client . DCNL : param project _ client : project.client pair e.g. autotest.AfeClient DCNL : param install _ client : Boolean , if True install the clients DCNL : return : True if install and compile was successful False if it failed&apos;
&apos;PRIVATE METHOD DCNL Performs the requested replication command and returns a dictionary with DCNL success , errors and data as keys . The data object will contain the JSON DCNL response . DCNL command : str DCNL The replication command to execute . DCNL host : str ( None ) DCNL The solr host to query . _ _ opts _ _ &#91; \ &apos; host \ &apos; &#93; is default DCNL core _ name : str ( None ) DCNL The name of the solr core if using cores . Leave this blank if you are DCNL not using cores or if you want to check all cores . DCNL params : list &lt; str &gt; ( &#91; &#93; ) DCNL Any additional parameters you want to send . Should be a lsit of DCNL strings in name = value format. e.g. &#91; \ &apos; name = value \ &apos; &#93; DCNL Return : dict &lt; str , obj &gt; : : DCNL { \ &apos; success \ &apos; : boolean , \ &apos; data \ &apos; : dict , \ &apos; errors \ &apos; : list , \ &apos; warnings \ &apos; : list } &apos;
&apos;Return the current configuration value for the given option&apos;
&apos;Make all methods listed in each class \ &apos; synchronized attribute synchronized . DCNL The synchronized attribute should be a list of strings , consisting of the DCNL names of methods that must be synchronized . If we are running in threaded DCNL mode these methods will be wrapped with a lock . &apos; 
&apos;Set the system module of the kernel is Windows&apos;
&apos;Return the request fingerprint . DCNL The request fingerprint is a hash that uniquely identifies the resource the DCNL request points to . For example , take the following two urls : DCNL http : / / www.example.com / query ? id = 111 &amp; cat = 222 DCNL http : / / www.example.com / query ? cat = 222 &amp; id = 111 DCNL Even though those are two different URLs both point to the same resource DCNL and are equivalent ( ie. they should return the same response ) . DCNL Another example are cookies used to store session ids . Suppose the DCNL following page is only accesible to authenticated users : DCNL http : / / www.example.com / members / offers.html DCNL Lot of sites use a cookie to store the session id , which adds a random DCNL component to the HTTP Request and thus should be ignored when calculating DCNL the fingerprint . DCNL For this reason , request headers are ignored by default when calculating DCNL the fingeprint . If you want to include specific headers use the DCNL include _ headers argument , which is a list of Request headers to include . &apos; 
&apos;Parse command-line argument vector . DCNL If options _ first : DCNL argv : : = &#91; long &#124; shorts &#93; * &#91; argument &#93; * &#91; \ &apos; -- \ &apos; &#91; argument &#93; * &#93; ; DCNL else : DCNL argv : : = &#91; long &#124; shorts &#124; argument &#93; * &#91; \ &apos; -- \ &apos; &#91; argument &#93; * &#93; ; &apos;
&apos;Create a fully-qualified xattr-key by including the intended namespace . DCNL Namespacing differs among OSes &#91; 1 &#93; : DCNL FreeBSD : user , system DCNL Linux : user , system , trusted , security DCNL MacOS X : not needed DCNL Mac OS X won \ &apos; t break if we include a namespace qualifier , so , for DCNL simplicity , we always include it . DCNL &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Extended _ file _ attributes&apos;
&apos;Top-level function . &apos; 
&apos;Test time generalization decoding&apos;
&apos;Transform a lowpass filter prototype to a highpass filter . DCNL Return an analog high-pass filter with cutoff frequency `wo` DCNL from an analog low-pass filter prototype with unity cutoff frequency , DCNL using zeros , poles , and gain ( \ &apos; zpk \ &apos; ) representation . DCNL Parameters DCNL z : array _ like DCNL Zeros of the analog IIR filter transfer function . DCNL p : array _ like DCNL Poles of the analog IIR filter transfer function . DCNL k : float DCNL System gain of the analog IIR filter transfer function . DCNL wo : float DCNL Desired cutoff , as angular frequency ( e.g. rad / s ) . DCNL Defaults to no change . DCNL Returns DCNL z : ndarray DCNL Zeros of the transformed high-pass filter transfer function . DCNL p : ndarray DCNL Poles of the transformed high-pass filter transfer function . DCNL k : float DCNL System gain of the transformed high-pass filter . DCNL Notes DCNL This is derived from the s-plane substitution DCNL .. math : : s \ rightarrow \ frac { \ omega _ 0 } { s } DCNL This maintains symmetry of the lowpass and highpass responses on a DCNL logarithmic scale . &apos; 
&apos;label : Get the label for the object . &apos; 
&apos;Returns all snipMate files we need to look at for \ &apos; ft \ &apos;  . &apos; 
&apos;Return the number of keys in the selected database DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; redis.dbsize&apos;
&apos; : param edesc : EntityDescriptor instance DCNL : param ident : EntityDescriptor identifier DCNL : param secc : Security context DCNL : return : Tuple with EntityDescriptor instance and Signed XML document&apos;
&apos;Wait for multiple asynchronous futures in parallel . DCNL This function is similar to `multi` , but does not support DCNL `YieldPoints &lt; YieldPoint &gt; ` . DCNL .. versionadded : : 4.0 DCNL .. versionchanged : : 4.2 DCNL If multiple ``Futures`` fail , any exceptions after the first ( which is DCNL raised ) will be logged . Added the ``quiet _ exceptions`` DCNL argument to suppress this logging for selected exception types . DCNL .. deprecated : : 4.3 DCNL Use `multi` instead . &apos; 
&apos;Serve static files below a given point in the directory structure or DCNL from locations inferred from the staticfiles finders . DCNL To use , put a URL pattern such as : : DCNL ( r \ &apos; ^ ( ? P &lt; path &gt; . * ) $ \ &apos; , \ &apos; django.contrib.staticfiles.views.serve \ &apos; ) DCNL in your URLconf . DCNL It uses the django.views.static view to serve the found files . &apos; 
&apos;yaml : ant DCNL Execute an ant target . Requires the Jenkins : jenkins-wiki : `Ant Plugin DCNL &lt; Ant + Plugin &gt; ` . DCNL To setup this builder you can either reference the list of targets DCNL or use named parameters . Below is a description of both forms : DCNL * 1 ) Listing targets : * DCNL After the ant directive , simply pass as argument a space separated list DCNL of targets to build . DCNL : Parameter : space separated list of Ant targets DCNL Example to call two Ant targets : DCNL .. literalinclude : : .. / .. / tests / builders / fixtures / ant001.yaml DCNL : language : yaml DCNL The build file would be whatever the Jenkins Ant Plugin is set to use DCNL per default ( i.e build.xml in the workspace root ) . DCNL * 2 ) Using named parameters : * DCNL : arg str targets : the space separated list of ANT targets . DCNL : arg str buildfile : the path to the ANT build file . DCNL : arg list properties : Passed to ant script using -Dkey = value ( optional ) DCNL : arg str ant-name : the name of the ant installation , DCNL ( default \ &apos; default \ &apos; ) ( optional ) DCNL : arg str java-opts : java options for ant , can have multiples , DCNL must be in quotes ( optional ) DCNL Example specifying the build file too and several targets : DCNL .. literalinclude : : .. / .. / tests / builders / fixtures / ant002.yaml DCNL : language : yaml&apos;
&apos;Convert x , y coordinates to w , x , y , z Quaternion parameters DCNL Adapted from : DCNL linalg library DCNL Copyright ( c ) 2010-2015 , Renaud Blanch &lt; rndblnch at gmail dot com &gt; DCNL Licence at your convenience : DCNL GPLv3 or higher &lt; http : / / www.gnu.org / licenses / gpl.html &gt; DCNL BSD new &lt; http : / / opensource.org / licenses / BSD-3-Clause &gt; &apos;
&apos;Tests the coordinate variables functionality with respect to DCNL reorientation of coordinate systems . &apos; 
&apos;Looks for misplaced braces ( e.g. at the end of line ) . DCNL Args : DCNL filename : The name of the current file . DCNL clean _ lines : A CleansedLines instance containing the file . DCNL linenum : The number of the line to check . DCNL error : The function to call with any errors found . &apos; 
&apos;Calls s6.restart ( ) function DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; s6.full _ restart &lt; service name &gt; &apos;
&apos;Validate optional authentication parameters . &apos; 
&apos;Convert iterator to an object that can be consumed multiple times . DCNL ``Regen`` takes any iterable , and if the object is an DCNL generator it will cache the evaluated list on first access , DCNL so that the generator can be &quot; consumed &quot; multiple times . &apos; 
&apos;round _ mode ( a ) with mode in &#91; half _ away _ from _ zero , half _ to _ even &#93; &apos;
&apos;Does a function have only n positional arguments ? DCNL This function relies on introspection and does not call the function . DCNL Returns None if validity can \ &apos; t be determined . DCNL &gt; &gt; &gt; def f ( x ) : DCNL ... return x DCNL &gt; &gt; &gt; is _ arity ( 1 , f ) DCNL True DCNL &gt; &gt; &gt; def g ( x , y = 1 ) : DCNL ... return x + y DCNL &gt; &gt; &gt; is _ arity ( 1 , g ) DCNL False&apos;
&apos;Converts a value that matches \ d + into an integer . &apos; 
&apos;Takes a single JSON drive entry ( data ) and converts it to a list DCNL of Play objects . This includes trying to resolve duplicate play DCNL conflicts by only taking the first instance of a play . &apos; 
&apos;If path does not end with / , add it and return . &apos; 
&apos;Trigger crash dump in an instance . &apos; 
&apos;Set new video subtitle . DCNL @ param p _ mi : the media player . DCNL @ param i _ spu : video subtitle track to select ( i _ id from track description ) . DCNL @ return : 0 on success , -1 if out of range . &apos; 
&apos;Evaluate ``f ( a ) `` in ``GF ( p ) `` using Horner scheme . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.galoistools import gf _ eval DCNL &gt; &gt; &gt; gf _ eval ( &#91; 3 , 2 , 4 &#93; , 2 , 5 , ZZ ) DCNL 0&apos;
&apos;Returns ``True`` if the specified service is available , otherwise returns DCNL ``False`` . DCNL name DCNL the service \ &apos; s name DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; runit.available &lt; service name &gt; &apos;
&apos;Still need to test : DCNL Two overlapping sequences . OK to get new segments but check that we can DCNL get correct high order prediction after multiple reps . &apos; 
&apos;Lists documents directly under / docs / &apos;
&apos;Find user-specified instrumentation management for a class . &apos; 
&apos;Add faces from a polygon which is concave . &apos; 
&apos;initialise module&apos;
&apos;Cache projects . DCNL : return func : &apos;
&apos;The aggregated ( all locales ) kb metrics dashboard . &apos; 
&apos;Allows final rewrite of dev _ appserver response . DCNL This function receives the unparsed HTTP response from the application DCNL or internal handler , parses out the basic structure and feeds that structure DCNL in to a chain of response rewriters . DCNL It also makes sure the final HTTP headers are properly terminated . DCNL For more about response rewriters , please see documentation for DCNL CreateResponeRewritersChain . DCNL Args : DCNL response _ file : File-like object containing the full HTTP response including DCNL the response code , all headers , and the request body . DCNL response _ rewriters : A list of response rewriters . If none is provided it DCNL will create a new chain using CreateResponseRewritersChain . DCNL request _ headers : Original request headers . DCNL env _ dict : Environment dictionary . DCNL Returns : DCNL An AppServerResponse instance configured with the rewritten response . &apos; 
&apos;Get extrude output for a cylinder gear . &apos; 
&apos;&apos;
&apos;Copy a file into a cache and link it into place . DCNL Use this with caution , otherwise you could end up DCNL copying data twice if the cache is not on the same device DCNL as the destination&apos;
&apos;Retrieve the relevant course _ info updates and unpack into the model which the client expects : DCNL &#91; { id : index , date : string , content : html string } &#93; &apos;
&apos;Return True if url returns 200 and is served by Perl . &apos; 
&apos;made up example with sin , square&apos;
&apos;&apos;
&apos;Rewrite a base64 string : DCNL - Remove LF and = characters DCNL - Replace slashes by underscores DCNL &gt; &gt; &gt; b64c ( &quot; abc123456def &quot; ) DCNL \ &apos; abc123456def \ &apos; DCNL &gt; &gt; &gt; b64c ( &quot; \ na / = b = c / &quot; ) DCNL \ &apos; a _ bc _ \ &apos; DCNL &gt; &gt; &gt; b64c ( &quot; a + b + c + 123 + &quot; ) DCNL \ &apos; a + b + c + 123 + \ &apos; &apos;
&apos;Return the common neighbors of two nodes in a graph . DCNL Parameters DCNL G : graph DCNL A NetworkX undirected graph . DCNL u , v : nodes DCNL Nodes in the graph . DCNL Returns DCNL cnbors : iterator DCNL Iterator of common neighbors of u and v in the graph . DCNL Raises DCNL NetworkXError DCNL If u or v is not a node in the graph . DCNL Examples DCNL &gt; &gt; &gt; G = nx.complete _ graph ( 5 ) DCNL &gt; &gt; &gt; sorted ( nx.common _ neighbors ( G , 0 , 1 ) ) DCNL &#91; 2 , 3 , 4 &#93; &apos;
&apos;Check if patterns contains a pattern that matches filename . DCNL If patterns is unspecified , this always returns True . &apos; 
&apos;Connect to AWS Config DCNL : type aws _ access _ key _ id : string DCNL : param aws _ access _ key _ id : Your AWS Access Key ID DCNL : type aws _ secret _ access _ key : string DCNL : param aws _ secret _ access _ key : Your AWS Secret Access Key DCNL rtype : : class : `boto.kms.layer1.ConfigServiceConnection` DCNL : return : A connection to the AWS Config service&apos;
&apos;Bulk create floating IPs by range ( nova-network only )  . &apos; 
&apos;Decode the supplied byte string using the preferred encoding DCNL for the locale ( `locale.getpreferredencoding` ) or , if the default encoding DCNL is invalid , fall back first on utf-8 , then on latin-1 if the message cannot DCNL be decoded with utf-8 . &apos; 
&apos;Run migrations in \ &apos; offline \ &apos; mode . DCNL This configures the context with either a URL DCNL or an Engine . DCNL Calls to context.execute ( ) here emit the given string to the DCNL script output . &apos; 
&apos;Task resource factory method&apos;
&apos;Return a list of the conjuncts in the expr s . DCNL Examples DCNL &gt; &gt; &gt; from sympy.logic.boolalg import conjuncts DCNL &gt; &gt; &gt; from sympy.abc import A , B DCNL &gt; &gt; &gt; conjuncts ( A &amp; B ) DCNL frozenset ( { A , B } ) DCNL &gt; &gt; &gt; conjuncts ( A &#124; B ) DCNL frozenset ( { Or ( A , B ) } ) &apos;
&apos;Helps skip integration tests without live credentials . DCNL Phrased in the negative to make it read better with \ &apos; skipif \ &apos;  . &apos; 
&apos;The docs links map is in this format : DCNL &quot; doc _ path &quot; : &#91; DCNL &quot; file _ path &quot; , DCNL This transforms it to : DCNL &quot; file _ path &quot; : &#91; DCNL &quot; doc _ path &quot; , &apos;
&apos;Start generating a set of example certificates . DCNL Example certificates are used to verify that certificates have DCNL been configured correctly for the course . DCNL Redirects back to the intructor dashboard once certificate DCNL generation has begun . &apos; 
&apos;Start the saltnado ! &apos;
&apos;Create a submission file given a configuration dictionary and a DCNL computation function . DCNL Note that it always reload the datasets to ensure valid &amp; test DCNL are not permuted . DCNL Parameters DCNL conf : WRITEME DCNL transform _ valid : WRITEME DCNL transform _ test : WRITEME DCNL features : WRITEME&apos;
&apos;Return ``s`` where characters have been replaced or deleted . DCNL SYNTAX DCNL translate ( s , None , deletechars ) : DCNL all characters in ``deletechars`` are deleted DCNL translate ( s , map &#91; , deletechars &#93; ) : DCNL all characters in ``deletechars`` ( if provided ) are deleted DCNL then the replacements defined by map are made ; if the keys DCNL of map are strings then the longer ones are handled first . DCNL Multicharacter deletions should have a value of \ &apos; \ &apos; . DCNL translate ( s , oldchars , newchars , deletechars ) DCNL all characters in ``deletechars`` are deleted DCNL then each character in ``oldchars`` is replaced with the DCNL corresponding character in ``newchars`` DCNL Examples DCNL &gt; &gt; &gt; from sympy.utilities.misc import translate DCNL &gt; &gt; &gt; from sympy.core.compatibility import unichr DCNL &gt; &gt; &gt; abc = \ &apos; abc \ &apos; DCNL &gt; &gt; &gt; translate ( abc , None , \ &apos; a \ &apos; ) DCNL \ &apos; bc \ &apos; DCNL &gt; &gt; &gt; translate ( abc , { \ &apos; a \ &apos; : \ &apos; x \ &apos; } , \ &apos; c \ &apos; ) DCNL \ &apos; xb \ &apos; DCNL &gt; &gt; &gt; translate ( abc , { \ &apos; abc \ &apos; : \ &apos; x \ &apos; , \ &apos; a \ &apos; : \ &apos; y \ &apos; } ) DCNL \ &apos; x \ &apos; DCNL &gt; &gt; &gt; translate ( \ &apos; abcd \ &apos; , \ &apos; ac \ &apos; , \ &apos; AC \ &apos; , \ &apos; d \ &apos; ) DCNL \ &apos; AbC \ &apos; DCNL There is no guarantee that a unique answer will be DCNL obtained if keys in a mapping overlap are the same DCNL length and have some identical sequences at the DCNL beginning / end : DCNL &gt; &gt; &gt; translate ( abc , { \ &apos; ab \ &apos; : \ &apos; x \ &apos; , \ &apos; bc \ &apos; : \ &apos; y \ &apos; } ) in ( \ &apos; xc \ &apos; , \ &apos; ay \ &apos; ) DCNL True&apos;
&apos;ServiceLevelAgreement view&apos;
&apos;Takes a string and replace words that match a key in a dictionary with the associated value , DCNL then returns the changed text DCNL : rtype str&apos;
&apos;Returns the angle in degrees represented by a azimuth label int . DCNL Parameters DCNL label : int DCNL Azimuth label . &apos; 
&apos;Check for installation with easy _ install or pip . &apos; 
&apos;Test that activate \ &apos; s setting of echo to off does not disrupt later echo calls&apos;
&apos;Factor a square-free ``f`` in ``GF ( p ) &#91; x &#93; `` for small ``p`` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.galoistools import gf _ berlekamp DCNL &gt; &gt; &gt; gf _ berlekamp ( &#91; 1 , 0 , 0 , 0 , 1 &#93; , 5 , ZZ ) DCNL &#91; &#91; 1 , 0 , 2 &#93; , &#91; 1 , 0 , 3 &#93; &#93; &apos;
&apos;Notify status to customer , supplier&apos;
&apos;Convenience function : Assign the return value of this method to a variable DCNL of your ModelAdmin class and put the variable name into list _ display . DCNL Example : : DCNL class MyTreeEditor ( TreeEditor ) : DCNL list _ display = ( \ &apos; _ _ str _ _ \ &apos; , \ &apos; active _ toggle \ &apos; ) DCNL active _ toggle = ajax _ editable _ boolean ( \ &apos; active \ &apos; , _ ( \ &apos; is active \ &apos; ) ) &apos;
&apos;Convert a dictionary containing ( textual DNS name , base64 secret ) pairs DCNL into a binary keyring which has ( dns.name.Name , binary secret ) pairs . DCNL @ rtype : dict&apos;
&apos;This method instantiates and returns a handle to a low-level DCNL base cipher . It will absorb named parameters in the process . &apos; 
&apos;Compares two strings in a cryptographically safe way : DCNL Runtime is not affected by length of common prefix . &apos; 
&apos;Return a list of minions&apos;
&apos;Get the registered writer names&apos;
&apos;Install packages with pip DCNL Install packages individually or from a pip requirements file . Install DCNL packages globally or to a virtualenv . DCNL pkgs DCNL Comma separated list of packages to install DCNL requirements DCNL Path to requirements DCNL bin _ env DCNL Path to pip bin or path to virtualenv . If doing a system install , DCNL and want to use a specific pip bin ( pip-2.7 , pip-2.6 , etc .. ) just DCNL specify the pip bin you want . DCNL .. note : : DCNL If installing into a virtualenv , just use the path to the DCNL virtualenv ( e.g. `` / home / code / path / to / virtualenv / `` ) DCNL use _ wheel DCNL Prefer wheel archives ( requires pip &gt; = 1.4 ) DCNL no _ use _ wheel DCNL Force to not use wheel archives ( requires pip &gt; = 1.4 ) DCNL log DCNL Log file where a complete ( maximum verbosity ) record will be kept DCNL proxy DCNL Specify a proxy in the form ``user : passwd @ proxy.server : port`` . Note DCNL that the ``user : password @ `` is optional and required only if you are DCNL behind an authenticated proxy . If you provide DCNL ``user @ proxy.server : port`` then you will be prompted for a password . DCNL timeout DCNL Set the socket timeout ( default 15 seconds ) DCNL editable DCNL install something editable ( e.g. DCNL ``git + https : / / github.com / worldcompany / djangoembed.git # egg = djangoembed`` ) DCNL find _ links DCNL URL to search for packages DCNL index _ url DCNL Base URL of Python Package Index DCNL extra _ index _ url DCNL Extra URLs of package indexes to use in addition to ``index _ url`` DCNL no _ index DCNL Ignore package index DCNL mirrors DCNL Specific mirror URL ( s ) to query ( automatically adds --use-mirrors ) DCNL .. warning : : DCNL This option has been deprecated and removed in pip version 7.0.0 . DCNL Please use ``index _ url`` and / or ``extra _ index _ url`` instead . DCNL build DCNL Unpack packages into ``build`` dir DCNL target DCNL Install packages into ``target`` dir DCNL download DCNL Download packages into ``download`` instead of installing them DCNL download _ cache DCNL Cache downloaded packages in ``download _ cache`` dir DCNL source DCNL Check out ``editable`` packages into ``source`` dir DCNL upgrade DCNL Upgrade all packages to the newest available version DCNL force _ reinstall DCNL When upgrading , reinstall all packages even if they are already DCNL up-to-date . DCNL ignore _ installed DCNL Ignore the installed packages ( reinstalling instead ) DCNL exists _ action DCNL Default action when a path already exists : ( s ) witch , ( i ) gnore , ( w ) ipe , DCNL ( b ) ackup DCNL no _ deps DCNL Ignore package dependencies DCNL no _ install DCNL Download and unpack all packages , but don \ &apos; t actually install them DCNL no _ download DCNL Don \ &apos; t download any packages , just install the ones already downloaded DCNL ( completes an install run with ``--no-install`` ) DCNL install _ options DCNL Extra arguments to be supplied to the setup.py install command ( e.g. DCNL like ``--install-option = \ &apos; --install-scripts = / usr / local / bin \ &apos; `` ) . Use DCNL multiple --install-option options to pass multiple options to setup.py DCNL install . If you are using an option with a directory path , be sure to DCNL use absolute path . DCNL global _ options DCNL Extra global options to be supplied to the setup.py call before the DCNL install command . DCNL user DCNL The user under which to run pip DCNL no _ chown DCNL When user is given , do not attempt to copy and chown a requirements DCNL file DCNL cwd DCNL Current working directory to run pip from DCNL pre _ releases DCNL Include pre-releases in the available versions DCNL cert DCNL Provide a path to an alternate CA bundle DCNL allow _ all _ external DCNL Allow the installation of all externally hosted files DCNL allow _ external DCNL Allow the installation of externally hosted files ( comma separated DCNL list ) DCNL allow _ unverified DCNL Allow the installation of insecure and unverifiable files ( comma DCNL separated list ) DCNL process _ dependency _ links DCNL Enable the processing of dependency links DCNL env _ vars DCNL Set environment variables that some builds will depend on . For example , DCNL a Python C-module may have a Makefile that needs INCLUDE _ PATH set to DCNL pick up a header file while compiling . This must be in the form of a DCNL dictionary or a mapping . DCNL Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pip.install django _ app env _ vars = &quot; { \ &apos; CUSTOM _ PATH \ &apos; : \ &apos; / opt / django _ app \ &apos; } &quot; DCNL trusted _ host DCNL Mark this host as trusted , even though it does not have valid or any DCNL HTTPS . DCNL use _ vt DCNL Use VT terminal emulation ( see output while installing ) DCNL no _ cache _ dir DCNL Disable the cache . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pip.install &lt; package name &gt; , &lt; package2 name &gt; DCNL salt \ &apos; * \ &apos; pip.install requirements = / path / to / requirements.txt DCNL salt \ &apos; * \ &apos; pip.install &lt; package name &gt; bin _ env = / path / to / virtualenv DCNL salt \ &apos; * \ &apos; pip.install &lt; package name &gt; bin _ env = / path / to / pip _ bin DCNL Complicated CLI example : : DCNL salt \ &apos; * \ &apos; pip.install markdown , django editable = git + https : / / github.com / worldcompany / djangoembed.git # egg = djangoembed upgrade = True no _ deps = True&apos;
&apos;handler for on _ text pyglet events , or call directly to emulate a text DCNL event . DCNL S Mathot 2012 : This function only acts when the key that is pressed DCNL corresponds to a non-ASCII text character ( Greek , Arabic , Hebrew , etc . ) . DCNL In that case the symbol that is passed to _ onPygletKey ( ) is translated DCNL into a useless \ &apos; user _ key ( ) \ &apos; string . If this happens , _ onPygletText takes DCNL over the role of capturing the key . Unfortunately , _ onPygletText ( ) DCNL cannot solely handle all input , because it does not respond to spacebar DCNL presses , etc . &apos; 
&apos;Uploads a set of photos that will be used in the new user welcome conversation . These DCNL photos are uploaded to the given user account . &quot; upload _ request &quot; is in the UPLOAD _ EPISODE _ REQUEST DCNL format in json _ schema.py , except : DCNL 1 . Activity , episode , and photo ids are added by this method . DCNL 2 . Each photo dict must contain an additional &quot; name &quot; field which gives the start of the DCNL filename of a jpg file in the backend / resources / welcome directory . Three files must DCNL exist there , in this format : &lt; name &gt; _ full.jpg , &lt; name &gt; _ med.jpg , &lt; name &gt; _ tn.jpg . &apos; 
&apos;Helper : Get the next or the previous valid date . The idea is to allow DCNL links on month / day views to never be 404s by never providing a date DCNL that \ &apos; ll be invalid for the given view . DCNL This is a bit complicated since it handles different intervals of time , DCNL hence the coupling to generic _ view . DCNL However in essence the logic comes down to : DCNL * If allow _ empty and allow _ future are both true , this is easy : just DCNL return the naive result ( just the next / previous day / week / month , DCNL reguardless of object existence . ) DCNL * If allow _ empty is true , allow _ future is false , and the naive result DCNL isn \ &apos; t in the future , then return it ; otherwise return None . DCNL * If allow _ empty is false and allow _ future is true , return the next DCNL date * that contains a valid object * , even if it \ &apos; s in the future . If DCNL there are no next objects , return None . DCNL * If allow _ empty is false and allow _ future is false , return the next DCNL date that contains a valid object . If that date is in the future , or DCNL if there are no next objects , return None . &apos; 
&apos;Generates antichains from a DAG . DCNL An antichain is a subset of a partially ordered set such that any DCNL two elements in the subset are incomparable . DCNL Parameters DCNL G : NetworkX DiGraph DCNL Graph DCNL Returns DCNL antichain : generator object DCNL Raises DCNL NetworkXNotImplemented DCNL If G is not directed DCNL NetworkXUnfeasible DCNL If G contains a cycle DCNL Notes DCNL This function was originally developed by Peter Jipsen and Franco Saliola DCNL for the SAGE project . It \ &apos; s included in NetworkX with permission from the DCNL authors . Original SAGE code at : DCNL https : / / sage.informatik.uni-goettingen.de / src / combinat / posets / hasse _ diagram.py DCNL References DCNL .. &#91; 1 &#93; Free Lattices , by R. Freese , J. Jezek and J. B. Nation , DCNL AMS , Vol 42 , 1995 , p . 226 . &apos; 
&apos;Return the version of MSVC that was used to build Python . DCNL For Python 2.3 and up , the version number is included in DCNL sys.version. For earlier versions , assume the compiler is MSVC 6 . &apos; 
&apos;更新 local _ cache 中缓存的资源 , 追加content DCNL 在stream模式中使用&apos;
&apos;daemonize a Unix process . Set paranoid umask by default . DCNL Return 1 in the original process , 2 in the first fork , and None for the DCNL second fork ( eg daemon process )  . &apos; 
&apos;Computes a dataset _ id from a blockdevice _ id . DCNL : param unicode blockdevice _ id : The blockdevice _ id to get the dataset _ id DCNL for . DCNL : returns UUID : The corresponding dataset _ id . &apos; 
&apos;Converts a string to a valid filename . &apos; 
&apos;Method to decrypt streams using a PDF security handler ( NOT IMPLEMENTED YET ) DCNL @ param stream : A PDF stream DCNL @ return : A tuple ( status , statusContent ) , where statusContent is the decrypted PDF stream in case status = 0 or an error in case status = -1&apos;
&apos;Uploads a separate patch for each file in the diff output . DCNL Returns a list of &#91; patch _ key , filename &#93; for each file . &apos; 
&apos;Returns the HTML of a css _ selector&apos;
&apos;Delete blobs from Blobstore . DCNL Args : DCNL blob _ keys : A list of blob keys . DCNL * * options : Options for create _ rpc ( )  . &apos; 
&apos;Details about failing check . &apos; 
&apos;Install a previously obtained cert in a server . &apos; 
&apos;Return the path of a base URL if it contains one . DCNL &gt; &gt; &gt; get _ base _ path ( \ &apos; http : / / some.site \ &apos; ) = = \ &apos; / \ &apos; DCNL True DCNL &gt; &gt; &gt; get _ base _ path ( \ &apos; http : / / some.site / \ &apos; ) = = \ &apos; / \ &apos; DCNL True DCNL &gt; &gt; &gt; get _ base _ path ( \ &apos; http : / / some.site / some / sub-path \ &apos; ) = = \ &apos; / some / sub-path / \ &apos; DCNL True DCNL &gt; &gt; &gt; get _ base _ path ( \ &apos; http : / / some.site / some / sub-path / \ &apos; ) = = \ &apos; / some / sub-path / \ &apos; DCNL True&apos;
&apos;Returns True if the two strings are equal , False otherwise . DCNL The time taken is independent of the number of characters that match . &apos; 
&apos;helper to calculate port and bus number from locationID&apos;
&apos;&apos;
&apos;Format sys.version _ info to produce the Sphinx version string used to install the chm docs&apos;
&apos;Returns users queryset , containing all subordinate users to given user DCNL including users created by given user and not assigned to any page . DCNL Not assigned users must be returned , because they shouldn \ &apos; t get lost , and DCNL user should still have possibility to see them . DCNL Only users created _ by given user which are on the same , or lover level are DCNL returned . DCNL If user haves global permissions or is a superuser , then he can see all the DCNL users . DCNL This function is currently used in PagePermissionInlineAdminForm for limit DCNL users in permission combobox . DCNL Example : DCNL A , W level 0 DCNL / user B , GroupE level 1 DCNL Z / C , X D , Y , W level 2 DCNL Rules : W was created by user , Z was created by user , but is not assigned DCNL to any page . DCNL Will return &#91; user , C , X , D , Y , Z &#93; . W was created by user , but is also DCNL assigned to higher level . &apos; 
&apos;Returns a dictionary containing a boolean specifying whether NumPy DCNL is up-to-date , along with the version string ( empty string if DCNL not installed )  . &apos; 
&apos;Point pair triangulation from DCNL least squares solution . &apos; 
&apos;Check if a Portage package is installed . &apos; 
&apos;Make function raise KnownFailureTest exception if given condition is true . DCNL If the condition is a callable , it is used at runtime to dynamically DCNL make the decision . This is useful for tests that may require costly DCNL imports , to delay the cost until the test suite is actually executed . DCNL Parameters DCNL fail _ condition : bool or callable DCNL Flag to determine whether to mark the decorated test as a known DCNL failure ( if True ) or not ( if False ) . DCNL msg : str , optional DCNL Message to give on raising a KnownFailureTest exception . DCNL Default is None . DCNL Returns DCNL decorator : function DCNL Decorator , which , when applied to a function , causes SkipTest DCNL to be raised when `skip _ condition` is True , and the function DCNL to be called normally otherwise . DCNL Notes DCNL The decorator itself is decorated with the ``nose.tools.make _ decorator`` DCNL function in order to transmit function name , and various other metadata . &apos; 
&apos;Delete keypair given by its name . &apos; 
&apos;Parse RFC 822 dates and times DCNL http : / / tools.ietf.org / html / rfc822 # section-5 DCNL There are some formatting differences that are accounted for : DCNL 1 . Years may be two or four digits . DCNL 2 . The month and day can be swapped . DCNL 3 . Additional timezone names are supported . DCNL 4 . A default time and timezone are assumed if only a date is present . &apos; 
&apos;Returns initializer that initializes array with the all-zero array . DCNL Args : DCNL dtype : Data type specifier . DCNL Returns : DCNL numpy.ndarray or cupy.ndarray : An initialized array . &apos; 
&apos;Interpolate unstructured D-dimensional data . DCNL Parameters DCNL points : ndarray of floats , shape ( n , D ) DCNL Data point coordinates . Can either be an array of DCNL shape ( n , D ) , or a tuple of `ndim` arrays . DCNL values : ndarray of float or complex , shape ( n , ) DCNL Data values . DCNL xi : ndarray of float , shape ( M , D ) DCNL Points at which to interpolate data . DCNL method : { \ &apos; linear \ &apos; , \ &apos; nearest \ &apos; , \ &apos; cubic \ &apos; } , optional DCNL Method of interpolation . One of DCNL ``nearest`` DCNL return the value at the data point closest to DCNL the point of interpolation . See `NearestNDInterpolator` for DCNL more details . DCNL ``linear`` DCNL tesselate the input point set to n-dimensional DCNL simplices , and interpolate linearly on each simplex . See DCNL `LinearNDInterpolator` for more details . DCNL ``cubic`` ( 1-D ) DCNL return the value determined from a cubic DCNL spline . DCNL ``cubic`` ( 2-D ) DCNL return the value determined from a DCNL piecewise cubic , continuously differentiable ( C1 ) , and DCNL approximately curvature-minimizing polynomial surface . See DCNL `CloughTocher2DInterpolator` for more details . DCNL fill _ value : float , optional DCNL Value used to fill in for requested points outside of the DCNL convex hull of the input points . If not provided , then the DCNL default is ``nan`` . This option has no effect for the DCNL \ &apos; nearest \ &apos; method . DCNL rescale : bool , optional DCNL Rescale points to unit cube before performing interpolation . DCNL This is useful if some of the input dimensions have DCNL incommensurable units and differ by many orders of magnitude . DCNL .. versionadded : : 0.14.0 DCNL Notes DCNL .. versionadded : : 0.9 DCNL Examples DCNL Suppose we want to interpolate the 2-D function DCNL &gt; &gt; &gt; def func ( x , y ) : DCNL ... return x * ( 1-x ) * np.cos ( 4 * np.pi * x ) * np.sin ( 4 * np.pi * y * * 2 ) * * 2 DCNL on a grid in &#91; 0 , 1 &#93; x &#91; 0 , 1 &#93; DCNL &gt; &gt; &gt; grid _ x , grid _ y = np.mgrid &#91; 0 : 1 : 100j , 0 : 1 : 200j &#93; DCNL but we only know its values at 1000 data points : DCNL &gt; &gt; &gt; points = np.random.rand ( 1000 , 2 ) DCNL &gt; &gt; &gt; values = func ( points &#91; : , 0 &#93; , points &#91; : , 1 &#93; ) DCNL This can be done with `griddata` -- below we try out all of the DCNL interpolation methods : DCNL &gt; &gt; &gt; from scipy.interpolate import griddata DCNL &gt; &gt; &gt; grid _ z0 = griddata ( points , values , ( grid _ x , grid _ y ) , method = \ &apos; nearest \ &apos; ) DCNL &gt; &gt; &gt; grid _ z1 = griddata ( points , values , ( grid _ x , grid _ y ) , method = \ &apos; linear \ &apos; ) DCNL &gt; &gt; &gt; grid _ z2 = griddata ( points , values , ( grid _ x , grid _ y ) , method = \ &apos; cubic \ &apos; ) DCNL One can see that the exact result is reproduced by all of the DCNL methods to some degree , but for this smooth function the piecewise DCNL cubic interpolant gives the best results : DCNL &gt; &gt; &gt; import matplotlib.pyplot as plt DCNL &gt; &gt; &gt; plt.subplot ( 221 ) DCNL &gt; &gt; &gt; plt.imshow ( func ( grid _ x , grid _ y ) .T , extent = ( 0,1,0,1 ) , origin = \ &apos; lower \ &apos; ) DCNL &gt; &gt; &gt; plt.plot ( points &#91; : , 0 &#93; , points &#91; : , 1 &#93; , \ &apos; k . \ &apos; , ms = 1 ) DCNL &gt; &gt; &gt; plt.title ( \ &apos; Original \ &apos; ) DCNL &gt; &gt; &gt; plt.subplot ( 222 ) DCNL &gt; &gt; &gt; plt.imshow ( grid _ z0.T , extent = ( 0,1,0,1 ) , origin = \ &apos; lower \ &apos; ) DCNL &gt; &gt; &gt; plt.title ( \ &apos; Nearest \ &apos; ) DCNL &gt; &gt; &gt; plt.subplot ( 223 ) DCNL &gt; &gt; &gt; plt.imshow ( grid _ z1.T , extent = ( 0,1,0,1 ) , origin = \ &apos; lower \ &apos; ) DCNL &gt; &gt; &gt; plt.title ( \ &apos; Linear \ &apos; ) DCNL &gt; &gt; &gt; plt.subplot ( 224 ) DCNL &gt; &gt; &gt; plt.imshow ( grid _ z2.T , extent = ( 0,1,0,1 ) , origin = \ &apos; lower \ &apos; ) DCNL &gt; &gt; &gt; plt.title ( \ &apos; Cubic \ &apos; ) DCNL &gt; &gt; &gt; plt.gcf ( ) .set _ size _ inches ( 6 , 6 ) DCNL &gt; &gt; &gt; plt.show ( ) &apos;
&apos;match ( string , trie ) - &gt; longest key or None DCNL Find the longest key in the trie that matches the beginning of the DCNL string . &apos; 
&apos;Attempt to remove a file , returning whether the file existed at DCNL the time of the call . DCNL str - &gt; bool&apos;
&apos;If \ &apos; key \ &apos; is present in dict \ &apos; kw \ &apos; , coerce its value to type \ &apos; type \ _ \ &apos; if DCNL necessary . If \ &apos; flexi _ bool \ &apos; is True , the string \ &apos; 0 \ &apos; is considered false DCNL when coercing to boolean . &apos; 
&apos;Test right processing while passing no object as initialization&apos;
&apos;Like string.split ( ) , but keeps empty words as empty words . &apos; 
&apos;Test that setting mean _ only on a BatchNormalizedMLP works . &apos; 
&apos;Wrap a given boto Connection object so that it can retry when DCNL throttled . &apos; 
&apos;Test that a table round trips from QTable = &gt; Table = &gt; QTable&apos;
&apos;Compute the transformation matrix from Galactic spherical to DCNL heliocentric Sgr coordinates . &apos; 
&apos;Return a constructor for a decoder for a fixed-width field . DCNL Args : DCNL wire _ type : The field \ &apos; s wire type . DCNL format : The format string to pass to struct.unpack ( )  . &apos; 
&apos;return the rows that are being displayed and the total rows in the dataTable&apos;
&apos;Calculate the pagerank vector of a given adjacency matrix ( using DCNL the power method ) . DCNL : param matrix : an adjacency matrix DCNL : param d _ factor : the damping factor&apos;
&apos;登录获取 cookie&apos;
&apos;This function returns a Pyramid WSGI application . &apos; 
&apos;Determine if a point is inside another loop . &apos; 
&apos;Creates a Student Record and returns a Program Enrollment . DCNL : param source _ name : Student Applicant . &apos; 
&apos;Listify the generator returned by fill _ gaps _ generator for `memoize` . &apos; 
&apos;Use the REST API to search for past tweets by a given user . &apos; 
&apos;This op do a view in the forward , but clip the gradient . DCNL This is an elemwise operation . DCNL : param x : the variable we want its gradient inputs clipped DCNL : param lower _ bound : The lower bound of the gradient value DCNL : param upper _ bound : The upper bound of the gradient value . DCNL : examples : DCNL x = theano.tensor.scalar ( ) DCNL z = theano.tensor.grad ( grad _ clip ( x , -1 , 1 ) * * 2 , x ) DCNL z2 = theano.tensor.grad ( x * * 2 , x ) DCNL f = theano.function ( &#91; x &#93; , outputs = &#91; z , z2 &#93; ) DCNL print ( f ( 2.0 ) ) # output ( 1.0 , 4.0 ) DCNL : note : We register an opt in tensor / opt.py that remove the GradClip . DCNL So it have 0 cost in the forward and only do work in the grad . &apos; 
&apos;Retrieve a list of TopoJSON tile responses and merge them into one . DCNL get _ tiles ( ) retrieves data and performs basic integrity checks . &apos; 
&apos;Return the script deployment object&apos;
&apos;Helper for parallelization . DCNL Parameters DCNL refl : array &#124; None DCNL If ch _ type is \ &apos; eeg \ &apos; , the magnitude of position vector of the DCNL virtual reference ( never used ) . DCNL lsurf : array DCNL Magnitude of position vector of the surface points . DCNL rlens : list of arrays of length n _ coils DCNL Magnitude of position vector . DCNL this _ nn : array , shape ( n _ vertices , 3 ) DCNL Surface normals . DCNL cosmags : list of array . DCNL Direction of the integration points in the coils . DCNL ws : list of array DCNL Integration weights of the coils . DCNL volume : bool DCNL If True , compute volume integral . DCNL lut : callable DCNL Look-up table for evaluating Legendre polynomials . DCNL n _ fact : array DCNL Coefficients in the integration sum . DCNL ch _ type : str DCNL \ &apos; meg \ &apos; or \ &apos; eeg \ &apos; DCNL idx : array , shape ( n _ coils x 1 ) DCNL Index of coil . DCNL Returns DCNL products : array , shape ( n _ coils , n _ coils ) DCNL The integration products . &apos; 
&apos;Compute ``f * * n`` in ``GF ( p ) &#91; x &#93; / ( g ) `` using repeated squaring . DCNL Given polynomials ``f`` and ``g`` in ``GF ( p ) &#91; x &#93; `` and a non-negative DCNL integer ``n`` , efficiently computes ``f * * n ( mod g ) `` i.e. the remainder DCNL of ``f * * n`` from division by ``g`` , using the repeated squaring algorithm . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.galoistools import gf _ pow _ mod DCNL &gt; &gt; &gt; gf _ pow _ mod ( ZZ.map ( &#91; 3 , 2 , 4 &#93; ) , 3 , ZZ.map ( &#91; 1 , 1 &#93; ) , 5 , ZZ ) DCNL References DCNL 1 . &#91; Gathen99 &#93; _ &apos;
&apos;Given two binary arrays , compute their overlap . The overlap is the number DCNL of bits where x &#91; i &#93; and y &#91; i &#93; are both 1&apos;
&apos;List a specific job given by its jid DCNL ext _ source DCNL If provided , specifies which external job cache to use . DCNL display _ progress : False DCNL If ``True`` , fire progress events . DCNL .. versionadded : : 2015.8.8 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-run jobs.list _ job 20130916125524463507 DCNL salt-run jobs.list _ job 20130916125524463507 --out = pprint&apos;
&apos;A helper for defining choice string options . &apos; 
&apos;Returns True if any of the installed versions match the specified version , DCNL otherwise returns False&apos;
&apos;List configured exports DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nfs.list _ exports&apos;
&apos;Ensure that the directory is available and permissions are set . DCNL Args : DCNL path ( str ) : The full path to the directory . DCNL owner ( str ) : The owner of the directory . If not passed , it will be the DCNL account that created the directory , likely SYSTEM DCNL grant _ perms ( dict ) : A dictionary containing the user / group and the basic DCNL permissions to grant , ie : `` { \ &apos; user \ &apos; : { \ &apos; perms \ &apos; : \ &apos; basic _ permission \ &apos; } } `` . DCNL You can also set the ``applies _ to`` setting here . The default is DCNL ``this _ folder _ subfolders _ files`` . Specify another ``applies _ to`` setting DCNL like this : DCNL .. code-block : : yaml DCNL { \ &apos; user \ &apos; : { \ &apos; perms \ &apos; : \ &apos; full _ control \ &apos; , \ &apos; applies _ to \ &apos; : \ &apos; this _ folder \ &apos; } } DCNL To set advanced permissions use a list for the ``perms`` parameter , ie : DCNL .. code-block : : yaml DCNL { \ &apos; user \ &apos; : { \ &apos; perms \ &apos; : &#91; \ &apos; read _ attributes \ &apos; , \ &apos; read _ ea \ &apos; &#93; , \ &apos; applies _ to \ &apos; : \ &apos; this _ folder \ &apos; } } DCNL deny _ perms ( dict ) : A dictionary containing the user / group and DCNL permissions to deny along with the ``applies _ to`` setting . Use the same DCNL format used for the ``grant _ perms`` parameter . Remember , deny DCNL permissions supersede grant permissions . DCNL inheritance ( bool ) : If True the object will inherit permissions from the DCNL parent , if False , inheritance will be disabled . Inheritance setting will DCNL not apply to parent directories if they must be created DCNL Returns : DCNL bool : True if successful , otherwise raise an error DCNL CLI Example : DCNL .. code-block : : bash DCNL # To grant the \ &apos; Users \ &apos; group \ &apos; read &amp; execute \ &apos; permissions . DCNL salt \ &apos; * \ &apos; file.mkdir C : \ Temp \ Administrators &quot; { \ &apos; Users \ &apos; : { \ &apos; perms \ &apos; : \ &apos; read _ execute \ &apos; } } &quot; DCNL # Locally using salt call DCNL salt-call file.mkdir C : \ Temp \ Administrators &quot; { \ &apos; Users \ &apos; : { \ &apos; perms \ &apos; : \ &apos; read _ execute \ &apos; , \ &apos; applies _ to \ &apos; : \ &apos; this _ folder _ only \ &apos; } } &quot; DCNL # Specify advanced attributes with a list DCNL salt \ &apos; * \ &apos; file.mkdir C : \ Temp \ Administrators &quot; { \ &apos; jsnuffy \ &apos; : { \ &apos; perms \ &apos; : &#91; \ &apos; read _ attributes \ &apos; , \ &apos; read _ ea \ &apos; &#93; , \ &apos; applies _ to \ &apos; : \ &apos; this _ folder _ only \ &apos; } } &quot; &apos;
&apos;List all subscriptions for a project . &apos; 
&apos;Returns the indefinite or definite article for the given word . &apos; 
&apos;Handler for notify _ url for asynchronous updating billing information . DCNL Logging the information . &apos; 
&apos;Convert b to a boolean or raise&apos;
&apos;Different ways of providing the frame . &apos; 
&apos;Returns n bytes of strong random data . &apos; 
&apos;Only returns true if accessing _ obj has _ player is true , that is , DCNL this is a player-controlled object . It fails on actual players ! DCNL This is a useful lock for traverse-locking Exits to restrain NPC DCNL mobiles from moving outside their areas . &apos; 
&apos;Called by _ _ init _ _ to initialize generator values based on params . &apos; 
&apos;Test adding a reference . &apos; 
&apos;non-strided&apos;
&apos;Return a list of mocked presets . &apos; 
&apos;Unittest runner&apos;
&apos;toggle data register D5 bit&apos;
&apos;Checks a file is executable&apos;
&apos;Ensure the state of a particular option / setting in csf . DCNL name DCNL The option name in csf.conf DCNL value DCNL The value it should be set to . DCNL reload DCNL Boolean . If set to true , csf will be reloaded after . &apos; 
&apos;Simplest possible application object&apos;
&apos;Attach total of point values to each object of the queryset . DCNL : param queryset : A Django milestones queryset object . DCNL : param as _ field : Attach the points as an attribute with this name . DCNL : return : Queryset object with the additional `as _ field` field . &apos; 
&apos;Create an IIS virtual directory . DCNL .. note : DCNL This function only validates against the virtual directory name , and will return DCNL True even if the virtual directory already exists with a different configuration . DCNL It will not modify the configuration of an existing virtual directory . DCNL : param str name : The virtual directory name . DCNL : param str site : The IIS site name . DCNL : param str sourcepath : The physical path . DCNL : param str app : The IIS application . DCNL Example of usage with only the required arguments : DCNL .. code-block : : yaml DCNL site0-foo-vdir : DCNL win _ iis.create _ vdir : DCNL - name : foo DCNL - site : site0 DCNL - sourcepath : C : \ inetpub \ vdirs \ foo DCNL Example of usage specifying all available arguments : DCNL .. code-block : : yaml DCNL site0-foo-vdir : DCNL win _ iis.create _ vdir : DCNL - name : foo DCNL - site : site0 DCNL - sourcepath : C : \ inetpub \ vdirs \ foo DCNL - app : v1&apos;
&apos;Extra arguments to use when zipline \ &apos; s automated tests run this example . &apos; 
&apos;Spawn an emulator instance and run the system tests . DCNL : type package : str DCNL : param package : The package to run system tests against . &apos; 
&apos;Test hsl to rgb color function&apos;
&apos;Return a NetworkX Graph or DiGraph from a PyGraphviz graph . DCNL Parameters DCNL A : PyGraphviz AGraph DCNL A graph created with PyGraphviz DCNL create _ using : NetworkX graph class instance DCNL The output is created using the given graph class instance DCNL Examples DCNL &gt; &gt; &gt; K5 = nx.complete _ graph ( 5 ) DCNL &gt; &gt; &gt; A = nx.nx _ agraph.to _ agraph ( K5 ) DCNL &gt; &gt; &gt; G = nx.nx _ agraph.from _ agraph ( A ) DCNL &gt; &gt; &gt; G = nx.nx _ agraph.from _ agraph ( A ) DCNL Notes DCNL The Graph G will have a dictionary G.graph _ attr containing DCNL the default graphviz attributes for graphs , nodes and edges . DCNL Default node attributes will be in the dictionary G.node _ attr DCNL which is keyed by node . DCNL Edge attributes will be returned as edge data in G. With DCNL edge _ attr = False the edge data will be the Graphviz edge weight DCNL attribute or the value 1 if no edge weight attribute is found . &apos; 
&apos;Test Filter Tool&apos;
&apos;Toggle the state of &lt; flag &gt; on &lt; partition &gt; . Valid flags are the same as DCNL the set command . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; partition.toggle / dev / sda 1 boot&apos;
&apos;Parses svn + http : / / blahblah @ rev # egg = Foobar into a requirement DCNL ( Foobar ) and a URL&apos;
&apos;Process the xml element by derivation . &apos; 
&apos;Applies a filter on a sequence of objects or looks up an attribute . DCNL This is useful when dealing with lists of objects but you are really DCNL only interested in a certain value of it . DCNL The basic usage is mapping on an attribute . Imagine you have a list DCNL of users but you are only interested in a list of usernames : DCNL .. sourcecode : : jinja DCNL Users on this page : { { users &#124; map ( attribute = \ &apos; username \ &apos; ) &#124; join ( \ &apos; , \ &apos; ) } } DCNL Alternatively you can let it invoke a filter by passing the name of the DCNL filter and the arguments afterwards . A good example would be applying a DCNL text conversion filter on a sequence : DCNL .. sourcecode : : jinja DCNL Users on this page : { { titles &#124; map ( \ &apos; lower \ &apos; ) &#124; join ( \ &apos; , \ &apos; ) } } DCNL .. versionadded : : 2.7&apos;
&apos;Non-subparser setups should receive a default root key called \ &apos; primary \ &apos; &apos;
&apos;Test that an input file which is completely empty fails in the expected way . DCNL Test that an input file with one line but no newline succeeds . &apos; 
&apos;Flood Gauges , RESTful controller&apos;
&apos;Deletes image data from the location of backend store . DCNL : param req : The WSGI / Webob Request object DCNL : param location _ data : Location to the image data in a data store DCNL : param id : Opaque image identifier&apos;
&apos;Convert a pd.Timedelta to a number of minutes as an int . &apos; 
&apos; .. versionchanged : : 2015.8.12,2016.3.3,2016.11.0 DCNL On minions running systemd &gt; = 205 , `systemd-run ( 1 ) ` _ is now used to DCNL isolate commands which modify installed packages from the DCNL ``salt-minion`` daemon \ &apos; s control group . This is done to keep systemd DCNL from killing any apt-get / dpkg commands spawned by Salt when the DCNL ``salt-minion`` service is restarted . ( see ``KillMode`` in the DCNL `systemd.kill ( 5 ) ` _ manpage for more information ) . If desired , usage of DCNL `systemd-run ( 1 ) ` _ can be suppressed by setting a : mod : `config option DCNL &lt; salt.modules.config.get &gt; ` called ``systemd.scope`` , with a value of DCNL ``False`` ( no quotes ) . DCNL .. _ `systemd-run ( 1 ) ` : https : / / www.freedesktop.org / software / systemd / man / systemd-run.html DCNL .. _ `systemd.kill ( 5 ) ` : https : / / www.freedesktop.org / software / systemd / man / systemd.kill.html DCNL Remove packages via ``apt-get purge`` along with all configuration files . DCNL name DCNL The name of the package to be deleted . DCNL Multiple Package Options : DCNL pkgs DCNL A list of packages to delete . Must be passed as a python list . The DCNL ``name`` parameter will be ignored if this option is passed . DCNL .. versionadded : : 0.16.0 DCNL Returns a dict containing the changes . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.purge &lt; package name &gt; DCNL salt \ &apos; * \ &apos; pkg.purge &lt; package1 &gt; , &lt; package2 &gt; , &lt; package3 &gt; DCNL salt \ &apos; * \ &apos; pkg.purge pkgs = \ &apos; &#91; &quot; foo &quot; , &quot; bar &quot; &#93; \ &apos; &apos;
&apos;Helper method for defining parse actions that require matching at a specific DCNL column in the input text . &apos; 
&apos;Return true if the variable is odd . &apos; 
&apos;List the keys available&apos;
&apos;Returns a dictionary indexed by node id1 \ &apos; s , DCNL in which each value is a dictionary of connected node id2 \ &apos; s linking to the edge weight . DCNL If directed = True , edges go from id1 to id2 , but not the other way . DCNL If stochastic = True , all the weights for the neighbors of a given node sum to 1 . DCNL A heuristic function can be given that takes two node id \ &apos; s and returns DCNL an additional cost for movement between the two nodes . &apos; 
&apos;Return a list of `` ( name , level ) `` tuples for assigned names DCNL The `level` is `None` for simple assignments and is a list of DCNL numbers for tuple assignments for example in : : DCNL a , ( b , c ) = x DCNL The levels for for `a` is `` &#91; 0 &#93; `` , for `b` is `` &#91; 1 , 0 &#93; `` and for DCNL `c` is `` &#91; 1 , 1 &#93; `` . &apos; 
&apos;Return the conditional entropy of X given Y. DCNL Parameters DCNL px : array-like DCNL py : array-like DCNL pxpy : array-like , optional DCNL If pxpy is None , the distributions are assumed to be independent DCNL and conendtropy ( px , py ) = shannonentropy ( px ) DCNL logbase : int or np.e DCNL Returns DCNL sum _ { kj } log ( q _ { j } / w _ { kj } DCNL where q _ { j } = Y &#91; j &#93; DCNL and w _ kj = X &#91; k , j &#93; &apos;
&apos;Decorator to create a task class out of any callable . DCNL * * Examples * * DCNL .. code-block : : python DCNL @ task DCNL def refresh _ feed ( url ) : DCNL return Feed.objects.get ( url = url ) .refresh ( ) DCNL With setting extra options and using retry . DCNL .. code-block : : python DCNL @ task ( max _ retries = 10 ) DCNL def refresh _ feed ( url ) : DCNL try : DCNL return Feed.objects.get ( url = url ) .refresh ( ) DCNL except socket.error , exc : DCNL refresh _ feed.retry ( exc = exc ) DCNL Calling the resulting task : DCNL &gt; &gt; &gt; refresh _ feed ( &quot; http : / / example.com / rss &quot; ) # Regular DCNL &lt; Feed : http : / / example.com / rss &gt; DCNL &gt; &gt; &gt; refresh _ feed.delay ( &quot; http : / / example.com / rss &quot; ) # Async DCNL &lt; AsyncResult : 8998d0f4-da0b-4669-ba03-d5ab5ac6ad5d &gt; &apos;
&apos;Check image availability . DCNL This check is needed in case Nova and Glance are deployed DCNL without authentication turned on . &apos; 
&apos;Publishes the exploration with publish _ exploration ( ) function in DCNL rights _ manager.py , as well as updates first _ contribution _ msec . DCNL It is the responsibility of the caller to check that the exploration is DCNL valid prior to publication . &apos; 
&apos;Subsamples the input along the spatial dimensions . DCNL Args : DCNL inputs : A `Tensor` of size &#91; batch , height _ in , width _ in , channels &#93; . DCNL factor : The subsampling factor . DCNL scope : Optional variable _ scope . DCNL Returns : DCNL output : A `Tensor` of size &#91; batch , height _ out , width _ out , channels &#93; with the DCNL input , either intact ( if factor = = 1 ) or subsampled ( if factor &gt; 1 )  . &apos; 
&apos;Returns an invite form . DCNL Templates : ``groups / group _ invite.html`` DCNL Context : DCNL form DCNL GroupInviteForm object&apos;
&apos;Strip a list of files&apos;
&apos;replace each Riemann tensor with an equivalent expression DCNL satisfying the cyclic identity . DCNL This trick is discussed in the reference guide to Cadabra . DCNL Examples DCNL &gt; &gt; &gt; from sympy.tensor.tensor import TensorIndexType , tensor _ indices , tensorhead , riemann _ cyclic DCNL &gt; &gt; &gt; Lorentz = TensorIndexType ( \ &apos; Lorentz \ &apos; , dummy _ fmt = \ &apos; L \ &apos; ) DCNL &gt; &gt; &gt; i , j , k , l = tensor _ indices ( \ &apos; i , j , k , l \ &apos; , Lorentz ) DCNL &gt; &gt; &gt; R = tensorhead ( \ &apos; R \ &apos; , &#91; Lorentz &#93; * 4 , &#91; &#91; 2 , 2 &#93; &#93; ) DCNL &gt; &gt; &gt; t = R ( i , j , k , l ) * ( R ( -i , -j , -k , -l ) - 2 * R ( -i , -k , -j , -l ) ) DCNL &gt; &gt; &gt; riemann _ cyclic ( t ) DCNL 0&apos;
&apos;Sanitize html _ code for safe embed on LMS pages . DCNL Used to sanitize XQueue responses from Matlab . &apos; 
&apos;Reads the object from the local cache using pickle . DCNL The local cache is per tex document and the path will extracted DCNL from the tex root DCNL Arguments : DCNL tex _ root -- the root of the tex file ( for the folder of the cache ) DCNL name -- the relative file name to read the object DCNL Returns : DCNL The object at the location with the name&apos;
&apos;Combine regions separated by weight less than threshold . DCNL Given an image \ &apos; s labels and its RAG , output new labels by DCNL combining regions whose nodes are separated by a weight less DCNL than the given threshold . DCNL Parameters DCNL labels : ndarray DCNL The array of labels . DCNL rag : RAG DCNL The region adjacency graph . DCNL thresh : float DCNL The threshold . Regions connected by edges with smaller weights are DCNL combined . DCNL in _ place : bool DCNL If set , modifies `rag` in place . The function will remove the edges DCNL with weights less that `thresh` . If set to `False` the function DCNL makes a copy of `rag` before proceeding . DCNL Returns DCNL out : ndarray DCNL The new labelled array . DCNL Examples DCNL &gt; &gt; &gt; from skimage import data , segmentation DCNL &gt; &gt; &gt; from skimage.future import graph DCNL &gt; &gt; &gt; img = data.astronaut ( ) DCNL &gt; &gt; &gt; labels = segmentation.slic ( img ) DCNL &gt; &gt; &gt; rag = graph.rag _ mean _ color ( img , labels ) DCNL &gt; &gt; &gt; new _ labels = graph.cut _ threshold ( labels , rag , 10 ) DCNL References DCNL .. &#91; 1 &#93; Alain Tremeau and Philippe Colantoni DCNL &quot; Regions Adjacency Graph Applied To Color Image Segmentation &quot; DCNL http : / / citeseerx.ist.psu.edu / viewdoc / summary ? doi = 10.1.1.11.5274&apos;
&apos;Add a leader to the group . &apos; 
&apos;Show a contribution box . DCNL Parameters : DCNL addon DCNL text : The begging text at the top of the box . DCNL src : The page where the contribution link is coming from . DCNL show _ install : Whether or not to show the install button . DCNL show _ help : Show &quot; What \ &apos; s this ? &quot; link ? DCNL contribution _ src : The source for the contribution src , DCNL will use src if not provided . &apos; 
&apos;Returns the kinetic energy associated with the given velocity DCNL and mass of 1 . DCNL Parameters DCNL vel : theano matrix DCNL Symbolic matrix whose rows are velocity vectors . DCNL Returns DCNL return : theano vector DCNL Vector whose i-th entry is the kinetic entry associated with vel &#91; i &#93;  . &apos; 
&apos;Return JSON of location hierarchy suitable for use by S3LocationSelector DCNL \ &apos; / eden / gis / ldata / \ &apos; + id DCNL n = { id : { \ &apos; n \ &apos; : name , DCNL \ &apos; l \ &apos; : level , DCNL \ &apos; f \ &apos; : parent , DCNL \ &apos; b \ &apos; : &#91; lon _ min , lat _ min , lon _ max , lat _ max &#93; &apos;
&apos;Delete an instance type . &apos; 
&apos;Converts a url into a made-up module name by doing the following : DCNL * Extract just the path name ignoring querystrings DCNL * Trimming off the initial / DCNL * Trimming off the file extension DCNL * Removes off useless folder prefixes DCNL e.g. http : / / google.com / js / v1.0 / foo / bar / baz.js - &gt; foo / bar / baz&apos;
&apos;Contextmanager that installs the trap app . DCNL The trap means that anything trying to use the current or default app DCNL will raise an exception . &apos; 
&apos;Cache of settings.LANGUAGES in an OrderedDict for easy lookups by key . &apos; 
&apos; &gt; &gt; &gt; is _ clean _ uri ( &quot; ABC ! &quot; ) DCNL True DCNL &gt; &gt; &gt; is _ clean _ uri ( u &quot; ABC ! &quot; ) DCNL True DCNL &gt; &gt; &gt; is _ clean _ uri ( &quot; ABC &#124; &quot; ) DCNL False DCNL &gt; &gt; &gt; is _ clean _ uri ( u &quot; ABC &#124; &quot; ) DCNL False DCNL &gt; &gt; &gt; is _ clean _ uri ( &quot; http : / / example.com / 0 &quot; ) DCNL True DCNL &gt; &gt; &gt; is _ clean _ uri ( u &quot; http : / / example.com / 0 &quot; ) DCNL True&apos;
&apos;Builds C3D model DCNL Returns DCNL dict DCNL A dictionary containing the network layers , where the output layer is at key \ &apos; prob \ &apos; &apos;
&apos;Return the ssh _ interface type to connect to . Either \ &apos; public _ ips \ &apos; ( default ) DCNL or \ &apos; private _ ips \ &apos;  . &apos; 
&apos;Returns the Tenancy to use . DCNL Can be &quot; dedicated &quot; or &quot; default &quot; . Cannot be present for spot instances . &apos; 
&apos;Operation for efficiently calculating the dot product when DCNL one or all operands are sparse . Supported formats are CSC and CSR . DCNL The output of the operation is sparse . DCNL Parameters DCNL x DCNL Sparse matrix . DCNL y DCNL Sparse matrix or 2d tensor variable . DCNL grad _ preserves _ dense : bool DCNL If True ( default ) , makes the grad of dense inputs dense . DCNL Otherwise the grad is always sparse . DCNL Returns DCNL The dot product `x`.`y` in a sparse format . DCNL Notex DCNL The grad implemented is regular , i.e. not structured . &apos; 
&apos;Traverse the options and parse all --map-TYPEs , or call Option.fatal ( )  . &apos; 
&apos;The user should call these functions : parse _ xmlrpc and build _ xmlrpc . DCNL : param xml _ string : The original XML string that we got from the browser . DCNL : return : A handler that can then be used to access the result information DCNL from : DCNL - handler.fuzzable _ parameters DCNL - handler.all _ parameters DCNL - handler.get _ data _ container&apos;
&apos;Get the release number of the distribution . DCNL Example : : DCNL from fabtools.system import distrib _ id , distrib _ release DCNL if distrib _ id ( ) = = \ &apos; CentOS \ &apos; and distrib _ release ( ) = = \ &apos; 6.1 \ &apos; : DCNL print ( u &quot; CentOS 6.2 has been released . Please upgrade . &quot; ) &apos;
&apos;Return tha total of memberships of a project ( members and unaccepted invitations ) . DCNL : param project : A project object . DCNL : return : a number . &apos; 
&apos;Fit the provided functrion to the x and y values . DCNL The function parameters and the parameters covariance . &apos; 
&apos;Make arrays indexable for cross-validation . DCNL Checks consistent length , passes through None , and ensures that everything DCNL can be indexed by converting sparse matrices to csr and converting DCNL non-interable objects to arrays . DCNL Parameters DCNL * iterables : lists , dataframes , arrays , sparse matrices DCNL List of objects to ensure sliceability . &apos; 
&apos;Section search DCNL Queries with query ``q`` across all documents and projects . Queries can be DCNL limited to a single project or version by using the ``project`` and DCNL ``version`` GET arguments in your request . DCNL When you search , you will have a ``project`` facet , which includes the DCNL number of matching sections per project . When you search inside a project , DCNL the ``path`` facet will show the number of matching sections per page . DCNL Possible GET args DCNL q * * ( required ) * * DCNL The query string * * Required * * DCNL project DCNL A project slug DCNL version DCNL A version slug DCNL path DCNL A file path slug DCNL Example : : DCNL GET / api / v2 / search / section / ? q = virtualenv &amp; project = django&apos;
&apos;Remove non release groups from name&apos;
&apos;Filename or file object ? &apos;
&apos;Returns the Requests tuple auth for a given url from netrc . &apos; 
&apos;Create a temporary file name which should not already exist . Use the DCNL directory of the input file as the base name of the mkstemp ( ) output . &apos; 
&apos;Displays text with line numbers . &apos; 
&apos;Return the name of the current Linux distribution , as a human-readable DCNL string . DCNL If * pretty * is false , the name is returned without version or codename . DCNL ( e.g. &quot; CentOS Linux &quot; ) DCNL If * pretty * is true , the version and codename are appended . DCNL ( e.g. &quot; CentOS Linux 7.1.1503 ( Core ) &quot; ) DCNL * * Lookup hierarchy : * * DCNL The name is obtained from the following sources , in the specified order . DCNL The first available and non-empty value is used : DCNL * If * pretty * is false : DCNL - the value of the &quot; NAME &quot; attribute of the os-release file , DCNL - the value of the &quot; Distributor ID &quot; attribute returned by the lsb _ release DCNL command , DCNL - the value of the &quot; &lt; name &gt; &quot; field of the distro release file . DCNL * If * pretty * is true : DCNL - the value of the &quot; PRETTY _ NAME &quot; attribute of the os-release file , DCNL - the value of the &quot; Description &quot; attribute returned by the lsb _ release DCNL command , DCNL - the value of the &quot; &lt; name &gt; &quot; field of the distro release file , appended DCNL with the value of the pretty version ( &quot; &lt; version _ id &gt; &quot; and &quot; &lt; codename &gt; &quot; DCNL fields ) of the distro release file , if available . &apos; 
&apos;Always use logging.Logger class . DCNL The user code may change the loggerClass ( e.g. pyinotify ) , DCNL and will cause exception when format log message . &apos; 
&apos;&apos;
&apos;Get this matrix multiplied by the otherColumn . &apos; 
&apos;Get the fabmetheus utilities directory path . &apos; 
&apos;Simple view to echo back info about uploaded files for tests . &apos; 
&apos;Makes a pre-connect version of socket.connect&apos;
&apos;A version of Python \ &apos; s urllib.quote _ plus ( ) function that can operate on DCNL unicode strings . The url is first UTF-8 encoded before quoting . The DCNL returned string can safely be used as part of an argument to a subsequent DCNL iri _ to _ uri ( ) call without double-quoting occurring . &apos; 
&apos;A helper function to create a mock to replace the use of `open` . It works DCNL for `open` called directly or used as a context manager . DCNL The `mock` argument is the mock object to configure . If `None` ( the DCNL default ) then a `MagicMock` will be created for you , with the API limited DCNL to methods or attributes available on standard file handles . DCNL `read _ data` is a string for the `read` methoddline` , and `readlines` of the DCNL file handle to return . This is an empty string by default . &apos; 
&apos;Parse a date string that contains no time information in a manner that DCNL guarantees that the month and year are always correct in all timezones , and DCNL the day is at most one day wrong . &apos; 
&apos;From `tableaux` and `bases` , extract non-slack basic variables and DCNL return a tuple of the corresponding , normalized mixed actions . DCNL Parameters DCNL tableaux : tuple ( ndarray ( float , ndim = 2 ) ) DCNL Tuple of two arrays containing the tableaux , of shape ( n , m + n + 1 ) DCNL and ( m , m + n + 1 ) , respectively . DCNL bases : tuple ( ndarray ( int , ndim = 1 ) ) DCNL Tuple of two arrays containing the bases , of shape ( n , ) and DCNL ( m , ) , respectively . DCNL Returns DCNL tuple ( ndarray ( float , ndim = 1 ) ) DCNL Tuple of mixed actions as given by the non-slack basic variables DCNL in the tableaux . &apos; 
&apos;Make jail ``jname`` pkgng aware DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; poudriere.make _ pkgng _ aware &lt; jail name &gt; &apos;
&apos;This device is having its own devices downloaded&apos;
&apos;Reads a dictionary of the current user \ &apos; s tokens from the datastore . DCNL If there is no current user ( a user is not signed in to the app ) or the user DCNL does not have any tokens , an empty dictionary is returned . &apos; 
&apos;Modify an existing monitor . If it does exists , only DCNL the parameters specified will be enforced . DCNL hostname DCNL The host / address of the bigip device DCNL username DCNL The iControl REST username DCNL password DCNL The iControl REST password DCNL monitor _ type DCNL The type of monitor to create DCNL name DCNL The name of the monitor to create DCNL kwargs DCNL &#91; arg = val &#93; ... DCNL Consult F5 BIGIP user guide for specific options for each monitor type . DCNL Typically , tmsh arg names are used . &apos; 
&apos;Sampling . &apos; 
&apos;Read RDB data with inconstent data type ( except failure ) &apos;
&apos;Get a string describing the arguments for the given object&apos;
&apos;Wrapper for allowing delivery of .reload command via PM&apos;
&apos;Try to format the string C { fmtString } using C { fmtDict } arguments , DCNL swallowing all errors to always return a string . &apos; 
&apos;Get the inset loops , which might overlap . &apos; 
&apos;Tests whether the algorithm is properly implementing the DCNL correct Blackbox-optimization interface . &apos; 
&apos;Build an error dict corresponding to edX API conventions . DCNL Args : DCNL message ( string ) : The string to use for developer and user messages . DCNL The user message will be translated , but for this to work message DCNL must have already been scraped. ugettext _ noop is useful for this . DCNL * * kwargs : format parameters for message&apos;
&apos;definition : toktype opttype idlist optsemi&apos;
&apos;Get the current clipboard \ &apos; s text on Windows . DCNL Requires Mark Hammond \ &apos; s pywin32 extensions . &apos; 
&apos;Used by DoctestTextfile and DoctestItem to setup fixture information . &apos; 
&apos;uniq _ stable ( elems ) - &gt; list DCNL Return from an iterable , a list of all the unique elements in the input , DCNL but maintaining the order in which they first appear . DCNL Note : All elements in the input must be hashable for this routine DCNL to work , as it internally uses a set for efficiency reasons . &apos; 
&apos;Migrate all the cohort settings associated with this course from modulestore to mysql . DCNL After that we will never touch modulestore for any cohort related settings . &apos; 
&apos;Returns an absolute URL for applications integrated with ApplicationContent DCNL The tag mostly works the same way as Django \ &apos; s own { % url % } tag : : DCNL { % load applicationcontent _ tags % } DCNL { % app _ reverse &quot; mymodel _ detail &quot; &quot; myapp.urls &quot; arg1 arg2 % } DCNL or DCNL { % load applicationcontent _ tags % } DCNL { % app _ reverse &quot; mymodel _ detail &quot; &quot; myapp.urls &quot; name1 = value1 % } DCNL The first argument is a path to a view . The second argument is the URLconf DCNL under which this app is known to the ApplicationContent . The second DCNL argument may also be a request object if you want to reverse an URL DCNL belonging to the current application content . DCNL Other arguments are space-separated values that will be filled in place of DCNL positional and keyword arguments in the URL . Don \ &apos; t mix positional and DCNL keyword arguments . DCNL If you want to store the URL in a variable instead of showing it right away DCNL you can do so too : : DCNL { % app _ reverse &quot; mymodel _ detail &quot; &quot; myapp.urls &quot; arg1 arg2 as url % } &apos;
&apos;Breaks headers longer than 160 characters ( ~ page length ) DCNL when possible ( are comma separated ) &apos;
&apos;Raise an exception if the container does not exist&apos;
&apos;Convert a replacement pattern from the Java-style ` $ 5` to the Python-style ` \ 5` . &apos; 
&apos;convert linkage ped / map to fbat&apos;
&apos;Formats correlation information to be suitable for writing to a file . DCNL Returns a string containing a header and a single line ( with a newline at DCNL the end ) that has the input correlation information in tab-separated DCNL format , with nonparametric p-value formatted according to the number of DCNL permutations . DCNL If the confidence interval is not valid for this dataset ( i.e. the DCNL input CI is ( None , None ) ) , the confidence interval will be formatted as DCNL \ &apos; N / A \ &apos; for both lower and upper endpoints . DCNL Arguments : DCNL corr _ coeff - the correlation coefficient ( a float ) DCNL param _ p _ val - the parametric p-value ( a float ) DCNL nonparam _ p _ val - the nonparametric p-value ( a float ) DCNL conf _ interval - a tuple containing the lower and upper bounds of the DCNL confidence interval DCNL num _ permutations - the number of permutations that were used to DCNL calculate the nonparametric p-value . Will be used to format the DCNL correct number of digits for this p-value . If less than 1 , the DCNL p-value will be \ &apos; N / A \ &apos; DCNL header - if provided , this string will be inserted at the beginning of DCNL the returned string . For example , might be useful to add a comment DCNL describing what correlation coefficient was used . This string does DCNL not need to contain a newline at the end&apos;
&apos;Check non-explicit segments can be .mark _ done \ &apos; d . &apos; 
&apos;Return union of a sequence of disjoint dictionaries . DCNL Parameters DCNL dicts : dicts DCNL A set of dictionaries with no keys in common . If the first DCNL dictionary in the sequence is an instance of `OrderedDict` , the DCNL result will be OrderedDict . DCNL \ * \ * kwargs DCNL Keywords and values to add to the resulting dictionary . DCNL Raises DCNL ValueError DCNL If a key appears twice in the dictionaries or keyword arguments . &apos; 
&apos;Return True if the named service is enabled , false otherwise DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; service.disabled &lt; service name &gt; &apos;
&apos;Universal search function generator using lazy evaluation . DCNL Generate a function that will iterate over all the paths from path _ generator using DCNL target _ predicate to filter matching paths . Each matching path is then noramlized by target _ predicate . DCNL Only the first match is returned . DCNL : param path _ generator : all paths to test with target _ predicate DCNL : type path _ generator : iterator DCNL : param target _ predicate : boolean function that tests a given path DCNL : type target _ predicate : function DCNL : param target _ normalizer : function that transforms a matching path to some noramlized form DCNL : type target _ normalizer : function DCNL : param extra _ paths : extra paths to pass to the path _ generator DCNL : type extra _ paths : iterator DCNL : return : the path searching function DCNL : rtype : function&apos;
&apos; .. versionadded : : 2016.3.0 DCNL Check all services DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; monit.validate&apos;
&apos;Update transferability status of all cases , to be called either DCNL from scheduler task or manually through custom controller . DCNL @ param site _ id : the site to check for transferability of cases&apos;
&apos; @ ToDo : Display the Progress of a Project&apos;
&apos;Just like \ &apos; imp.find _ module ( ) \ &apos; , but with package support&apos;
&apos;Builds a hierarchical layout object from the fields list to be rendered DCNL by `standard.html` DCNL : param doc : Document to be rendered . DCNL : param meta : Document meta object ( doctype ) . DCNL : param format _ data : Fields sequence and properties defined by Print Format Builder . &apos; 
&apos;Creates an RPC object for use with the urlfetch API . DCNL Args : DCNL deadline : Optional deadline in seconds for the operation ; the default DCNL is a system-specific deadline ( typically 5 seconds ) . DCNL callback : Optional callable to invoke on completion . DCNL Returns : DCNL An apiproxy _ stub _ map.UserRPC object specialized for this service . &apos; 
&apos;Attempt to set AWS access key ID from script , else core-site , else None&apos;
&apos;Adds utility methods to a model to obtain related DCNL model instances via a cache . &apos; 
&apos;Turn all nested sequences to tuples in given sequence . &apos; 
&apos;Sniff packets and print them calling pkt.show ( ) , a bit like text wireshark&apos;
&apos; .. todo : : DCNL WRITEME properly DCNL Creates a Conv2D with random kernels , where the randomly initialized DCNL values are sparse&apos;
&apos;Helper method for constructing grammars of expressions made up of DCNL operators working in a precedence hierarchy . Operators may be unary or DCNL binary , left- or right-associative . Parse actions can also be attached DCNL to operator expressions . DCNL Parameters : DCNL - baseExpr - expression representing the most basic element for the nested DCNL - opList - list of tuples , one for each operator precedence level in the DCNL expression grammar ; each tuple is of the form DCNL ( opExpr , numTerms , rightLeftAssoc , parseAction ) , where : DCNL - opExpr is the pyparsing expression for the operator ; DCNL may also be a string , which will be converted to a Literal ; DCNL if numTerms is 3 , opExpr is a tuple of two expressions , for the DCNL two operators separating the 3 terms DCNL - numTerms is the number of terms for this operator ( must DCNL be 1 , 2 , or 3 ) DCNL - rightLeftAssoc is the indicator whether the operator is DCNL right or left associative , using the pyparsing-defined DCNL constants C { opAssoc.RIGHT } and C { opAssoc.LEFT } . DCNL - parseAction is the parse action to be associated with DCNL expressions matching this operator expression ( the DCNL parse action tuple member may be omitted ) DCNL - lpar - expression for matching left-parentheses ( default = Suppress ( \ &apos; ( \ &apos; ) ) DCNL - rpar - expression for matching right-parentheses ( default = Suppress ( \ &apos; ) \ &apos; ) ) &apos;
&apos;Get the date / time the account was created DCNL : param str name : the username of the account DCNL : return : the date / time the account was created ( yyyy-mm-dd hh : mm : ss ) DCNL : rtype : str DCNL : raises : CommandExecutionError on user not found or any other unknown error DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; shadow.get _ account _ created admin&apos;
&apos;IP Lookup tool&apos;
&apos;RESTful CRUD controller&apos;
&apos;Always return \ &apos; false \ &apos; if the operating system does not support symlinks . DCNL @ param path : a path string . DCNL @ type path : L { str } DCNL @ return : false&apos;
&apos;generate ( bits : int , randfunc : callable , progress _ func : callable , e : int ) DCNL Generate an RSA key of length \ &apos; bits \ &apos; , public exponent \ &apos; e \ &apos; ( which must be DCNL odd ) , using \ &apos; randfunc \ &apos; to get random data and \ &apos; progress _ func \ &apos; , DCNL if present , to display the progress of the key generation . &apos; 
&apos;Filters the contents of the block through variable filters . DCNL Filters can also be piped through each other , and they can have DCNL arguments -- just like in variable syntax . DCNL Sample usage : : DCNL { % filter force _ escape &#124; lower % } DCNL This text will be HTML-escaped , and will appear in lowercase . DCNL { % endfilter % } DCNL Note that the ``escape`` and ``safe`` filters are not acceptable arguments . DCNL Instead , use the ``autoescape`` tag to manage autoescaping for blocks of DCNL template code . &apos; 
&apos;Reformat text , taking the width into account . DCNL `to _ row` is included . DCNL ( Vi \ &apos; gq \ &apos; operator . ) &apos;
&apos;Given data x , construct the knot vector w / not-a-knot BC . DCNL cf de Boor , XIII ( 12 )  . &apos; 
&apos;uses GoogleAppEngine ( GAE ) DCNL fetch ( url , payload = None , method = GET , headers = { } , allow _ truncated = False ) DCNL Response DCNL content DCNL The body content of the response . DCNL content _ was _ truncated DCNL True if the allow _ truncated parameter to fetch ( ) was True and DCNL the response exceeded the maximum response size . In this case , DCNL the content attribute contains the truncated response . DCNL status _ code DCNL The HTTP status code . DCNL headers DCNL The HTTP response headers , as a mapping of names to values . DCNL Exceptions DCNL exception InvalidURLError ( ) DCNL The URL of the request was not a valid URL , or it used an DCNL unsupported method . Only http and https URLs are supported . DCNL exception DownloadError ( ) DCNL There was an error retrieving the data . DCNL This exception is not raised if the server returns an HTTP DCNL error code : In that case , the response data comes back intact , DCNL including the error code . DCNL exception ResponseTooLargeError ( ) DCNL The response data exceeded the maximum allowed size , and the DCNL allow _ truncated parameter passed to fetch ( ) was False . &apos; 
&apos;Return true if \ &apos; source \ &apos; exists and is more recently modified than DCNL \ &apos; target \ &apos; , or if \ &apos; source \ &apos; exists and \ &apos; target \ &apos; doesn \ &apos; t . Return false if DCNL both exist and \ &apos; target \ &apos; is the same age or younger than \ &apos; source \ &apos; . DCNL Raise DistutilsFileError if \ &apos; source \ &apos; does not exist . &apos; 
&apos;This method will restore an asset which got soft deleted and put back in the original course&apos;
&apos;Convert &quot; dict &quot; to a canonical JSON string . Sort keys so that output DCNL ordering is always the same . &apos; 
&apos;Works like : func : `url _ decode` but decodes a stream . The behavior DCNL of stream and limit follows functions like DCNL : func : ` ~ werkzeug.wsgi.make _ line _ iter` . The generator of pairs is DCNL directly fed to the `cls` so you can consume the data while it \ &apos; s DCNL parsed . DCNL .. versionadded : : 0.8 DCNL : param stream : a stream with the encoded querystring DCNL : param charset : the charset of the query string . If set to `None` DCNL no unicode decoding will take place . DCNL : param decode _ keys : Used on Python 2.x to control whether keys should DCNL be forced to be unicode objects . If set to `True` , DCNL keys will be unicode in all cases . Otherwise , they DCNL remain `str` if they fit into ASCII . DCNL : param include _ empty : Set to `False` if you don \ &apos; t want empty values to DCNL appear in the dict . DCNL : param errors : the decoding error behavior . DCNL : param separator : the pair separator to be used , defaults to `` &amp; `` DCNL : param cls : an optional dict class to use . If this is not specified DCNL or `None` the default : class : `MultiDict` is used . DCNL : param limit : the content length of the URL data . Not necessary if DCNL a limited stream is provided . DCNL : param return _ iterator : if set to `True` the `cls` argument is ignored DCNL and an iterator over all decoded pairs is DCNL returned&apos;
&apos;Deletes the specified subnet DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; neutron.delete _ subnet subnet-name DCNL salt \ &apos; * \ &apos; neutron.delete _ subnet subnet-name profile = openstack1 DCNL : param subnet : ID or name of subnet to delete DCNL : param profile : Profile to build on ( Optional ) DCNL : return : True ( Succeed ) or False&apos;
&apos;Returns the PID of a container DCNL name DCNL Container name DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion nspawn.pid arch1&apos;
&apos;Returns used LUN IDs with count as a dictionary . &apos; 
&apos;If ``original`` doesn \ &apos; t already store ``matchee`` then return a new DCNL one that has it stored . &apos; 
&apos;Run the command configured&apos;
&apos;Required attributes for a column can be set . &apos; 
&apos;Monkeypatch the original version from distutils . DCNL It \ &apos; s supposed to match the behavior of Distribution.get _ command _ obj ( ) DCNL This fixes issues with \ &apos; pip install -e \ &apos; and \ &apos; . / setup.py test \ &apos; not DCNL respecting the setup.cfg configuration directives for the build _ ext DCNL command . &apos; 
&apos;Return a digital filter from an analog one using a bilinear transform . DCNL Transform a set of poles and zeros from the analog s-plane to the digital DCNL z-plane using Tustin \ &apos; s method , which substitutes `` ( z-1 ) / ( z + 1 ) `` for DCNL ``s`` , maintaining the shape of the frequency response . DCNL Parameters DCNL z : array _ like DCNL Zeros of the analog IIR filter transfer function . DCNL p : array _ like DCNL Poles of the analog IIR filter transfer function . DCNL k : float DCNL System gain of the analog IIR filter transfer function . DCNL fs : float DCNL Sample rate , as ordinary frequency ( e.g. hertz ) . No prewarping is DCNL done in this function . DCNL Returns DCNL z : ndarray DCNL Zeros of the transformed digital filter transfer function . DCNL p : ndarray DCNL Poles of the transformed digital filter transfer function . DCNL k : float DCNL System gain of the transformed digital filter . &apos; 
&apos;Configures the App Engine SDK imports on py.test startup . &apos; 
&apos;Extract release date and year from database row&apos;
&apos;Find the position just after the matching endchar . DCNL Args : DCNL line : a CleansedLines line . DCNL startpos : start searching at this position . DCNL depth : nesting level at startpos . DCNL startchar : expression opening character . DCNL endchar : expression closing character . DCNL Returns : DCNL On finding matching endchar : ( index just after matching endchar , 0 ) DCNL Otherwise : ( -1 , new depth at end of this line ) &apos;
&apos;Returns the url for the login view , expanding the view name to a url if DCNL needed . DCNL : param login _ view : The name of the login view or a URL for the login view . DCNL : type login _ view : str&apos;
&apos;Part of an evolutionary algorithm applying only the variation part DCNL ( crossover , mutation * * or * * reproduction ) . The modified individuals have DCNL their fitness invalidated . The individuals are cloned so returned DCNL population is independent of the input population . DCNL : param population : A list of individuals to vary . DCNL : param toolbox : A : class : ` ~ deap.base.Toolbox` that contains the evolution DCNL operators . DCNL : param lambda \ _ : The number of children to produce DCNL : param cxpb : The probability of mating two individuals . DCNL : param mutpb : The probability of mutating an individual . DCNL : returns : The final population DCNL : returns : A class : ` ~ deap.tools.Logbook` with the statistics of the DCNL evolution DCNL The variation goes as follow . On each of the * lambda _ * iteration , it DCNL selects one of the three operations ; crossover , mutation or reproduction . DCNL In the case of a crossover , two individuals are selected at random from DCNL the parental population : math : `P _ \ mathrm { p } ` , those individuals are cloned DCNL using the : meth : `toolbox.clone` method and then mated using the DCNL : meth : `toolbox.mate` method . Only the first child is appended to the DCNL offspring population : math : `P _ \ mathrm { o } ` , the second child is discarded . DCNL In the case of a mutation , one individual is selected at random from DCNL : math : `P _ \ mathrm { p } ` , it is cloned and then mutated using using the DCNL : meth : `toolbox.mutate` method . The resulting mutant is appended to DCNL : math : `P _ \ mathrm { o } ` . In the case of a reproduction , one individual is DCNL selected at random from : math : `P _ \ mathrm { p } ` , cloned and appended to DCNL : math : `P _ \ mathrm { o } ` . DCNL This variation is named * Or * beceause an offspring will never result from DCNL both operations crossover and mutation . The sum of both probabilities DCNL shall be in : math : ` &#91; 0 , 1 &#93; ` , the reproduction probability is DCNL 1 - * cxpb * - * mutpb *  . &apos; 
&apos;Escape a single value of a URL string or a query parameter . If it is a list DCNL or tuple , turn it into a comma-separated string first . &apos; 
&apos;Factory for making validators for API calls , since API calls come DCNL in two flavors : responsive and unresponsive . The machinary DCNL associated with both is similar , and the error handling identical , DCNL so this function abstracts away the kw validation and creation of DCNL a Json-y responder object . &apos; 
&apos;Link error here on x64&apos;
&apos;Parse RFC 822 dates and times , with one minor DCNL difference : years may be 4DIGIT or 2DIGIT . DCNL http : / / tools.ietf.org / html / rfc822 # section-5&apos;
&apos;Given instance properties that define exactly one instance , create AMI and return AMI-id . DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt myminion boto _ ec2.create _ instance ami _ name instance _ name = myinstance DCNL salt myminion boto _ ec2.create _ instance another _ ami _ name tags = \ &apos; { &quot; mytag &quot; : &quot; value &quot; } \ &apos; description = \ &apos; this is my ami \ &apos; &apos;
&apos;Calculates the sentence level CHRF ( Character n-gram F-score ) described in DCNL - Maja Popovic . 2015 . CHRF : Character n-gram F-score for Automatic MT Evaluation . DCNL In Proceedings of the 10th Workshop on Machine Translation . DCNL http : / / www.statmt.org / wmt15 / pdf / WMT49.pdf DCNL - Maja Popovic . 2016 . CHRF Deconstructed : β Parameters and n-gram Weights . DCNL In Proceedings of the 1st Conference on Machine Translation . DCNL http : / / www.statmt.org / wmt16 / pdf / W16-2341.pdf DCNL Unlike multi-reference BLEU , CHRF only supports a single reference . DCNL An example from the original BLEU paper DCNL http : / / www.aclweb.org / anthology / P02-1040.pdf DCNL &gt; &gt; &gt; ref1 = str ( \ &apos; It is a guide to action that ensures that the military \ &apos; DCNL ... \ &apos; will forever heed Party commands \ &apos; ) .split ( ) DCNL &gt; &gt; &gt; hyp1 = str ( \ &apos; It is a guide to action which ensures that the military \ &apos; DCNL ... \ &apos; always obeys the commands of the party \ &apos; ) .split ( ) DCNL &gt; &gt; &gt; hyp2 = str ( \ &apos; It is to insure the troops forever hearing the activity \ &apos; DCNL ... \ &apos; guidebook that party direct \ &apos; ) .split ( ) DCNL &gt; &gt; &gt; sentence _ chrf ( ref1 , hyp1 ) # doctest : + ELLIPSIS DCNL 0.6768 ... DCNL &gt; &gt; &gt; sentence _ chrf ( ref1 , hyp2 ) # doctest : + ELLIPSIS DCNL 0.4201 ... DCNL The infamous &quot; the the the ... &quot; example DCNL &gt; &gt; &gt; ref = \ &apos; the cat is on the mat \ &apos; .split ( ) DCNL &gt; &gt; &gt; hyp = \ &apos; the the the the the the the \ &apos; .split ( ) DCNL &gt; &gt; &gt; sentence _ chrf ( ref , hyp ) # doctest : + ELLIPSIS DCNL 0.2530 ... DCNL An example to show that this function allows users to use strings instead of DCNL tokens , i.e. list ( str ) as inputs . DCNL &gt; &gt; &gt; ref1 = str ( \ &apos; It is a guide to action that ensures that the military \ &apos; DCNL ... \ &apos; will forever heed Party commands \ &apos; ) DCNL &gt; &gt; &gt; hyp1 = str ( \ &apos; It is a guide to action which ensures that the military \ &apos; DCNL ... \ &apos; always obeys the commands of the party \ &apos; ) DCNL &gt; &gt; &gt; sentence _ chrf ( ref1 , hyp1 ) # doctest : + ELLIPSIS DCNL 0.6768 ... DCNL &gt; &gt; &gt; type ( ref1 ) = = type ( hyp1 ) = = str DCNL True DCNL &gt; &gt; &gt; sentence _ chrf ( ref1.split ( ) , hyp1.split ( ) ) # doctest : + ELLIPSIS DCNL 0.6768 ... DCNL To skip the unigrams and only use 2- to 3-grams : DCNL &gt; &gt; &gt; sentence _ chrf ( ref1 , hyp1 , min _ len = 2 , max _ len = 3 ) # doctest : + ELLIPSIS DCNL 0.7018 ... DCNL : param references : reference sentence DCNL : type references : list ( str ) / str DCNL : param hypothesis : a hypothesis sentence DCNL : type hypothesis : list ( str ) / str DCNL : param min _ len : The minimum order of n-gram this function should extract . DCNL : type min _ len : int DCNL : param max _ len : The maximum order of n-gram this function should extract . DCNL : type max _ len : int DCNL : param beta : the parameter to assign more importance to recall over precision DCNL : type beta : float DCNL : return : the sentence level CHRF score . DCNL : rtype : float&apos;
&apos;Check if printing should work in the given Qt version . &apos; 
&apos;run a script file&apos;
&apos;Add a cohort to a course . Raises ValueError if a cohort of the same name already DCNL exists . &apos; 
&apos; .. versionadded : : 2015.8.0 DCNL Delete a specific affinity group associated with the account DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt-cloud -f delete _ affinity _ group my-azure name = my _ affinity _ group&apos;
&apos;Helper that denests the square root of three or more surds . DCNL It returns the denested expression ; if it cannot be denested it DCNL throws SqrtdenestStopIteration DCNL Algorithm : expr.base is in the extension Q _ m = Q ( sqrt ( r _ 1 ) , .. , sqrt ( r _ k ) ) ; DCNL split expr.base = a + b * sqrt ( r _ k ) , where `a` and `b` are on DCNL Q _ ( m-1 ) = Q ( sqrt ( r _ 1 ) , .. , sqrt ( r _ ( k-1 ) ) ) ; then a * * 2 - b * * 2 * r _ k is DCNL on Q _ ( m-1 ) ; denest sqrt ( a * * 2 - b * * 2 * r _ k ) and so on . DCNL See &#91; 1 &#93; , section 6 . DCNL Examples DCNL &gt; &gt; &gt; from sympy import sqrt DCNL &gt; &gt; &gt; from sympy.simplify.sqrtdenest import _ sqrtdenest _ rec DCNL &gt; &gt; &gt; _ sqrtdenest _ rec ( sqrt ( -72 * sqrt ( 2 ) + 158 * sqrt ( 5 ) + 498 ) ) DCNL -sqrt ( 10 ) + sqrt ( 2 ) + 9 + 9 * sqrt ( 5 ) DCNL &gt; &gt; &gt; w = -6 * sqrt ( 55 ) -6 * sqrt ( 35 ) -2 * sqrt ( 22 ) -2 * sqrt ( 14 ) + 2 * sqrt ( 77 ) + 6 * sqrt ( 10 ) + 65 DCNL &gt; &gt; &gt; _ sqrtdenest _ rec ( sqrt ( w ) ) DCNL -sqrt ( 11 ) - sqrt ( 7 ) + sqrt ( 2 ) + 3 * sqrt ( 5 ) &apos;
&apos;When a user \ &apos; s username is changed , we must reindex the questions DCNL they participated in . &apos; 
&apos;Detect spectral peak locations DCNL mX : magnitude spectrum , t : threshold DCNL returns ploc : peak locations&apos;
&apos;Deduce the encoding of a source file from magic comment . DCNL It does this in the same way as the `Python interpreter` _ _ DCNL .. _ _ : http : / / docs.python.org / ref / encodings.html DCNL The ``fp`` argument should be a seekable file object . DCNL ( From Jeff Dairiki ) &apos;
&apos;Take CTRL + C into account ( SIGINT )  . &apos; 
&apos;Create a temporary directory DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; temp.dir DCNL salt \ &apos; * \ &apos; temp.dir prefix = \ &apos; mytemp- \ &apos; parent = \ &apos; / var / run / \ &apos; &apos;
&apos;Figure out the name of a directory to back up the given dir to DCNL ( adding .bak , .bak2 , etc ) &apos;
&apos;Generate a cyclic pattern DCNL Args : DCNL - size : size of generated pattern ( Int ) DCNL - start : the start offset of the generated pattern ( Int ) DCNL - charset _ type : charset type DCNL 0 : basic ( 0-9A-za-z ) DCNL 1 : extended ( default ) DCNL 2 : maximum ( almost printable chars ) DCNL Returns : DCNL - pattern text ( byte string ) ( str in Python 2 ; bytes in Python 3 ) &apos;
&apos;Plots a line . DCNL Args : DCNL xs : sequence of x values DCNL ys : sequence of y values DCNL options : keyword args passed to pyplot.bar&apos;
&apos;Serialize ``obj`` as a JSON formatted stream to ``fp`` ( a DCNL ``.write ( ) ``-supporting file-like object ) . DCNL If * skipkeys * is true then ``dict`` keys that are not basic types DCNL ( ``str`` , ``unicode`` , ``int`` , ``long`` , ``float`` , ``bool`` , ``None`` ) DCNL will be skipped instead of raising a ``TypeError`` . DCNL If * ensure _ ascii * is false , then the some chunks written to ``fp`` DCNL may be ``unicode`` instances , subject to normal Python ``str`` to DCNL ``unicode`` coercion rules . Unless ``fp.write ( ) `` explicitly DCNL understands ``unicode`` ( as in ``codecs.getwriter ( ) `` ) this is likely DCNL to cause an error . DCNL If * check _ circular * is false , then the circular reference check DCNL for container types will be skipped and a circular reference will DCNL result in an ``OverflowError`` ( or worse ) . DCNL If * allow _ nan * is false , then it will be a ``ValueError`` to DCNL serialize out of range ``float`` values ( ``nan`` , ``inf`` , ``-inf`` ) DCNL in strict compliance of the original JSON specification , instead of using DCNL the JavaScript equivalents ( ``NaN`` , ``Infinity`` , ``-Infinity`` ) . See DCNL * ignore _ nan * for ECMA-262 compliant behavior . DCNL If * indent * is a string , then JSON array elements and object members DCNL will be pretty-printed with a newline followed by that string repeated DCNL for each level of nesting . ``None`` ( the default ) selects the most compact DCNL representation without any newlines . For backwards compatibility with DCNL versions of simplejson earlier than 2.1.0 , an integer is also accepted DCNL and is converted to a string with that many spaces . DCNL If specified , * separators * should be an DCNL `` ( item _ separator , key _ separator ) `` tuple . The default is `` ( \ &apos; , \ &apos; , \ &apos; : \ &apos; ) `` DCNL if * indent * is ``None`` and `` ( \ &apos; , \ &apos; , \ &apos; : \ &apos; ) `` otherwise . To get the most DCNL compact JSON representation , you should specify `` ( \ &apos; , \ &apos; , \ &apos; : \ &apos; ) `` to eliminate DCNL whitespace . DCNL * encoding * is the character encoding for str instances , default is UTF-8 . DCNL * default ( obj ) * is a function that should return a serializable version DCNL of obj or raise ``TypeError`` . The default simply raises ``TypeError`` . DCNL If * use _ decimal * is true ( default : ``True`` ) then decimal.Decimal DCNL will be natively serialized to JSON with full precision . DCNL If * namedtuple _ as _ object * is true ( default : ``True`` ) , DCNL : class : `tuple` subclasses with `` _ asdict ( ) `` methods will be encoded DCNL as JSON objects . DCNL If * tuple _ as _ array * is true ( default : ``True`` ) , DCNL : class : `tuple` ( and subclasses ) will be encoded as JSON arrays . DCNL If * iterable _ as _ array * is true ( default : ``False`` ) , DCNL any object not in the above table that implements `` _ _ iter _ _ ( ) `` DCNL will be encoded as a JSON array . DCNL If * bigint _ as _ string * is true ( default : ``False`` ) , ints 2 * * 53 and higher DCNL or lower than -2 * * 53 will be encoded as strings . This is to avoid the DCNL rounding that happens in Javascript otherwise . Note that this is still a DCNL lossy operation that will not round-trip correctly and should be used DCNL sparingly . DCNL If * int _ as _ string _ bitcount * is a positive number ( n ) , then int of size DCNL greater than or equal to 2 * * n or lower than or equal to -2 * * n will be DCNL encoded as strings . DCNL If specified , * item _ sort _ key * is a callable used to sort the items in DCNL each dictionary . This is useful if you want to sort items other than DCNL in alphabetical order by key . This option takes precedence over DCNL * sort _ keys * . DCNL If * sort _ keys * is true ( default : ``False`` ) , the output of dictionaries DCNL will be sorted by item . DCNL If * for _ json * is true ( default : ``False`` ) , objects with a ``for _ json ( ) `` DCNL method will use the return value of that method for encoding as JSON DCNL instead of the object . DCNL If * ignore _ nan * is true ( default : ``False`` ) , then out of range DCNL : class : `float` values ( ``nan`` , ``inf`` , ``-inf`` ) will be serialized as DCNL ``null`` in compliance with the ECMA-262 specification . If true , this will DCNL override * allow _ nan * . DCNL To use a custom ``JSONEncoder`` subclass ( e.g. one that overrides the DCNL ``.default ( ) `` method to serialize additional types ) , specify it with DCNL the ``cls`` kwarg . NOTE : You should use * default * or * for _ json * instead DCNL of subclassing whenever possible . &apos; 
&apos;Custom slugify ( percent encoded )  . &apos; 
&apos;Returns a list of e-mail addresses parsed from the string . &apos; 
&apos;Record usage of a ratelimit for the specified time slice . DCNL The total usage ( including this one ) of the ratelimit is returned or DCNL RatelimitError is raised if something went wrong during the process . &apos; 
&apos;Set up the Bbox sensor . &apos; 
&apos;Watch / unwatch a forum ( based on \ &apos; watch \ &apos; POST param )  . &apos; 
&apos;Checks to see whether overrides are disabled in the current context . DCNL Returns a boolean value . See `disable _ overrides` . &apos; 
&apos;Robust estimation of homography H from point DCNL correspondences using RANSAC ( ransac.py from DCNL http : / / www.scipy.org / Cookbook / RANSAC ) . DCNL input : fp , tp ( 3 * n arrays ) points in hom. coordinates . &apos; 
&apos;make limited length string in form : DCNL &quot; the string is very lo ... ( and 15 more ) &quot; &apos;
&apos;Test mouse and key events&apos;
&apos;Initialize and return the `Native` subsystem . &apos; 
&apos;Run supervised learning ( random forests here ) DCNL predictor _ fp : path to otu table DCNL response _ fp : path to metadata table DCNL response _ name : Column header for gradient variable in metadata table DCNL ntree : Number of trees in forest DCNL errortype : method for estimating generalization error DCNL output _ dir : output directory DCNL verbose : print verbose output DCNL output _ dir : directory where output should be written ( default \ &apos; . \ &apos; ) DCNL HALT _ EXEC : halt just before running the formatdb command and&apos;
&apos;Regression test for https : / / github.com / astropy / astropy / issues / 4612 DCNL This one uses WCS.wcs.compare and some slightly different values&apos;
&apos;Attempt to synthesize a controller base on existing controllers . DCNL This is useful to create a controller when a user specifies a path to DCNL an entry in the BROWSER environment variable -- we can copy a general DCNL controller to operate using a specific installation of the desired DCNL browser in this way . DCNL If we can \ &apos; t create a controller in this way , or if there is no DCNL executable for the requested browser , return &#91; None , None &#93;  . &apos; 
&apos;Adds a timeout to an existing deferred . If the timeout expires before the DCNL deferred expires , then the deferred is cancelled . DCNL : param IReactorTime reactor : The reactor implementation to schedule the DCNL timeout . DCNL : param Deferred deferred : The deferred to cancel at a later point in time . DCNL : param float timeout _ sec : The number of seconds to wait before the deferred DCNL should time out . DCNL : param Exception reason : An exception used to create a Failure with which DCNL to fire the Deferred if the timeout is encountered . If not given , DCNL ``deferred`` retains its original failure behavior . DCNL : return : The updated deferred . &apos; 
&apos;Convert JSON row data to row with appropriate types . DCNL : type row : dict DCNL : param row : A JSON response row to be converted . DCNL : type schema : tuple DCNL : param schema : A tuple of DCNL : class : ` ~ google.cloud.bigquery.schema.SchemaField`. DCNL : rtype : tuple DCNL : returns : A tuple of data converted to native types . &apos; 
&apos;Return a ( ci ) tree for the given CIX content . DCNL Raises pyexpat.ExpatError if the CIX content could not be parsed . &apos; 
&apos;Return an icon name for the issue status . DCNL Args : DCNL status ( unicode ) : DCNL The stored issue status for the comment . DCNL Returns : DCNL unicode : The icon name for the issue status . &apos; 
&apos;Test a sequence generator with integer outputs . DCNL Such sequence generators can be used to e.g. model language . &apos; 
&apos;Strip trailing component `trailing` from `content` if it exists . DCNL Used when generating names from view classes . &apos; 
&apos; &gt; &gt; exit _ if _ empty DCNL Exit the script currently running , if there are no deferred messages DCNL on the current page . &apos; 
&apos;Return the list of objects that exactly match the given DCNL name _ filter . &apos; 
&apos;Generates sequences of xs and ps for a Pareto CDF . DCNL xmin : parameter DCNL alpha : parameter DCNL low : float DCNL high : float DCNL n : number of points to render DCNL returns : numpy arrays ( xs , ps ) &apos;
&apos;Abort if python-apt is not installed&apos;
&apos;Updates the cached list of loaders from a zipfile . The loader _ lock MUST DCNL be held when calling this function . DCNL : param z : DCNL The zipfile.ZipFile object to list the files in&apos;
&apos;Given a context ( ids ) in list format and the vocabulary , DCNL Returns a list of words to represent the context . DCNL Parameters DCNL data : a list of integer DCNL the context in list format DCNL id _ to _ word : a dictionary DCNL mapping id to unique word . DCNL Returns DCNL A list of string or byte to represent the context . DCNL Examples DCNL &gt; &gt; &gt; see words _ to _ word _ ids&apos;
&apos;Computes the O \ &apos; Brien transform on input data ( any number of arrays ) . DCNL Used to test for homogeneity of variance prior to running one-way stats . DCNL Each array in `` * args`` is one level of a factor . DCNL If `f _ oneway` is run on the transformed data and found significant , DCNL the variances are unequal . From Maxwell and Delaney &#91; 1 &#93; _ , p.112. DCNL Parameters DCNL args : tuple of array _ like DCNL Any number of arrays . DCNL Returns DCNL obrientransform : ndarray DCNL Transformed data for use in an ANOVA . The first dimension DCNL of the result corresponds to the sequence of transformed DCNL arrays . If the arrays given are all 1-D of the same length , DCNL the return value is a 2-D array ; otherwise it is a 1-D array DCNL of type object , with each element being an ndarray . DCNL References DCNL .. &#91; 1 &#93; S. E. Maxwell and H. D. Delaney , &quot; Designing Experiments and DCNL Analyzing Data : A Model Comparison Perspective &quot; , Wadsworth , 1990 . DCNL Examples DCNL We \ &apos; ll test the following data sets for differences in their variance . DCNL &gt; &gt; &gt; x = &#91; 10 , 11 , 13 , 9 , 7 , 12 , 12 , 9 , 10 &#93; DCNL &gt; &gt; &gt; y = &#91; 13 , 21 , 5 , 10 , 8 , 14 , 10 , 12 , 7 , 15 &#93; DCNL Apply the O \ &apos; Brien transform to the data . DCNL &gt; &gt; &gt; from scipy.stats import obrientransform DCNL &gt; &gt; &gt; tx , ty = obrientransform ( x , y ) DCNL Use `scipy.stats.f _ oneway` to apply a one-way ANOVA test to the DCNL transformed data . DCNL &gt; &gt; &gt; from scipy.stats import f _ oneway DCNL &gt; &gt; &gt; F , p = f _ oneway ( tx , ty ) DCNL &gt; &gt; &gt; p DCNL 0.1314139477040335 DCNL If we require that ``p &lt; 0.05`` for significance , we cannot conclude DCNL that the variances are different . &apos; 
&apos;Test installing a package using pip install --target&apos;
&apos;var occurs in subtree owned by x ? &apos;
&apos;Returns dictionary of predecessors for the path from source to all nodes in G. DCNL Parameters DCNL G : NetworkX graph DCNL source : node label DCNL Starting node for path DCNL target : node label , optional DCNL Ending node for path . If provided only predecessors between DCNL source and target are returned DCNL cutoff : integer , optional DCNL Depth to stop the search . Only paths of length &lt; = cutoff are returned . DCNL Returns DCNL pred : dictionary DCNL Dictionary , keyed by node , of predecessors in the shortest path . DCNL Examples DCNL &gt; &gt; &gt; G = nx.path _ graph ( 4 ) DCNL &gt; &gt; &gt; list ( G ) DCNL &#91; 0 , 1 , 2 , 3 &#93; DCNL &gt; &gt; &gt; nx.predecessor ( G , 0 ) DCNL { 0 : &#91; &#93; , 1 : &#91; 0 &#93; , 2 : &#91; 1 &#93; , 3 : &#91; 2 &#93; } &apos;
&apos;Return a public key fingerprint based on its base64-encoded representation DCNL The fingerprint string is formatted according to RFC 4716 ( ch.4 ) , that is , DCNL in the form &quot; xx : xx : ... : xx &quot; DCNL If the key is invalid ( incorrect base64 string ) , return None&apos;
&apos;Get response for when transport = cli . This is kind of a hack and mainly DCNL needed because these modules were originally written for NX-API . And DCNL not every command supports &quot; &#124; json &quot; when using cli / ssh . &apos; 
&apos;Return hash information from osquery DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; osquery.hash&apos;
&apos;Load the strikes data and return a Dataset class instance . DCNL Returns DCNL Dataset instance : DCNL See DATASET _ PROPOSAL.txt for more information . &apos; 
&apos;URL decode a single string with the given decoding and decode DCNL a &quot; + &quot; to whitespace . DCNL Per default encoding errors are ignored . If you want a different behavior DCNL you can set `errors` to `` \ &apos; replace \ &apos; `` or `` \ &apos; strict \ &apos; `` . In strict mode a DCNL `HTTPUnicodeError` is raised . DCNL : param s : the string to unquote . DCNL : param charset : the charset to be used . DCNL : param errors : the error handling for the charset decoding . &apos; 
&apos;Create an L { IWorker } that does nothing but defer work , to be performed DCNL later . DCNL @ return : a worker that will enqueue work to perform later , and a callable DCNL that will perform one element of that work . DCNL @ rtype : 2-L { tuple } of ( L { IWorker } , L { callable } ) &apos;
&apos;Return `True` if the connected client node is the elected master node in DCNL the Elasticsearch cluster , otherwise return `False` . DCNL : arg client : An : class : `elasticsearch.Elasticsearch` client object DCNL : rtype : bool&apos;
&apos;With no arguments , return a dictionary of all configuration DCNL variables relevant for the current platform . Generally this includes DCNL everything needed to build extensions and install both pure modules and DCNL extensions . On Unix , this means every variable defined in Python \ &apos; s DCNL installed Makefile ; on Windows and Mac OS it \ &apos; s a much smaller set . DCNL With arguments , return a list of values that result from looking up DCNL each argument in the configuration variable dictionary . &apos; 
&apos;remove from todo&apos;
&apos;Create an IIS application pool . DCNL .. note : DCNL This function only validates against the application pool name , and will return DCNL True even if the application pool already exists with a different configuration . DCNL It will not modify the configuration of an existing application pool . DCNL : param str name : The name of the IIS application pool . DCNL : return : A boolean representing whether all changes succeeded . DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; win _ iis.create _ apppool name = \ &apos; MyTestPool \ &apos; &apos;
&apos;DEPRECATED : Print list of available baremetal nodes . &apos; 
&apos;Bounded minimization for scalar functions . DCNL Parameters DCNL func : callable f ( x , * args ) DCNL Objective function to be minimized ( must accept and return scalars ) . DCNL x1 , x2 : float or array scalar DCNL The optimization bounds . DCNL args : tuple , optional DCNL Extra arguments passed to function . DCNL xtol : float , optional DCNL The convergence tolerance . DCNL maxfun : int , optional DCNL Maximum number of function evaluations allowed . DCNL full _ output : bool , optional DCNL If True , return optional outputs . DCNL disp : int , optional DCNL If non-zero , print messages . DCNL 0 : no message printing . DCNL 1 : non-convergence notification messages only . DCNL 2 : print a message on convergence too . DCNL 3 : print iteration results . DCNL Returns DCNL xopt : ndarray DCNL Parameters ( over given interval ) which minimize the DCNL objective function . DCNL fval : number DCNL The function value at the minimum point . DCNL ierr : int DCNL An error flag ( 0 if converged , 1 if maximum number of DCNL function calls reached ) . DCNL numfunc : int DCNL The number of function calls made . DCNL See also DCNL minimize _ scalar : Interface to minimization algorithms for scalar DCNL univariate functions . See the \ &apos; Bounded \ &apos; `method` in particular . DCNL Notes DCNL Finds a local minimizer of the scalar function `func` in the DCNL interval x1 &lt; xopt &lt; x2 using Brent \ &apos; s method . ( See `brent` DCNL for auto-bracketing )  . &apos; 
&apos;Returns the value of the primary key field of the specified `instance` DCNL of a SQLAlchemy model . DCNL This essentially a convenience function for : : DCNL getattr ( instance , primary _ key _ for ( instance ) ) DCNL If `as _ string` is ``True`` , try to coerce the return value to a string . &apos; 
&apos;Produce a ``BETWEEN`` predicate clause . DCNL E.g. : : DCNL from sqlalchemy import between DCNL stmt = select ( &#91; users _ table &#93; ) .where ( between ( users _ table.c.id , 5 , 7 ) ) DCNL Would produce SQL resembling : : DCNL SELECT id , name FROM user WHERE id BETWEEN : id _ 1 AND : id _ 2 DCNL The : func : `.between` function is a standalone version of the DCNL : meth : `.ColumnElement.between` method available on all DCNL SQL expressions , as in : : DCNL stmt = select ( &#91; users _ table &#93; ) .where ( users _ table.c.id.between ( 5 , 7 ) ) DCNL All arguments passed to : func : `.between` , including the left side DCNL column expression , are coerced from Python scalar values if a DCNL the value is not a : class : `.ColumnElement` subclass . For example , DCNL three fixed values can be compared as in : : DCNL print ( between ( 5 , 3 , 7 ) ) DCNL Which would produce : : DCNL : param _ 1 BETWEEN : param _ 2 AND : param _ 3 DCNL : param expr : a column expression , typically a : class : `.ColumnElement` DCNL instance or alternatively a Python scalar expression to be coerced DCNL into a column expression , serving as the left side of the ``BETWEEN`` DCNL expression . DCNL : param lower _ bound : a column or Python scalar expression serving as the lower DCNL bound of the right side of the ``BETWEEN`` expression . DCNL : param upper _ bound : a column or Python scalar expression serving as the DCNL upper bound of the right side of the ``BETWEEN`` expression . DCNL .. seealso : : DCNL : meth : `.ColumnElement.between`&apos;
&apos;Return the common appdata path , using ctypes DCNL From http : / / stackoverflow.com / questions / 626796 / how-do-i-find-the-windows-common-application-data-folder-using-python&apos;
&apos;Fetch and return all Launch Configuration with details . DCNL CLI example : : DCNL salt myminion boto _ asg.get _ all _ launch _ configurations&apos;
&apos;Ensure default cluster info path is never overwritten DCNL by launching successive clusters&apos;
&apos;lettuce.STEP _ REGISTRY.load ( step , func ) should raise an error if step is not a regex&apos;
&apos;Some distros have a specific location for config files&apos;
&apos;Convenience function to apply parametric rectify to a given layer \ &apos; s output . DCNL Will set the layer \ &apos; s nonlinearity to identity if there is one and will DCNL apply the parametric rectifier instead . DCNL Parameters DCNL layer : a : class : `Layer` instance DCNL The `Layer` instance to apply the parametric rectifier layer to ; DCNL note that it will be irreversibly modified as specified above DCNL * * kwargs DCNL Any additional keyword arguments are passed to the DCNL : class : `ParametericRectifierLayer` DCNL Examples DCNL Note that this function modifies an existing layer , like this : DCNL &gt; &gt; &gt; from lasagne.layers import InputLayer , DenseLayer , prelu DCNL &gt; &gt; &gt; layer = InputLayer ( ( 32 , 100 ) ) DCNL &gt; &gt; &gt; layer = DenseLayer ( layer , num _ units = 200 ) DCNL &gt; &gt; &gt; layer = prelu ( layer ) DCNL In particular , : func : `prelu` can * not * be passed as a nonlinearity . &apos; 
&apos;Runs test method multiple times in the following order : DCNL debug cached string _ if _ invalid DCNL False False DCNL False True DCNL False False INVALID DCNL False True INVALID DCNL True False DCNL True True&apos;
&apos;Returns a list of standard base directories on this platform . &apos; 
&apos;Return a percentile range from an array of values . &apos; 
&apos;Return second-order sections from zeros , poles , and gain of a system DCNL Parameters DCNL z : array _ like DCNL Zeros of the transfer function . DCNL p : array _ like DCNL Poles of the transfer function . DCNL k : float DCNL System gain . DCNL pairing : { \ &apos; nearest \ &apos; , \ &apos; keep _ odd \ &apos; } , optional DCNL The method to use to combine pairs of poles and zeros into sections . DCNL See Notes below . DCNL Returns DCNL sos : ndarray DCNL Array of second-order filter coefficients , with shape DCNL `` ( n _ sections , 6 ) `` . See `sosfilt` for the SOS filter format DCNL specification . DCNL See Also DCNL sosfilt DCNL Notes DCNL The algorithm used to convert ZPK to SOS format is designed to DCNL minimize errors due to numerical precision issues . The pairing DCNL algorithm attempts to minimize the peak gain of each biquadratic DCNL section . This is done by pairing poles with the nearest zeros , starting DCNL with the poles closest to the unit circle . DCNL * Algorithms * DCNL The current algorithms are designed specifically for use with digital DCNL filters . ( The output coefficents are not correct for analog filters . ) DCNL The steps in the ``pairing = \ &apos; nearest \ &apos; `` and ``pairing = \ &apos; keep _ odd \ &apos; `` DCNL algorithms are mostly shared . The ``nearest`` algorithm attempts to DCNL minimize the peak gain , while `` \ &apos; keep _ odd \ &apos; `` minimizes peak gain under DCNL the constraint that odd-order systems should retain one section DCNL as first order . The algorithm steps and are as follows : DCNL As a pre-processing step , add poles or zeros to the origin as DCNL necessary to obtain the same number of poles and zeros for pairing . DCNL If ``pairing = = \ &apos; nearest \ &apos; `` and there are an odd number of poles , DCNL add an additional pole and a zero at the origin . DCNL The following steps are then iterated over until no more poles or DCNL zeros remain : DCNL 1 . Take the ( next remaining ) pole ( complex or real ) closest to the DCNL unit circle to begin a new filter section . DCNL 2 . If the pole is real and there are no other remaining real poles &#91; # &#93; _ , DCNL add the closest real zero to the section and leave it as a first DCNL order section . Note that after this step we are guaranteed to be DCNL left with an even number of real poles , complex poles , real zeros , DCNL and complex zeros for subsequent pairing iterations . DCNL 3 . Else : DCNL 1 . If the pole is complex and the zero is the only remaining real DCNL zero * , then pair the pole with the * next * closest zero DCNL ( guaranteed to be complex ) . This is necessary to ensure that DCNL there will be a real zero remaining to eventually create a DCNL first-order section ( thus keeping the odd order ) . DCNL 2 . Else pair the pole with the closest remaining zero ( complex or DCNL real ) . DCNL 3 . Proceed to complete the second-order section by adding another DCNL pole and zero to the current pole and zero in the section : DCNL 1 . If the current pole and zero are both complex , add their DCNL conjugates . DCNL 2 . Else if the pole is complex and the zero is real , add the DCNL conjugate pole and the next closest real zero . DCNL 3 . Else if the pole is real and the zero is complex , add the DCNL conjugate zero and the real pole closest to those zeros . DCNL 4 . Else ( we must have a real pole and real zero ) add the next DCNL real pole closest to the unit circle , and then add the real DCNL zero closest to that pole . DCNL .. &#91; # &#93; This conditional can only be met for specific odd-order inputs DCNL with the ``pairing = = \ &apos; keep _ odd \ &apos; `` method . DCNL .. versionadded : : 0.16.0 DCNL Examples DCNL Design a 6th order low-pass elliptic digital filter for a system with a DCNL sampling rate of 8000 Hz that has a pass-band corner frequency of DCNL 1000 Hz . The ripple in the pass-band should not exceed 0.087 dB , and DCNL the attenuation in the stop-band should be at least 90 dB . DCNL In the following call to `signal.ellip` , we could use ``output = \ &apos; sos \ &apos; `` , DCNL but for this example , we \ &apos; ll use ``output = \ &apos; zpk \ &apos; `` , and then convert to SOS DCNL format with `zpk2sos` : DCNL &gt; &gt; &gt; from scipy import signal DCNL &gt; &gt; &gt; z , p , k = signal.ellip ( 6 , 0.087 , 90 , 1000 / ( 0.5 * 8000 ) , output = \ &apos; zpk \ &apos; ) DCNL Now convert to SOS format . DCNL &gt; &gt; &gt; sos = signal.zpk2sos ( z , p , k ) DCNL The coefficients of the numerators of the sections : DCNL &gt; &gt; &gt; sos &#91; : , : 3 &#93; DCNL array ( &#91; &#91; 0.0014154 , 0.00248707 , 0.0014154 &#93; , DCNL &#91; 1 . , 0.72965193 , 1 . &#93; , DCNL &#91; 1 . , 0.17594966 , 1 . &#93; &#93; ) DCNL The symmetry in the coefficients occurs because all the zeros are on the DCNL unit circle . DCNL The coefficients of the denominators of the sections : DCNL &gt; &gt; &gt; sos &#91; : , 3 : &#93; DCNL array ( &#91; &#91; 1 . , -1.32543251 , 0.46989499 &#93; , DCNL &#91; 1 . , -1.26117915 , 0.6262586 &#93; , DCNL &#91; 1 . , -1.25707217 , 0.86199667 &#93; &#93; ) DCNL The next example shows the effect of the `pairing` option . We have a DCNL system with three poles and three zeros , so the SOS array will have DCNL shape ( 2 , 6 ) . The means there is , in effect , an extra pole and an extra DCNL zero at the origin in the SOS representation . DCNL &gt; &gt; &gt; z1 = np.array ( &#91; -1 , -0.5-0.5j , -0.5 + 0.5j &#93; ) DCNL &gt; &gt; &gt; p1 = np.array ( &#91; 0.75 , 0.8 + 0.1j , 0.8-0.1j &#93; ) DCNL With ``pairing = \ &apos; nearest \ &apos; `` ( the default ) , we obtain DCNL &gt; &gt; &gt; signal.zpk2sos ( z1 , p1 , 1 ) DCNL array ( &#91; &#91; 1 . , 1 . , 0.5 , 1 . , -0.75 , 0 . &#93; , DCNL &#91; 1 . , 1 . , 0 . , 1 . , -1.6 , 0.65 &#93; &#93; ) DCNL The first section has the zeros { -0.5-0.05j , -0.5 + 0.5j } and the poles DCNL { 0 , 0.75 } , and the second section has the zeros { -1 , 0 } and poles DCNL { 0.8 + 0.1j , 0.8-0.1j } . Note that the extra pole and zero at the origin DCNL have been assigned to different sections . DCNL With ``pairing = \ &apos; keep _ odd \ &apos; `` , we obtain : DCNL &gt; &gt; &gt; signal.zpk2sos ( z1 , p1 , 1 , pairing = \ &apos; keep _ odd \ &apos; ) DCNL array ( &#91; &#91; 1 . , 1 . , 0 . , 1 . , -0.75 , 0 . &#93; , DCNL &#91; 1 . , 1 . , 0.5 , 1 . , -1.6 , 0.65 &#93; &#93; ) DCNL The extra pole and zero at the origin are in the same section . DCNL The first section is , in effect , a first-order section . &apos; 
&apos;Test that the base redirect to function works as expected&apos;
&apos;Return the load data that marks a specified jid&apos;
&apos;Parse feature files and return list of Feature model objects . DCNL Handles : DCNL * feature file names , ala &quot; alice.feature &quot; DCNL * feature file locations , ala : &quot; alice.feature : 10 &quot; DCNL : param feature _ files : List of feature file names to parse . DCNL : param language : Default language to use . DCNL : return : List of feature objects . &apos; 
&apos;Lists the creds for given a cred _ id and tenant _ id&apos;
&apos;Find all CCX derived from this course , and send course published event for them . &apos; 
&apos;Compute the inverse Hankel transform of `F` defined as DCNL .. math : : f ( r ) = \ int _ { 0 } ^ \ infty F _ \ nu ( k ) J _ \ nu ( k r ) k \ mathrm { d } k . DCNL If the transform cannot be computed in closed form , this DCNL function returns an unevaluated : class : `InverseHankelTransform` object . DCNL For a description of possible hints , refer to the docstring of DCNL : func : `sympy.integrals.transforms.IntegralTransform.doit`. DCNL Note that for this transform , by default ``noconds = True`` . DCNL &gt; &gt; &gt; from sympy import hankel _ transform , inverse _ hankel _ transform , gamma DCNL &gt; &gt; &gt; from sympy import gamma , exp , sinh , cosh DCNL &gt; &gt; &gt; from sympy.abc import r , k , m , nu , a DCNL &gt; &gt; &gt; ht = hankel _ transform ( 1 / r * * m , r , k , nu ) DCNL &gt; &gt; &gt; ht DCNL 2 * 2 * * ( -m ) * k * * ( m - 2 ) * gamma ( -m / 2 + nu / 2 + 1 ) / gamma ( m / 2 + nu / 2 ) DCNL &gt; &gt; &gt; inverse _ hankel _ transform ( ht , k , r , nu ) DCNL r * * ( -m ) DCNL &gt; &gt; &gt; ht = hankel _ transform ( exp ( -a * r ) , r , k , 0 ) DCNL &gt; &gt; &gt; ht DCNL a / ( k * * 3 * ( a * * 2 / k * * 2 + 1 ) * * ( 3 / 2 ) ) DCNL &gt; &gt; &gt; inverse _ hankel _ transform ( ht , k , r , 0 ) DCNL exp ( -a * r ) DCNL See Also DCNL fourier _ transform , inverse _ fourier _ transform DCNL sine _ transform , inverse _ sine _ transform DCNL cosine _ transform , inverse _ cosine _ transform DCNL hankel _ transform DCNL mellin _ transform , laplace _ transform&apos;
&apos;return true if * obj * is iterable&apos;
&apos;Normalizes the input array so that it sums to 1 . DCNL Parameters DCNL a : array DCNL Non-normalized input data . DCNL axis : int DCNL Dimension along which normalization is performed . DCNL Notes DCNL Modifies the input * * inplace * *  . &apos; 
&apos;Return the Krackhardt Kite Social Network . DCNL A 10 actor social network introduced by David Krackhardt DCNL to illustrate : degree , betweenness , centrality , closeness , etc . DCNL The traditional labeling is : DCNL Andre = 1 , Beverley = 2 , Carol = 3 , Diane = 4 , DCNL Ed = 5 , Fernando = 6 , Garth = 7 , Heather = 8 , Ike = 9 , Jane = 10 . &apos; 
&apos;Save the load to the specified jid&apos;
&apos;Returns True if user _ id _ or _ name is effective user ( id / name )  . &apos; 
&apos; _ match _ abbrev ( s : string , wordmap : { string : Option } ) - &gt; string DCNL Return the string key in \ &apos; wordmap \ &apos; for which \ &apos; s \ &apos; is an unambiguous DCNL abbreviation . If \ &apos; s \ &apos; is found to be ambiguous or doesn \ &apos; t match any of DCNL \ &apos; words \ &apos; , raise BadOptionError . &apos; 
&apos;Function to decide which key function to use . DCNL Defaults to ``default _ key _ func`` . &apos; 
&apos;Handle merging of nodes of a region boundary region adjacency graph . DCNL This function computes the ` &quot; weight &quot; ` and the count ` &quot; count &quot; ` DCNL attributes of the edge between `n` and the node formed after DCNL merging `src` and `dst` . DCNL Parameters DCNL graph : RAG DCNL The graph under consideration . DCNL src , dst : int DCNL The vertices in `graph` to be merged . DCNL n : int DCNL A neighbor of `src` or `dst` or both . DCNL Returns DCNL data : dict DCNL A dictionary with the &quot; weight &quot; and &quot; count &quot; attributes to be DCNL assigned for the merged node . &apos; 
&apos;call str or unicode depending on current mode&apos;
&apos;Mark the specified HTML file as the titlepage of the EPUB . DCNL : param move _ to _ start : If True the HTML file is moved to the start of the spine&apos;
&apos;Install a trace hook which writes incredibly detailed logs DCNL about what code is being executed to stdout . &apos; 
&apos;Computes the determinant of a batch of square matrices . DCNL Args : DCNL a ( Variable ) : Input array to compute the determinant for . DCNL The first dimension should iterate over each matrix and be DCNL of the batchsize . DCNL Returns : DCNL ~ chainer.Variable : vector of determinants for every matrix DCNL in the batch . &apos; 
&apos;Add CSRF to dictionary and wrap in a RequestContext ( needed for context processor ! )  . &apos; 
&apos;Returns a suitable Content-Range header : DCNL &gt; &gt; &gt; print ( _ get _ content _ range ( None , 1 , 4 ) ) DCNL bytes 0-0 / 4 DCNL &gt; &gt; &gt; print ( _ get _ content _ range ( 1 , 3 , 4 ) ) DCNL bytes 1-2 / 4 DCNL &gt; &gt; &gt; print ( _ get _ content _ range ( None , None , 4 ) ) DCNL bytes 0-3 / 4&apos;
&apos;Sets the main _ css . The css _ file must be of the form file.css&apos;
&apos;Determine if a point in the point table is in the loop . &apos; 
&apos;Get the linear fitting data . &apos; 
&apos;Test IO for evoked data ( fif + gz ) with integer and str args . &apos; 
&apos;Defines the conversion between Jy / beam and &quot; brightness temperature &quot; , DCNL : math : `T _ B` , in Kelvins . The brightness temperature is a unit very DCNL commonly used in radio astronomy . See , e.g. , &quot; Tools of Radio Astronomy &quot; DCNL ( Wilson 2009 ) eqn 8.16 and eqn 8.19 ( these pages are available on `google DCNL books DCNL &lt; http : / / books.google.com / books ? id = 9KHw6R8rQEMC &amp; pg = PA179 &amp; source = gbs _ toc _ r &amp; cad = 4 # v = onepage &amp; q &amp; f = false &gt; ` _ _ ) . DCNL : math : `T _ B \ equiv S _ \ nu / \ left ( 2 k \ nu ^ 2 / c ^ 2 \ right ) ` DCNL However , the beam area is essential for this computation : the brightness DCNL temperature is inversely proportional to the beam area DCNL Parameters DCNL beam _ area : Beam Area equivalent DCNL Beam area in angular units , i.e. steradian equivalent DCNL disp : ` ~ astropy.units.Quantity` with spectral units DCNL The observed `spectral` equivalent ` ~ astropy.units.Unit` ( e.g. , DCNL frequency or wavelength ) DCNL Examples DCNL Arecibo C-band beam : : DCNL &gt; &gt; &gt; import numpy as np DCNL &gt; &gt; &gt; from astropy import units as u DCNL &gt; &gt; &gt; beam _ sigma = 50 * u.arcsec DCNL &gt; &gt; &gt; beam _ area = 2 * np.pi * ( beam _ sigma ) * * 2 DCNL &gt; &gt; &gt; freq = 5 * u.GHz DCNL &gt; &gt; &gt; equiv = u.brightness _ temperature ( beam _ area , freq ) DCNL &gt; &gt; &gt; u.Jy.to ( u.K , equivalencies = equiv ) # doctest : + FLOAT _ CMP DCNL 3.526294429423223 DCNL &gt; &gt; &gt; ( 1 * u.Jy ) .to ( u.K , equivalencies = equiv ) # doctest : + FLOAT _ CMP DCNL &lt; Quantity 3.526294429423223 K &gt; DCNL VLA synthetic beam : : DCNL &gt; &gt; &gt; bmaj = 15 * u.arcsec DCNL &gt; &gt; &gt; bmin = 15 * u.arcsec DCNL &gt; &gt; &gt; fwhm _ to _ sigma = 1 . / ( 8 * np.log ( 2 ) ) * * 0.5 DCNL &gt; &gt; &gt; beam _ area = 2 . * np.pi * ( bmaj * bmin * fwhm _ to _ sigma * * 2 ) DCNL &gt; &gt; &gt; freq = 5 * u.GHz DCNL &gt; &gt; &gt; equiv = u.brightness _ temperature ( beam _ area , freq ) DCNL &gt; &gt; &gt; u.Jy.to ( u.K , equivalencies = equiv ) # doctest : + FLOAT _ CMP DCNL 217.2658703625732&apos;
&apos;Helper to convert a data type into a string . &apos; 
&apos;Gets the ( yaml , assets ) from the contents of an exploration data dir . DCNL Args : DCNL dir _ path : a full path to the exploration root directory . DCNL Returns : DCNL a 2-tuple , the first element of which is a yaml string , and the second DCNL element of which is a list of ( filepath , content ) 2-tuples . The filepath DCNL does not include the assets / prefix . DCNL Raises : DCNL Exception : if the following condition doesn \ &apos; t hold : &quot; There is exactly one DCNL file not in assets / , and this file has a .yaml suffix &quot;  . &apos; 
&apos;Fit a single dipole to the given whitened , projected data . &apos; 
&apos;Copy a snapshot&apos;
&apos;Check that scenario tests have service tags DCNL T104 : Scenario tests require a services decorator&apos;
&apos;Return true if the object is a class . DCNL Class objects provide these attributes : DCNL _ _ doc _ _ documentation string DCNL _ _ module _ _ name of module in which this class was defined&apos;
&apos;Listen in to see when videos become available . &apos; 
&apos;Generates ( name , contents ) pairs for the given jar . DCNL Each generated tuple consists of the relative name within the jar of an entry , DCNL for example \ &apos; java / lang / Object.class \ &apos; , and a str that is the corresponding DCNL contents . DCNL Args : DCNL jar _ path : a str that is the path to the jar . DCNL Yields : DCNL A ( name , contents ) pair . &apos; 
&apos;Produces a ColorAttr specification for coloring groups of data based on columns . DCNL Args : DCNL columns ( str or list ( str ) , optional ) : a column or list of columns for coloring DCNL palette ( list ( str ) , optional ) : a list of colors to use for assigning to unique DCNL values in `columns` . DCNL * * kwargs : any keyword , arg supported by : class : `AttrSpec` DCNL Returns : DCNL a `ColorAttr` object&apos;
&apos;Import module , temporarily including modules in the current directory . DCNL Modules located in the current directory has DCNL precedence over modules located in `sys.path` . &apos; 
&apos;Display the administration dashboard . DCNL This is the entry point to the admin site , containing news updates and DCNL useful administration tasks . &apos; 
&apos;Serialize a sequence of Python objects into a YAML stream . DCNL If stream is None , return the produced string instead . &apos; 
&apos;Returns the current / latest learned path . DCNL Checks if given paths are from same source / peer and then compares their DCNL version number to determine which path is received later . If paths are from DCNL different source / peer return None . &apos; 
&apos;Create node positions for G using Graphviz . DCNL Parameters DCNL G : NetworkX graph DCNL A graph created with NetworkX DCNL prog : string DCNL Name of Graphviz layout program DCNL root : string , optional DCNL Root node for twopi layout DCNL args : string , optional DCNL Extra arguments to Graphviz layout program DCNL Returns : dictionary DCNL Dictionary of x , y , positions keyed by node . DCNL Examples DCNL &gt; &gt; &gt; G = nx.petersen _ graph ( ) DCNL &gt; &gt; &gt; pos = nx.nx _ agraph.graphviz _ layout ( G ) DCNL &gt; &gt; &gt; pos = nx.nx _ agraph.graphviz _ layout ( G , prog = \ &apos; dot \ &apos; ) DCNL Notes DCNL This is a wrapper for pygraphviz _ layout . &apos; 
&apos;Returns the message level tags . &apos; 
&apos;Prints rows in the given table . DCNL Will print 25 rows at most for brevity as tables can contain large amounts DCNL of rows . DCNL If no project is specified , then the currently active project is used . &apos; 
&apos;Return the first item of a sequence . &apos; 
&apos;Display the feed dialog . &apos; 
&apos; &lt; user &gt; - flirts with &lt; user &gt; &apos;
&apos;Parse a URL into 5 components : DCNL &lt; scheme &gt; : / / &lt; netloc &gt; / &lt; path &gt; ? &lt; query &gt; # &lt; fragment &gt; DCNL Return a 5-tuple : ( scheme , netloc , path , query , fragment ) . DCNL Note that we don \ &apos; t break the components up in smaller bits DCNL ( e.g. netloc is a single string ) and we don \ &apos; t expand % escapes . &apos; 
&apos;Callback that yields multiple actions for each group in the match . &apos; 
&apos;Given a policy name describe its properties . DCNL Returns a dictionary of interesting properties . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ iot.describe _ policy mypolicy&apos;
&apos;Take Autoscaler params and generate GCE-compatible policy . DCNL : param as _ params : Dictionary in Ansible-playbook format DCNL containing policy arguments . DCNL : type as _ params : ``dict`` DCNL : return : GCE-compatible policy dictionary DCNL : rtype : ``dict``&apos;
&apos;atom : : = \ &apos; ( \ &apos; expr \ &apos; ) \ &apos; &#124; \ &apos; &#91; \ &apos; expr \ &apos; &#93; \ &apos; &#124; \ &apos; options \ &apos; DCNL &#124; long &#124; shorts &#124; argument &#124; command ; &apos;
&apos;HTML generation test only used when called from the command line : DCNL python . / highstate.py DCNL Typical options for generating the report file : DCNL highstate : DCNL report _ format : yaml DCNL report _ delivery : file DCNL file _ output : \ &apos; / srv / salt / _ returners / test.rpt \ &apos; &apos;
&apos;Convert binary string to binary numbers . DCNL If classic _ mode is true ( default value ) , reverse bits . DCNL &gt; &gt; &gt; str2bin ( &quot; \ x03 \ xFF &quot; ) DCNL \ &apos; 00000011 11111111 \ &apos; DCNL &gt; &gt; &gt; str2bin ( &quot; \ x03 \ xFF &quot; , False ) DCNL \ &apos; 11000000 11111111 \ &apos; &apos;
&apos;Add tasks for creating a dataset by reading textfiles&apos;
&apos;Log a message with severity \ &apos; DEBUG \ &apos; on the root logger . &apos; 
&apos;A strategy that yields floats greater than zero . &apos; 
&apos;Wrapper for inserting an int64 FeatureList into a SequenceExample proto . &apos; 
&apos;Returns a string identifying the Python implementation . DCNL Currently , the following implementations are identified : DCNL \ &apos; CPython \ &apos; ( C implementation of Python ) , DCNL \ &apos; IronPython \ &apos; ( .NET implementation of Python ) , DCNL \ &apos; Jython \ &apos; ( Java implementation of Python ) , DCNL \ &apos; PyPy \ &apos; ( Python implementation of Python )  . &apos; 
&apos;Create a `Sort` from a single string criterion . DCNL `model _ cls` is the `Model` being queried . `part` is a single string DCNL ending in `` + `` or ``-`` indicating the sort . &apos; 
&apos;Add a resource DCNL zone : string DCNL name of zone DCNL resource _ type : string DCNL type of resource DCNL * * kwargs : string &#124; int &#124; ... DCNL resource properties DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; zonecfg.add _ resource tallgeese rctl name = zone.max-locked-memory value = \ &apos; ( priv = privileged , limit = 33554432 , action = deny ) \ &apos; &apos;
&apos;bits _ str ( s , endian = \ &apos; big \ &apos; , zero = \ &apos; 0 \ &apos; , one = \ &apos; 1 \ &apos; ) - &gt; str DCNL A wrapper around : func : `bits` , which converts the output into a string . DCNL Examples : DCNL &gt; &gt; &gt; bits _ str ( 511 ) DCNL \ &apos; 0000000111111111 \ &apos; DCNL &gt; &gt; &gt; bits _ str ( &quot; bits _ str &quot; , endian = &quot; little &quot; ) DCNL \ &apos; 0100011010010110001011101100111011111010110011100010111001001110 \ &apos; &apos;
&apos;Creates a GRR VFS temp file . DCNL This function is analogous to CreateGRRTempFile but returns an open VFS handle DCNL to the newly created file . Arguments are the same as for CreateGRRTempFile : DCNL Args : DCNL directory : string representing absolute directory where file should be DCNL written . If None , use \ &apos; tmp \ &apos; under the directory we \ &apos; re running DCNL from . DCNL filename : The name of the file to use . Note that setting both filename and DCNL directory name is not allowed . DCNL lifetime : time in seconds before we should delete this tempfile . DCNL mode : The mode to open the file . DCNL suffix : optional suffix to use for the temp file DCNL Returns : DCNL An open file handle to the new file and the corresponding pathspec . &apos; 
&apos;return new _ figure _ manager , draw _ if _ interactive and show for pylab&apos;
&apos;Display the course \ &apos; s about page . DCNL Assumes the course _ id is in a valid format . &apos; 
&apos;Check if the given IP address is a private address DCNL .. versionadded : : 2014.7.0 DCNL .. versionchanged : : 2015.8.0 DCNL IPv6 support DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; network.is _ private 10.0.0.3&apos;
&apos;Compute Hessenberg form of a matrix . DCNL The Hessenberg decomposition is : : DCNL A = Q H Q ^ H DCNL where `Q` is unitary / orthogonal and `H` has only zero elements below DCNL the first sub-diagonal . DCNL Parameters DCNL a : ( M , M ) array _ like DCNL Matrix to bring into Hessenberg form . DCNL calc _ q : bool , optional DCNL Whether to compute the transformation matrix . Default is False . DCNL overwrite _ a : bool , optional DCNL Whether to overwrite `a` ; may improve performance . DCNL Default is False . DCNL check _ finite : bool , optional DCNL Whether to check that the input matrix contains only finite numbers . DCNL Disabling may give a performance gain , but may result in problems DCNL ( crashes , non-termination ) if the inputs do contain infinities or NaNs . DCNL Returns DCNL H : ( M , M ) ndarray DCNL Hessenberg form of `a` . DCNL Q : ( M , M ) ndarray DCNL Unitary / orthogonal similarity transformation matrix ``A = Q H Q ^ H`` . DCNL Only returned if ``calc _ q = True`` . &apos; 
&apos;Raises ValueError is is _ cuda _ ndarray ( obj ) evaluates False&apos;
&apos;Get rotationMatrix . &apos; 
&apos;colapse outer dimensions into one and preserve inner dimension DCNL this allows for easy cpu convolution in numpy DCNL Arguments : DCNL dim ( tuple ) : dimensions list in a tuple DCNL pad ( int ) : how many pixel paddings&apos;
&apos;Adds \ &apos; prefix \ &apos; to the beginning of selected lines in \ &apos; text \ &apos; . DCNL If \ &apos; predicate \ &apos; is provided , \ &apos; prefix \ &apos; will only be added to the lines DCNL where \ &apos; predicate ( line ) \ &apos; is True . If \ &apos; predicate \ &apos; is not provided , DCNL it will default to adding \ &apos; prefix \ &apos; to all non-empty lines that do not DCNL consist solely of whitespace characters . &apos; 
&apos;Return the first value DCNL Parameters DCNL obj : dict-like object&apos;
&apos;Returns whether or not a URL represents an SSH connection . &apos; 
&apos; ( INTERNAL ) New instance from ctypes . &apos; 
&apos;Convert between lengths ( to be interpreted as lengths in the focal plane ) DCNL and angular units with a specified ``platescale`` . DCNL Parameters DCNL platescale : ` ~ astropy.units.Quantity` DCNL The pixel scale either in units of distance / pixel or distance / angle . &apos; 
&apos;View that checks the hash in a password reset link and presents a DCNL form for entering a new password . &apos; 
&apos;Return a list of random items for structure \ &apos; t \ &apos; with format DCNL \ &apos; fmtchar \ &apos;  . &apos; 
&apos;Format track for output to MPD client . DCNL : param track : the track DCNL : type track : : class : `mopidy.models.Track` or : class : `mopidy.models.TlTrack` DCNL : param position : track \ &apos; s position in playlist DCNL : type position : integer DCNL : param stream _ title : the current streams title DCNL : type position : string DCNL : rtype : list of two-tuples&apos;
&apos;Read and return settings from a file . &apos; 
&apos;Finds fist parent of element of the given type DCNL @ param object element : etree element DCNL @ param string the tag parent to search for DCNL @ return object element : the found parent or None when not found&apos;
&apos;Write commit logs . DCNL : param repo : Path to repository DCNL : param paths : Optional set of specific paths to print entries for DCNL : param outstream : Stream to write log output to DCNL : param reverse : Reverse order in which entries are printed DCNL : param name _ status : Print name status DCNL : param max _ entries : Optional maximum number of entries to display&apos;
&apos;Get the handle for a particular rule DCNL This function accepts a rule in a standard nftables command format , DCNL starting with the chain . Trying to force users to adapt to a new DCNL method of creating rules would be irritating at best , and we DCNL already have a parser that can handle it . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nftables.get _ rule _ handle filter input \ DCNL rule = \ &apos; input tcp dport 22 log accept \ &apos; DCNL IPv6 : DCNL salt \ &apos; * \ &apos; nftables.get _ rule _ handle filter input \ DCNL rule = \ &apos; input tcp dport 22 log accept \ &apos; \ DCNL family = ipv6&apos;
&apos;Takes a list of domain objects and returns a corresponding list DCNL of their names . &apos; 
&apos;Checks if file exists . Returns { } if something fails . &apos; 
&apos;helper method for present. ensure that cloudwatch _ alarms are set&apos;
&apos;Stream n JSON messages&apos;
&apos;Returns a list of partial velocities with respect to the provided DCNL generalized speeds in the given reference frame for each of the supplied DCNL velocity vectors . DCNL The output is a list of lists . The outer list has a number of elements DCNL equal to the number of supplied velocity vectors . The inner lists are , for DCNL each velocity vector , the partial derivatives of that velocity vector with DCNL respect to the generalized speeds supplied . DCNL Parameters DCNL vel _ vecs : iterable DCNL An iterable of velocity vectors ( angular or linear ) . DCNL gen _ speeds : iterable DCNL An iterable of generalized speeds . DCNL frame : ReferenceFrame DCNL The reference frame that the partial derivatives are going to be taken DCNL in . DCNL Examples DCNL &gt; &gt; &gt; from sympy.physics.vector import Point , ReferenceFrame DCNL &gt; &gt; &gt; from sympy.physics.vector import dynamicsymbols DCNL &gt; &gt; &gt; from sympy.physics.vector import partial _ velocity DCNL &gt; &gt; &gt; u = dynamicsymbols ( \ &apos; u \ &apos; ) DCNL &gt; &gt; &gt; N = ReferenceFrame ( \ &apos; N \ &apos; ) DCNL &gt; &gt; &gt; P = Point ( \ &apos; P \ &apos; ) DCNL &gt; &gt; &gt; P.set _ vel ( N , u * N.x ) DCNL &gt; &gt; &gt; vel _ vecs = &#91; P.vel ( N ) &#93; DCNL &gt; &gt; &gt; gen _ speeds = &#91; u &#93; DCNL &gt; &gt; &gt; partial _ velocity ( vel _ vecs , gen _ speeds , N ) DCNL &#91; &#91; N.x &#93; &#93; &apos;
&apos;Return whether a string is in ascii . &apos; 
&apos;Run a Python file , parse the docstrings of all the classes DCNL and functions it declares , and return them . DCNL Parameters DCNL filename : str DCNL Filename of the module to run . DCNL global _ dict : dict , optional DCNL Globals dictionary to pass along to `execfile ( ) ` . DCNL Returns DCNL all _ errors : list DCNL Each entry of the list is a tuple , of length 2 or 3 , with DCNL format either DCNL ( func _ or _ class _ name , docstring _ error _ description ) DCNL or DCNL ( class _ name , method _ name , docstring _ error _ description ) &apos;
&apos;Runs doctest for the importing module . &apos; 
&apos;Get triangles for ico surface . &apos; 
&apos;Returns the modification time of the most recently modified DCNL file provided DCNL : param list ( str ) files : names of files to check DCNL : return : most recent modification time amongst the fileset DCNL : rtype : datetime.datetime&apos;
&apos;Query remote object about info that it publishes . Returns identities and features lists . &apos; 
&apos;Test if the sun is currently up based on the statemachine . &apos; 
&apos;postfix _ expression : postfix _ expression LBRACKET expression RBRACKET&apos;
&apos;Returns a dict with OFICIAL availables plugins in NINJA-IDE web page&apos;
&apos;Returns True if we are allowed to introspect this field , False otherwise . DCNL ( \ &apos; allowed \ &apos; means \ &apos; in core \ &apos; . Custom fields can declare they are introspectable DCNL by the default South rules by adding the attribute _ south _ introspects = True . ) &apos;
&apos;Decorator for views that checks that the user passes the given test , DCNL redirecting to the log-in page if necessary . The test should be a callable DCNL that takes the user object and returns True if the user passes . &apos; 
&apos;Single task view page&apos;
&apos;Decode the given PDF string DCNL @ param string : A PDFString to decode DCNL @ return A tuple ( status , statusContent ) , where statusContent is the decoded PDF string in case status = 0 or an error in case status = -1&apos;
&apos;Recursively check all source files in C { paths } . DCNL @ param paths : A list of paths to Python source files and directories DCNL containing Python source files . DCNL @ param reporter : A L { Reporter } where all of the warnings and errors DCNL will be reported to . DCNL @ return : The number of warnings found . &apos; 
&apos;Setup the vlc platform . &apos; 
&apos;Test hsl to rgb color function&apos;
&apos;Accept a drop event and return a list of paths that can be read from DCNL and represent files with extensions . &apos; 
&apos;a damped exponential&apos;
&apos;Control function using Numpy . &apos; 
&apos;Reads a range of the document _ file containing some number of entry _ class DCNL instances . We deliminate the entry _ class entries by the keyword on their DCNL first line ( entry _ keyword ) . When finished the document is left at the DCNL end _ position . DCNL Either an end _ position or section _ end _ keywords must be provided . DCNL : param file document _ file : file with network status document content DCNL : param bool validate : checks the validity of the document \ &apos; s contents if DCNL * * True * * , skips these checks otherwise DCNL : param class entry _ class : class to construct instance for DCNL : param str entry _ keyword : first keyword for the entry instances DCNL : param int start _ position : start of the section , default is the current position DCNL : param int end _ position : end of the section DCNL : param tuple section _ end _ keywords : keyword ( s ) that deliminate the end of the DCNL section if no end _ position was provided DCNL : param tuple extra _ args : extra arguments for the entry _ class ( after the DCNL content and validate flag ) DCNL : returns : iterator over entry _ class instances DCNL : raises : DCNL * * * ValueError * * if the contents is malformed and validate is * * True * * DCNL * * * IOError * * if the file can \ &apos; t be read&apos;
&apos;Get the list of available instance sizes ( flavors )  . &apos; 
&apos;Helper function to construct a string from a base and the policy . DCNL Used to encode the policy index into either a file name or a DCNL directory name by various modules . DCNL : param base : the base string DCNL : param policy _ or _ index : StoragePolicy instance , or an index DCNL ( string or int ) , if None the legacy DCNL storage Policy-0 is assumed . DCNL : returns : base name with policy index added DCNL : raises : PolicyError if no policy exists with the given policy _ index&apos;
&apos;Upgrade outdated , unpinned brews . DCNL refresh DCNL Fetch the newest version of Homebrew and all formulae from GitHub before installing . DCNL Returns a dictionary containing the changes : DCNL .. code-block : : python DCNL { \ &apos; &lt; package &gt; \ &apos; : { \ &apos; old \ &apos; : \ &apos; &lt; old-version &gt; \ &apos; , DCNL \ &apos; new \ &apos; : \ &apos; &lt; new-version &gt; \ &apos; } } DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.upgrade&apos;
&apos;&apos;
&apos;Gets a mode descriptor for the given mode . &apos; 
&apos;Saves and restart the plugin , returning True if no errors occurred&apos;
&apos;Return the det ( ``M`` ) by using permutations to select factors . DCNL For size larger than 8 the number of permutations becomes prohibitively DCNL large , or if there are no symbols in the matrix , it is better to use the DCNL standard determinant routines , e.g. `M.det ( ) ` . DCNL See Also DCNL det _ minor DCNL det _ quick&apos;
&apos;config _ validator ( ) - &gt; &#91; ( config _ variable , error _ message ) &#93; DCNL Called by core check _ config ( ) view . &apos; 
&apos;return a blank string if the match group is None&apos;
&apos;Returns the HMAC-SHA1 of \ &apos; value \ &apos; , using a key generated from key _ salt and a DCNL secret ( which defaults to settings.SECRET _ KEY ) . DCNL A different key _ salt should be passed in for every application of HMAC . &apos; 
&apos;Return etc _ hosts information from osquery DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; osquery.etc _ hosts&apos;
&apos;Raise a skipException if a config exists and is True DCNL : param str group : The first arg , the option group to check DCNL : param str name : The second arg , the option name to check DCNL : param str msg : Optional third arg , the skip msg to use if a skip is raised DCNL : raises testtools.TestCase.skipException : If the specified config option DCNL exists and evaluates to True&apos;
&apos;Compute Lasso path with coordinate descent DCNL The Lasso optimization function varies for mono and multi-outputs . DCNL For mono-output tasks it is : : DCNL ( 1 / ( 2 * n _ samples ) ) * &#124; &#124; y - Xw &#124; &#124; ^ 2 _ 2 + alpha * &#124; &#124; w &#124; &#124; _ 1 DCNL For multi-output tasks it is : : DCNL ( 1 / ( 2 * n _ samples ) ) * &#124; &#124; Y - XW &#124; &#124; ^ 2 _ Fro + alpha * &#124; &#124; W &#124; &#124; _ 21 DCNL Where : : DCNL &#124; &#124; W &#124; &#124; _ 21 = \ sum _ i \ sqrt { \ sum _ j w _ { ij } ^ 2 } DCNL i.e. the sum of norm of each row . DCNL Read more in the : ref : `User Guide &lt; lasso &gt; ` . DCNL Parameters DCNL X : { array-like , sparse matrix } , shape ( n _ samples , n _ features ) DCNL Training data . Pass directly as Fortran-contiguous data to avoid DCNL unnecessary memory duplication . If ``y`` is mono-output then ``X`` DCNL can be sparse . DCNL y : ndarray , shape ( n _ samples , ) , or ( n _ samples , n _ outputs ) DCNL Target values DCNL eps : float , optional DCNL Length of the path . ``eps = 1e-3`` means that DCNL ``alpha _ min / alpha _ max = 1e-3`` DCNL n _ alphas : int , optional DCNL Number of alphas along the regularization path DCNL alphas : ndarray , optional DCNL List of alphas where to compute the models . DCNL If ``None`` alphas are set automatically DCNL precompute : True &#124; False &#124; \ &apos; auto \ &apos; &#124; array-like DCNL Whether to use a precomputed Gram matrix to speed up DCNL calculations . If set to `` \ &apos; auto \ &apos; `` let us decide . The Gram DCNL matrix can also be passed as argument . DCNL Xy : array-like , optional DCNL Xy = np.dot ( X.T , y ) that can be precomputed . It is useful DCNL only when the Gram matrix is precomputed . DCNL copy _ X : boolean , optional , default True DCNL If ``True`` , X will be copied ; else , it may be overwritten . DCNL coef _ init : array , shape ( n _ features , ) &#124; None DCNL The initial values of the coefficients . DCNL verbose : bool or integer DCNL Amount of verbosity . DCNL params : kwargs DCNL keyword arguments passed to the coordinate descent solver . DCNL positive : bool , default False DCNL If set to True , forces coefficients to be positive . DCNL return _ n _ iter : bool DCNL whether to return the number of iterations or not . DCNL Returns DCNL alphas : array , shape ( n _ alphas , ) DCNL The alphas along the path where models are computed . DCNL coefs : array , shape ( n _ features , n _ alphas ) or ( n _ outputs , n _ features , n _ alphas ) DCNL Coefficients along the path . DCNL dual _ gaps : array , shape ( n _ alphas , ) DCNL The dual gaps at the end of the optimization for each alpha . DCNL n _ iters : array-like , shape ( n _ alphas , ) DCNL The number of iterations taken by the coordinate descent optimizer to DCNL reach the specified tolerance for each alpha . DCNL Notes DCNL See examples / linear _ model / plot _ lasso _ coordinate _ descent _ path.py DCNL for an example . DCNL To avoid unnecessary memory duplication the X argument of the fit method DCNL should be directly passed as a Fortran-contiguous numpy array . DCNL Note that in certain cases , the Lars solver may be significantly DCNL faster to implement this functionality . In particular , linear DCNL interpolation can be used to retrieve model coefficients between the DCNL values output by lars _ path DCNL Examples DCNL Comparing lasso _ path and lars _ path with interpolation : DCNL &gt; &gt; &gt; X = np.array ( &#91; &#91; 1 , 2 , 3.1 &#93; , &#91; 2.3 , 5.4 , 4.3 &#93; &#93; ) .T DCNL &gt; &gt; &gt; y = np.array ( &#91; 1 , 2 , 3.1 &#93; ) DCNL &gt; &gt; &gt; # Use lasso _ path to compute a coefficient path DCNL &gt; &gt; &gt; _ , coef _ path , _ = lasso _ path ( X , y , alphas = &#91; 5 . , 1 . , .5 &#93; ) DCNL &gt; &gt; &gt; print ( coef _ path ) DCNL &#91; &#91; 0 . 0 . 0.46874778 &#93; DCNL &#91; 0.2159048 0.4425765 0.23689075 &#93; &#93; DCNL &gt; &gt; &gt; # Now use lars _ path and 1D linear interpolation to compute the DCNL &gt; &gt; &gt; # same path DCNL &gt; &gt; &gt; from sklearn.linear _ model import lars _ path DCNL &gt; &gt; &gt; alphas , active , coef _ path _ lars = lars _ path ( X , y , method = \ &apos; lasso \ &apos; ) DCNL &gt; &gt; &gt; from scipy import interpolate DCNL &gt; &gt; &gt; coef _ path _ continuous = interpolate.interp1d ( alphas &#91; : : -1 &#93; , DCNL ... coef _ path _ lars &#91; : , : : -1 &#93; ) DCNL &gt; &gt; &gt; print ( coef _ path _ continuous ( &#91; 5 . , 1 . , .5 &#93; ) ) DCNL &#91; &#91; 0 . 0 . 0.46915237 &#93; DCNL &#91; 0.2159048 0.4425765 0.23668876 &#93; &#93; DCNL See also DCNL lars _ path DCNL Lasso DCNL LassoLars DCNL LassoCV DCNL LassoLarsCV DCNL sklearn.decomposition.sparse _ encode&apos;
&apos;Set of service client modules available in Tempest and plugins DCNL Set of stable service clients from Tempest and service clients exposed DCNL by plugins . This set of available modules can be used for automatic DCNL configuration . DCNL : raise PluginRegistrationException : if a plugin exposes a service _ version DCNL already defined by Tempest or another plugin . DCNL Examples : DCNL &gt; &gt; &gt; from tempest import config DCNL &gt; &gt; &gt; params = { } DCNL &gt; &gt; &gt; for service _ version in available _ modules ( ) : DCNL &gt; &gt; &gt; service = service _ version.split ( \ &apos; . \ &apos; ) &#91; 0 &#93; DCNL &gt; &gt; &gt; params &#91; service &#93; = config.service _ client _ config ( service ) DCNL &gt; &gt; &gt; service _ clients = ServiceClients ( creds , identity _ uri , DCNL &gt; &gt; &gt; client _ parameters = params ) &apos;
&apos;Shorthand for \ &apos; print _ exception ( sys.exc _ type , sys.exc _ value , sys.exc _ traceback , limit , file ) \ &apos; . DCNL ( In fact , it uses sys.exc _ info ( ) to retrieve the same information DCNL in a thread-safe way . ) &apos;
&apos;Lomb-Scargle Periodogram DCNL This implements a fast chi-squared periodogram using the algorithm DCNL outlined in &#91; 4 &#93; _ . The result is identical to the standard Lomb-Scargle DCNL periodogram . The advantage of this algorithm is the DCNL ability to compute multiterm periodograms relatively quickly . DCNL Parameters DCNL t , y , dy : array _ like ( NOT astropy.Quantities ) DCNL times , values , and errors of the data points . These should be DCNL broadcastable to the same shape . DCNL f0 , df , Nf : ( float , float , int ) DCNL parameters describing the frequency grid , f = f0 + df * arange ( Nf ) . DCNL normalization : string ( optional , default = \ &apos; standard \ &apos; ) DCNL Normalization to use for the periodogram . DCNL Options are \ &apos; standard \ &apos; , \ &apos; model \ &apos; , \ &apos; log \ &apos; , or \ &apos; psd \ &apos; . DCNL fit _ mean : bool ( optional , default = True ) DCNL if True , include a constant offset as part of the model at each DCNL frequency . This can lead to more accurate results , especially in the DCNL case of incomplete phase coverage . DCNL center _ data : bool ( optional , default = True ) DCNL if True , pre-center the data by subtracting the weighted mean DCNL of the input data . This is especially important if ``fit _ mean = False`` DCNL nterms : int ( optional , default = 1 ) DCNL Number of Fourier terms in the fit DCNL Returns DCNL power : array _ like DCNL Lomb-Scargle power associated with each frequency . DCNL Units of the result depend on the normalization . DCNL References DCNL .. &#91; 1 &#93; M. Zechmeister and M. Kurster , A &amp; A 496 , 577-584 ( 2009 ) DCNL .. &#91; 2 &#93; W. Press et al , Numerical Recipies in C ( 2002 ) DCNL .. &#91; 3 &#93; Scargle , J.D. ApJ 263 : 835-853 ( 1982 ) DCNL .. &#91; 4 &#93; Palmer , J. ApJ 695 : 496-502 ( 2009 ) &apos;
&apos;Github issue # 1258 : interpolation was failing with numpy DCNL 1.7 pre-release . &apos; 
&apos;Create a new Instance record in the database . DCNL context - request context object DCNL values - dict containing column values . &apos; 
&apos;Validate an update document . &apos; 
&apos;The input is a list of &#91; token , tag , chunk &#93; -items . DCNL The output is a list of &#91; token , tag , chunk , preposition &#93; -items . DCNL PP-chunks followed by NP-chunks make up a PNP-chunk . &apos; 
&apos;Evaluates an image expression . DCNL : param expression : A string containing a Python-style expression . DCNL : param options : Values to add to the evaluation context . You DCNL can either use a dictionary , or one or more keyword DCNL arguments . DCNL : return : The evaluated expression . This is usually an image object , but can DCNL also be an integer , a floating point value , or a pixel tuple , DCNL depending on the expression . &apos; 
&apos;evaluate and return the expression of the op on a and b DCNL Parameters DCNL op : the actual operand DCNL op _ str : the string version of the op DCNL a : left operand DCNL b : right operand DCNL raise _ on _ error : pass the error to the higher level if indicated DCNL ( default is False ) , otherwise evaluate the op with and DCNL return the results DCNL use _ numexpr : whether to try to use numexpr ( default True ) &apos;
&apos;Create a gzip compressed archive of ``source _ path`` at ``archive _ path`` . DCNL An empty archive file will be created if the source file does not exist . DCNL This gives the diagnostic archive a consistent set of files which can DCNL easily be tested . &apos; 
&apos;Compute the boolean mask X = = missing _ values . &apos; 
&apos;Benchmark the speed of different relu implementations . DCNL Both fprop and grad are tested . &apos; 
&apos;Load parser result store from specified scenario package . DCNL Args : DCNL package _ dirpath : str ; Path to scenario package directory . DCNL open _ for _ write : bool ; Open store for writing . DCNL Returns : DCNL shelve.DbfilenameShelf ; Looks and acts like a dict&apos;
&apos;Utility function : ``7`` = &gt; `` \ &apos; H \ &apos; `` , ``27`` = &gt; `` \ &apos; AB \ &apos; ``&apos;
&apos;Convert b to a boolean or raise&apos;
&apos;Return a copy of response that supports seekable response interface . DCNL Accepts responses from both mechanize and urllib2 handlers . DCNL Copes with both oridinary response instances and HTTPError instances ( which DCNL can \ &apos; t be simply wrapped due to the requirement of preserving the exception DCNL base class )  . &apos; 
&apos; * * DEPRECATED * * DCNL Load a module , given information returned by find _ module ( ) . DCNL The module name must include the full package name , if any . &apos; 
&apos;Runs the tests . &apos; 
&apos;Invite users to new ccx&apos;
&apos;Convert a numeric socket type value to an IntEnum member . DCNL If it \ &apos; s not a known member , return the numeric value itself . &apos; 
&apos;Determine if a token appears to be PKI-based . DCNL thx to ayoung for sorting this out . DCNL base64 decoded hex representation of MII is 3082 : : DCNL In &#91; 3 &#93; : binascii.hexlify ( base64.b64decode ( \ &apos; MII = \ &apos; ) ) DCNL Out &#91; 3 &#93; : \ &apos; 3082 \ &apos; DCNL re : http : / / www.itu.int / ITU-T / studygroups / com17 / languages / X.690-0207.pdf DCNL pg4 : For tags from 0 to 30 the first octet is the identfier DCNL pg10 : Hex 30 means sequence , followed by the length of that sequence . DCNL pg5 : Second octet is the length octet DCNL first bit indicates short or long form , next 7 bits encode the DCNL number of subsequent octets that make up the content length octets DCNL as an unsigned binary int DCNL 82 = 10000010 ( first bit indicates long form ) DCNL 0000010 = 2 octets of content length DCNL so read the next 2 octets to get the length of the content . DCNL In the case of a very large content length there could be a requirement to DCNL have more than 2 octets to designate the content length , therefore DCNL requiring us to check for MIM , MIQ , etc . DCNL In &#91; 4 &#93; : base64.b64encode ( binascii.a2b _ hex ( \ &apos; 3083 \ &apos; ) ) DCNL Out &#91; 4 &#93; : \ &apos; MIM = \ &apos; DCNL In &#91; 5 &#93; : base64.b64encode ( binascii.a2b _ hex ( \ &apos; 3084 \ &apos; ) ) DCNL Out &#91; 5 &#93; : \ &apos; MIQ = \ &apos; DCNL Checking for MI would become invalid at 16 octets of content length DCNL 10010000 = 90 DCNL In &#91; 6 &#93; : base64.b64encode ( binascii.a2b _ hex ( \ &apos; 3090 \ &apos; ) ) DCNL Out &#91; 6 &#93; : \ &apos; MJA = \ &apos; DCNL Checking for just M is insufficient DCNL But we will only check for MII : DCNL Max length of the content using 2 octets is 3FFF or 16383 . DCNL It \ &apos; s not practical to support a token of this length or greater in http DCNL therefore , we will check for MII only and ignore the case of larger tokens&apos;
&apos;Read an IDL .sav file . DCNL Parameters DCNL file _ name : str DCNL Name of the IDL save file . DCNL idict : dict , optional DCNL Dictionary in which to insert .sav file variables . DCNL python _ dict : bool , optional DCNL By default , the object return is not a Python dictionary , but a DCNL case-insensitive dictionary with item , attribute , and call access DCNL to variables . To get a standard Python dictionary , set this option DCNL to True . DCNL uncompressed _ file _ name : str , optional DCNL This option only has an effect for .sav files written with the DCNL / compress option . If a file name is specified , compressed .sav DCNL files are uncompressed to this file . Otherwise , readsav will use DCNL the `tempfile` module to determine a temporary filename DCNL automatically , and will remove the temporary file upon successfully DCNL reading it in . DCNL verbose : bool , optional DCNL Whether to print out information about the save file , including DCNL the records read , and available variables . DCNL Returns DCNL idl _ dict : AttrDict or dict DCNL If `python _ dict` is set to False ( default ) , this function returns a DCNL case-insensitive dictionary with item , attribute , and call access DCNL to variables . If `python _ dict` is set to True , this function DCNL returns a Python dictionary with all variable names in lowercase . DCNL If `idict` was specified , then variables are written to the DCNL dictionary specified , and the updated dictionary is returned . &apos; 
&apos;Bash has problems dealing with certain paths so we \ &apos; re surrounding all DCNL path outputs with quotes . &apos; 
&apos;`add _ redaction _ filter` injects the redaction filter into all of the `logger` DCNL handlers . This must be called after all of the handlers have been added to DCNL `logger` , otherwise those handlers may expose unredacted strings . &apos; 
&apos;Returns the cache key for this ( model , instance ) pair . &apos; 
&apos;Encode a dict of values ( either strings or file descriptors or DCNL : class : `FileStorage` objects . ) into a multipart encoded string stored DCNL in a file descriptor . &apos; 
&apos;Set up CUDA FFT resampling . DCNL Parameters DCNL n _ jobs : int &#124; str DCNL If n _ jobs = = \ &apos; cuda \ &apos; , the function will attempt to set up for CUDA DCNL FFT resampling . DCNL W : array DCNL The filtering function to be used during resampling . DCNL If n _ jobs = \ &apos; cuda \ &apos; , this function will be shortened ( since CUDA DCNL assumes FFTs of real signals are half the length of the signal ) DCNL and turned into a gpuarray . DCNL new _ len : int DCNL The size of the array following resampling . DCNL Returns DCNL n _ jobs : int DCNL Sets n _ jobs = 1 if n _ jobs = = \ &apos; cuda \ &apos; was passed in , otherwise DCNL original n _ jobs is passed . DCNL cuda _ dict : dict DCNL Dictionary with the following CUDA-related variables : DCNL use _ cuda : bool DCNL Whether CUDA should be used . DCNL fft _ plan : instance of FFTPlan DCNL FFT plan to use in calculating the FFT . DCNL ifft _ plan : instance of FFTPlan DCNL FFT plan to use in calculating the IFFT . DCNL x _ fft : instance of gpuarray DCNL Empty allocated GPU space for storing the result of the DCNL frequency-domain multiplication . DCNL x : instance of gpuarray DCNL Empty allocated GPU space for the data to resample . DCNL W : array &#124; instance of gpuarray DCNL This will either be a gpuarray ( if CUDA enabled ) or np.ndarray. DCNL If CUDA is enabled , W will be modified appropriately for use DCNL with filter.fft _ multiply ( ) . DCNL Notes DCNL This function is designed to be used with fft _ resample ( )  . &apos; 
&apos;Generate batches of distorted versions of ImageNet images . DCNL Use this function as the inputs for training a network . DCNL Distorting images provides a useful technique for augmenting the data DCNL set during training in order to make the network invariant to aspects DCNL of the image that do not effect the label . DCNL Args : DCNL dataset : instance of Dataset class specifying the dataset . DCNL batch _ size : integer , number of examples in batch DCNL num _ preprocess _ threads : integer , total number of preprocessing threads but DCNL None defaults to FLAGS.num _ preprocess _ threads . DCNL Returns : DCNL images : Images . 4D tensor of size &#91; batch _ size , FLAGS.image _ size , DCNL FLAGS.image _ size , 3 &#93; . DCNL labels : 1-D integer Tensor of &#91; batch _ size &#93;  . &apos; 
&apos;Let Vispy use the target OpenGL ES 2.0 implementation DCNL Also see ``vispy.use ( ) `` . DCNL Parameters DCNL target : str DCNL The target GL backend to use . DCNL Available backends : DCNL * gl2 - Use ES 2.0 subset of desktop ( i.e. normal ) OpenGL DCNL * gl + - Use the desktop ES 2.0 subset plus all non-deprecated GL DCNL functions on your system ( requires PyOpenGL ) DCNL * es2 - Use the ES2 library ( Angle / DirectX on Windows ) DCNL * pyopengl2 - Use ES 2.0 subset of pyopengl ( for fallback and testing ) DCNL * dummy - Prevent usage of gloo.gl ( for when rendering occurs elsewhere ) DCNL You can use vispy \ &apos; s config option &quot; gl _ debug &quot; to check for errors DCNL on each API call . Or , one can specify it as the target , e.g. &quot; gl2 DCNL debug &quot; . ( Debug does not apply to \ &apos; gl + \ &apos; , since PyOpenGL has its own DCNL debug mechanism ) &apos;
&apos;Generate kernel _ arg _ base _ type metadata&apos;
&apos;Makes a request to the Telegram API . DCNL : param token : The bot \ &apos; s API token . ( Created with @ BotFather ) DCNL : param method _ name : Name of the API method to be called . ( E.g. \ &apos; getUpdates \ &apos; ) DCNL : param method : HTTP method to be used . Defaults to \ &apos; get \ &apos; . DCNL : param params : Optional parameters . Should be a dictionary with key-value pairs . DCNL : param files : Optional files . DCNL : return : The result parsed to a JSON dictionary . &apos; 
&apos;Parses from a string . DCNL : param str souce : The string to parse DCNL : returns : The parsed tree DCNL : rtype : list&apos;
&apos;Calculate a greyscale dilation , using either a structuring element , DCNL or a footprint corresponding to a flat structuring element . DCNL Grayscale dilation is a mathematical morphology operation . For the DCNL simple case of a full and flat structuring element , it can be viewed DCNL as a maximum filter over a sliding window . DCNL Parameters DCNL input : array _ like DCNL Array over which the grayscale dilation is to be computed . DCNL size : tuple of ints DCNL Shape of a flat and full structuring element used for the grayscale DCNL dilation . Optional if `footprint` or `structure` is provided . DCNL footprint : array of ints , optional DCNL Positions of non-infinite elements of a flat structuring element DCNL used for the grayscale dilation . Non-zero values give the set of DCNL neighbors of the center over which the maximum is chosen . DCNL structure : array of ints , optional DCNL Structuring element used for the grayscale dilation . `structure` DCNL may be a non-flat structuring element . DCNL output : array , optional DCNL An array used for storing the ouput of the dilation may be provided . DCNL mode : { \ &apos; reflect \ &apos; , \ &apos; constant \ &apos; , \ &apos; nearest \ &apos; , \ &apos; mirror \ &apos; , \ &apos; wrap \ &apos; } , optional DCNL The `mode` parameter determines how the array borders are DCNL handled , where `cval` is the value when mode is equal to DCNL \ &apos; constant \ &apos; . Default is \ &apos; reflect \ &apos; DCNL cval : scalar , optional DCNL Value to fill past edges of input if `mode` is \ &apos; constant \ &apos; . Default DCNL is 0.0 . DCNL origin : scalar , optional DCNL The `origin` parameter controls the placement of the filter . DCNL Default 0 DCNL Returns DCNL grey _ dilation : ndarray DCNL Grayscale dilation of `input` . DCNL See also DCNL binary _ dilation , grey _ erosion , grey _ closing , grey _ opening DCNL generate _ binary _ structure , ndimage.maximum _ filter DCNL Notes DCNL The grayscale dilation of an image input by a structuring element s defined DCNL over a domain E is given by : DCNL ( input + s ) ( x ) = max { input ( y ) + s ( x-y ) , for y in E } DCNL In particular , for structuring elements defined as DCNL s ( y ) = 0 for y in E , the grayscale dilation computes the maximum of the DCNL input image inside a sliding window defined by E. DCNL Grayscale dilation &#91; 1 &#93; _ is a * mathematical morphology * operation &#91; 2 &#93; _ . DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Dilation _ % 28morphology % 29 DCNL .. &#91; 2 &#93; http : / / en.wikipedia.org / wiki / Mathematical _ morphology DCNL Examples DCNL &gt; &gt; &gt; from scipy import ndimage DCNL &gt; &gt; &gt; a = np.zeros ( ( 7,7 ) , dtype = int ) DCNL &gt; &gt; &gt; a &#91; 2 : 5 , 2 : 5 &#93; = 1 DCNL &gt; &gt; &gt; a &#91; 4,4 &#93; = 2 ; a &#91; 2,3 &#93; = 3 DCNL &gt; &gt; &gt; a DCNL array ( &#91; &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 1 , 3 , 1 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 1 , 1 , 1 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 1 , 1 , 2 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.grey _ dilation ( a , size = ( 3,3 ) ) DCNL array ( &#91; &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 1 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 1 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 2 , 0 &#93; , DCNL &#91; 0 , 1 , 1 , 2 , 2 , 2 , 0 &#93; , DCNL &#91; 0 , 1 , 1 , 2 , 2 , 2 , 0 &#93; , DCNL &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.grey _ dilation ( a , footprint = np.ones ( ( 3,3 ) ) ) DCNL array ( &#91; &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 1 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 1 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 2 , 0 &#93; , DCNL &#91; 0 , 1 , 1 , 2 , 2 , 2 , 0 &#93; , DCNL &#91; 0 , 1 , 1 , 2 , 2 , 2 , 0 &#93; , DCNL &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; s = ndimage.generate _ binary _ structure ( 2,1 ) DCNL &gt; &gt; &gt; s DCNL array ( &#91; &#91; False , True , False &#93; , DCNL &#91; True , True , True &#93; , DCNL &#91; False , True , False &#93; &#93; , dtype = bool ) DCNL &gt; &gt; &gt; ndimage.grey _ dilation ( a , footprint = s ) DCNL array ( &#91; &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 1 , 3 , 1 , 0 , 0 &#93; , DCNL &#91; 0 , 1 , 3 , 3 , 3 , 1 , 0 &#93; , DCNL &#91; 0 , 1 , 1 , 3 , 2 , 1 , 0 &#93; , DCNL &#91; 0 , 1 , 1 , 2 , 2 , 2 , 0 &#93; , DCNL &#91; 0 , 0 , 1 , 1 , 2 , 0 , 0 &#93; , DCNL &#91; 0 , 0 , 0 , 0 , 0 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.grey _ dilation ( a , size = ( 3,3 ) , structure = np.ones ( ( 3,3 ) ) ) DCNL array ( &#91; &#91; 1 , 1 , 1 , 1 , 1 , 1 , 1 &#93; , DCNL &#91; 1 , 2 , 4 , 4 , 4 , 2 , 1 &#93; , DCNL &#91; 1 , 2 , 4 , 4 , 4 , 2 , 1 &#93; , DCNL &#91; 1 , 2 , 4 , 4 , 4 , 3 , 1 &#93; , DCNL &#91; 1 , 2 , 2 , 3 , 3 , 3 , 1 &#93; , DCNL &#91; 1 , 2 , 2 , 3 , 3 , 3 , 1 &#93; , DCNL &#91; 1 , 1 , 1 , 1 , 1 , 1 , 1 &#93; &#93; ) &apos;
&apos;Return a &quot; fake &quot; table , with foreign keys where needed . &apos; 
&apos;Get port and port binding records for update within transaction . &apos; 
&apos;- Always surround these binary operators with a single space on DCNL either side : assignment ( = ) , augmented assignment ( + = , - = etc . ) , DCNL comparisons ( = = , &lt; , &gt; , ! = , &lt; &gt; , &lt; = , &gt; = , in , not in , is , is not ) , DCNL Booleans ( and , or , not ) . DCNL - Use spaces around arithmetic operators . DCNL Okay : i = i + 1 DCNL Okay : submitted + = 1 DCNL Okay : x = x * 2 - 1 DCNL Okay : hypot2 = x * x + y * y DCNL Okay : c = ( a + b ) * ( a - b ) DCNL Okay : foo ( bar , key = \ &apos; word \ &apos; , * args , * * kwargs ) DCNL Okay : alpha &#91; : -i &#93; DCNL E225 : i = i + 1 DCNL E225 : submitted + = 1 DCNL E225 : x = x / 2 - 1 DCNL E225 : z = x * * y DCNL E226 : c = ( a + b ) * ( a-b ) DCNL E226 : hypot2 = x * x + y * y DCNL E227 : c = a &#124; b DCNL E228 : msg = fmt % ( errno , errmsg ) &apos;
&apos;Assume LDEV status has changed as desired . &apos; 
&apos;DiagonalGaussian.sample _ from _ epsilon doesn \ &apos; t crash&apos;
&apos;Convert a space-separated list of EDNS flag text values into a EDNS DCNL flags value . DCNL @ rtype : int&apos;
&apos;Convert a date to a datetime for datastore storage . DCNL Args : DCNL value : A datetime.date object . DCNL Returns : DCNL A datetime object with time set to 0 : 00 . &apos; 
&apos;Find registrations with unexpected numbers of template keys or DCNL outdated templates . &apos; 
&apos;Asserts the specified output has exactly n elements matching the DCNL path specified . &apos; 
&apos;Test we warn when non-default port is used for Google Home . &apos; 
&apos;Computes the area under the receiver-operater characteristic ( AUC ) DCNL This function computes the AUC error metric for binary classification . DCNL Parameters DCNL actual : list of binary numbers , numpy array DCNL The ground truth value DCNL posterior : same type as actual DCNL Defines a ranking on the binary numbers , from most likely to DCNL be positive to least likely to be positive . DCNL Returns DCNL score : double DCNL The mean squared error between actual and posterior&apos;
&apos;Add y groove&apos;
&apos;Gets the ChannelServiceStub instance from the API proxy stub map . DCNL Returns : DCNL The ChannelServiceStub instance as registered in the API stub map . &apos; 
&apos; .. code-block : : gherkin DCNL Given the model elements with name and tags : DCNL &#124; name &#124; tags &#124; DCNL &#124; S1 &#124; @ foo &#124; DCNL Then the tag expression select model elements with : DCNL &#124; tag expression &#124; selected ? &#124; DCNL &#124; @ foo &#124; S1 , S3 &#124; DCNL &#124; - @ foo &#124; S0 , S2 , S3 &#124; &apos;
&apos;Check mapping file and extract list of valid barcodes , primers&apos;
&apos;Uploads a template only if it has changed , and if so , reload the DCNL related service . &apos; 
&apos;Test that conftest files are detected only up to a ini file , unless DCNL an explicit --confcutdir option is given . &apos; 
&apos;Tests whether a phone number is valid for a certain region . DCNL Note this doesn \ &apos; t verify the number is actually in use , which is DCNL impossible to tell by just looking at a number itself . If the country DCNL calling code is not the same as the country calling code for the region , DCNL this immediately exits with false . After this , the specific number pattern DCNL rules for the region are examined . This is useful for determining for DCNL example whether a particular number is valid for Canada , rather than just DCNL a valid NANPA number . DCNL Warning : In most cases , you want to use is _ valid _ number instead . For DCNL example , this method will mark numbers from British Crown dependencies DCNL such as the Isle of Man as invalid for the region &quot; GB &quot; ( United Kingdom ) , DCNL since it has its own region code , &quot; IM &quot; , which may be undesirable . DCNL Arguments : DCNL numobj -- The phone number object that we want to validate . DCNL region _ code -- The region that we want to validate the phone number for . DCNL Returns a boolean that indicates whether the number is of a valid pattern . &apos; 
&apos;Test when only one inputs have one broadcastable dimension&apos;
&apos;Determine whether the text seems to be valid lyrics . &apos; 
&apos;Compute virtual evoked using interpolated fields in mag / grad channels . DCNL Parameters DCNL evoked : instance of mne.Evoked DCNL The evoked object . DCNL ch _ type : str DCNL The destination channel type . It can be \ &apos; mag \ &apos; or \ &apos; grad \ &apos; . DCNL mode : str DCNL Either ` \ &apos; accurate \ &apos; ` or ` \ &apos; fast \ &apos; ` , determines the quality of the DCNL Legendre polynomial expansion used . ` \ &apos; fast \ &apos; ` should be sufficient DCNL for most applications . DCNL Returns DCNL evoked : instance of mne.Evoked DCNL The transformed evoked object containing only virtual channels . &apos; 
&apos;Get the functions with the search string in the files . &apos; 
&apos;Get the description of available titles . DCNL @ param p _ mi : the media player . DCNL @ return : list containing description of available titles . &apos; 
&apos;Return whether or not given value is a valid domain . DCNL If the value is valid domain name this function returns ``True`` , otherwise DCNL : class : ` ~ validators.utils.ValidationFailure`. DCNL Examples : : DCNL &gt; &gt; &gt; domain ( \ &apos; example.com \ &apos; ) DCNL True DCNL &gt; &gt; &gt; domain ( \ &apos; example.com / \ &apos; ) DCNL ValidationFailure ( func = domain , ... ) DCNL Supports IDN domains as well : : DCNL &gt; &gt; &gt; domain ( \ &apos; xn----gtbspbbmkef.xn--p1ai \ &apos; ) DCNL True DCNL .. versionadded : : 0.9 DCNL .. versionchanged : : 0.10 DCNL Added support for internationalized domain name ( IDN ) validation . DCNL : param value : domain string to validate&apos;
&apos;Course settings configuration DCNL GET DCNL html : get the page DCNL json : get the model DCNL PUT , POST DCNL json : update the Course \ &apos; s settings . The payload is a json rep of the DCNL metadata dicts . &apos; 
&apos;Returns True if the MacOS X urllib fakes should be installed . &apos; 
&apos;Utility function ; generates UUIDs&apos;
&apos;Register event to function with a decorator&apos;
&apos;Show HaProxy frontends DCNL socket DCNL haproxy stats socket DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; haproxy.show _ frontends&apos;
&apos;Copy a file , including finder info , resource fork , etc&apos;
&apos;Assert actual and desired arrays are within some SNR tolerance&apos;
&apos;Returns a set of all available widgets&apos;
&apos;Get WMT data into data _ dir , create vocabularies and tokenize data . DCNL Args : DCNL data _ dir : directory in which the data sets will be stored . DCNL en _ vocabulary _ size : size of the English vocabulary to create and use . DCNL fr _ vocabulary _ size : size of the French vocabulary to create and use . DCNL tokenizer : a function to use to tokenize each data sentence ; DCNL if None , basic _ tokenizer will be used . DCNL Returns : DCNL A tuple of 6 elements : DCNL ( 1 ) path to the token-ids for English training data-set , DCNL ( 2 ) path to the token-ids for French training data-set , DCNL ( 3 ) path to the token-ids for English development data-set , DCNL ( 4 ) path to the token-ids for French development data-set , DCNL ( 5 ) path to the English vocabulary file , DCNL ( 6 ) path to the French vocabulary file . &apos; 
&apos;Remove unused images DCNL verbose : boolean ( False ) DCNL toggle verbose output DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; imgadm.vacuum &#91; verbose = True &#93; &apos;
&apos;Compares the content and mode of blobs found via two tree objects . DCNL : param repo : Path to repository DCNL : param old _ tree : Id of old tree DCNL : param new _ tree : Id of new tree DCNL : param outstream : Stream to write to&apos;
&apos;Test the methods of MarkovChain , as well as mc _ compute _ stationary , DCNL with P matrix and known solutions&apos;
&apos;Returns a list of words ( alphanumeric character sequences ) from the given string . DCNL Common punctuation marks are stripped from words . &apos; 
&apos;Returns an error template . DCNL Template : ``invitations / invitation _ error.html`` DCNL Context : DCNL error _ message DCNL String containing the error message . &apos; 
&apos;Returns the Type object for prog _ id . &apos; 
&apos;Resolves host name to IP address . &apos; 
&apos;Returns the grade distribution for the problems in the `section` section in a format for the d3 code . DCNL `course _ id` a string that is the course \ &apos; s ID . DCNL `section` an int that is a zero-based index into the course \ &apos; s list of sections . DCNL Navigates to the section specified to find all the problems associated with that section and then finds the grade DCNL distribution for those problems . Finally returns an object formated the way the d3 _ stacked _ bar _ graph.js expects its DCNL data object to be in . DCNL If this is requested multiple times quickly for the same course , it is better to call DCNL get _ d3 _ problem _ grade _ distrib and pick out the sections of interest . DCNL Returns an array of dicts with the following keys ( taken from d3 _ stacked _ bar _ graph.js \ &apos; s documentation ) DCNL \ &apos; xValue \ &apos; - Corresponding value for the x-axis DCNL \ &apos; stackData \ &apos; - Array of objects with key , value pairs that represent a bar : DCNL \ &apos; color \ &apos; - Defines what &quot; color &quot; the bar will map to DCNL \ &apos; value \ &apos; - Maps to the height of the bar , along the y-axis DCNL \ &apos; tooltip \ &apos; - ( Optional ) Text to display on mouse hover&apos;
&apos;Options DCNL maxiter : int DCNL Maximum number of iterations to perform . DCNL xtol : float DCNL Relative error in solution `xopt` acceptable for convergence . &apos; 
&apos;Award the specific badge to the user if they \ &apos; ve earned it . &apos; 
&apos; .. versionchanged : : 2015.8.12,2016.3.3,2016.11.0 DCNL On minions running systemd &gt; = 205 , `systemd-run ( 1 ) ` _ is now used to DCNL isolate commands which modify installed packages from the DCNL ``salt-minion`` daemon \ &apos; s control group . This is done to keep systemd DCNL from killing any yum / dnf commands spawned by Salt when the DCNL ``salt-minion`` service is restarted . ( see ``KillMode`` in the DCNL `systemd.kill ( 5 ) ` _ manpage for more information ) . If desired , usage of DCNL `systemd-run ( 1 ) ` _ can be suppressed by setting a : mod : `config option DCNL &lt; salt.modules.config.get &gt; ` called ``systemd.scope`` , with a value of DCNL ``False`` ( no quotes ) . DCNL .. _ `systemd-run ( 1 ) ` : https : / / www.freedesktop.org / software / systemd / man / systemd-run.html DCNL .. _ `systemd.kill ( 5 ) ` : https : / / www.freedesktop.org / software / systemd / man / systemd.kill.html DCNL Package purges are not supported by yum , this function is identical to DCNL : mod : `pkg.remove &lt; salt.modules.yumpkg.remove &gt; ` . DCNL name DCNL The name of the package to be purged DCNL Multiple Package Options : DCNL pkgs DCNL A list of packages to delete . Must be passed as a python list . The DCNL ``name`` parameter will be ignored if this option is passed . DCNL .. versionadded : : 0.16.0 DCNL Returns a dict containing the changes . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.purge &lt; package name &gt; DCNL salt \ &apos; * \ &apos; pkg.purge &lt; package1 &gt; , &lt; package2 &gt; , &lt; package3 &gt; DCNL salt \ &apos; * \ &apos; pkg.purge pkgs = \ &apos; &#91; &quot; foo &quot; , &quot; bar &quot; &#93; \ &apos; &apos;
&apos;Provides the byte sequence for a collection of HTTP / 2 frames representing DCNL the provided request . DCNL @ param headers : The HTTP / 2 headers to send . DCNL @ type headers : L { list } of L { tuple } of L { bytes } DCNL @ param data : The HTTP data to send . Each list entry will be sent in its own DCNL frame . DCNL @ type data : L { list } of L { bytes } DCNL @ param frameFactory : The L { FrameFactory } that will be used to construct the DCNL frames . DCNL @ type frameFactory : L { FrameFactory } DCNL @ param streamID : The ID of the stream on which to send the request . DCNL @ type streamID : L { int } &apos;
&apos;Return the request fingerprint . DCNL The request fingerprint is a hash that uniquely identifies the resource the DCNL request points to . For example , take the following two urls : DCNL http : / / www.example.com / query ? id = 111 &amp; cat = 222 DCNL http : / / www.example.com / query ? cat = 222 &amp; id = 111 DCNL Even though those are two different URLs both point to the same resource DCNL and are equivalent ( ie. they should return the same response ) . DCNL Another example are cookies used to store session ids . Suppose the DCNL following page is only accesible to authenticated users : DCNL http : / / www.example.com / members / offers.html DCNL Lot of sites use a cookie to store the session id , which adds a random DCNL component to the HTTP Request and thus should be ignored when calculating DCNL the fingerprint . DCNL For this reason , request headers are ignored by default when calculating DCNL the fingeprint . If you want to include specific headers use the DCNL include _ headers argument , which is a list of Request headers to include . &apos; 
&apos;warn ( ) should print \ &apos; Warning \ &apos; plus given text&apos;
&apos;Put terminal into a raw mode . &apos; 
&apos;Does basic ModelAdmin option validation . Calls custom validation DCNL classmethod in the end if it is provided in cls . The signature of the DCNL custom validation classmethod should be : def validate ( cls , model )  . &apos; 
&apos;Foos ! &apos;
&apos;Replaces all occurances of Posix slashes ( / ) in provided DCNL filepath with NT ones ( \ ) DCNL &gt; &gt; &gt; posixToNtSlashes ( \ &apos; C : / Windows \ &apos; ) DCNL \ &apos; C : \ \ Windows \ &apos; &apos;
&apos;yield lines with hexdump of data&apos;
&apos;Internal function used by mask _ dssp _ dict ( PRIVATE ) . DCNL Return a DSSP dictionary that maps ( chainid , resid ) to an amino acid , DCNL secondary structure symbol , solvent accessibility value , and hydrogen bond DCNL information ( relative dssp indices and hydrogen bond energies ) from an open DCNL DSSP file object . : : DCNL Parameters DCNL handle : file DCNL the open DSSP output file handle&apos;
&apos;Return original expr if rule returns None&apos;
&apos;Return display of results from a full-text lucene search of data libraries . &apos; 
&apos;Sequentially read the file containing the edge list data for the DCNL graphs in the atlas and generate the graphs one at a time . DCNL This function reads the file given in : data : `.ATLAS _ FILE` . &apos; 
&apos;Return the localized representation of an integer or decimal . DCNL For None , print nothing . &apos; 
&apos;Split an expression into Expr and noncommutative QExpr parts . &apos; 
&apos;strings.column _ width&apos;
&apos;Decorator to time a function or method . DCNL Parameters DCNL num _ tries : int , optional DCNL Number of calls to make . Timer will take the DCNL average run time . DCNL verbose : bool , optional DCNL Extra log information . DCNL Returns DCNL tt : float DCNL Average run time in seconds . DCNL result DCNL Output ( s ) from the function . DCNL Examples DCNL To add timer to time `numpy.log` for 100 times with DCNL verbose output : : DCNL import numpy as np DCNL from astropy.utils.timer import timefunc DCNL @ timefunc ( 100 ) DCNL def timed _ log ( x ) : DCNL return np.log ( x ) DCNL To run the decorated function above : DCNL &gt; &gt; &gt; t , y = timed _ log ( 100 ) DCNL INFO : timed _ log took 9.29832458496e-06 s on AVERAGE for 100 call ( s ) . &#91; ... &#93; DCNL &gt; &gt; &gt; t DCNL 9.298324584960938e-06 DCNL &gt; &gt; &gt; y DCNL 4.6051701859880918&apos;
&apos;Create a checked ``PMap`` field . DCNL : param key : The required type for the keys of the map . DCNL : param value : The required type for the values of the map . DCNL : param bool optional : If true , ``None`` can be used as a value for this DCNL field . DCNL : param invariant : Pass-through to ``field`` . DCNL : param initial : An initial value for the field . This will first be coerced DCNL using the field \ &apos; s factory . If not given , the initial value is an empty DCNL map . DCNL : param factory : A factory used to convert input arguments to the stored DCNL value whenever it is set . Note that this will be composed with the DCNL constructor for the ``CheckedPMap`` class constructed for this field . DCNL : return : A ``field`` containing a ``CheckedPMap`` . &apos; 
&apos;Check if path is a single component of a path . DCNL Check that the path is safe to join too . &apos; 
&apos;push a copy to the site&apos;
&apos;Send an email from the OSF . DCNL Example : : : DCNL from website import mails DCNL mails.send _ email ( \ &apos; foo @ bar.com \ &apos; , mails.TEST , name = &quot; Foo &quot; ) DCNL : param str to _ addr : The recipient \ &apos; s email address DCNL : param Mail mail : The mail object DCNL : param str mimetype : Either \ &apos; plain \ &apos; or \ &apos; html \ &apos; DCNL : param function callback : celery task to execute after send _ mail completes DCNL : param * * context : Context vars for the message template DCNL .. note : DCNL Uses celery if available&apos;
&apos;Turns a Django template into something that is understood by xgettext . It DCNL does so by translating the Django translation tags into standard gettext DCNL function invocations . &apos; 
&apos;Process xmlElement by svgReader . &apos; 
&apos;Record usage of multiple rate limits . DCNL If any of the of the rate limits expire during the processing of the DCNL function , the usage counts may be inaccurate and it is not defined DCNL which , if any , of the keys have been updated in the underlying cache . DCNL Arguments : DCNL prefix _ slices : A list of ( prefix , timeslice ) DCNL Returns : DCNL A list of the usage counts in the same order as prefix _ slices . DCNL Raises : DCNL RateLimitError if anything goes wrong . DCNL It is not defined which , if any , of the keys have been updated if this DCNL happens . &apos; 
&apos;lx hash --sha1 file ... DCNL lx hash --md5 file ... DCNL lx hash --md4 file ... DCNL lx hash --dcid file ... DCNL lx hash --ed2k file ... DCNL lx hash --info-hash xxx.torrent ... DCNL lx hash --verify-sha1 file hash DCNL lx hash --verify-md5 file hash DCNL lx hash --verify-md4 file hash DCNL lx hash --verify-dcid file hash DCNL lx hash --verify-ed2k file ed2k : / / ... DCNL lx hash --verify-bt file xxx.torrent&apos;
&apos;Dump the shell environment as HTML . &apos; 
&apos;Decorator for parameterized test w.r.t. the product set of signed dtypes . DCNL Args : DCNL names ( list of str ) : Argument names to which dtypes are passed . DCNL full ( bool ) : If ``True`` , then all combinations of dtypes DCNL will be tested . DCNL Otherwise , the subset of combinations will be tested DCNL ( see description in : func : `cupy.testing.for _ dtypes _ combination` ) . DCNL .. seealso : : : func : `cupy.testing.for _ dtypes _ combination`&apos;
&apos;Decode a query string in x-www-form-urlencoded format into a sequence DCNL of two-element tuples . DCNL Unlike urlparse.parse _ qsl ( ... , strict _ parsing = True ) urldecode will enforce DCNL correct formatting of the query string by validation . If validation fails DCNL a ValueError will be raised. urllib.parse _ qsl will only raise errors if DCNL any of name-value pairs omits the equals sign . &apos; 
&apos;Test cursor movements with Emacs key bindings . &apos; 
&apos;Recurses over a nested structure to look for changes in Suds objects . DCNL Args : DCNL obj : A parameter for a SOAP request field which is to be inspected and DCNL will be packed for Suds if an xsi _ type is specified , otherwise will be DCNL left unaltered . DCNL factory : The suds.client.Factory object which can create instances of the DCNL classes generated from the WSDL . DCNL parent : The parent object that contains the obj parameter to be inspected . &apos; 
&apos;Push a byte onto the current block stack . DCNL @ see : Aliases : s _ char ( ) DCNL @ type value : Integer DCNL @ param value : Default integer value DCNL @ type endian : Character DCNL @ param endian : ( Optional , def = LITTLE _ ENDIAN ) Endianess of the bit field ( LITTLE _ ENDIAN : &lt; , BIG _ ENDIAN : &gt; ) DCNL @ type format : String DCNL @ param format : ( Optional , def = binary ) Output format , &quot; binary &quot; or &quot; ascii &quot; DCNL @ type signed : Boolean DCNL @ param signed : ( Optional , def = False ) Make size signed vs. unsigned ( applicable only with format = &quot; ascii &quot; ) DCNL @ type full _ range : Boolean DCNL @ param full _ range : ( Optional , def = False ) If enabled the field mutates through * all * possible values . DCNL @ type fuzzable : Boolean DCNL @ param fuzzable : ( Optional , def = True ) Enable / disable fuzzing of this primitive DCNL @ type name : String DCNL @ param name : ( Optional , def = None ) Specifying a name gives you direct access to a primitive&apos;
&apos;This is called by the publish _ collection _ and _ update _ user _ profiles DCNL function in collection _ services.py. It publishes an collection and commits DCNL changes . DCNL It is the responsibility of the caller to check that the collection is DCNL valid prior to publication . &apos; 
&apos;Get the hardware address on Windows by running ipconfig.exe . &apos; 
&apos;Find all Twisted-style projects beneath a base directory . DCNL @ param baseDirectory : A L { twisted.python.filepath.FilePath } to look inside . DCNL @ return : A list of L { Project }  . &apos; 
&apos;Encrypt one block with aes DCNL @ param { int &#91; &#93; } data 16-Byte state DCNL @ param { int &#91; &#93; } expanded _ key 176 / 208 / 240-Byte expanded key DCNL @ returns { int &#91; &#93; } 16-Byte cipher&apos;
&apos;Breaks \ &apos; seq \ &apos; into a generator of lists with length \ &apos; size \ &apos;  . &apos; 
&apos;Tests the compatibility replacement for functools.wraps which supports DCNL argument preservation across all supported Python versions . &apos; 
&apos;Manage the SNMP sysContact , sysLocation , and sysServices settings . DCNL : param str contact : The SNMP contact . DCNL : param str location : The SNMP location . DCNL : param str services : A list of selected services . DCNL Example of usage : DCNL .. code-block : : yaml DCNL snmp-agent-settings : DCNL win _ snmp.agent _ settings : DCNL - contact : Test Contact DCNL - location : Test Location DCNL - services : DCNL - Physical DCNL - Internet&apos;
&apos;Parse a gcode file and display the commands . &apos; 
&apos;integer is at bin center&apos;
&apos;Transform list into a maxheap , in-place , in O ( len ( x ) ) time . &apos; 
&apos;Generate the vertices for a third order Bezier curve . DCNL The vertices returned by this function can be passed to a LineVisual or DCNL ArrowVisual . DCNL Parameters DCNL p1 : array DCNL 2D coordinates of the start point DCNL p2 : array DCNL 2D coordinates of the first curve point DCNL p3 : array DCNL 2D coordinates of the second curve point DCNL p4 : array DCNL 2D coordinates of the end point DCNL Returns DCNL coords : list DCNL Vertices for the Bezier curve . DCNL See Also DCNL curve3 _ bezier DCNL Notes DCNL For more information about Bezier curves please refer to the `Wikipedia` _ DCNL page . DCNL .. _ Wikipedia : https : / / en.wikipedia.org / wiki / B % C3 % A9zier _ curve&apos;
&apos;For a window of length M rolling over a buffer of length N , DCNL there are ( N - M ) + 1 legal windows . DCNL Example : DCNL If my array has N = 4 rows , and I want windows of length M = 2 , there are DCNL 3 legal windows : data &#91; 0 : 2 &#93; , data &#91; 1 : 3 &#93; , and data &#91; 2 : 4 &#93;  . &apos; 
&apos;Remove flavor access for project . &apos; 
&apos;Omit part of a string if needed to make it fit in a maximum length . &apos; 
&apos;Update a quota usage or raise if it does not exist . &apos; 
&apos;Builds provider _ location for volume or snapshot . DCNL : param system : VNX serial number DCNL : param lun _ id : LUN ID in VNX DCNL : param lun _ type : \ &apos; lun \ &apos; or \ &apos; smp \ &apos; DCNL : param base _ lun _ name : primary LUN name , DCNL it will be used when creating snap lun DCNL : param version : driver version&apos;
&apos;Send a notification . &apos; 
&apos;Format a member ref for consumption outside of this module . &apos; 
&apos;return a random value with probability p , else 0&apos;
&apos;helper function to take a ADMX policy string for registry.pol file data and DCNL update existing string or append the string to the data&apos;
&apos;Mark a test as emitting a warning on a specific dialect . DCNL With no arguments , squelches all SAWarning failures . Or pass one or more DCNL strings ; these will be matched to the root of the warning description by DCNL warnings.filterwarnings ( )  . &apos; 
&apos;Return a configured univention uldap object&apos;
&apos;Return the html tags in the \ &apos; s \ &apos; string containing the \ &apos; cont \ &apos; DCNL string ; if toClosure is True , everything between the opening DCNL tag and the closing tag is returned . &apos; 
&apos;A CherryPy tool which hooks at before _ handler to perform DCNL HTTP Digest Access Authentication , as specified in : rfc : `2617` . DCNL If the request has an \ &apos; authorization \ &apos; header with a \ &apos; Digest \ &apos; scheme , DCNL this tool authenticates the credentials supplied in that header . DCNL If the request has no \ &apos; authorization \ &apos; header , or if it does but the DCNL scheme is not &quot; Digest &quot; , or if authentication fails , the tool sends DCNL a 401 response with a \ &apos; WWW-Authenticate \ &apos; Digest header . DCNL realm DCNL A string containing the authentication realm . DCNL get _ ha1 DCNL A callable which looks up a username in a credentials store DCNL and returns the HA1 string , which is defined in the RFC to be DCNL MD5 ( username : realm : password ) . The function \ &apos; s signature is : DCNL ``get _ ha1 ( realm , username ) `` DCNL where username is obtained from the request \ &apos; s \ &apos; authorization \ &apos; header . DCNL If username is not found in the credentials store , get _ ha1 ( ) returns DCNL None . DCNL key DCNL A secret string known only to the server , used in the synthesis DCNL of nonces . &apos; 
&apos;Create a ( possibly compressed ) tar file from all the files under DCNL \ &apos; base _ dir \ &apos; . \ &apos; compress \ &apos; must be &quot; gzip &quot; ( the default ) , &quot; compress &quot; , DCNL &quot; bzip2 &quot; , or None . Both &quot; tar &quot; and the compression utility named by DCNL \ &apos; compress \ &apos; must be on the default program search path , so this is DCNL probably Unix-specific . The output tar file will be named \ &apos; base _ dir \ &apos; + DCNL &quot; .tar &quot; , possibly plus the appropriate compression extension ( &quot; .gz &quot; , DCNL &quot; .bz2 &quot; or &quot; .Z &quot; ) . Return the output filename . &apos; 
&apos;1-day Rate-Of-Change ( ROC ) of a Triple Smooth EMA&apos;
&apos;Uses the lock directory method . This is good because `mkdir` is DCNL atomic at the system call level , so it \ &apos; s thread-safe . &apos; 
&apos;Returns all the options for the given select . &apos; 
&apos;Wrap multiple paragraphs to fit a specified width . DCNL This is equivalent to textwrap.wrap , but with support for multiple DCNL paragraphs , as separated by empty lines . DCNL Returns DCNL list of complete paragraphs , wrapped to fill `ncols` columns . &apos; 
&apos; : type path : str&apos;
&apos;Prepare the text of the html file . DCNL Returns the body text of a document&apos;
&apos;This will translate a block of text with parameters . DCNL Usage : : DCNL { % blocktrans with bar = foo &#124; filter boo = baz &#124; filter % } DCNL This is { { bar } } and { { boo } } . DCNL { % endblocktrans % } DCNL Additionally , this supports pluralization : : DCNL { % blocktrans count count = var &#124; length % } DCNL There is { { count } } object . DCNL { % plural % } DCNL There are { { count } } objects . DCNL { % endblocktrans % } DCNL This is much like ngettext , only in template syntax . DCNL The &quot; var as value &quot; legacy format is still supported : : DCNL { % blocktrans with foo &#124; filter as bar and baz &#124; filter as boo % } DCNL { % blocktrans count var &#124; length as count % } DCNL Contextual translations are supported : : DCNL { % blocktrans with bar = foo &#124; filter context &quot; greeting &quot; % } DCNL This is { { bar } } . DCNL { % endblocktrans % } DCNL This is equivalent to calling pgettext / npgettext instead of DCNL ( u ) gettext / ( u ) ngettext . &apos; 
&apos;Set the entry text . &apos; 
&apos;Perform Levene test for equal variances . DCNL The Levene test tests the null hypothesis that all input samples DCNL are from populations with equal variances . Levene \ &apos; s test is an DCNL alternative to Bartlett \ &apos; s test `bartlett` in the case where DCNL there are significant deviations from normality . DCNL Parameters DCNL sample1 , sample2 , ... : array _ like DCNL The sample data , possibly with different lengths DCNL center : { \ &apos; mean \ &apos; , \ &apos; median \ &apos; , \ &apos; trimmed \ &apos; } , optional DCNL Which function of the data to use in the test . The default DCNL is \ &apos; median \ &apos; . DCNL proportiontocut : float , optional DCNL When `center` is \ &apos; trimmed \ &apos; , this gives the proportion of data points DCNL to cut from each end . ( See `scipy.stats.trim _ mean` . ) DCNL Default is 0.05 . DCNL Returns DCNL statistic : float DCNL The test statistic . DCNL pvalue : float DCNL The p-value for the test . DCNL Notes DCNL Three variations of Levene \ &apos; s test are possible . The possibilities DCNL and their recommended usages are : DCNL * \ &apos; median \ &apos; : Recommended for skewed ( non-normal ) distributions &gt; DCNL * \ &apos; mean \ &apos; : Recommended for symmetric , moderate-tailed distributions . DCNL * \ &apos; trimmed \ &apos; : Recommended for heavy-tailed distributions . DCNL References DCNL .. &#91; 1 &#93; http : / / www.itl.nist.gov / div898 / handbook / eda / section3 / eda35a.htm DCNL .. &#91; 2 &#93; Levene , H. ( 1960 ) . In Contributions to Probability and Statistics : DCNL Essays in Honor of Harold Hotelling , I. Olkin et al. eds . , DCNL Stanford University Press , pp. 278-292 . DCNL .. &#91; 3 &#93; Brown , M. B. and Forsythe , A. B. ( 1974 ) , Journal of the American DCNL Statistical Association , 69 , 364-367&apos;
&apos;Create extra fill loops . &apos; 
&apos;Converts a phone number with letters into its numeric equivalent . &apos; 
&apos;unary _ expression : unary _ operator cast _ expression&apos;
&apos;Make sure the directories exist for `filename` . &apos; 
&apos;ARGUMENTS : DCNL features : numpy matrices of features &#91; numOfSamples x numOfDimensions &#93; DCNL labels : list of sample labels DCNL nExp : number of cross-validation experiments DCNL MethodName : &quot; svm &quot; or &quot; randomforest &quot; DCNL Params : list of classifier params to be evaluated DCNL RETURNS : DCNL bestParam : the value of the input parameter that optimizes the selected performance measure&apos;
&apos;Get record information for the given zone _ id on the given profile DCNL : param zone _ id : Zone to export . DCNL : type zone _ id : ``str`` DCNL : param record _ id : Record to delete . DCNL : type record _ id : ``str`` DCNL : param profile : The profile key DCNL : type profile : ``str`` DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion libcloud _ dns.get _ record google.com www profile1&apos;
&apos;Displays whether \ &apos; restart on power failure \ &apos; is on or off if supported DCNL : return : A string value representing the &quot; restart on power failure &quot; settings DCNL : rtype : string DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; power.get _ restart _ power _ failure&apos;
&apos;Plot error bars at each data point . &apos; 
&apos;Computes the fraction of host queue entries matching the given filter data DCNL that are complete . &apos; 
&apos;Encrypts a stream of bytes from in _ stream to out _ stream using mode . &apos; 
&apos;Build a string representation of a query , without metadata types&apos;
&apos;Return the parent of a directory . &apos; 
&apos;Returns a dictionary of all the MetaSources DCNL E.g. , { \ &apos; itunes \ &apos; : Itunes } with isinstance ( Itunes , MetaSource ) true&apos;
&apos;Get a list of resources for an alias . There could be more than one alias DCNL in a resource _ dict . &apos; 
&apos;Called on shell initialization . Adds useful stuff to the namespace . &apos; 
&apos;Download the data from Yann \ &apos; s website , unless it \ &apos; s already here . &apos; 
&apos;Set the &quot; range &quot; metadata on a load instruction . DCNL Note the interval is in the form &#91; lower _ bound , upper _ bound )  . &apos; 
&apos;Fetches the logs from the debug log file for a given StarCluster run by PID&apos;
&apos;Function for setting figure layout . Shared with raw and epoch plots . &apos; 
&apos;Test file downloading over http . &apos; 
&apos;Implements hadoop fs -ls . &apos; 
&apos;Add the given number of space characters to the beginning every DCNL non-blank line in `s` , and return the result . &apos; 
&apos;we do a simple two pass fitting to a pair of bi-variate polynomials DCNL return the function to map vector&apos;
&apos;Test IIR filter stability check . &apos; 
&apos;Convert an arbitrary string to a standard \ &apos; extra \ &apos; name DCNL Any runs of non-alphanumeric characters are replaced with a single \ &apos; _ \ &apos; , DCNL and the result is always lowercased . &apos; 
&apos;Read settings from a text . &apos; 
&apos;Returns versions of components used by salt DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; test.versions _ report&apos;
&apos;Function to run the external calibrate.exe program . DCNL Returns a new instance of _ stEgControl ( probably not \ &apos; necessary \ &apos; )  . &apos; 
&apos;Runs a Mantel correlogram analysis on all pairs of distance matrices . DCNL Returns a string suitable for writing out to a file containing the results DCNL of the test , a list of correlogram filepath names , and a list of matplotlib DCNL Figure objects representing each correlogram . DCNL The correlogram filepaths can have an extension string appended to the end DCNL of them and then be used to save each of the correlogram Figures to a file . DCNL Each correlogram filepath will be a combination of the two distance matrix DCNL filepaths that were used to create it . DCNL WARNING : Only symmetric , hollow distance matrices may be used as input . DCNL Asymmetric distance matrices , such as those obtained by the UniFrac Gain DCNL metric ( i.e. beta _ diversity.py -m unifrac _ g ) , should not be used as input . DCNL Arguments : DCNL fps - list of filepaths of the distance matrices DCNL distmats - list of tuples containing dm labels and dm data ( i.e. the DCNL output of parse _ distmat ) DCNL num _ perms - the number of permutations to use to calculate the DCNL p-value ( s ) DCNL comment - comment string to add to the beginning of the results string DCNL alpha - the alpha value to use to determine significance in the DCNL correlogram plots DCNL sample _ id _ map - dict mapping sample IDs ( i.e. what is expected by DCNL make _ compatible _ distance _ matrices ) DCNL variable _ size _ distance _ classes - create distance classes that vary in DCNL size ( i.e. width ) but have the same number of distances in each DCNL class&apos;
&apos;Launch DCNL port _ eth unspecified : &quot; DPID MAC &quot; DCNL port _ eth enabled : Port MAC DCNL port _ eth specified : Use that&apos;
&apos;Validate the beacon configuration&apos;
&apos;Plot rectangular data as a color-encoded matrix . DCNL This function tries to infer a good colormap to use from the data , but DCNL this is not guaranteed to work , so take care to make sure the kind of DCNL colormap ( sequential or diverging ) and its limits are appropriate . DCNL This is an Axes-level function and will draw the heatmap into the DCNL currently-active Axes if none is provided to the ``ax`` argument . Part of DCNL this Axes space will be taken and used to plot a colormap , unless ``cbar`` DCNL is False or a separate Axes is provided to ``cbar _ ax`` . DCNL Parameters DCNL data : rectangular dataset DCNL 2D dataset that can be coerced into an ndarray . If a Pandas DataFrame DCNL is provided , the index / column information will be used to label the DCNL columns and rows . DCNL vmin , vmax : floats , optional DCNL Values to anchor the colormap , otherwise they are inferred from the DCNL data and other keyword arguments . When a diverging dataset is inferred , DCNL one of these values may be ignored . DCNL cmap : matplotlib colormap name or object , optional DCNL The mapping from data values to color space . If not provided , this DCNL will be either a cubehelix map ( if the function infers a sequential DCNL dataset ) or ``RdBu _ r`` ( if the function infers a diverging dataset ) . DCNL center : float , optional DCNL The value at which to center the colormap . Passing this value implies DCNL use of a diverging colormap . DCNL robust : bool , optional DCNL If True and ``vmin`` or ``vmax`` are absent , the colormap range is DCNL computed with robust quantiles instead of the extreme values . DCNL annot : bool or rectangular dataset , optional DCNL If True , write the data value in each cell . If an array-like with the DCNL same shape as ``data`` , then use this to annotate the heatmap instead DCNL of the raw data . DCNL fmt : string , optional DCNL String formatting code to use when adding annotations . DCNL annot _ kws : dict of key , value mappings , optional DCNL Keyword arguments for ``ax.text`` when ``annot`` is True . DCNL linewidths : float , optional DCNL Width of the lines that will divide each cell . DCNL linecolor : color , optional DCNL Color of the lines that will divide each cell . DCNL cbar : boolean , optional DCNL Whether to draw a colorbar . DCNL cbar _ kws : dict of key , value mappings , optional DCNL Keyword arguments for `fig.colorbar`. DCNL cbar _ ax : matplotlib Axes , optional DCNL Axes in which to draw the colorbar , otherwise take space from the DCNL main Axes . DCNL square : boolean , optional DCNL If True , set the Axes aspect to &quot; equal &quot; so each cell will be DCNL square-shaped . DCNL ax : matplotlib Axes , optional DCNL Axes in which to draw the plot , otherwise use the currently-active DCNL Axes . DCNL xticklabels : list-like , int , or bool , optional DCNL If True , plot the column names of the dataframe . If False , don \ &apos; t plot DCNL the column names . If list-like , plot these alternate labels as the DCNL xticklabels . If an integer , use the column names but plot only every DCNL n label . DCNL yticklabels : list-like , int , or bool , optional DCNL If True , plot the row names of the dataframe . If False , don \ &apos; t plot DCNL the row names . If list-like , plot these alternate labels as the DCNL yticklabels . If an integer , use the index names but plot only every DCNL n label . DCNL mask : boolean array or DataFrame , optional DCNL If passed , data will not be shown in cells where ``mask`` is True . DCNL Cells with missing values are automatically masked . DCNL kwargs : other keyword arguments DCNL All other keyword arguments are passed to ``ax.pcolormesh``. DCNL Returns DCNL ax : matplotlib Axes DCNL Axes object with the heatmap . DCNL Examples DCNL Plot a heatmap for a numpy array : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; import numpy as np ; np.random.seed ( 0 ) DCNL &gt; &gt; &gt; import seaborn as sns ; sns.set ( ) DCNL &gt; &gt; &gt; uniform _ data = np.random.rand ( 10 , 12 ) DCNL &gt; &gt; &gt; ax = sns.heatmap ( uniform _ data ) DCNL Change the limits of the colormap : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; ax = sns.heatmap ( uniform _ data , vmin = 0 , vmax = 1 ) DCNL Plot a heatmap for data centered on 0 : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; normal _ data = np.random.randn ( 10 , 12 ) DCNL &gt; &gt; &gt; ax = sns.heatmap ( normal _ data ) DCNL Plot a dataframe with meaningful row and column labels : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; flights = sns.load _ dataset ( &quot; flights &quot; ) DCNL &gt; &gt; &gt; flights = flights.pivot ( &quot; month &quot; , &quot; year &quot; , &quot; passengers &quot; ) DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights ) DCNL Annotate each cell with the numeric value using integer formatting : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights , annot = True , fmt = &quot; d &quot; ) DCNL Add lines between each cell : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights , linewidths = .5 ) DCNL Use a different colormap : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights , cmap = &quot; YlGnBu &quot; ) DCNL Center the colormap at a specific value : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights , center = flights.loc &#91; &quot; January &quot; , 1955 &#93; ) DCNL Plot every other column label and don \ &apos; t plot row labels : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; data = np.random.randn ( 50 , 20 ) DCNL &gt; &gt; &gt; ax = sns.heatmap ( data , xticklabels = 2 , yticklabels = False ) DCNL Don \ &apos; t draw a colorbar : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights , cbar = False ) DCNL Use different axes for the colorbar : DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; grid _ kws = { &quot; height _ ratios &quot; : ( .9 , .05 ) , &quot; hspace &quot; : .3 } DCNL &gt; &gt; &gt; f , ( ax , cbar _ ax ) = plt.subplots ( 2 , gridspec _ kw = grid _ kws ) DCNL &gt; &gt; &gt; ax = sns.heatmap ( flights , ax = ax , DCNL ... cbar _ ax = cbar _ ax , DCNL ... cbar _ kws = { &quot; orientation &quot; : &quot; horizontal &quot; } ) DCNL Use a mask to plot only part of a matrix DCNL .. plot : : DCNL : context : close-figs DCNL &gt; &gt; &gt; corr = np.corrcoef ( np.random.randn ( 10 , 200 ) ) DCNL &gt; &gt; &gt; mask = np.zeros _ like ( corr ) DCNL &gt; &gt; &gt; mask &#91; np.triu _ indices _ from ( mask ) &#93; = True DCNL &gt; &gt; &gt; with sns.axes _ style ( &quot; white &quot; ) : DCNL ... ax = sns.heatmap ( corr , mask = mask , vmax = .3 , square = True ) &apos;
&apos;A memoize decorator for class properties . &apos; 
&apos;Decorator for tests that make calls to SVD and intermittently fail . &apos; 
&apos;Checks the results of all tasks . &apos; 
&apos;Look up the value for an option . &apos; 
&apos;Establish and return a pair of network sockets connected to each other . &apos; 
&apos;Run deployment tasks . &apos; 
&apos;Split statements at semicolons ignoring the ones inside quotes and comments . DCNL The comment symbols that come inside quotes should be ignored . &apos; 
&apos;Changes an XML data stream on the fly to specify a new encoding DCNL data is a raw sequence of bytes ( not Unicode ) that is presumed to be in % encoding already DCNL encoding is a string recognized by encodings.aliases&apos;
&apos;Initial callback - invoked after the server sends us its greet message . &apos; 
&apos;same as Q , but returns a list , not a generator&apos;
&apos;Return the textual representation of logging level \ &apos; level \ &apos; . DCNL If the level is one of the predefined levels ( CRITICAL , ERROR , WARNING , DCNL INFO , DEBUG ) then you get the corresponding string . If you have DCNL associated levels with names using addLevelName then the name you have DCNL associated with \ &apos; level \ &apos; is returned . DCNL If a numeric value corresponding to one of the defined levels is passed DCNL in , the corresponding string representation is returned . DCNL Otherwise , the string &quot; Level % s &quot; % level is returned . &apos; 
&apos;Calls the Salt module &quot; probes &quot; to delete probes from the device . &apos; 
&apos;view used to dissociate an openid from an account&apos;
&apos;Checks if task is complete , puts the result to out _ queue . &apos; 
&apos;Remove specified package . Accepts full or partial FMRI . DCNL In case of multiple match , the command fails and won \ &apos; t modify the OS . DCNL name DCNL The name of the package to be deleted . DCNL Multiple Package Options : DCNL pkgs DCNL A list of packages to delete . Must be passed as a python list . The DCNL ``name`` parameter will be ignored if this option is passed . DCNL Returns a list containing the removed packages . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.remove &lt; package name &gt; DCNL salt \ &apos; * \ &apos; pkg.remove tcsh DCNL salt \ &apos; * \ &apos; pkg.remove pkg : / / solaris / shell / tcsh DCNL salt \ &apos; * \ &apos; pkg.remove pkgs = \ &apos; &#91; &quot; foo &quot; , &quot; bar &quot; &#93; \ &apos; &apos;
&apos;Creates new , empty test databases . &apos; 
&apos;Builds customer encryption key headers DCNL : type key : bytes DCNL : param key : 32 byte key to build request key and hash . DCNL : type source : bool DCNL : param source : If true , return headers for the &quot; source &quot; blob ; otherwise , DCNL return headers for the &quot; destination &quot; blob . DCNL : rtype : dict DCNL : returns : dict of HTTP headers being sent in request . &apos; 
&apos;Unpickle app . &apos; 
&apos;Returns whether the given course is mobile _ available for the given user . DCNL Checks : DCNL mobile _ available flag on the course DCNL Beta User and staff access overrides the mobile _ available flag DCNL Arguments : DCNL descriptor ( CourseDescriptor &#124; CourseOverview ) : course or overview of course in question&apos;
&apos;Send packets at layer 3 and return only the first answer DCNL nofilter : put 1 to avoid use of BPF filters DCNL retry : if positive , how many times to resend unanswered packets DCNL if negative , how many times to retry when no more packets are answered DCNL timeout : how much time to wait after the last packet has been sent DCNL verbose : set verbosity level DCNL multi : whether to accept multiple answers for the same stimulus DCNL filter : provide a BPF filter DCNL iface : listen answers only on the given interface&apos;
&apos;Clears cluster \ &apos; s internal caches . Returns DCNL something that can be given back to restore _ caches . &apos; 
&apos;Returns a boolean of whether the value \ &apos; s length is the argument&apos;
&apos;Returns the search modules DCNL : param dict opts : The Salt options dictionary DCNL : param returners : Undocumented DCNL : param whitelist : Undocumented&apos;
&apos;Encode a string as base64 using the &quot; modern &quot; Python interface . DCNL Among other possible differences , the &quot; modern &quot; encoder does not include DCNL newline ( \ &apos; \ n \ &apos; ) characters in the encoded output . DCNL .. versionadded : : 2016.3.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; hashutil.base64 _ b64encode \ &apos; get salted \ &apos; &apos;
&apos;Return an iterator over the ( key , value ) pairs of a dictionary . &apos; 
&apos;Encodes incoming str / unicode using `encoding` . If DCNL incoming is not specified , text is expected to DCNL be encoded with current python \ &apos; s default encoding . DCNL ( `sys.getdefaultencoding` ) DCNL : param incoming : Text \ &apos; s current encoding DCNL : param encoding : Expected encoding for text ( Default UTF-8 ) DCNL : param errors : Errors handling policy . See here for valid DCNL values http : / / docs.python.org / 2 / library / codecs.html DCNL : returns : text or a bytestring `encoding` encoded DCNL representation of it . DCNL : raises TypeError : If text is not an isntance of basestring&apos;
&apos;Return a hex string hash for a storage object ( or string containing DCNL \ &apos; full.path.ClassName \ &apos; referring to a storage object )  . &apos; 
&apos;get _ debug _ values should return &#91; &#93; when debugger is off&apos;
&apos;Does option have the default value ? DCNL If the default value of option is not known , False is returned . DCNL : param str option : configuration variable being considered DCNL : param value : value of the configuration variable named option DCNL : returns : True if option has the default value , otherwise , False DCNL : rtype : bool&apos;
&apos;Enter a star rating given the id of the container DCNL : param context : behave context DCNL : param id : id of the container element&apos;
&apos;Obtains a connection to a docker API ( socket or URL ) based on config.get DCNL mechanism ( pillar - &gt; grains ) DCNL By default it will use the base docker-py defaults which DCNL at the time of writing are using the local socket and DCNL the 1.4 API DCNL Set those keys in your configuration tree somehow : DCNL - docker.url : URL to the docker service DCNL - docker.version : API version to use ( default : &quot; auto &quot; ) &apos;
&apos;Multiplies each element of a triplet by 255 DCNL Each coordinate of the color tuple is rounded to the nearest float and DCNL then is turned into an integer . If a number is of the form x.5 , then DCNL if x is odd , the number rounds up to ( x + 1 ) . Otherwise , it rounds down DCNL to just x . This is the way rounding works in Python 3 and in current DCNL statistical analysis to avoid rounding bias DCNL : param ( list ) rgb _ components : grabs the three R , G and B values to be DCNL returned as computed in the function&apos;
&apos;exprlist : expression&apos;
&apos;relational _ expression : relational _ expression GE shift _ expression&apos;
&apos;Tries a series of functions and prints their results . DCNL `context` is a dictionary mapping names to values ; DCNL the value will only be tried if it \ &apos; s callable . DCNL For example , you might have a file `test / stuff.py` DCNL with a series of functions testing various things in it . DCNL At the bottom , have a line : DCNL if _ _ name _ _ = = &quot; _ _ main _ _ &quot; : tryall ( globals ( ) ) DCNL Then you can run `python test / stuff.py` and get the results of DCNL all the tests . &apos; 
&apos;Get the profile directory . &apos; 
&apos;Compute nt zeros of the Kelvin function ber \ &apos; ( x ) . DCNL References DCNL .. &#91; 1 &#93; Zhang , Shanjie and Jin , Jianming . &quot; Computation of Special DCNL Functions &quot; , John Wiley and Sons , 1996 . DCNL http : / / jin.ece.illinois.edu / specfunc.html&apos;
&apos;Returns a string with the article + the word . &apos; 
&apos;Returns a nagios-appropriate string and return code obtained by DCNL parsing the desired file on disk . The file on disk should be of format DCNL % s &#124; % s % ( timestamp , nagios _ string ) DCNL This file is created by various nagios checking cron jobs such as DCNL check-rabbitmq-queues and check-rabbitmq-consumers&apos;
&apos;Tests `max _ revision ( ) ` gets the latest revision . &apos; 
&apos;Return an HttpResponse with the data json-serialized and the right content DCNL type header . &apos; 
&apos;calculate expected value of function by Monte Carlo integration DCNL Parameters DCNL dist : distribution instance DCNL needs to have rvs defined as a method for drawing random numbers DCNL func : callable DCNL function for which expectation is calculated , this function needs to DCNL be vectorized , integration is over axis = 0 DCNL size : int DCNL number of random samples to use in the Monte Carlo integration , DCNL Notes DCNL this doesn \ &apos; t batch DCNL Returns DCNL expected value : ndarray DCNL return of function func integrated over axis = 0 by MonteCarlo , this will DCNL have the same shape as the return of func without axis = 0 DCNL Examples DCNL integrate probability that both observations are negative DCNL &gt; &gt; &gt; mvn = mve.MVNormal ( &#91; 0,0 &#93; , 2 . ) DCNL &gt; &gt; &gt; mve.expect _ mc ( mvn , lambda x : ( x &lt; np.array ( &#91; 0,0 &#93; ) ) .all ( -1 ) , size = 100000 ) DCNL 0.25306000000000001 DCNL get tail probabilities of marginal distribution ( should be 0.1 ) DCNL &gt; &gt; &gt; c = stats.norm.isf ( 0.05 , scale = np.sqrt ( 2 . ) ) DCNL &gt; &gt; &gt; expect _ mc ( mvn , lambda x : ( np.abs ( x ) &gt; np.array ( &#91; c , c &#93; ) ) , size = 100000 ) DCNL array ( &#91; 0.09969 , 0.0986 &#93; ) DCNL or calling the method DCNL &gt; &gt; &gt; mvn.expect _ mc ( lambda x : ( np.abs ( x ) &gt; np.array ( &#91; c , c &#93; ) ) , size = 100000 ) DCNL array ( &#91; 0.09937 , 0.10075 &#93; ) &apos;
&apos;Replace the Tk root menu by something that is more appropriate for DCNL IDLE with an Aqua Tk . &apos; 
&apos;Call func ( * args , * * kw ) with a timeout of second seconds . &apos; 
&apos;Adds ops for a recurrent neural network layer . DCNL This function calls an actual implementation of a recurrent neural network DCNL based on `cell _ type` . DCNL There are three modes depending on the value of `direction` : DCNL forward : Adds a forward RNN . DCNL backward : Adds a backward RNN . DCNL bidirectional : Adds both forward and backward RNNs and creates a DCNL bidirectional RNN . DCNL Args : DCNL inp : A 3-D tensor of shape &#91; `batch _ size` , `max _ length` , `feature _ dim` &#93; . DCNL length : A 1-D tensor of shape &#91; `batch _ size` &#93; and type int64 . Each element DCNL represents the length of the corresponding sequence in `inp` . DCNL cell _ type : Cell type of RNN . Currently can only be &quot; lstm &quot; . DCNL direction : One of &quot; forward &quot; , &quot; backward &quot; , &quot; bidirectional &quot; . DCNL name : Name of the op . DCNL * args : Other arguments to the layer . DCNL * * kwargs : Keyword arugments to the layer . DCNL Returns : DCNL A 3-D tensor of shape &#91; `batch _ size` , `max _ length` , `num _ nodes` &#93;  . &apos; 
&apos;Creates a random alphanumeric string of specified length . &apos; 
&apos;Create a SchemeNode from an `Element` instance . &apos; 
&apos;Takes in a string and an email alias mapping and replaces all DCNL instances of the aliases in the string with their real email . &apos; 
&apos;Return dict of element counts , in the order they were first seen&apos;
&apos;Execute a ``machinectl pull-dkr`` to download a docker image and add it to DCNL / var / lib / machines as a new container . DCNL .. note : : DCNL * * Requires systemd &gt; = 219 * * DCNL url DCNL URL from which to download the container DCNL name DCNL Name for the new container DCNL index DCNL URL of the Docker index server from which to pull ( must be an DCNL ``http : / / `` or ``https : / / `` URL ) . DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt myminion nspawn.pull _ dkr centos / centos6 cent6 index = https : / / get.docker.com DCNL salt myminion nspawn.pull _ docker centos / centos6 cent6 index = https : / / get.docker.com&apos;
&apos;Determine if we should wait for the managed cloud automation before DCNL running . Either \ &apos; False \ &apos; ( default ) or \ &apos; True \ &apos;  . &apos; 
&apos;Fail unless an exception of class exception _ class and with message that DCNL matches expected _ regexp is thrown by callable when invoked with arguments DCNL args and keyword arguments kwargs . DCNL Name of this function adheres to Python 3.2 + reference , but should work in DCNL all versions down to 2.6 . DCNL Notes DCNL .. versionadded : : 1.8.0&apos;
&apos;Remove files from filesystem DCNL : param processPath : path to process DCNL : param notwantedFiles : files we do not want DCNL : param result : Processor results DCNL : param force : Boolean , force deletion , defaults to false&apos;
&apos;Shortcut for confirmation prompts that can be ignored by passing DCNL ``--yes`` as parameter . DCNL This is equivalent to decorating a function with : func : `option` with DCNL the following parameters : : DCNL def callback ( ctx , param , value ) : DCNL if not value : DCNL ctx.abort ( ) DCNL @ click.command ( ) DCNL @ click.option ( \ &apos; --yes \ &apos; , is _ flag = True , callback = callback , DCNL expose _ value = False , prompt = \ &apos; Do you want to continue ? \ &apos; ) DCNL def dropdb ( ) : DCNL pass&apos;
&apos;List of currently scheduled ETA / countdown tasks . &apos; 
&apos;Test routine for a layer with a single input tensor DCNL and single output tensor . &apos; 
&apos;Fires post processing hooks for a group . &apos; 
&apos;Returns True if the given AS number is Two or Four Octet . &apos; 
&apos;Adapted from http : / / code.activestate.com / recipes / 576847 / DCNL : codeauthor : Vishal Sapre DCNL : license : MIT DCNL A foolishly simple look-up method of getting binary string from an integer DCNL This happens to be faster than all other ways ! ! ! &apos;
&apos;Parse target dbms and set some attributes into the configuration singleton . &apos; 
&apos;Create access key id for a user . DCNL .. versionadded : : 2015.8.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ iam.create _ access _ key myuser&apos;
&apos;restart a system call interrupted by EINTR&apos;
&apos;return a valid color arg&apos;
&apos;Return a list of all applicable test modules . &apos; 
&apos;Get a list of all the users of this storage path . &apos; 
&apos;Convert anything to bytes&apos;
&apos;Check whether the specified table exists in the current schema . DCNL This method cannot be executed in offline mode . &apos; 
&apos;Prepare our list of parsing plugins and default parsers . &apos; 
&apos;Parse one entry in a mailcap file and return a dictionary . DCNL The viewing command is stored as the value with the key &quot; view &quot; , DCNL and the rest of the fields produce key-value pairs in the dict . &apos; 
&apos;scalar version of qsturng&apos;
&apos;Delete a blob from Blobstore . DCNL Args : DCNL blob _ key : A blob key . This may be a str , unicode or BlobKey instance . DCNL * * options : Options for create _ rpc ( )  . &apos; 
&apos;True Range&apos;
&apos;Check if number is a valid year&apos;
&apos;Execute a single state orchestration routine DCNL .. versionadded : : 2015.5.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-run state.orchestrate _ high \ &apos; { DCNL stage _ one : DCNL { salt.state : &#91; { tgt : &quot; db * &quot; } , { sls : postgres _ setup } &#93; } , DCNL stage _ two : DCNL { salt.state : &#91; { tgt : &quot; web * &quot; } , { sls : apache _ setup } , { DCNL require : &#91; { salt : stage _ one } &#93; , &apos;
&apos;Recursively flatten tuple , list and set in a list . &apos; 
&apos;We reorganized our categories : DCNL https : / / bugzilla.mozilla.org / show _ bug.cgi ? id = 854499 DCNL Usage : : DCNL python -B manage.py runscript migrations.575-reorganize-cats&apos;
&apos;Loads and returns a class definition provided a dotted path DCNL specification the last part of the dotted path is the class name DCNL and there is at least one module name preceding the class name . DCNL Notes : DCNL You will need to ensure that the module you are trying to load DCNL exists in the Python path . DCNL Examples : DCNL - module.name.ClassName # Provided module.name is in the Python path . DCNL - module.ClassName # Provided module is in the Python path . DCNL What won \ &apos; t work : DCNL - ClassName DCNL - modle.name.ClassName # Typo in module name . DCNL - module.name.ClasNam # Typo in classname . &apos; 
&apos;Passes through the projected Files / Dirs for link resolution . &apos; 
&apos;sets up dummy convolutional forward pass and uses its grad as deconv DCNL currently only tested / working with same padding&apos;
&apos; : type cmd : collections.Iterable &#91; str &#93; DCNL : type capture : bool DCNL : type env : dict &#91; str , str &#93; &#124; None DCNL : type data : str &#124; None DCNL : type cwd : str &#124; None DCNL : type explain : bool DCNL : type stdin : file &#124; None DCNL : type stdout : file &#124; None DCNL : rtype : str &#124; None , str &#124; None&apos;
&apos;Get the text lines from the fileName in the alterations directories . &apos; 
&apos;Checks to see if a file is locked . Performs three checks DCNL 1 . Checks if the file even exists DCNL 2 . Attempts to open the file for reading . This will determine if the file has a write lock . DCNL Write locks occur when the file is being edited or copied to , e.g. a file copy destination DCNL 3 . If the readLockCheck parameter is True , attempts to rename the file . If this fails the DCNL file is open by some other process for reading . The file can be read , but not written to DCNL or deleted . DCNL : param file : the file being checked DCNL : param writeLockCheck : when true will check if the file is locked for writing ( prevents move operations ) &apos;
&apos; : return UUID : A node- and boot-specific globally unique id . &apos; 
&apos;Changes into new _ branch _ dir and builds the docs using sphinx in the DCNL BUILDENV virtualenv&apos;
&apos;Attempt to topologically order steps and attach to workflow . If this DCNL fails - the workflow contains cycles so it mark it as such . &apos; 
&apos;Checks an exception for given keywords and raises a new ``ActionError`` DCNL with the desired message if the keywords are found . This allows selective DCNL control over API error messages . &apos; 
&apos;Fix the global _ ids after reordering in _ render _ toc ( )  . &apos; 
&apos;It should extract the name of the scenario&apos;
&apos;Decorator for concrete volume driver implementations . &apos; 
&apos;Some functions , such as C { os.path.join } , operate on string arguments which DCNL may be bytes or text , and wish to return a value of the same type . In DCNL those cases you may wish to have a string constant ( in the case of DCNL C { os.path.join } , that constant would be C { os.path.sep } ) involved in the DCNL parsing or processing , that must be of a matching type in order to use DCNL string operations on it . L { _ matchingString } will take a constant string DCNL ( either L { bytes } or L { unicode } ) and convert it to the same type as the DCNL input string . C { constantString } should contain only characters from ASCII ; DCNL to ensure this , it will be encoded or decoded regardless . DCNL @ param constantString : A string literal used in processing . DCNL @ type constantString : L { unicode } or L { bytes } DCNL @ param inputString : A byte string or text string provided by the user . DCNL @ type inputString : L { unicode } or L { bytes } DCNL @ return : C { constantString } converted into the same type as C { inputString } DCNL @ rtype : the type of C { inputString } &apos;
&apos;Create a ( possibly compressed ) tar file from all the files under DCNL \ &apos; base _ dir \ &apos; . DCNL \ &apos; compress \ &apos; must be &quot; gzip &quot; ( the default ) , &quot; compress &quot; , &quot; bzip2 &quot; , or None . DCNL ( compress will be deprecated in Python 3.2 ) DCNL \ &apos; owner \ &apos; and \ &apos; group \ &apos; can be used to define an owner and a group for the DCNL archive that is being built . If not provided , the current owner and group DCNL will be used . DCNL The output tar file will be named \ &apos; base _ dir \ &apos; + &quot; .tar &quot; , possibly plus DCNL the appropriate compression extension ( &quot; .gz &quot; , &quot; .bz2 &quot; or &quot; .Z &quot; ) . DCNL Returns the output filename . &apos; 
&apos;An implementation of : meth : `select.select` that blocks only the current greenlet . DCNL Note : * xlist * is ignored . &apos; 
&apos;Quote non-ascii characters&apos;
&apos;Grade students and generate certificates . &apos; 
&apos;Serves the frontend single-page apps . &apos; 
&apos;Build a list of all images files and labels in the data set . DCNL Args : DCNL data _ dir : string , path to the root directory of images . DCNL Assumes that the ImageNet data set resides in JPEG files located in DCNL the following directory structure . DCNL data _ dir / n01440764 / ILSVRC2012 _ val _ 00000293.JPEG DCNL data _ dir / n01440764 / ILSVRC2012 _ val _ 00000543.JPEG DCNL where \ &apos; n01440764 \ &apos; is the unique synset label associated with these images . DCNL labels _ file : string , path to the labels file . DCNL The list of valid labels are held in this file . Assumes that the file DCNL contains entries as such : DCNL n01440764 DCNL n01443537 DCNL n01484850 DCNL where each line corresponds to a label expressed as a synset . We map DCNL each synset contained in the file to an integer ( based on the alphabetical DCNL ordering ) starting with the integer 1 corresponding to the synset DCNL contained in the first line . DCNL The reason we start the integer labels at 1 is to reserve label 0 as an DCNL unused background class . DCNL Returns : DCNL filenames : list of strings ; each string is a path to an image file . DCNL synsets : list of strings ; each string is a unique WordNet ID . DCNL labels : list of integer ; each integer identifies the ground truth . &apos; 
&apos;Returns a list of sets of media type strings , ordered by precedence . DCNL Precedence is determined by how specific a media type is : DCNL 3 . \ &apos; type / subtype ; param = val \ &apos; DCNL 2 . \ &apos; type / subtype \ &apos; DCNL 1 . \ &apos; type / * \ &apos; DCNL 0 . \ &apos; * / * \ &apos; &apos;
&apos;Test Filter Label 1&apos;
&apos;Collect and run tests , returning success or failure . DCNL The arguments to `run ( ) ` are the same as to `main ( ) ` : DCNL * module : All tests are in this module ( default : None ) DCNL * defaultTest : Tests to load ( default : \ &apos; . \ &apos; ) DCNL * argv : Command line arguments ( default : None ; sys.argv is read ) DCNL * testRunner : Test runner instance ( default : None ) DCNL * testLoader : Test loader instance ( default : None ) DCNL * env : Environment ; ignored if config is provided ( default : None ; DCNL os.environ is read ) DCNL * config : : class : `nose.config.Config` instance ( default : None ) DCNL * suite : Suite or list of tests to run ( default : None ) . Passing a DCNL suite or lists of tests will bypass all test discovery and DCNL loading . * ALSO NOTE * that if you pass a unittest.TestSuite DCNL instance as the suite , context fixtures at the class , module and DCNL package level will not be used , and many plugin hooks will not DCNL be called . If you want normal nose behavior , either pass a list DCNL of tests , or a fully-configured : class : `nose.suite.ContextSuite`. DCNL * plugins : List of plugins to use ; ignored if config is provided DCNL ( default : load plugins with DefaultPluginManager ) DCNL * addplugins : List of * * extra * * plugins to use . Pass a list of plugin DCNL instances in this argument to make custom plugins available while DCNL still using the DefaultPluginManager . DCNL With the exception that the ``exit`` argument is always set DCNL to False . &apos; 
&apos;Asserts text1 and text2 have the same lines , ignoring differences in DCNL line endings between platforms&apos;
&apos;Main program , when run as a script : produce grammar pickle files . DCNL Calls load _ grammar for each argument , a path to a grammar text file . &apos; 
&apos;Spawn a process and return its output as a deferred returning a string . DCNL @ param executable : The file name to run and get the output of - the DCNL full path should be used . DCNL @ param args : the command line arguments to pass to the process ; a DCNL sequence of strings . The first string should * NOT * be the DCNL executable \ &apos; s name . DCNL @ param env : the environment variables to pass to the processs ; a DCNL dictionary of strings . DCNL @ param path : the path to run the subprocess in - defaults to the DCNL current directory . DCNL @ param reactor : the reactor to use - defaults to the default reactor DCNL @ param errortoo : If true , include stderr in the result . If false , if DCNL stderr is received the returned L { Deferred } will errback with an DCNL L { IOError } instance with a C { processEnded } attribute . The DCNL C { processEnded } attribute refers to a L { Deferred } which fires when the DCNL executed process ends . &apos; 
&apos;Does `exp` contain a `Reduced` node . &apos; 
&apos;Generate a SQL WHERE clause for job status filtering , and return it in DCNL a dict of keyword args to pass to query.extra ( ) . No more than one of DCNL the parameters should be passed as True . DCNL * not _ yet _ run : all HQEs are Queued DCNL * finished : all HQEs are complete DCNL * running : everything else&apos;
&apos;Context manager to ensure sys.modules has certain white-listed modules , DCNL most especially latextools _ plugins . This exposes some of the modules in DCNL LaTeXTools to plugins . It is intended primarily to expose library-esque DCNL functionality , such as the getTeXRoot module , but can be configured by DCNL the user as-needed . &apos; 
&apos;other _ user is not a friend if he \ &apos; s not in user &#91; &quot; friends &quot; &#93; ; DCNL that is , if he \ &apos; s not _ the _ same as all the people in user &#91; &quot; friends &quot; &#93; &apos;
&apos;Splodge a gcode linear move file . &apos; 
&apos;Ansible Main module . &apos; 
&apos;Compute the leading coefficient of a multivariate polynomial DCNL `f \ in K &#91; x _ 0 , \ ldots , x _ { k-2 } , y &#93; \ cong K &#91; y &#93; &#91; x _ 0 , \ ldots , x _ { k-2 } &#93; ` . DCNL Parameters DCNL f : PolyElement DCNL polynomial in `K &#91; x _ 0 , \ ldots , x _ { k-2 } , y &#93; ` DCNL Returns DCNL lcf : PolyElement DCNL polynomial in `K &#91; y &#93; ` , leading coefficient of `f` DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.modulargcd import _ LC DCNL &gt; &gt; &gt; from sympy.polys import ring , ZZ DCNL &gt; &gt; &gt; R , x , y = ring ( &quot; x , y &quot; , ZZ ) DCNL &gt; &gt; &gt; f = x * * 2 * y * * 2 + x * * 2 * y - 1 DCNL &gt; &gt; &gt; _ LC ( f ) DCNL y * * 2 + y DCNL &gt; &gt; &gt; R , x , y , z = ring ( &quot; x , y , z &quot; , ZZ ) DCNL &gt; &gt; &gt; f = x * * 2 * y * * 2 + x * * 2 * y - 1 DCNL &gt; &gt; &gt; _ LC ( f ) DCNL 1 DCNL &gt; &gt; &gt; f = x * y * z - y * * 2 * z * * 2 DCNL &gt; &gt; &gt; _ LC ( f ) DCNL z&apos;
&apos;Initialize plugin variables and Pelican settings&apos;
&apos;Top level function for bringing down Cassandra . DCNL Returns : DCNL True on success , False otherwise . &apos; 
&apos;Annotates the tokens with lemmata for plural nouns and conjugated verbs , DCNL where each token is a &#91; word , part-of-speech &#93; list . &apos; 
&apos;Test with non symmetric input&apos;
&apos;Return true if the given class node is subclass of DCNL exceptions.Exception . &apos; 
&apos;given a fn and and environment the builds a keyword argument list DCNL for fn&apos;
&apos;Determines whether parameter is a Python Proxy , i.e. , it has a Java DCNL internal class with an `implements` member . DCNL : param parameter : the object to check . DCNL : rtype : True if the parameter is a Python Proxy&apos;
&apos; &gt; &gt; &gt; interpret _ size ( 10 ) DCNL 10 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10 \ &apos; ) DCNL 10 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10b \ &apos; ) DCNL 10 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10k \ &apos; ) DCNL 10240 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10K \ &apos; ) DCNL 10240 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10kb \ &apos; ) DCNL 10240 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10kB \ &apos; ) DCNL 10240 DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; a10 \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL ValueError DCNL &gt; &gt; &gt; interpret _ size ( \ &apos; 10a \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL KeyError : \ &apos; A \ &apos; &apos;
&apos;The main entry point&apos;
&apos;Generate node degree-degree pairs for edges in G. DCNL Parameters DCNL G : NetworkX graph DCNL x : string ( \ &apos; in \ &apos; , \ &apos; out \ &apos; ) DCNL The degree type for source node ( directed graphs only ) . DCNL y : string ( \ &apos; in \ &apos; , \ &apos; out \ &apos; ) DCNL The degree type for target node ( directed graphs only ) . DCNL weight : string or None , optional ( default = None ) DCNL The edge attribute that holds the numerical value used DCNL as a weight . If None , then each edge has weight 1 . DCNL The degree is the sum of the edge weights adjacent to the node . DCNL nodes : list or iterable ( optional ) DCNL Use only edges that are adjacency to specified nodes . DCNL The default is all nodes . DCNL Returns DCNL ( x , y ) : 2-tuple DCNL Generates 2-tuple of ( degree , degree ) values . DCNL Examples DCNL &gt; &gt; &gt; G = nx.DiGraph ( ) DCNL &gt; &gt; &gt; G.add _ edge ( 1,2 ) DCNL &gt; &gt; &gt; list ( nx.node _ degree _ xy ( G , x = \ &apos; out \ &apos; , y = \ &apos; in \ &apos; ) ) DCNL &#91; ( 1 , 1 ) &#93; DCNL &gt; &gt; &gt; list ( nx.node _ degree _ xy ( G , x = \ &apos; in \ &apos; , y = \ &apos; out \ &apos; ) ) DCNL &#91; ( 0 , 0 ) &#93; DCNL Notes DCNL For undirected graphs each edge is produced twice , once for each edge DCNL representation ( u , v ) and ( v , u ) , with the exception of self-loop edges DCNL which only appear once . &apos; 
&apos;Add switched from the main Qwikswitch component . &apos; 
&apos;Returns prefix for asset directory depending whether dev or prod . DCNL It is used as a prefix in urls for images , css and script files . &apos; 
&apos;Used as decorator to simplify datamodel registration . DCNL Returns the object being decorated so that chaining is possible . &apos; 
&apos;Return the install meta-data for a linked package in a prefix , or None DCNL if the package is not linked in the prefix . &apos; 
&apos;Convert columns back to the larger String ( 43 ) defined in version 149 . &apos; 
&apos;Replace `0 ( px , em , % , etc ) ` with `0` . &apos; 
&apos;Returns file in an svn transaction . DCNL Helper function for hook scripts in the svn commit mission . DCNL This function may be mocked in the tests . &apos; 
&apos;Maps report plugin names to report objects . DCNL Args : DCNL name : The name of a plugin class . Also the name field of DCNL ApiGetReportArgs and ApiReportDescriptor . DCNL Returns : DCNL Report plugin object of class corresponding to the given name . &apos; 
&apos;Save the load to the specified jid DCNL minions argument is to provide a pre-computed list of matched minions for DCNL the job , for cases when this function can \ &apos; t compute that list itself ( such DCNL as for salt-ssh ) &apos;
&apos;Retrieve and return the Catalog Integration Service User Object DCNL if the passed user is None or anonymous&apos;
&apos;Given sequences `X` and `Y` of ndarrays , initialize the tableau and DCNL basis arrays in place for the &quot; geometric &quot; imitation game as defined DCNL in McLennan and Tourky ( 2006 ) , to be passed to `lemke _ howson _ tbl` . DCNL Parameters DCNL X , Y : ndarray ( float ) DCNL Arrays of the same shape ( m , n ) . DCNL tableaux : tuple ( ndarray ( float , ndim = 2 ) ) DCNL Tuple of two arrays to be used to store the tableaux , of shape DCNL ( 2m , 2m ) . Modified in place . DCNL bases : tuple ( ndarray ( int , ndim = 1 ) ) DCNL Tuple of two arrays to be used to store the bases , of shape DCNL ( m , ) . Modified in place . DCNL Returns DCNL tableaux : tuple ( ndarray ( float , ndim = 2 ) ) DCNL View to `tableaux` . DCNL bases : tuple ( ndarray ( int , ndim = 1 ) ) DCNL View to `bases` . &apos; 
&apos;Find the vertical edges of an image using the Sobel transform . DCNL Parameters DCNL image : 2-D array DCNL Image to process . DCNL mask : 2-D array , optional DCNL An optional mask to limit the application to a certain area . DCNL Note that pixels surrounding masked regions are also masked to DCNL prevent masked regions from affecting the result . DCNL Returns DCNL output : 2-D array DCNL The Sobel edge map . DCNL Notes DCNL We use the following kernel : : DCNL 1 0 -1 DCNL 2 0 -2 DCNL 1 0 -1&apos;
&apos;Estimate the log Gaussian probability . DCNL Parameters DCNL X : array-like , shape ( n _ samples , n _ features ) DCNL means : array-like , shape ( n _ components , n _ features ) DCNL precisions _ chol : array-like , DCNL Cholesky decompositions of the precision matrices . DCNL \ &apos; full \ &apos; : shape of ( n _ components , n _ features , n _ features ) DCNL \ &apos; tied \ &apos; : shape of ( n _ features , n _ features ) DCNL \ &apos; diag \ &apos; : shape of ( n _ components , n _ features ) DCNL \ &apos; spherical \ &apos; : shape of ( n _ components , ) DCNL covariance _ type : { \ &apos; full \ &apos; , \ &apos; tied \ &apos; , \ &apos; diag \ &apos; , \ &apos; spherical \ &apos; } DCNL Returns DCNL log _ prob : array , shape ( n _ samples , n _ components ) &apos;
&apos;ob为用户或资产列表或资产queryset , 如果同时输入用户和 { \ &apos; role \ &apos; : role1 , \ &apos; asset \ &apos; : &#91; &#93; } ， 则获取用户在这些资产上的信息 DCNL 生成MyInventory需要的 resource文件&apos;
&apos;Returns a _ dict like DCNL &quot; doctype &quot; : DCNL &quot; fieldname &quot; : DCNL &quot; operator &quot; : DCNL &quot; value &quot; : &apos;
&apos;Quick utility to make comparing template output easier . &apos; 
&apos;Returns a neighbor attribute _ map for given ip address if exists . &apos; 
&apos;Return a MSSQL connection . &apos; 
&apos;Validate a tax number . DCNL : param tax _ number : Tax number to validate DCNL : type tax _ number : str DCNL : return : DCNL Type identifier of the tax number , if detected . Possible DCNL values for now are either &quot; vat &quot; or &quot; unknown &quot; . DCNL : rtype : str DCNL : raise : DCNL `ValidationError` if tax number type was detected , but it is DCNL somehow malformed . &apos; 
&apos;Get tab title without ambiguation . &apos; 
&apos;query chooser . DCNL this also returns a list of shard ids , which can DCNL just be all of them. but here we \ &apos; ll search into the Query in order DCNL to try to narrow down the list of shards to query . &apos; 
&apos;Remove insignificant whitespace from XML nodes DCNL It should only remove whitespace in between elements and sub elements . DCNL This should be safe for Jenkins due to how it \ &apos; s XML serialization works DCNL but may not be valid for other XML documents . So use this method with DCNL caution outside of this specific library . &apos; 
&apos;Require several opkg packages to be uninstalled . DCNL Example : : DCNL from fabtools import require DCNL require.opkg.nopackages ( &#91; DCNL \ &apos; perl \ &apos; , DCNL \ &apos; php5 \ &apos; , DCNL \ &apos; ruby \ &apos; , &apos;
&apos;Get a dict mapping funcs to colors from palette . DCNL Parameters DCNL palette : string DCNL Name of the bokeh palette to use , must be a member of DCNL bokeh.palettes.all _ palettes . DCNL funcs : iterable DCNL Iterable of function names&apos;
&apos;Return the time formatting patterns used by the locale for the specified DCNL format . DCNL &gt; &gt; &gt; get _ time _ format ( locale = \ &apos; en _ US \ &apos; ) DCNL &lt; DateTimePattern u \ &apos; h : mm : ss a \ &apos; &gt; DCNL &gt; &gt; &gt; get _ time _ format ( \ &apos; full \ &apos; , locale = \ &apos; de _ DE \ &apos; ) DCNL &lt; DateTimePattern u \ &apos; HH : mm : ss v \ &apos; &gt; DCNL : param format : the format to use , one of &quot; full &quot; , &quot; long &quot; , &quot; medium &quot; , or DCNL &quot; short &quot; DCNL : param locale : the `Locale` object , or a locale string DCNL : return : the time format pattern DCNL : rtype : `DateTimePattern`&apos;
&apos;Return an : class : `.Alias` object . DCNL An : class : `.Alias` represents any : class : `.FromClause` DCNL with an alternate name assigned within SQL , typically using the ``AS`` DCNL clause when generated , e.g. ``SELECT * FROM table AS aliasname`` . DCNL Similar functionality is available via the DCNL : meth : ` ~ .FromClause.alias` method DCNL available on all : class : `.FromClause` subclasses . DCNL When an : class : `.Alias` is created from a : class : `.Table` object , DCNL this has the effect of the table being rendered DCNL as ``tablename AS aliasname`` in a SELECT statement . DCNL For : func : `.select` objects , the effect is that of creating a named DCNL subquery , i.e. `` ( select ... ) AS aliasname`` . DCNL The ``name`` parameter is optional , and provides the name DCNL to use in the rendered SQL . If blank , an &quot; anonymous &quot; name DCNL will be deterministically generated at compile time . DCNL Deterministic means the name is guaranteed to be unique against DCNL other constructs used in the same statement , and will also be the DCNL same name for each successive compilation of the same statement DCNL object . DCNL : param selectable : any : class : `.FromClause` subclass , DCNL such as a table , select statement , etc . DCNL : param name : string name to be assigned as the alias . DCNL If ``None`` , a name will be deterministically generated DCNL at compile time . DCNL : param flat : Will be passed through to if the given selectable DCNL is an instance of : class : `.Join` - see : meth : `.Join.alias` DCNL for details . DCNL .. versionadded : : 0.9.0&apos;
&apos;Cleans HTML of dangerous tags and content . &apos; 
&apos;Display the repository dialog . &apos; 
&apos;A wrapper around django.views.static.serve that adds CORS headers . &apos; 
&apos;Get number rounded to three places as a string . &apos; 
&apos;Create an RDS read replica DCNL CLI example to create an RDS read replica : : DCNL salt myminion boto _ rds.create _ read _ replica replicaname source _ name&apos;
&apos;Email user that their group membership status has changed . DCNL old _ status and new _ status can either be a valid value for GroupMembership.status , DCNL or None if we \ &apos; re going from or to a state where there is no GroupMembership DCNL record ( e.g. if they \ &apos; re being removed from a group ) . DCNL This is queued from Group.add _ member ( ) and Group.remove _ member ( )  . &apos; 
&apos;cyclic ( length = None , alphabet = string.ascii _ lowercase , n = 4 ) - &gt; list / str DCNL A simple wrapper over : func : `de _ bruijn` . This function returns at most DCNL `length` elements . DCNL If the given alphabet is a string , a string is returned from this function . Otherwise DCNL a list is returned . DCNL Arguments : DCNL length : The desired length of the list or None if the entire sequence is desired . DCNL alphabet : List or string to generate the sequence over . DCNL n ( int ) : The length of subsequences that should be unique . DCNL Example : DCNL &gt; &gt; &gt; cyclic ( alphabet = &quot; ABC &quot; , n = 3 ) DCNL \ &apos; AAABAACABBABCACBACCBBBCBCCC \ &apos; DCNL &gt; &gt; &gt; cyclic ( 20 ) DCNL \ &apos; aaaabaaacaaadaaaeaaa \ &apos; DCNL &gt; &gt; &gt; alphabet , n = range ( 30 ) , 3 DCNL &gt; &gt; &gt; len ( alphabet ) * * n , len ( cyclic ( alphabet = alphabet , n = n ) ) DCNL ( 27000 , 27000 ) &apos;
&apos;Processes a complete data set and saves it as a TFRecord . DCNL Args : DCNL name : Unique identifier specifying the dataset . DCNL images : List of ImageMetadata . DCNL vocab : A Vocabulary object . DCNL num _ shards : Integer number of shards for the output files . &apos; 
&apos;Detach a managed policy to a user . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ iam.detach _ user _ policy mypolicy myuser&apos;
&apos;Scan for bluetooth devices in the area DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; bluetooth.scan&apos;
&apos;Load a dask Bag from a Castra . DCNL Parameters DCNL x : filename or Castra DCNL columns : list or string , optional DCNL The columns to load . Default is all columns . DCNL index : bool , optional DCNL If True , the index is included as the first element in each tuple . DCNL Default is False . &apos; 
&apos;Like execute _ from _ command _ line ( ) , but for use by manage.py , a DCNL project-specific django-admin.py utility . &apos; 
&apos;Returns a function which returns a default value for a field . DCNL Args : DCNL field : FieldDescriptor object for this field . DCNL The returned function has one argument : DCNL message : Message instance containing this field , or a weakref proxy DCNL of same . DCNL That function in turn returns a default value for this field . The default DCNL value may refer back to &#124; message &#124; via a weak reference . &apos; 
&apos;Create a new figure manager instance for the given figure . &apos; 
&apos;Return the 3-regular Platonic Tetrahedral graph . &apos; 
&apos;Return the path of a data file , these are relative to the current test DCNL directory . &apos; 
&apos;STATUS ENQUIRY Section 9.3.28&apos;
&apos; &gt; &gt; &gt; encryptMessage ( \ &apos; LFWOAYUISVKMNXPBDCRJTQEGHZ \ &apos; , \ &apos; Harshil Darji \ &apos; ) DCNL \ &apos; Ilcrism Olcvs \ &apos; &apos;
&apos;Returns the Python version as string \ &apos; major.minor.patchlevel \ &apos; DCNL Note that unlike the Python sys.version , the returned value DCNL will always include the patchlevel ( it defaults to 0 )  . &apos; 
&apos;Helper function for integer factorization . Trial factors ``n` DCNL against all integers given in the sequence ``candidates`` DCNL and updates the dict ``factors`` in-place . Returns the reduced DCNL value of ``n`` and a flag indicating whether any factors were found . &apos; 
&apos;Tokenizes a string suppressing significant whitespace . &apos; 
&apos;http : / / docs.aws.amazon.com / AutoScaling / latest / DeveloperGuide / as-scale-based-on-demand.html DCNL If PercentChangeInCapacity returns a value between 0 and 1 , DCNL Auto Scaling will round it off to 1 . &apos; 
&apos;compute prediction results DCNL Parameters DCNL exog : array-like , optional DCNL The values for which you want to predict . DCNL transform : bool , optional DCNL If the model was fit via a formula , do you want to pass DCNL exog through the formula . Default is True . E.g. , if you fit DCNL a model y ~ log ( x1 ) + log ( x2 ) , and transform is True , then DCNL you can pass a data structure that contains x1 and x2 in DCNL their original form . Otherwise , you \ &apos; d need to log the data DCNL first . DCNL weights : array _ like , optional DCNL Weights interpreted as in WLS , used for the variance of the predicted DCNL residual . DCNL args , kwargs : DCNL Some models can take additional arguments or keywords , see the DCNL predict method of the model for the details . DCNL Returns DCNL prediction _ results : instance DCNL The prediction results instance contains prediction and prediction DCNL variance and can on demand calculate confidence intervals and summary DCNL tables for the prediction of the mean and of new observations . &apos; 
&apos;Lists all the files that are in the designated GCS bucket . DCNL Args : DCNL bucket _ name : A str , the name of the GCS bucket to look up . DCNL Returns : DCNL A list of str , the names of the files in the bucket . &apos; 
&apos;Check whether obj and other are not equal , properly handling lost weakrefs . DCNL Use this whenever you cache a Live API object in some variable , and want to check DCNL whether you need to update the cached object . &apos; 
&apos;Require an Apache site to be enabled . DCNL This will cause Apache to reload its configuration . DCNL from fabtools import require DCNL require.apache.site _ enabled ( \ &apos; mysite \ &apos; ) &apos;
&apos;Read a graph as list of edges with numeric weights . DCNL Parameters DCNL path : file or string DCNL File or filename to read . If a file is provided , it must be DCNL opened in \ &apos; rb \ &apos; mode . DCNL Filenames ending in .gz or .bz2 will be uncompressed . DCNL comments : string , optional DCNL The character used to indicate the start of a comment . DCNL delimiter : string , optional DCNL The string used to separate values . The default is whitespace . DCNL create _ using : Graph container , optional , DCNL Use specified container to build graph . The default is networkx.Graph , DCNL an undirected graph . DCNL nodetype : int , float , str , Python type , optional DCNL Convert node data from strings to specified type DCNL encoding : string , optional DCNL Specify which encoding to use when reading file . DCNL Returns DCNL G : graph DCNL A networkx Graph or other type specified with create _ using DCNL Notes DCNL Since nodes must be hashable , the function nodetype must return hashable DCNL types ( e.g. int , float , str , frozenset - or tuples of those , etc . ) DCNL Example edgelist file format . DCNL With numeric edge data : : DCNL # read with DCNL # &gt; &gt; &gt; G = nx.read _ weighted _ edgelist ( fh ) DCNL # source target data DCNL a b 1 DCNL a c 3.14159 DCNL d e 42&apos;
&apos;Compute the sinh term in the outer sum of the HRR formula . DCNL The constants sqrt ( 2 / 3 * pi ) and sqrt ( 8 ) must be precomputed . &apos; 
&apos; \ btrue \ b &#124; \ bfalse \ b&apos;
&apos; % Rewind and Stop DCNL X # Y # Move and Drill DCNL T # Tool Selection DCNL M30 End of Program DCNL M00 End of Program DCNL R # X # Y # Repeat Hole DCNL G05 , G81 Select Drill Mode DCNL G90 Absolute Mode DCNL G91 Incremental Mode DCNL G92 X # Y # Set Zero DCNL G93 X # Y # Set Zero DCNL M48 Program Header to first &quot; % &quot; DCNL M72 English-Imperial Mode&apos;
&apos;Estimate covariance with the Oracle Approximating Shrinkage algorithm . DCNL Parameters DCNL X : array-like , shape ( n _ samples , n _ features ) DCNL Data from which to compute the covariance estimate . DCNL assume _ centered : boolean DCNL If True , data are not centered before computation . DCNL Useful to work with data whose mean is significantly equal to DCNL zero but is not exactly zero . DCNL If False , data are centered before computation . DCNL Returns DCNL shrunk _ cov : array-like , shape ( n _ features , n _ features ) DCNL Shrunk covariance . DCNL shrinkage : float DCNL Coefficient in the convex combination used for the computation DCNL of the shrunk estimate . DCNL Notes DCNL The regularised ( shrunk ) covariance is : DCNL ( 1 - shrinkage ) * cov DCNL + shrinkage * mu * np.identity ( n _ features ) DCNL where mu = trace ( cov ) / n _ features DCNL The formula we used to implement the OAS DCNL does not correspond to the one given in the article . It has been taken DCNL from the MATLAB program available from the author \ &apos; s webpage DCNL ( http : / / tbayes.eecs.umich.edu / yilun / covestimation )  . &apos; 
&apos;Return True if in a venv and no system site packages . &apos; 
&apos;Wrap data in a pkt-line . DCNL : param data : The data to wrap , as a str or None . DCNL : return : The data prefixed with its length in pkt-line format ; if data was DCNL None , returns the flush-pkt ( \ &apos; 0000 \ &apos; )  . &apos; 
&apos;Like assertRaisesRegexp in unittest&apos;
&apos;List private networks&apos;
&apos;Monkeypatch syncback functions that actually talk to Gmail so that the DCNL tests can run faster . &apos; 
&apos;like `mkdir -p`&apos;
&apos;Separate `filename` content between docstring and the rest DCNL Strongly inspired from ast.get _ docstring . DCNL Returns DCNL docstring : str DCNL docstring of `filename` DCNL rest : str DCNL `filename` content without the docstring&apos;
&apos;Test get _ repr ( )  . &apos; 
&apos;OrderedProduct delete&apos;
&apos;Extract snmp parameters from NetworkDevice object DCNL Only supports SNMPv3&apos;
&apos;Return True if n can be written as the sum of k squares , DCNL False if it can \ &apos; t , or 1 if k = = 2 and n is prime ( in which DCNL case it * can * be written as a sum of two squares ) . A False DCNL is returned only if it can \ &apos; t be written as k-squares , even DCNL if 0s are allowed . &apos; 
&apos;Update the Glance metadata for a volume by adding a new key : value pair . DCNL This API does not support changing the value of a key once it has been DCNL created . &apos; 
&apos;Get the width in projected coordinates of the coordinate tile polygon . DCNL Uses _ tile _ perimeter ( )  . &apos; 
&apos;Update the global connection pool manager parameters . DCNL maxsize : Number of connections to save that can be reused ( default = 1 ) . DCNL More than 1 is useful in multithreaded situations . &apos; 
&apos;alphanumeric ( raw _ bytes ) - &gt; str DCNL Encode the shellcode ``raw _ bytes`` such that it does not DCNL contain any bytes except for &#91; A-Za-z0-9 &#93; . DCNL Accepts the same arguments as : func : `encode` . &apos; 
&apos;Associate media instance with this media list instance . DCNL If another media instance was present it will be released . DCNL The L { libvlc _ media _ list _ lock } should NOT be held upon entering this function . DCNL @ param p _ ml : a media list instance . DCNL @ param p _ md : media instance to add . &apos; 
&apos;Returns the path to the PDB file that will be generated by a given DCNL configuration . DCNL The lookup proceeds as follows : DCNL - Look for an explicit path in the VCLinkerTool configuration block . DCNL - Look for an \ &apos; msvs _ large _ pdb _ path \ &apos; variable . DCNL - Use \ &apos; &lt; ( PRODUCT _ DIR ) / &lt; ( product _ name ) . ( exe &#124; dll ) .pdb \ &apos; if \ &apos; product _ name \ &apos; is DCNL specified . DCNL - Use \ &apos; &lt; ( PRODUCT _ DIR ) / &lt; ( target _ name ) . ( exe &#124; dll ) .pdb \ &apos; . DCNL Arguments : DCNL target _ dict : The target dictionary to be searched . DCNL config _ name : The name of the configuration of interest . DCNL vars : A dictionary of common GYP variables with generator-specific values . DCNL Returns : DCNL The path of the corresponding PDB file . &apos; 
&apos;Returns maximum elements obtained by iterating over given axis . DCNL When axis is None ( the default value ) , the max is performed DCNL over the flattened tensor . DCNL Parameters DCNL keepdims : bool DCNL If this is set to True , the axes which are reduced are left in DCNL the result as dimensions with size one . With this option , the result DCNL will broadcast correctly against the original tensor . DCNL Notes DCNL We return an error as numpy when we reduce a dim with a shape of 0 . &apos; 
&apos;Decorator for views that checks that the user is logged in and is a staff DCNL member , displaying the login page if necessary . &apos; 
&apos;Determine if the coil is axial . &apos; 
&apos;Tries to &quot; guess &quot; a rational generating function for a sequence of rational DCNL numbers v. DCNL Examples DCNL &gt; &gt; &gt; from sympy.concrete.guess import guess _ generating _ function _ rational DCNL &gt; &gt; &gt; from sympy import fibonacci DCNL &gt; &gt; &gt; l = &#91; fibonacci ( k ) for k in range ( 5,15 ) &#93; DCNL &gt; &gt; &gt; guess _ generating _ function _ rational ( l ) DCNL ( 3 * x + 5 ) / ( -x * * 2 - x + 1 ) DCNL See also DCNL See function sympy.series.approximants and mpmath.pade&apos;
&apos;Generate a list of random strings . &apos; 
&apos;Yield ``Requirement`` objects for each specification in `strs` DCNL `strs` must be a string , or a ( possibly-nested ) iterable thereof . &apos; 
&apos;Take a scalar Python value and return a dict consisting DCNL of the Amazon DynamoDB type specification and the value that DCNL needs to be sent to Amazon DynamoDB . If the type of the value DCNL is not supported , raise a TypeError&apos;
&apos;Add simple completion to a widget&apos;
&apos;subroutine of compute _ md5 _ v1 ( ) DCNL @ param get _ deps _ dict : dictionary returned by get _ dependencies call DCNL @ type get _ deps _ dict : dict DCNL @ param hash : hash instance DCNL @ type hash : hash instance&apos;
&apos;Negative sampling loss function . DCNL In natural language processing , especially language modeling , the number of DCNL words in a vocabulary can be very large . DCNL Therefore , you need to spend a lot of time calculating the gradient of the DCNL embedding matrix . DCNL By using the negative sampling trick you only need to calculate the DCNL gradient for a few sampled negative examples . DCNL The objective function is below : DCNL .. math : : DCNL f ( x , p ) = \ log \ sigma ( x ^ \ top w _ p ) + \ DCNL k E _ { i \ sim P ( i ) } &#91; \ log \ sigma ( - x ^ \ top w _ i ) &#93; , DCNL where : math : ` \ sigma ( \ cdot ) ` is a sigmoid function , : math : `w _ i` is the DCNL weight vector for the word : math : `i` , and : math : `p` is a positive example . DCNL It is approximeted with : math : `k` examples : math : `N` sampled from DCNL probability : math : `P ( i ) ` , like this : DCNL .. math : : DCNL f ( x , p ) \ approx \ log \ sigma ( x ^ \ top w _ p ) + \ DCNL \ sum _ { n \ in N } \ log \ sigma ( -x ^ \ top w _ n ) . DCNL Each sample of : math : `N` is drawn from the word distribution : math : `P ( w ) ` . DCNL This is calculated as : math : `P ( w ) = \ frac { 1 } { Z } c ( w ) ^ \ alpha` , where DCNL : math : `c ( w ) ` is the unigram count of the word : math : `w` , : math : ` \ alpha` is DCNL a hyper-parameter , and : math : `Z` is the normalization constant . DCNL Args : DCNL x ( ~ chainer.Variable ) : Batch of input vectors . DCNL t ( ~ chainer.Variable ) : Vector of groundtruth labels . DCNL W ( ~ chainer.Variable ) : Weight matrix . DCNL sampler ( function ) : Sampling function . It takes a shape and returns an DCNL integer array of the shape . Each element of this array is a sample DCNL from the word distribution . A : class : ` ~ chainer.utils.WalkerAlias` DCNL object built with the power distribution of word frequency is DCNL recommended . DCNL sample _ size ( int ) : Number of samples . DCNL See : `Distributed Representations of Words and Phrases and their Compositionality &lt; http : / / arxiv.org / abs / 1310.4546 &gt; ` _ DCNL .. seealso : : : class : ` ~ chainer.links.NegativeSampling` . &apos; 
&apos;Displays the login form and handles the login action . &apos; 
&apos;Split a string for a specified width and font size&apos;
&apos;Synthesis of a sound using the harmonic plus stochastic model DCNL hfreq , hmag : harmonic frequencies and amplitudes ; stocEnv : stochastic envelope DCNL Ns : synthesis FFT size ; H : hop size , fs : sampling rate DCNL returns y : output sound , yh : harmonic component , yst : stochastic component&apos;
&apos;Converts expr to Negation Normal Form . DCNL A logical expression is in Negation Normal Form ( NNF ) if it DCNL contains only And , Or and Not , and Not is applied only to literals . DCNL If simpify is True , the result contains no redundant clauses . DCNL Examples DCNL &gt; &gt; &gt; from sympy.abc import A , B , C , D DCNL &gt; &gt; &gt; from sympy.logic.boolalg import Not , Equivalent , to _ nnf DCNL &gt; &gt; &gt; to _ nnf ( Not ( ( ~ A &amp; ~ B ) &#124; ( C &amp; D ) ) ) DCNL And ( Or ( A , B ) , Or ( Not ( C ) , Not ( D ) ) ) DCNL &gt; &gt; &gt; to _ nnf ( Equivalent ( A &gt; &gt; B , B &gt; &gt; A ) ) DCNL And ( Or ( A , And ( A , Not ( B ) ) , Not ( B ) ) , Or ( And ( B , Not ( A ) ) , B , Not ( A ) ) ) &apos;
&apos;Helper func to provide easy access to the ( possibly ) moving target that is DCNL C { ET }  . &apos; 
&apos;Tests translation can be applied after suggestion is accepted . &apos; 
&apos;Returns a WSGI application configured for the given services . DCNL Parameters are the same as : func : `service _ mapping` , plus : DCNL : param debug : DCNL WSGI application debug flag : True to enable debug mode . DCNL : param config : DCNL WSGI application configuration dictionary . &apos; 
&apos;Get the matrix Tetragrid from the xmlElement matrix value . &apos; 
&apos;Check if a feature-specific field can be displayed . DCNL This method check a permission for a feature-specific field . DCNL Such field is usually provided through Neutron extension . DCNL : param request : Request Object DCNL : param feature : feature name defined in FEATURE _ MAP DCNL : param operation ( optional ) : Operation type . The valid value should be DCNL defined in FEATURE _ MAP &#91; feature &#93; &#91; \ &apos; policies \ &apos; &#93; DCNL It must be specified if FEATURE _ MAP &#91; feature &#93; has \ &apos; policies \ &apos;  . &apos; 
&apos;Converts a timezone string to a pytz timezone object . DCNL Arguments : DCNL timezone _ string : a string representing a timezone , or None DCNL Returns : DCNL a pytz timezone object , or None DCNL Raises : DCNL ValueError : if timezone _ string is specified , but pytz module could not be DCNL loaded&apos;
&apos;Compare two version strings ( eg 0.0.1.10 &gt; 0.0.1.9 )  . &apos; 
&apos;Map counter value v to the scattered ID space . DCNL Translate to scattered ID space , then reverse bits . DCNL Args : DCNL v : Counter value from which to produce ID . DCNL Returns : DCNL Integer ID . DCNL Raises : DCNL datastore _ errors.BadArgumentError if counter value exceeds the range of DCNL the scattered ID space . &apos; 
&apos;Single knowledge item view page&apos;
&apos;Get the first word of a split line . &apos; 
&apos;Ensure directory exists and is writable by us&apos;
&apos;Validates the user input , before execution . &apos; 
&apos;See : meth : `I18n.parse _ date`&apos;
&apos;Warn the user for each extra that doesn \ &apos; t exist . &apos; 
&apos;Returns a dictionary keyed to the defined LXC groups . All DCNL containers , including the ones not in any group , are included in the DCNL &quot; all &quot; group . &apos; 
&apos;Version 4 pubkeys are encrypted . This function is run when we already have the DCNL address to which we want to try to send a message . The \ &apos; data \ &apos; may come either DCNL off of the wire or we might have had it already in our inventory when we tried DCNL to send a msg to this particular address . &apos; 
&apos;Return the mac address interpretation of num , DCNL in the form eg \ &apos; 00 : 11 : 22 : 33 : AA : BB \ &apos; . DCNL : param num : a 48-bit integer ( eg from uuid.getnode ) DCNL : param spliiter : a string to join the hex pairs with&apos;
&apos;Get links that are rising right now . &apos; 
&apos;List all datasources in an organisation . DCNL orgname DCNL Name of the organization . DCNL profile DCNL Configuration profile used to connect to the Grafana instance . DCNL Default is \ &apos; grafana \ &apos; . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; grafana4.get _ datasources &lt; orgname &gt; &apos;
&apos;Returns a path to the directory where stub data can be stored . &apos; 
&apos;Generates a URL to the given endpoint with the method provided . DCNL Variable arguments that are unknown to the target endpoint are appended DCNL to the generated URL as query arguments . If the value of a query argument DCNL is `None` , the whole pair is skipped . In case blueprints are active DCNL you can shortcut references to the same blueprint by prefixing the DCNL local endpoint with a dot ( ``.`` ) . DCNL This will reference the index function local to the current blueprint : : DCNL url _ for ( \ &apos; .index \ &apos; ) DCNL For more information , head over to the : ref : `Quickstart &lt; url-building &gt; ` . DCNL To integrate applications , : class : `Flask` has a hook to intercept URL build DCNL errors through : attr : `Flask.build _ error _ handler` . The `url _ for` function DCNL results in a : exc : ` ~ werkzeug.routing.BuildError` when the current app does DCNL not have a URL for the given endpoint and values . When it does , the DCNL : data : ` ~ flask.current _ app` calls its : attr : ` ~ Flask.build _ error _ handler` if DCNL it is not `None` , which can return a string to use as the result of DCNL `url _ for` ( instead of `url _ for` \ &apos; s default to raise the DCNL : exc : ` ~ werkzeug.routing.BuildError` exception ) or re-raise the exception . DCNL An example : : DCNL def external _ url _ handler ( error , endpoint , * * values ) : DCNL &quot; Looks up an external URL when `url _ for` cannot build a URL . &quot; DCNL # This is an example of hooking the build _ error _ handler . DCNL # Here , lookup _ url is some utility function you \ &apos; ve built DCNL # which looks up the endpoint in some external URL registry . DCNL url = lookup _ url ( endpoint , * * values ) DCNL if url is None : DCNL # External lookup did not have a URL . DCNL # Re-raise the BuildError , in context of original traceback . DCNL exc _ type , exc _ value , tb = sys.exc _ info ( ) DCNL if exc _ value is error : DCNL raise exc _ type , exc _ value , tb DCNL else : DCNL raise error DCNL # url _ for will use this result , instead of raising BuildError . DCNL return url DCNL app.build _ error _ handler = external _ url _ handler DCNL Here , `error` is the instance of : exc : ` ~ werkzeug.routing.BuildError` , and DCNL `endpoint` and ` * * values` are the arguments passed into `url _ for` . Note DCNL that this is for building URLs outside the current application , and not for DCNL handling 404 NotFound errors . DCNL .. versionadded : : 0.10 DCNL The ` _ scheme` parameter was added . DCNL .. versionadded : : 0.9 DCNL The ` _ anchor` and ` _ method` parameters were added . DCNL .. versionadded : : 0.9 DCNL Calls : meth : `Flask.handle _ build _ error` on DCNL : exc : ` ~ werkzeug.routing.BuildError`. DCNL : param endpoint : the endpoint of the URL ( name of the function ) DCNL : param values : the variable arguments of the URL rule DCNL : param _ external : if set to `True` , an absolute URL is generated . Server DCNL address can be changed via `SERVER _ NAME` configuration variable which DCNL defaults to `localhost` . DCNL : param _ scheme : a string specifying the desired URL scheme . The ` _ external` DCNL parameter must be set to `True` or a `ValueError` is raised . DCNL : param _ anchor : if provided this is added as anchor to the URL . DCNL : param _ method : if provided this explicitly specifies an HTTP method . &apos; 
&apos;Test delayed projection on Epochs . &apos; 
&apos;Return a string listing all changes to the working tree in a git DCNL repository . &apos; 
&apos;The generic script can be customised by using parameters ( see config.py )  . &apos; 
&apos;source _ path - BT种子的绝对路径 . &apos; 
&apos;build bidirectional encoder , given pre-computed word embeddings&apos;
&apos;Minimization of scalar function of one or more variables using the DCNL BFGS algorithm . DCNL Options DCNL disp : bool DCNL Set to True to print convergence messages . DCNL maxiter : int DCNL Maximum number of iterations to perform . DCNL gtol : float DCNL Gradient norm must be less than `gtol` before successful DCNL termination . DCNL norm : float DCNL Order of norm ( Inf is max , -Inf is min ) . DCNL eps : float or ndarray DCNL If `jac` is approximated , use this value for the step size . &apos; 
&apos;Launch a terminal - &gt; QAction&apos;
&apos;Ensure domain exists . DCNL name DCNL The name of the state definition DCNL DomainName DCNL Name of the domain . DCNL ElasticsearchClusterConfig DCNL Configuration options for an Elasticsearch domain . Specifies the DCNL instance type and number of instances in the domain cluster . DCNL InstanceType ( string ) -- DCNL The instance type for an Elasticsearch cluster . DCNL InstanceCount ( integer ) -- DCNL The number of instances in the specified domain cluster . DCNL DedicatedMasterEnabled ( boolean ) -- DCNL A boolean value to indicate whether a dedicated master node is enabled . DCNL See About Dedicated Master Nodes for more information . DCNL ZoneAwarenessEnabled ( boolean ) -- DCNL A boolean value to indicate whether zone awareness is enabled . See About DCNL Zone Awareness for more information . DCNL DedicatedMasterType ( string ) -- DCNL The instance type for a dedicated master node . DCNL DedicatedMasterCount ( integer ) -- DCNL Total number of dedicated master nodes , active and on standby , for the DCNL cluster . DCNL EBSOptions DCNL Options to enable , disable and specify the type and size of EBS storage DCNL volumes . DCNL EBSEnabled ( boolean ) -- DCNL Specifies whether EBS-based storage is enabled . DCNL VolumeType ( string ) -- DCNL Specifies the volume type for EBS-based storage . DCNL VolumeSize ( integer ) -- DCNL Integer to specify the size of an EBS volume . DCNL Iops ( integer ) -- DCNL Specifies the IOPD for a Provisioned IOPS EBS volume ( SSD ) . DCNL AccessPolicies DCNL IAM access policy DCNL SnapshotOptions DCNL Option to set time , in UTC format , of the daily automated snapshot . DCNL Default value is 0 hours . DCNL AutomatedSnapshotStartHour ( integer ) -- DCNL Specifies the time , in UTC format , when the service takes a daily DCNL automated snapshot of the specified Elasticsearch domain . Default value DCNL is 0 hours . DCNL AdvancedOptions DCNL Option to allow references to indices in an HTTP request body . Must be DCNL false when configuring access to individual sub-resources . By default , DCNL the value is true . DCNL region DCNL Region to connect to . DCNL key DCNL Secret key to be used . DCNL keyid DCNL Access key to be used . DCNL profile DCNL A dict with region , key and keyid , or a pillar key ( string ) that DCNL contains a dict with region , key and keyid . DCNL ElasticsearchVersion DCNL String of format X.Y to specify version for the Elasticsearch domain eg . DCNL &quot; 1.5 &quot; or &quot; 2.3 &quot;  . &apos; 
&apos;Find the location of a prefix given a conda env name . DCNL Args : DCNL ctx ( Context ) : the context object DCNL name ( str ) : the name of prefix to find DCNL Returns : DCNL str : the location of the prefix found , or CondaValueError will raise if not found DCNL Raises : DCNL CondaValueError : when no prefix is found&apos;
&apos;Splits a line into tokens using same rules as MPD . DCNL - Lines may not start with whitespace DCNL - Tokens are split by arbitrary amount of spaces or tabs DCNL - First token must match ` &#91; a-z &#93; &#91; a-z0-9 _ &#93; * ` DCNL - Remaining tokens can be unquoted or quoted tokens . DCNL - Unquoted tokens consist of all printable characters except double quotes , DCNL single quotes , spaces and tabs . DCNL - Quoted tokens are surrounded by a matching pair of double quotes . DCNL - The closing quote must be followed by space , tab or end of line . DCNL - Any value is allowed inside a quoted token . Including double quotes , DCNL assuming it is correctly escaped . DCNL - Backslash inside a quoted token is used to escape the following DCNL character . DCNL For examples see the tests for this function . &apos; 
&apos;cmp function for sorting a list of strings by alphabetical DCNL order , but with numbers sorted numerically , i.e. `foo1 , DCNL foo2 , foo10 , foo11` instead of `foo1 , foo10 , foo11 , foo2` . DCNL Parameters DCNL str1 : str DCNL WRITEME DCNL str2 : str DCNL WRITEME DCNL Returns DCNL WRITEME&apos;
&apos;Returns a generator of all available collections . &apos; 
&apos;After one parse , seqToKV and kvToSeq are inverses , with no warnings : : DCNL seq = kvToSeq ( s ) DCNL seqToKV ( kvToSeq ( seq ) ) = = seq&apos;
&apos;Detects MyObfuscate.com packer . &apos; 
&apos;TODO&apos;
&apos;Ensure that the # of rows in the input _ file DCNL is greater than the row _ limit . &apos; 
&apos; : param id : The resource collection type . DCNL : type id : str DCNL : rtype : KeyVaultId&apos;
&apos;Parse job id from qsub output string . DCNL Assume format : DCNL &quot; Your job &lt; job _ id &gt; ( &quot; &lt; job _ name &gt; &quot; ) has been submitted &quot; &apos;
&apos;Redirects request handling to the not found render&apos;
&apos;Replace ESC ( ASCII 27 / Oct 33 ) to prevent unsafe strings DCNL from writing their own terminal manipulation commands&apos;
&apos;Find variable use / def per block . &apos; 
&apos;View that checks the hash in a password reset link and presents a DCNL form for entering a new password . &apos; 
&apos;helper function to remove an account right from a user&apos;
&apos;Return the attributes from data which are model columns . DCNL Return a new dict with items from data that whose keys are columns in DCNL the model or are association proxies of the model . &apos; 
&apos;Shares photos from existing episodes with the followers of an existing viewpoint . &apos; 
&apos;Create a metadef resource type&apos;
&apos;Check for aliyun configurations&apos;
&apos;Set up &amp; run a `Publisher` for programmatic use with string I / O. Return DCNL the encoded string or Unicode string output . DCNL For encoded string output , be sure to set the \ &apos; output _ encoding \ &apos; setting to DCNL the desired encoding . Set it to \ &apos; unicode \ &apos; for unencoded Unicode string DCNL output . Here \ &apos; s one way : : DCNL publish _ string ( ... , settings _ overrides = { \ &apos; output _ encoding \ &apos; : \ &apos; unicode \ &apos; } ) DCNL Similarly for Unicode string input ( `source` ) : : DCNL publish _ string ( ... , settings _ overrides = { \ &apos; input _ encoding \ &apos; : \ &apos; unicode \ &apos; } ) DCNL Parameters : see `publish _ programmatically` . &apos; 
&apos;Synchronization decorator . &apos; 
&apos;Guess the id of the minion . DCNL If CONFIG _ DIR / minion _ id exists , use the cached minion ID from that file . DCNL If no minion id is configured , use multiple sources to find a FQDN . DCNL If no FQDN is found you may get an ip address . DCNL Returns two values : the detected ID , and a boolean value noting whether or DCNL not an IP address is being used for the ID . &apos; 
&apos;Return the degree value for the given radians ( pi = 180 degrees )  . &apos; 
&apos;Returns the path from a response to a PWD command . DCNL Responses typically look like : : DCNL 257 &quot; / home / andrew &quot; is current directory . DCNL For this example , I will return C { \ &apos; / home / andrew \ &apos; } . DCNL If I can \ &apos; t find the path , I return C { None }  . &apos; 
&apos;Returns the expression of cross-entropy of two sequences , implement DCNL softmax internally . Normally be used for Fixed Length RNN outputs . DCNL Parameters DCNL logits : Tensorflow variable DCNL 2D tensor , ``network.outputs`` , &#91; batch _ size * n _ steps ( n _ examples ) , number of output units &#93; DCNL target _ seqs : Tensorflow variable DCNL target : 2D tensor &#91; batch _ size , n _ steps &#93; , if the number of step is dynamic , please use ``cross _ entropy _ seq _ with _ mask`` instead . DCNL batch _ size : a int , default is 1 DCNL RNN batch _ size , number of concurrent processes , divide the loss by batch _ size . DCNL num _ steps : a int DCNL sequence length DCNL Examples DCNL &gt; &gt; &gt; see PTB tutorial for more details DCNL &gt; &gt; &gt; input _ data = tf.placeholder ( tf.int32 , &#91; batch _ size , num _ steps &#93; ) DCNL &gt; &gt; &gt; targets = tf.placeholder ( tf.int32 , &#91; batch _ size , num _ steps &#93; ) DCNL &gt; &gt; &gt; cost = tf.cost.cross _ entropy _ seq ( network.outputs , targets , batch _ size , num _ steps ) &apos;
&apos;Ensure Crypto module is available . &apos; 
&apos;Basic tests for ColorArray class&apos;
&apos;All arguments have the same meaning as ``ssl _ wrap _ socket`` . DCNL By default , this function does a lot of the same work that DCNL ``ssl.create _ default _ context`` does on Python 3.4 + . It : DCNL - Disables SSLv2 , SSLv3 , and compression DCNL - Sets a restricted set of server ciphers DCNL If you wish to enable SSLv3 , you can do : : DCNL from urllib3.util import ssl _ DCNL context = ssl _ .create _ urllib3 _ context ( ) DCNL context.options &amp; = ~ ssl _ .OP _ NO _ SSLv3 DCNL You can do the same to enable compression ( substituting ``COMPRESSION`` DCNL for ``SSLv3`` in the last line above ) . DCNL : param ssl _ version : DCNL The desired protocol version to use . This will default to DCNL PROTOCOL _ SSLv23 which will negotiate the highest protocol that both DCNL the server and your installation of OpenSSL support . DCNL : param cert _ reqs : DCNL Whether to require the certificate verification . This defaults to DCNL ``ssl.CERT _ REQUIRED`` . DCNL : param options : DCNL Specific OpenSSL options . These default to ``ssl.OP _ NO _ SSLv2`` , DCNL ``ssl.OP _ NO _ SSLv3`` , ``ssl.OP _ NO _ COMPRESSION`` . DCNL : param ciphers : DCNL Which cipher suites to allow the server to select . DCNL : returns : DCNL Constructed SSLContext object with specified options DCNL : rtype : SSLContext&apos;
&apos;Merge multiple measurement info dictionaries . DCNL - Fields that are present in only one info object will be used in the DCNL merged info . DCNL - Fields that are present in multiple info objects and are the same DCNL will be used in the merged info . DCNL - Fields that are present in multiple info objects and are different DCNL will result in a None value in the merged info . DCNL - Channels will be concatenated . If multiple info objects contain DCNL channels with the same name , an exception is raised . DCNL Parameters DCNL infos &#124; list of instance of Info DCNL Info objects to merge into one info object . DCNL force _ update _ to _ first : bool DCNL If True , force the fields for objects in `info` will be updated DCNL to match those in the first item . Use at your own risk , as this DCNL may overwrite important metadata . DCNL verbose : bool , str , int , or NonIe DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL info : instance of Info DCNL The merged info object . &apos; 
&apos;Build the string from the xBlock type set to append to the Block url for block _ count types DCNL Arguments : DCNL xblock _ type _ set ( set ) : A set of strings for all the block types DCNL Returns : DCNL str : The portion to append to the block url&apos;
&apos;create two default territories , one for home country and one named Rest of the World&apos;
&apos;Generate text to put in the GitHub release Markdown box&apos;
&apos;take parameters defined and build ifupdown2 compatible hash&apos;
&apos;Extract the JSON payload from a JWT . DCNL Does the extraction w / o checking the signature . DCNL Args : DCNL id _ token : string or bytestring , OAuth 2.0 id _ token . DCNL Returns : DCNL object , The deserialized JSON payload . &apos; 
&apos;Replace WatchedFileHandler handlers by FileHandler ones . DCNL Neutron logging uses WatchedFileHandler handlers but they do not DCNL support privileges drop , this method replaces them by FileHandler DCNL handlers supporting privileges drop . &apos; 
&apos;Compress \ &apos; body \ &apos; at the given compress _ level . &apos; 
&apos;Returns a concise summary of an Alignment object as a string . &apos; 
&apos;Throw an exception if imbalanced-learn dependencies are not installed . DCNL Parameters DCNL is _ imbalanced _ dataset _ installing : boolean DCNL if True , only error on missing packages that cannot be auto-installed . DCNL if False , error on any missing package . DCNL Throws DCNL ImportError&apos;
&apos;Setup the OpenWeatherMap weather platform . &apos; 
&apos;Restart the named service DCNL .. versionchanged : : 2016.3.4 DCNL jail : optional jid or jail name DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; service.restart &lt; service name &gt; &apos;
&apos;Test the fix for # 4350 where byte strings were output with a DCNL leading `b` on Py3 . &apos; 
&apos;Encode a single name , value pair . &apos; 
&apos;Get triangle mesh from attribute dictionary . &apos; 
&apos;getRandomRange ( a : int , b : int , randfunc : callable ) : long DCNL Return a random number n so that a &lt; = n &lt; b . DCNL If randfunc is omitted , then Random.new ( ) .read is used . DCNL This function is for internal use only and may be renamed or removed in DCNL the future . &apos; 
&apos;Convert a BeautifulSoup tree to a list of Element trees . DCNL Returns a list instead of a single root Element to support DCNL HTML-like soup with more than one root element . DCNL You can pass a different Element factory through the `makeelement` DCNL keyword . &apos; 
&apos;Adds options specific to the \ &apos; update \ &apos; command on Java apps to \ &apos; parser \ &apos; . DCNL Args : DCNL parser : An instance of OptionsParser . &apos; 
&apos;BigIP can \ &apos; t make up its mind if it likes yes / no or true or false . DCNL Figure out what it likes to hear without confusing the user . &apos; 
&apos;Helper function for when multiple plot axes are needed . DCNL Those axes should be created in the functions they are used in , with DCNL ``fig.add _ subplot ( ) `` . DCNL Parameters DCNL fig : Matplotlib figure instance , optional DCNL If given , this figure is simply returned . Otherwise a new figure is DCNL created . DCNL Returns DCNL fig : Matplotlib figure instance DCNL If `fig` is None , the created figure . Otherwise the input `fig` is DCNL returned . DCNL See Also DCNL create _ mpl _ ax&apos;
&apos;Serialize revision for use in revisions table . DCNL : param Node node : Root node DCNL : param FileRecord record : Root file record DCNL : param FileVersion version : The version to serialize DCNL : param int index : One-based index of version&apos;
&apos;Displays the date , formatted according to the given string . DCNL Uses the same format as PHP \ &apos; s ``date ( ) `` function ; see http : / / php.net / date DCNL for all the possible values . DCNL Sample usage : : DCNL It is { % now &quot; jS F Y H : i &quot; % } &apos;
&apos;Validates a list to be included as document fields . The key is just DCNL passed in to make better error messages . &apos; 
&apos;Test either if an error is raised when the target are continuous DCNL type&apos;
&apos;Convert integer in \ &apos; n \ &apos; from network-byte order to host-byte order . &apos; 
&apos;mbruteforce ( func , alphabet , length , method = \ &apos; upto \ &apos; , start = None , threads = None ) DCNL Same functionality as bruteforce ( ) , but multithreaded . DCNL Arguments : DCNL func , alphabet , length , method , start : same as for bruteforce ( ) DCNL threads : Amount of threads to spawn , default is the amount of cores . &apos; 
&apos;Look for it as if it was a full path , if not , try local file , DCNL if not try in the data directory . DCNL Download dataset if it is not present&apos;
&apos;Test epoch hashing . &apos; 
&apos;Read `count` 32-bit ints using the plain encoding . &apos; 
&apos;Load `item` stored at `path` in `cache` . &apos; 
&apos;Make a copy of some of the current global CONF \ &apos; s settings . DCNL Allows determining if any of these values have changed DCNL when the config is reloaded . &apos; 
&apos;strxfrm ( string ) - &gt; string . DCNL Returns a string that behaves for cmp locale-aware . &apos; 
&apos;rjust ( s , width ) - &gt; string DCNL Return a right-justified version of s , in a field of the DCNL specified width , padded with spaces as needed . The string is DCNL never truncated . &apos; 
&apos;Return a measure of the sequences \ &apos; similarity between 0 and 100 , using different algorithms . DCNL * * Steps in the order they occur * * DCNL # . Run full _ process from utils on both strings DCNL # . Short circuit if this makes either string empty DCNL # . Take the ratio of the two processed strings ( fuzz.ratio ) DCNL # . Run checks to compare the length of the strings DCNL * If one of the strings is more than 1.5 times as long as the other DCNL use partial _ ratio comparisons - scale partial results by 0.9 DCNL ( this makes sure only full results can return 100 ) DCNL * If one of the strings is over 8 times as long as the other DCNL instead scale by 0.6 DCNL # . Run the other ratio functions DCNL * if using partial ratio functions call partial _ ratio , DCNL partial _ token _ sort _ ratio and partial _ token _ set _ ratio DCNL scale all of these by the ratio based on length DCNL * otherwise call token _ sort _ ratio and token _ set _ ratio DCNL * all token based comparisons are scaled by 0.95 DCNL ( on top of any partial scalars ) DCNL # . Take the highest value from these results DCNL round it and return it as an integer . DCNL : param s1 : DCNL : param s2 : DCNL : param force _ ascii : Allow only ascii characters DCNL : type force _ ascii : bool DCNL : return : &apos;
&apos;Creates or overwrites tags associated with a file system . DCNL Each tag is a key-value pair . If a tag key specified in the request DCNL already exists on the file system , this operation overwrites DCNL its value with the value provided in the request . DCNL filesystemid DCNL ( string ) - ID of the file system for whose tags will be modified . DCNL tags DCNL ( dict ) - The tags to add to the file system DCNL CLI Example : DCNL .. code-block : : DCNL salt \ &apos; my-minion \ &apos; boto _ efs.create _ tags&apos;
&apos;Verify if the given package or DEPEND atom has the given flag . DCNL Warning : This only works if the configuration files tree is in the correct DCNL format ( the one enforced by enforce _ nice _ config ) DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; portage _ config.has _ flag license salt Apache-2.0&apos;
&apos;Read resource template from egg installation , or fallback on rospkg otherwise . DCNL : returns : text of template file&apos;
&apos;Make the copy request to the WaterBulter API and handle DCNL successful and failed responses DCNL : param job _ pk : primary key of ArchiveJob DCNL : param url : URL to send request to DCNL : param data : &lt; dict &gt; of setting to send in POST to WaterBulter API DCNL : return : None&apos;
&apos;Finds a free id , locks it and returns integer id , or -1 if none free . DCNL * Lock must be freed manually * &apos;
&apos;Creates new GCE VM instance for development . &apos; 
&apos;Create or verify existance of config , work , or logs directories&apos;
&apos;Return the given value if it \ &apos; s a valid name , otherwise raise Invalid . DCNL If it \ &apos; s a valid name , the given value will be returned unmodified . DCNL This function applies general validation rules for names of packages , DCNL groups , users , etc . DCNL Most schemas also have their own custom name validator function to apply DCNL custom validation rules after this function , for example a DCNL ``package _ name _ validator ( ) `` to check that no package with the given name DCNL already exists . DCNL : raises ckan.lib.navl.dictization _ functions.Invalid : if ``value`` is not DCNL a valid name&apos;
&apos;Repeat elements of an array . DCNL It returns an array which has the same shape as `x` , except DCNL along the given axis . The axis is used to speficy along which DCNL axis to repeat values . By default , use the flattened input DCNL array , and return a flat output array . DCNL The number of repetitions for each element is `repeat` . DCNL `repeats` is broadcasted to fit the length of the given `axis` . DCNL Parameters DCNL x DCNL Input data , tensor variable . DCNL repeats DCNL int , scalar or tensor variable DCNL axis : int , optional DCNL See Also DCNL tensor.tile DCNL .. versionadded : : 0.6&apos;
&apos;Compare the nervanagpu and nervanacpu hist implementation to the reference DCNL implementation above . DCNL Parameterized test case , uses pytest _ generate _ test to enumerate dim _ dtype _ inp DCNL tuples that drive the test . &apos; 
&apos;Estimate rank of M / EEG covariance data , given the covariance . DCNL Parameters DCNL data : np.ndarray of float , shape ( n _ channels , n _ channels ) DCNL The M / EEG covariance . DCNL info : Info DCNL The measurment info . DCNL scalings : dict &#124; \ &apos; norm \ &apos; &#124; np.ndarray &#124; None DCNL The rescaling method to be applied . If dict , it will override the DCNL following default dict : DCNL dict ( mag = 1e12 , grad = 1e11 , eeg = 1e5 ) DCNL If \ &apos; norm \ &apos; data will be scaled by channel-wise norms . If array , DCNL pre-specified norms will be used . If None , no scaling will be applied . DCNL tol : float &#124; str DCNL Tolerance . See ``estimate _ rank`` . DCNL return _ singular : bool DCNL If True , also return the singular values that were used DCNL to determine the rank . DCNL Returns DCNL rank : int DCNL Estimated rank of the data . DCNL s : array DCNL If return _ singular is True , the singular values that were DCNL thresholded to determine the rank are also returned . &apos; 
&apos;Return a matrix as a Matrix , otherwise return x . &apos; 
&apos;Return the environment changes&apos;
&apos;Test that INDEF is correctly interpreted as a missing value&apos;
&apos;name DCNL Name of the state DCNL conn _ id DCNL ID of the peering connection to delete . Exlusive with conn _ name . DCNL conn _ name DCNL The name of the peering connection to delete . Exlusive with conn _ id . DCNL region DCNL Region to connect to . DCNL key DCNL Secret key to be used . DCNL keyid DCNL Access key to be used . DCNL profile DCNL A dict with region , key and keyid , or a pillar key ( string ) that DCNL contains a dict with region , key and keyid . DCNL .. versionadded : : 2016.11.0 DCNL Example : DCNL .. code-block : : yaml DCNL delete a vpc peering connection : DCNL boto _ vpc.delete _ vpc _ peering _ connection : DCNL - region : us-west-2 DCNL - conn _ id : pcx-4613b12e DCNL Connection name can be specified ( instead of ID ) . DCNL Specifying both conn _ name and conn _ id will result in an DCNL error . DCNL .. code-block : : yaml DCNL delete a vpc peering connection : DCNL boto _ vpc.delete _ vpc _ peering _ connection : DCNL - conn _ name : salt _ vpc _ peering&apos;
&apos;Check that the argument is a type , and return it ( internal helper ) . DCNL As a special case , accept None and return type ( None ) instead . DCNL Also , _ TypeAlias instances ( e.g. Match , Pattern ) are acceptable . DCNL The msg argument is a human-readable error message , e.g. DCNL &quot; Union &#91; arg , ... &#93; : arg should be a type . &quot; DCNL We append the repr ( ) of the actual value ( truncated to 100 chars )  . &apos; 
&apos;Test either if an error is raised when the target are not binary DCNL type . &apos; 
&apos;Append password switch to commandline . &apos; 
&apos;Get new derivation . &apos; 
&apos;Dummy implementation of _ thread . _ set _ sentinel ( )  . &apos; 
&apos;Return a FormSet for the given form class . &apos; 
&apos;KBEngine method . DCNL 这个logger被关闭前的回调函数&apos;
&apos;Return the network associated with the project . DCNL If associate is true , it will attempt to associate a new DCNL network if one is not found , otherwise it returns None . &apos; 
&apos;Make an instance of a client , login , and return it . DCNL kwargs are passed through to cls.login ( )  . &apos; 
&apos;Get relative path from siteurl of lang to siteurl of base _ lang DCNL the output is cached in _ SITES _ RELPATH _ DB&apos;
&apos; : param si : Service Instance DCNL : param vm : Virtual Machine Object DCNL : param network : Virtual Network&apos;
&apos;Provide a TestSuite to the discovery process . &apos; 
&apos;Wrapper around _ format _ value ( )  . &apos; 
&apos;Return the currently-implemented formats . DCNL These are not classes , but maybe should be : would they survive pickling ? DCNL - exporter : DCNL an Exporter subclass . DCNL if not defined , and key is in nbconvert.export.exporter _ map , it will be added DCNL automatically DCNL - nbconvert _ template : DCNL the name of the nbconvert template to add to config.ExporterClass DCNL - test : DCNL a function ( notebook _ object , notebook _ json ) DCNL conditionally offer a format based on content if truthy. see DCNL `RenderingHandler.filter _ exporters` DCNL - postprocess : DCNL a function ( html , resources ) DCNL perform any modifications to html and resources after nbconvert DCNL - content _ Type : DCNL a string specifying the Content-Type of the response from this format . DCNL Defaults to text / html ; charset = UTF-8&apos;
&apos;Return latest Flexget version from http : / / download.flexget.com / latestversion&apos;
&apos;Edit the virtual service . DCNL protocol DCNL The service protocol ( only support tcp , udp and fwmark service ) . DCNL service _ address DCNL The LVS service address . DCNL scheduler DCNL Algorithm for allocating TCP connections and UDP datagrams to real servers . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; lvs.edit _ service tcp 1.1.1.1 : 80 rr&apos;
&apos;Get version information from git keywords . &apos; 
&apos;Ensure a specific value exists at a given path DCNL : param name : The name for this rule DCNL : type name : ``str`` DCNL : param datastore : The datastore , e.g. running , operational . DCNL One of the NETCONF store IETF types DCNL : type datastore : : class : `DatastoreType` ( ``str`` enum ) . DCNL : param path : The device path to set the value at , DCNL a list of element names in order , / seperated DCNL : type path : ``list`` , ``str`` OR ``tuple`` DCNL : param config : The new value at the given path DCNL : type config : ``dict`` DCNL Examples : DCNL .. code-block : : yaml DCNL enable pap auth : DCNL cisconso.config _ present : DCNL - name : enable _ pap _ auth DCNL - datastore : running DCNL - path : devices / device / ex0 / config / sys / interfaces / serial / ppp0 / authentication DCNL - config : DCNL authentication : DCNL method : pap DCNL &quot; list-name &quot; : foobar&apos;
&apos;Query some data from a deactivated cache . &apos; 
&apos; &lt; word &gt; -- Returns an example sentence showing the usage of &lt; word &gt;  . &apos; 
&apos;Attempts to open the given files using the preferred desktop viewer or editor . DCNL : raises : class : `OpenError` : if there is a problem opening any of the files . &apos; 
&apos;Checks whether a graph is purely elementwise and containing only DCNL inputs from a given list . DCNL Parameters DCNL graph : TensorVariable object DCNL Graph to perform checks against . DCNL inputs : list DCNL List of acceptable inputs to the graph . DCNL Returns DCNL elemwise _ or _ not : bool DCNL Returns `True` if DCNL a ) everything in the graph is an Elemwise or a DimShuffle DCNL ( DimShuffles are only acceptable to broadcast up constants ) DCNL and DCNL b ) all nodes without an owner appear in `inputs` or are DCNL constants . DCNL Returns `False` otherwise . &apos; 
&apos;Builder for rebulk object . DCNL : return : Created Rebulk object DCNL : rtype : Rebulk&apos;
&apos;Get a bucket from an s3 connection DCNL : param conn : The ``boto.s3.connection.S3Connection`` DCNL : param bucket _ id : ID of the bucket to fetch DCNL : raises ``glance.exception.NotFound`` if bucket is not found . &apos; 
&apos;build the error message for the number range validators&apos;
&apos;Get the first floating ip address of an instance . &apos; 
&apos;Authenticate using MONGODB-CR . &apos; 
&apos;Check whether the given expr _ set entail an expr . DCNL If formula _ set is empty then it returns the validity of expr . DCNL Examples DCNL &gt; &gt; &gt; from sympy.abc import A , B , C DCNL &gt; &gt; &gt; from sympy.logic.inference import entails DCNL &gt; &gt; &gt; entails ( A , &#91; A &gt; &gt; B , B &gt; &gt; C &#93; ) DCNL False DCNL &gt; &gt; &gt; entails ( C , &#91; A &gt; &gt; B , B &gt; &gt; C , A &#93; ) DCNL True DCNL &gt; &gt; &gt; entails ( A &gt; &gt; B ) DCNL False DCNL &gt; &gt; &gt; entails ( A &gt; &gt; ( B &gt; &gt; A ) ) DCNL True DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Logical _ consequence&apos;
&apos;Create a new : class : `greenlet.greenlet` object and schedule it to DCNL run ``function ( * args , * * kwargs ) `` . DCNL This returns a raw : class : ` ~ greenlet.greenlet` which does not have all the useful DCNL methods that : class : `gevent.Greenlet` has . Typically , applications DCNL should prefer : func : ` ~ gevent.spawn` , but this method may DCNL occasionally be useful as an optimization if there are many DCNL greenlets involved . DCNL .. versionchanged : : 1.1b1 DCNL If * function * is not callable , immediately raise a : exc : `TypeError` DCNL instead of spawning a greenlet that will raise an uncaught TypeError . DCNL .. versionchanged : : 1.1rc2 DCNL Accept keyword arguments for ``function`` as previously ( incorrectly ) DCNL documented . Note that this may incur an additional expense . DCNL .. versionchanged : : 1.1a3 DCNL Verify that ``function`` is callable , raising a TypeError if not . Previously , DCNL the spawned greenlet would have failed the first time it was switched to . &apos; 
&apos;indicates whether the given object is a NetProxy&apos;
&apos;Translate an application error to an external Error , if possible . DCNL Args : DCNL error : An ApplicationError to translate . DCNL Returns : DCNL error : app identity API specific error message . &apos; 
&apos;Returns the specified argument from a function call . DCNL : param callfunc _ node : Node representing a function call to check . DCNL : param int position : position of the argument . DCNL : param str keyword : the keyword of the argument . DCNL : returns : The node representing the argument , None if the argument is not found . DCNL : raises ValueError : if both position and keyword are None . DCNL : raises NoSuchArgumentError : if no argument at the provided position or with DCNL the provided keyword . &apos; 
&apos;Will dynamically import a class from a string path DCNL : param class _ path : string with class path DCNL : return : class&apos;
&apos;Compute a matrix decomposition . DCNL Compute sgn , scale , M such that P = sgn * scale * dot ( M , M.T ) . DCNL The strategy of determination of eigenvalue negligibility follows DCNL the pinvh contributions from the scikit-learn project to scipy . DCNL Parameters DCNL P : matrix or ndarray DCNL A real symmetric positive or negative ( semi ) definite input matrix DCNL cond , rcond : float , optional DCNL Cutoff for small eigenvalues . DCNL Singular values smaller than rcond * largest _ eigenvalue DCNL are considered negligible . DCNL If None or -1 , suitable machine precision is used ( default ) . DCNL lower : bool , optional DCNL Whether the array data is taken from the lower or upper triangle of P. DCNL The default is to take it from the lower triangle . DCNL check _ finite : bool , optional DCNL Whether to check that the input matrix contains only finite numbers . DCNL The default is True ; disabling may give a performance gain DCNL but may result in problems ( crashes , non-termination ) if the inputs DCNL contain infinities or NaNs . DCNL Returns DCNL scale : float DCNL induced matrix 2-norm of P DCNL M1 , M2 : 2d ndarray DCNL A rectangular ndarray such that P = scale * ( dot ( M1 , M1.T ) - dot ( M2 , M2.T ) ) &apos;
&apos;Unpause a gcode linear move file . &apos; 
&apos;Run a function and give results to a Deferred . &apos; 
&apos;Return discrete Fourier transform of real or complex sequence . DCNL The returned complex array contains ``y ( 0 ) , y ( 1 ) , ... , y ( n-1 ) `` where DCNL ``y ( j ) = ( x * exp ( -2 * pi * sqrt ( -1 ) * j * np.arange ( n ) / n ) ) .sum ( ) `` . DCNL Parameters DCNL x : array _ like DCNL Array to Fourier transform . DCNL n : int , optional DCNL Length of the Fourier transform . If ``n &lt; x.shape &#91; axis &#93; `` , `x` is DCNL truncated . If ``n &gt; x.shape &#91; axis &#93; `` , `x` is zero-padded . The DCNL default results in ``n = x.shape &#91; axis &#93; `` . DCNL axis : int , optional DCNL Axis along which the fft \ &apos; s are computed ; the default is over the DCNL last axis ( i.e. , ``axis = -1`` ) . DCNL overwrite _ x : bool , optional DCNL If True , the contents of `x` can be destroyed ; the default is False . DCNL Returns DCNL z : complex ndarray DCNL with the elements : : DCNL &#91; y ( 0 ) , y ( 1 ) , .. , y ( n / 2 ) , y ( 1-n / 2 ) , ... , y ( -1 ) &#93; if n is even DCNL &#91; y ( 0 ) , y ( 1 ) , .. , y ( ( n-1 ) / 2 ) , y ( - ( n-1 ) / 2 ) , ... , y ( -1 ) &#93; if n is odd DCNL where : : DCNL y ( j ) = sum &#91; k = 0 .. n-1 &#93; x &#91; k &#93; * exp ( -sqrt ( -1 ) * j * k * 2 * pi / n ) , j = 0 .. n-1 DCNL Note that ``y ( -j ) = y ( n-j ) .conjugate ( ) `` . DCNL See Also DCNL ifft : Inverse FFT DCNL rfft : FFT of a real sequence DCNL Notes DCNL The packing of the result is &quot; standard &quot; : If ``A = fft ( a , n ) `` , then DCNL ``A &#91; 0 &#93; `` contains the zero-frequency term , ``A &#91; 1 : n / 2 &#93; `` contains the DCNL positive-frequency terms , and ``A &#91; n / 2 : &#93; `` contains the negative-frequency DCNL terms , in order of decreasingly negative frequency . So for an 8-point DCNL transform , the frequencies of the result are &#91; 0 , 1 , 2 , 3 , -4 , -3 , -2 , -1 &#93; . DCNL To rearrange the fft output so that the zero-frequency component is DCNL centered , like &#91; -4 , -3 , -2 , -1 , 0 , 1 , 2 , 3 &#93; , use `fftshift` . DCNL For `n` even , ``A &#91; n / 2 &#93; `` contains the sum of the positive and DCNL negative-frequency terms . For `n` even and `x` real , ``A &#91; n / 2 &#93; `` will DCNL always be real . DCNL Both single and double precision routines are implemented . Half precision DCNL inputs will be converted to single precision . Non floating-point inputs DCNL will be converted to double precision . Long-double precision inputs are DCNL not supported . DCNL This function is most efficient when `n` is a power of two , and least DCNL efficient when `n` is prime . DCNL If the data type of `x` is real , a &quot; real FFT &quot; algorithm is automatically DCNL used , which roughly halves the computation time . To increase efficiency DCNL a little further , use `rfft` , which does the same calculation , but only DCNL outputs half of the symmetrical spectrum . If the data is both real and DCNL symmetrical , the `dct` can again double the efficiency , by generating DCNL half of the spectrum from half of the signal . DCNL Examples DCNL &gt; &gt; &gt; from scipy.fftpack import fft , ifft DCNL &gt; &gt; &gt; x = np.arange ( 5 ) DCNL &gt; &gt; &gt; np.allclose ( fft ( ifft ( x ) ) , x , atol = 1e-15 ) # within numerical accuracy . DCNL True&apos;
&apos;Setup testenvironment for the module : DCNL - Adds dummy home dir tree&apos;
&apos;Create a client with a user already logged in . DCNL Sometimes we recreate the user , because some tests like to DCNL mess with is _ active and such . &apos; 
&apos;Test sigma _ clip of data containing invalid values . &apos; 
&apos;Create a gzip cache file for every file that a webserver would DCNL reasonably want to cache ( e.g. , text type files ) . DCNL : param pelican : The Pelican instance&apos;
&apos;Make a request . DCNL This function is deprecated as of the 1.7.0 release in favor of DCNL : func : `keystoneclient.session.request` and may be removed in the DCNL 2.0.0 release . &apos; 
&apos; .. todo : : DCNL WRITEME&apos;
&apos;Ensure event source mapping exists . DCNL name DCNL The name of the state definition . DCNL EventSourceArn DCNL The Amazon Resource Name ( ARN ) of the Amazon Kinesis or the Amazon DCNL DynamoDB stream that is the event source . DCNL FunctionName DCNL The Lambda function to invoke when AWS Lambda detects an event on the DCNL stream . DCNL You can specify an unqualified function name ( for example , &quot; Thumbnail &quot; ) DCNL or you can specify Amazon Resource Name ( ARN ) of the function ( for DCNL example , &quot; arn : aws : lambda : us-west-2 : account-id : function : ThumbNail &quot; ) . AWS DCNL Lambda also allows you to specify only the account ID qualifier ( for DCNL example , &quot; account-id : Thumbnail &quot; ) . Note that the length constraint DCNL applies only to the ARN . If you specify only the function name , it is DCNL limited to 64 character in length . DCNL StartingPosition DCNL The position in the stream where AWS Lambda should start reading . DCNL ( TRIM _ HORIZON &#124; LATEST ) DCNL Enabled DCNL Indicates whether AWS Lambda should begin polling the event source . By DCNL default , Enabled is true . DCNL BatchSize DCNL The largest number of records that AWS Lambda will retrieve from your DCNL event source at the time of invoking your function . Your function DCNL receives an event with all the retrieved records . The default is 100 DCNL records . DCNL region DCNL Region to connect to . DCNL key DCNL Secret key to be used . DCNL keyid DCNL Access key to be used . DCNL profile DCNL A dict with region , key and keyid , or a pillar key ( string ) that DCNL contains a dict with region , key and keyid . &apos; 
&apos;Export a gcode linear move text . &apos; 
&apos;Test whether an error is raised when the number of feature changes DCNL between two partial fit&apos;
&apos;Handle key codes&apos;
&apos;internet gateway fetch by id&apos;
&apos;This function executes the rpc provided as arguments on the junos device . DCNL The returned data can be stored in a file whose destination can be DCNL specified with \ &apos; dest \ &apos; keyword in the arguments . DCNL Usage : DCNL .. code-block : : bash DCNL salt \ &apos; device \ &apos; junos.rpc \ &apos; get _ config \ &apos; \ &apos; text \ &apos; filter = \ &apos; &lt; configuration &gt; &lt; system / &gt; &lt; / configuration &gt; \ &apos; DCNL salt \ &apos; device \ &apos; junos.rpc \ &apos; get-interface-information \ &apos; \ &apos; / home / user / interface.log \ &apos; interface _ name = \ &apos; lo0 \ &apos; terse = True DCNL Options : DCNL * cmd : the rpc to be executed DCNL * dest : destination file where the rpc ouput is dumped DCNL * format : the format in which the rpc reply must be stored in file specified in the dest ( used only when dest is specified ) DCNL * args : other arguments as taken by rpc call of PyEZ DCNL * kwargs : keyworded arguments taken by rpc call of PyEZ&apos;
&apos;Parse a BASEML results file . &apos; 
&apos;Exports stats in JSON format . &apos; 
&apos;Nodes pages . &apos; 
&apos;Strips all &#91; X &#93; HTML tags . &apos; 
&apos;Delete a specific image resource by name . &apos; 
&apos;Write processing history to file . &apos; 
&apos;Test PackageFinder finds pre-releases if asked to . &apos; 
&apos;Get the status of all the firewall profiles DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; firewall.get _ config&apos;
&apos;Fast Solexa FASTQ to Solexa FASTQ conversion ( PRIVATE ) . DCNL Useful for removing line wrapping and the redundant second identifier DCNL on the plus lines . Will check also check the quality string is valid . DCNL Avoids creating SeqRecord and Seq objects in order to speed up this DCNL conversion . &apos; 
&apos;Check whether the ``item`` matches the comp ``filter _ `` . DCNL If ``scope`` is `` &quot; collection &quot; `` , the filter is applied on the DCNL item \ &apos; s collection . Otherwise , it \ &apos; s applied on the item . DCNL See rfc4791-9.7.1 . &apos; 
&apos;Efficient subpixel image translation registration by cross-correlation . DCNL This code gives the same precision as the FFT upsampled cross-correlation DCNL in a fraction of the computation time and with reduced memory requirements . DCNL It obtains an initial estimate of the cross-correlation peak by an FFT and DCNL then refines the shift estimation by upsampling the DFT only in a small DCNL neighborhood of that estimate by means of a matrix-multiply DFT . DCNL Parameters DCNL src _ image : ndarray DCNL Reference image . DCNL target _ image : ndarray DCNL Image to register . Must be same dimensionality as ``src _ image`` . DCNL upsample _ factor : int , optional DCNL Upsampling factor . Images will be registered to within DCNL ``1 / upsample _ factor`` of a pixel . For example DCNL ``upsample _ factor = = 20`` means the images will be registered DCNL within 1 / 20th of a pixel . Default is 1 ( no upsampling ) DCNL space : string , one of &quot; real &quot; or &quot; fourier &quot; , optional DCNL Defines how the algorithm interprets input data . &quot; real &quot; means data DCNL will be FFT \ &apos; d to compute the correlation , while &quot; fourier &quot; data will DCNL bypass FFT of input data . Case insensitive . DCNL Returns DCNL shifts : ndarray DCNL Shift vector ( in pixels ) required to register ``target _ image`` with DCNL ``src _ image`` . Axis ordering is consistent with numpy ( e.g. Z , Y , X ) DCNL error : float DCNL Translation invariant normalized RMS error between ``src _ image`` and DCNL ``target _ image`` . DCNL phasediff : float DCNL Global phase difference between the two images ( should be DCNL zero if images are non-negative ) . DCNL References DCNL .. &#91; 1 &#93; Manuel Guizar-Sicairos , Samuel T. Thurman , and James R. Fienup , DCNL &quot; Efficient subpixel image registration algorithms , &quot; DCNL Optics Letters 33 , 156-158 ( 2008 ) . DOI : 10.1364 / OL.33.000156 DCNL .. &#91; 2 &#93; James R. Fienup , &quot; Invariant error metrics for image reconstruction &quot; DCNL Optics Letters 36 , 8352-8357 ( 1997 ) . DOI : 10.1364 / AO.36.008352&apos;
&apos;Award the specific badge to the user if they \ &apos; ve earned it . &apos; 
&apos;Get a registered .exe&apos;
&apos;JSON decoder that does ugly first-level datetime handling&apos;
&apos;Validate and convert hex color to XY space . &apos; 
&apos;If the value of the kodi setting is zero , then remove the DCNL entry from the config.txt. This should be used where zero is DCNL the default ( pi natural ) value . &apos; 
&apos;Construct a ring deriving generators and domain from options and input expressions . DCNL Parameters DCNL exprs : : class : `Expr` or sequence of : class : `Expr` ( sympifiable ) DCNL symbols : sequence of : class : `Symbol` / : class : `Expr` DCNL options : keyword arguments understood by : class : `Options` DCNL Examples DCNL &gt; &gt; &gt; from sympy.core import symbols DCNL &gt; &gt; &gt; from sympy.polys.rings import sring DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.orderings import lex DCNL &gt; &gt; &gt; x , y , z = symbols ( &quot; x , y , z &quot; ) DCNL &gt; &gt; &gt; R , f = sring ( x + 2 * y + 3 * z ) DCNL &gt; &gt; &gt; R DCNL Polynomial ring in x , y , z over ZZ with lex order DCNL &gt; &gt; &gt; f DCNL x + 2 * y + 3 * z DCNL &gt; &gt; &gt; type ( _ ) DCNL &lt; class \ &apos; sympy.polys.rings.PolyElement \ &apos; &gt; &apos;
&apos;Get the inset loops , which might overlap . &apos; 
&apos;Setup logging for the script&apos;
&apos;Maximum size for TCP send buffers DCNL See guess _ kern _ ipc _ maxsockbuf ( )  . &apos; 
&apos;get opt&apos;
&apos;Generate a zip archive containing all of the source files . &apos; 
&apos;Get the repository constructor . &apos; 
&apos;Parse a querystring and return it as : class : `MultiDict` . There is a DCNL difference in key decoding on different Python versions . On Python 3 DCNL keys will always be fully decoded whereas on Python 2 , keys will DCNL remain bytestrings if they fit into ASCII . On 2.x keys can be forced DCNL to be unicode by setting `decode _ keys` to `True` . DCNL If the charset is set to `None` no unicode decoding will happen and DCNL raw bytes will be returned . DCNL Per default a missing value for a key will default to an empty key . If DCNL you don \ &apos; t want that behavior you can set `include _ empty` to `False` . DCNL Per default encoding errors are ignored . If you want a different behavior DCNL you can set `errors` to `` \ &apos; replace \ &apos; `` or `` \ &apos; strict \ &apos; `` . In strict mode a DCNL `HTTPUnicodeError` is raised . DCNL .. versionchanged : : 0.5 DCNL In previous versions &quot; ; &quot; and &quot; &amp; &quot; could be used for url decoding . DCNL This changed in 0.5 where only &quot; &amp; &quot; is supported . If you want to DCNL use &quot; ; &quot; instead a different `separator` can be provided . DCNL The `cls` parameter was added . DCNL : param s : a string with the query string to decode . DCNL : param charset : the charset of the query string . If set to `None` DCNL no unicode decoding will take place . DCNL : param decode _ keys : Used on Python 2.x to control whether keys should DCNL be forced to be unicode objects . If set to `True` DCNL then keys will be unicode in all cases . Otherwise , DCNL they remain `str` if they fit into ASCII . DCNL : param include _ empty : Set to `False` if you don \ &apos; t want empty values to DCNL appear in the dict . DCNL : param errors : the decoding error behavior . DCNL : param separator : the pair separator to be used , defaults to `` &amp; `` DCNL : param cls : an optional dict class to use . If this is not specified DCNL or `None` the default : class : `MultiDict` is used . &apos; 
&apos;Return a tuple with a tag name and a ( possibly empty ) attribute , DCNL applying the conversions specified in TAGS _ TO _ MODIFY and checking DCNL that the tag is safe for a XML document . &apos; 
&apos;Load and return the boston house-prices dataset ( regression ) . DCNL Samples total 506 DCNL Dimensionality 13 DCNL Features real , positive DCNL Targets real 5 . - 50 . DCNL Parameters DCNL return _ X _ y : boolean , default = False . DCNL If True , returns `` ( data , target ) `` instead of a Bunch object . DCNL See below for more information about the `data` and `target` object . DCNL .. versionadded : : 0.18 DCNL Returns DCNL data : Bunch DCNL Dictionary-like object , the interesting attributes are : DCNL \ &apos; data \ &apos; , the data to learn , \ &apos; target \ &apos; , the regression targets , DCNL and \ &apos; DESCR \ &apos; , the full description of the dataset . DCNL ( data , target ) : tuple if ``return _ X _ y`` is True DCNL .. versionadded : : 0.18 DCNL Examples DCNL &gt; &gt; &gt; from sklearn.datasets import load _ boston DCNL &gt; &gt; &gt; boston = load _ boston ( ) DCNL &gt; &gt; &gt; print ( boston.data.shape ) DCNL ( 506 , 13 ) &apos;
&apos;Ensure an object is not inheriting ACLs from its parent&apos;
&apos;Return the load data that marks a specified jid&apos;
&apos;Translate a column number to name ( e.g. 1- &gt; \ &apos; A \ &apos; , etc . )  . &apos; 
&apos;Updates global state when a task has been reserved . &apos; 
&apos;Pretty print the CSS represented as a string in raw&apos;
&apos;Accept CSP reports and log them . &apos; 
&apos;Convert any true / false string to its corresponding boolean value . DCNL Value is case insensitive . &apos; 
&apos;Format the version . &apos; 
&apos;Decorator that ensures that the file instance isn \ &apos; t closed when the DCNL function is run . &apos; 
&apos;Evaluation . &apos; 
&apos;Ignores everything between `` { % comment % } `` and `` { % endcomment % } `` . &apos; 
&apos;Make sure we can find the full path to ls . &apos; 
&apos;Get the area under the curve&apos;
&apos;Return an ASCII-only JSON representation of a Python string&apos;
&apos; .. versionadded : : 2016.11.0 DCNL This function is used to remember that DCNL an event indicating that a reboot is required was witnessed . DCNL This function relies on the salt-minion \ &apos; s ability to create the following DCNL volatile registry key in the * HKLM * hive : DCNL * SYSTEM \ \ CurrentControlSet \ \ Services \ \ salt-minion \ \ Volatile-Data * DCNL Because this registry key is volatile , it will not persist DCNL beyond the current boot session . DCNL Also , in the scope of this key , the name * \ &apos; Reboot required \ &apos; * will be DCNL assigned the value of * 1 * . DCNL ( For the time being , this this function is being used DCNL whenever an install completes with exit code 3010 and DCNL this usage can be extended where appropriate in the future . ) DCNL : return : A boolean indicating whether or not the salt minion was DCNL able to perform the necessary registry operations . DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; system.set _ reboot _ required _ witnessed&apos;
&apos;Prepare one image for evaluation . DCNL If height and width are specified it would output an image with that size by DCNL applying resize _ bilinear . DCNL If central _ fraction is specified it would cropt the central fraction of the DCNL input image . DCNL Args : DCNL image : 3-D Tensor of image . If dtype is tf.float32 then the range should be DCNL &#91; 0 , 1 &#93; , otherwise it would converted to tf.float32 assuming that the range DCNL is &#91; 0 , MAX &#93; , where MAX is largest positive representable number for DCNL int ( 8 / 16 / 32 ) data type ( see `tf.image.convert _ image _ dtype` for details ) DCNL height : integer DCNL width : integer DCNL central _ fraction : Optional Float , fraction of the image to crop . DCNL scope : Optional scope for name _ scope . DCNL Returns : DCNL 3-D float Tensor of prepared image . &apos; 
&apos;Send e-mail when a user is registered . DCNL Listens for new user registrations and sends a new user registration DCNL e-mail to administrators , if this type of notification is enabled ( through DCNL ``mail _ send _ new _ user _ mail`` site configuration )  . &apos; 
&apos;Returns whether the source for this module is directly in an astropy DCNL source distribution or checkout . &apos; 
&apos;Save data into TFRecord&apos;
&apos;Saves an object to a disk file . DCNL Args : DCNL obj : saved object DCNL f : a file-like object ( has to implement fileno that returns a file descriptor ) DCNL or a string containing a file name DCNL pickle _ module : module used for pickling metadata and objects DCNL pickle _ protocol : can be specified to override the default protocol&apos;
&apos;Compute the Pearson \ &apos; score between 2 lists of vectors . &apos; 
&apos;Display a PROMPT string and a text entry field with a DEFAULT string . DCNL Return the contents of the text entry field when the user clicks the DCNL OK button or presses Return . DCNL Return None when the user clicks the Cancel button . DCNL If omitted , DEFAULT is empty . DCNL The PROMPT and DEFAULT strings , as well as the return value , DCNL can be at most 255 characters long . &apos; 
&apos;Return ( format , stream ) of given stream . &apos; 
&apos;N320 - Log messages require translation . &apos; 
&apos;Join and joinable files in \ &apos; workdir \ &apos; to \ &apos; workdir _ complete \ &apos; and DCNL when successful , delete originals&apos;
&apos;Validates a client id . DCNL Args : DCNL client _ id : The client id provided by the application . DCNL Returns : DCNL If the client id is of type str , returns the original client id . DCNL If the client id is of type unicode , returns the id encoded to utf-8 . DCNL Raises : DCNL InvalidChannelClientIdError : if client id is not an instance of str or DCNL unicode , or if the ( utf-8 encoded ) string is longer than 64 characters . &apos; 
&apos;This function has been moved to matplotlib.mlab -- please import DCNL it from there&apos;
&apos;0 / x - &gt; 0&apos;
&apos; &gt; &gt; &gt; obj = test _ nested ( 1 , 2 , 3 ) DCNL &gt; &gt; &gt; &#91; i ( ) for i in obj &#93; DCNL &#91; 1 , 2 , 3 , 4 &#93; &apos;
&apos;Makes fna file from sff file . &apos; 
&apos;Perform E-step for each ( chunk _ no , chunk , model ) 3-tuple from the DCNL input queue , placing the resulting state into the result queue . &apos; 
&apos;Aux. function to fit _ SearchLight in parallel . DCNL Fit a clone estimator to each slice of data . DCNL Parameters DCNL base _ estimator : object DCNL The base estimator to iteratively fit on a subset of the dataset . DCNL X : array , shape ( n _ samples , nd _ features , n _ estimators ) DCNL The target data . The feature dimension can be multidimensional e.g. DCNL X.shape = ( n _ samples , n _ features _ 1 , n _ features _ 2 , n _ estimators ) DCNL y : array , shape ( n _ sample , ) DCNL The target values . DCNL Returns DCNL estimators _ : list of estimators DCNL The fitted estimators . &apos; 
&apos;Returns the tensor corresponding to the permutation ``g`` DCNL For further details , see the method in ``TIDS`` with the same name . &apos; 
&apos;Returns a df with the results of the VBENCH job associated with the travis build&apos;
&apos;Gets hexadmecimal md5 hash of a string&apos;
&apos;Test _ SearchLight&apos;
&apos;Parse the return value of IPMI command into dict DCNL : param output : output of the execution of IPMI command DCNL : param template : a dict that contains the expected items of DCNL IPMI command and its length . &apos; 
&apos;Get a timestamp from a date in python 3 and python 2&apos;
&apos;Get last metadata defined for a specified repository from the database . &apos; 
&apos;Test string validation . &apos; 
&apos;Recursively list all files matching \ &apos; pattern \ &apos; . This does not return directories . &apos; 
&apos;Delegates depending on the given markers to the right extraction method . DCNL : param content : Presplitted lines of the source-code-string . DCNL : param line : Line where the documentation comment starts ( behind the DCNL start marker ) . Zero-based . DCNL : param column : Column where the documentation comment starts ( behind the DCNL start marker ) . Zero-based . DCNL : param markers : The documentation identifying markers . DCNL : return : If the comment matched layout a triple with end-of-comment DCNL line , column and the extracted documentation . If not DCNL matched , returns None . &apos; 
&apos;Convert \ &apos; date _ time \ &apos; to IMAP4 INTERNALDATE representation . DCNL Return string in form : \ &apos; &quot; DD-Mmm-YYYY HH : MM : SS + HHMM &quot; \ &apos; &apos;
&apos;Parses a string containing only 0 \ &apos; s and 1 \ &apos; s and return a Python list object . &apos; 
&apos;This code is based on os.path.relpath in the Python 2.6 distribution , DCNL included here for compatibility with Python 2.5&apos;
&apos;Require several Arch Linux packages to be installed . DCNL Example : : DCNL from fabtools import require DCNL require.arch.packages ( &#91; DCNL \ &apos; foo \ &apos; , DCNL \ &apos; bar \ &apos; , DCNL \ &apos; baz \ &apos; , &apos;
&apos;Constructs MirrorView name for volume . &apos; 
&apos;Allocate a floating IP DCNL .. versionadded : : 2016.3.0&apos;
&apos;Get the top l10n contributors for the KB . &apos; 
&apos;Check that all items of arrays differ in at most N Units in the Last Place . DCNL Args : DCNL a ( numpy.ndarray or cupy.ndarray ) : The actual object to check . DCNL b ( numpy.ndarray or cupy.ndarray ) : The desired , expected object . DCNL maxulp ( int ) : The maximum number of units in the last place DCNL that elements of ``a`` and ``b`` can differ . DCNL dtype ( numpy.dtype ) : Data-type to convert ``a`` and ``b`` to if given . DCNL .. seealso : : : func : `numpy.testing.assert _ array _ max _ ulp`&apos;
&apos;The restful handler for assets . DCNL It allows retrieval of all the assets ( as an HTML page ) , as well as uploading new assets , DCNL deleting assets , and changing the &quot; locked &quot; state of an asset . DCNL GET DCNL html : return an html page which will show all course assets . Note that only the asset container DCNL is returned and that the actual assets are filled in with a client-side request . DCNL json : returns a page of assets . The following parameters are supported : DCNL page : the desired page of results ( defaults to 0 ) DCNL page _ size : the number of items per page ( defaults to 50 ) DCNL sort : the asset field to sort by ( defaults to &quot; date _ added &quot; ) DCNL direction : the sort direction ( defaults to &quot; descending &quot; ) DCNL POST DCNL json : create ( or update ? ) an asset . The only updating that can be done is changing the lock state . DCNL PUT DCNL json : update the locked state of an asset DCNL DELETE DCNL json : delete an asset&apos;
&apos;Compute the coefficients for a 1-d Savitzky-Golay FIR filter . DCNL Parameters DCNL window _ length : int DCNL The length of the filter window ( i.e. the number of coefficients ) . DCNL `window _ length` must be an odd positive integer . DCNL polyorder : int DCNL The order of the polynomial used to fit the samples . DCNL `polyorder` must be less than `window _ length` . DCNL deriv : int , optional DCNL The order of the derivative to compute . This must be a DCNL nonnegative integer . The default is 0 , which means to filter DCNL the data without differentiating . DCNL delta : float , optional DCNL The spacing of the samples to which the filter will be applied . DCNL This is only used if deriv &gt; 0 . DCNL pos : int or None , optional DCNL If pos is not None , it specifies evaluation position within the DCNL window . The default is the middle of the window . DCNL use : str , optional DCNL Either \ &apos; conv \ &apos; or \ &apos; dot \ &apos; . This argument chooses the order of the DCNL coefficients . The default is \ &apos; conv \ &apos; , which means that the DCNL coefficients are ordered to be used in a convolution . With DCNL use = \ &apos; dot \ &apos; , the order is reversed , so the filter is applied by DCNL dotting the coefficients with the data set . DCNL Returns DCNL coeffs : 1-d ndarray DCNL The filter coefficients . DCNL References DCNL A. Savitzky , M. J. E. Golay , Smoothing and Differentiation of Data by DCNL Simplified Least Squares Procedures . Analytical Chemistry , 1964 , 36 ( 8 ) , DCNL pp 1627-1639 . DCNL See Also DCNL savgol _ filter DCNL Notes DCNL .. versionadded : : 0.14.0 DCNL Examples DCNL &gt; &gt; &gt; from scipy.signal import savgol _ coeffs DCNL &gt; &gt; &gt; savgol _ coeffs ( 5 , 2 ) DCNL array ( &#91; -0.08571429 , 0.34285714 , 0.48571429 , 0.34285714 , -0.08571429 &#93; ) DCNL &gt; &gt; &gt; savgol _ coeffs ( 5 , 2 , deriv = 1 ) DCNL array ( &#91; 2.00000000e-01 , 1.00000000e-01 , 2.00607895e-16 , DCNL -1.00000000e-01 , -2.00000000e-01 &#93; ) DCNL Note that use = \ &apos; dot \ &apos; simply reverses the coefficients . DCNL &gt; &gt; &gt; savgol _ coeffs ( 5 , 2 , pos = 3 ) DCNL array ( &#91; 0.25714286 , 0.37142857 , 0.34285714 , 0.17142857 , -0.14285714 &#93; ) DCNL &gt; &gt; &gt; savgol _ coeffs ( 5 , 2 , pos = 3 , use = \ &apos; dot \ &apos; ) DCNL array ( &#91; -0.14285714 , 0.17142857 , 0.34285714 , 0.37142857 , 0.25714286 &#93; ) DCNL `x` contains data from the parabola x = t * * 2 , sampled at DCNL t = -1 , 0 , 1 , 2 , 3 . `c` holds the coefficients that will compute the DCNL derivative at the last position . When dotted with `x` the result should DCNL be 6 . DCNL &gt; &gt; &gt; x = np.array ( &#91; 1 , 0 , 1 , 4 , 9 &#93; ) DCNL &gt; &gt; &gt; c = savgol _ coeffs ( 5 , 2 , pos = 4 , deriv = 1 , use = \ &apos; dot \ &apos; ) DCNL &gt; &gt; &gt; c.dot ( x ) DCNL 6.0000000000000018&apos;
&apos;yaml : clamav DCNL Check files with ClamAV , an open source antivirus engine . DCNL Requires the Jenkins : jenkins-wiki : `ClamAV Plugin &lt; ClamAV + Plugin &gt; ` . DCNL : arg str includes : Comma seperated list of files that should be scanned . DCNL Must be set for ClamAV to check for artifacts . ( default \ &apos; \ &apos; ) DCNL : arg str excludes : Comma seperated list of files that should be ignored DCNL ( default \ &apos; \ &apos; ) DCNL Full Example : DCNL .. literalinclude : : / .. / .. / tests / publishers / fixtures / clamav-full.yaml DCNL : language : yaml DCNL Minimal Example : DCNL .. literalinclude : : / .. / .. / tests / publishers / fixtures / clamav-minimal.yaml DCNL : language : yaml&apos;
&apos;Only load the module if nftables is installed&apos;
&apos;compares master tree to subsampled _ tree , modifies master in place DCNL this calculates bootstrap support of each nontip node in the master tree DCNL a given master _ tree _ node is supported if there exists a node in subsampled DCNL tree where sub _ tree _ node.tips = = master _ tree _ node.tips ( by name ) DCNL each subsampled tree is first modified to remove tips and branches leading DCNL to them if the tip isn \ &apos; t in the master tree DCNL not specific to bootstrap , does node support for trees generated in any DCNL manner ( e.g. : jackknifing ) DCNL master is modified to have node.bootstrap _ support incremented by 1 if DCNL subsampled tree has support for that node&apos;
&apos;Returns the WSGI filter for use with paste.deploy . &apos; 
&apos;Retrieve / query a path within the del.icio.us API . DCNL This implements a minimum interval between calls to avoid DCNL throttling . &#91; # &#93; _ Use param \ &apos; throttle \ &apos; to turn this behaviour off . DCNL @ todo : back off on 503 \ &apos; s ( HTTPError , URLError ? @ todo : testing ) . DCNL Returned XML does not always correspond with given del.icio.us examples DCNL @ todo : ( cf. help / api / ... and post \ &apos; s attributes ) DCNL .. &#91; # &#93; http : / / del.icio.us / help / api / &apos;
&apos;After the function finishes , resets the value of mpmath.mp.dps to DCNL the value it had before the function was run . &apos; 
&apos;Check existence of given path against list of path patterns DCNL The pattern definition is the as fnmatch.fnmatch . &apos; 
&apos;Minimization of scalar function of one or more variables . DCNL In general , the optimization problems are of the form : : DCNL minimize f ( x ) subject to DCNL g _ i ( x ) &gt; = 0 , i = 1 , ... , m DCNL h _ j ( x ) = 0 , j = 1 , ... , p DCNL where x is a vector of one or more variables . DCNL ``g _ i ( x ) `` are the inequality constraints . DCNL ``h _ j ( x ) `` are the equality constrains . DCNL Optionally , the lower and upper bounds for each element in x can also be DCNL specified using the `bounds` argument . DCNL Parameters DCNL fun : callable DCNL Objective function . DCNL x0 : ndarray DCNL Initial guess . DCNL args : tuple , optional DCNL Extra arguments passed to the objective function and its DCNL derivatives ( Jacobian , Hessian ) . DCNL method : str or callable , optional DCNL Type of solver . Should be one of DCNL - \ &apos; Nelder-Mead \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-neldermead &gt; ` DCNL - \ &apos; Powell \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-powell &gt; ` DCNL - \ &apos; CG \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-cg &gt; ` DCNL - \ &apos; BFGS \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-bfgs &gt; ` DCNL - \ &apos; Newton-CG \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-newtoncg &gt; ` DCNL - \ &apos; L-BFGS-B \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-lbfgsb &gt; ` DCNL - \ &apos; TNC \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-tnc &gt; ` DCNL - \ &apos; COBYLA \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-cobyla &gt; ` DCNL - \ &apos; SLSQP \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-slsqp &gt; ` DCNL - \ &apos; dogleg \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-dogleg &gt; ` DCNL - \ &apos; trust-ncg \ &apos; : ref : ` ( see here ) &lt; optimize.minimize-trustncg &gt; ` DCNL - custom - a callable object ( added in version 0.14.0 ) , DCNL see below for description . DCNL If not given , chosen to be one of ``BFGS`` , ``L-BFGS-B`` , ``SLSQP`` , DCNL depending if the problem has constraints or bounds . DCNL jac : bool or callable , optional DCNL Jacobian ( gradient ) of objective function . Only for CG , BFGS , DCNL Newton-CG , L-BFGS-B , TNC , SLSQP , dogleg , trust-ncg . DCNL If `jac` is a Boolean and is True , `fun` is assumed to return the DCNL gradient along with the objective function . If False , the DCNL gradient will be estimated numerically . DCNL `jac` can also be a callable returning the gradient of the DCNL objective . In this case , it must accept the same arguments as `fun` . DCNL hess , hessp : callable , optional DCNL Hessian ( matrix of second-order derivatives ) of objective function or DCNL Hessian of objective function times an arbitrary vector p . Only for DCNL Newton-CG , dogleg , trust-ncg . DCNL Only one of `hessp` or `hess` needs to be given . If `hess` is DCNL provided , then `hessp` will be ignored . If neither `hess` nor DCNL `hessp` is provided , then the Hessian product will be approximated DCNL using finite differences on `jac` . `hessp` must compute the Hessian DCNL times an arbitrary vector . DCNL bounds : sequence , optional DCNL Bounds for variables ( only for L-BFGS-B , TNC and SLSQP ) . DCNL `` ( min , max ) `` pairs for each element in ``x`` , defining DCNL the bounds on that parameter . Use None for one of ``min`` or DCNL ``max`` when there is no bound in that direction . DCNL constraints : dict or sequence of dict , optional DCNL Constraints definition ( only for COBYLA and SLSQP ) . DCNL Each constraint is defined in a dictionary with fields : DCNL type : str DCNL Constraint type : \ &apos; eq \ &apos; for equality , \ &apos; ineq \ &apos; for inequality . DCNL fun : callable DCNL The function defining the constraint . DCNL jac : callable , optional DCNL The Jacobian of `fun` ( only for SLSQP ) . DCNL args : sequence , optional DCNL Extra arguments to be passed to the function and Jacobian . DCNL Equality constraint means that the constraint function result is to DCNL be zero whereas inequality means that it is to be non-negative . DCNL Note that COBYLA only supports inequality constraints . DCNL tol : float , optional DCNL Tolerance for termination . For detailed control , use solver-specific DCNL options . DCNL options : dict , optional DCNL A dictionary of solver options . All methods accept the following DCNL generic options : DCNL maxiter : int DCNL Maximum number of iterations to perform . DCNL disp : bool DCNL Set to True to print convergence messages . DCNL For method-specific options , see : func : `show _ options ( ) ` . DCNL callback : callable , optional DCNL Called after each iteration , as ``callback ( xk ) `` , where ``xk`` is the DCNL current parameter vector . DCNL Returns DCNL res : OptimizeResult DCNL The optimization result represented as a ``OptimizeResult`` object . DCNL Important attributes are : ``x`` the solution array , ``success`` a DCNL Boolean flag indicating if the optimizer exited successfully and DCNL ``message`` which describes the cause of the termination . See DCNL `OptimizeResult` for a description of other attributes . DCNL See also DCNL minimize _ scalar : Interface to minimization algorithms for scalar DCNL univariate functions DCNL show _ options : Additional options accepted by the solvers DCNL Notes DCNL This section describes the available solvers that can be selected by the DCNL \ &apos; method \ &apos; parameter . The default method is * BFGS * . DCNL * * Unconstrained minimization * * DCNL Method : ref : `Nelder-Mead &lt; optimize.minimize-neldermead &gt; ` uses the DCNL Simplex algorithm &#91; 1 &#93; _ , &#91; 2 &#93; _ . This algorithm is robust in many DCNL applications . However , if numerical computation of derivative can be DCNL trusted , other algorithms using the first and / or second derivatives DCNL information might be preferred for their better performance in DCNL general . DCNL Method : ref : `Powell &lt; optimize.minimize-powell &gt; ` is a modification DCNL of Powell \ &apos; s method &#91; 3 &#93; _ , &#91; 4 &#93; _ which is a conjugate direction DCNL method . It performs sequential one-dimensional minimizations along DCNL each vector of the directions set ( `direc` field in `options` and DCNL `info` ) , which is updated at each iteration of the main DCNL minimization loop . The function need not be differentiable , and no DCNL derivatives are taken . DCNL Method : ref : `CG &lt; optimize.minimize-cg &gt; ` uses a nonlinear conjugate DCNL gradient algorithm by Polak and Ribiere , a variant of the DCNL Fletcher-Reeves method described in &#91; 5 &#93; _ pp. 120-122 . Only the DCNL first derivatives are used . DCNL Method : ref : `BFGS &lt; optimize.minimize-bfgs &gt; ` uses the quasi-Newton DCNL method of Broyden , Fletcher , Goldfarb , and Shanno ( BFGS ) &#91; 5 &#93; _ DCNL pp. 136 . It uses the first derivatives only . BFGS has proven good DCNL performance even for non-smooth optimizations . This method also DCNL returns an approximation of the Hessian inverse , stored as DCNL `hess _ inv` in the OptimizeResult object . DCNL Method : ref : `Newton-CG &lt; optimize.minimize-newtoncg &gt; ` uses a DCNL Newton-CG algorithm &#91; 5 &#93; _ pp. 168 ( also known as the truncated DCNL Newton method ) . It uses a CG method to the compute the search DCNL direction . See also * TNC * method for a box-constrained DCNL minimization with a similar algorithm . DCNL Method : ref : `dogleg &lt; optimize.minimize-dogleg &gt; ` uses the dog-leg DCNL trust-region algorithm &#91; 5 &#93; _ for unconstrained minimization . This DCNL algorithm requires the gradient and Hessian ; furthermore the DCNL Hessian is required to be positive definite . DCNL Method : ref : `trust-ncg &lt; optimize.minimize-trustncg &gt; ` uses the DCNL Newton conjugate gradient trust-region algorithm &#91; 5 &#93; _ for DCNL unconstrained minimization . This algorithm requires the gradient DCNL and either the Hessian or a function that computes the product of DCNL the Hessian with a given vector . DCNL * * Constrained minimization * * DCNL Method : ref : `L-BFGS-B &lt; optimize.minimize-lbfgsb &gt; ` uses the L-BFGS-B DCNL algorithm &#91; 6 &#93; _ , &#91; 7 &#93; _ for bound constrained minimization . DCNL Method : ref : `TNC &lt; optimize.minimize-tnc &gt; ` uses a truncated Newton DCNL algorithm &#91; 5 &#93; _ , &#91; 8 &#93; _ to minimize a function with variables subject DCNL to bounds . This algorithm uses gradient information ; it is also DCNL called Newton Conjugate-Gradient . It differs from the * Newton-CG * DCNL method described above as it wraps a C implementation and allows DCNL each variable to be given upper and lower bounds . DCNL Method : ref : `COBYLA &lt; optimize.minimize-cobyla &gt; ` uses the DCNL Constrained Optimization BY Linear Approximation ( COBYLA ) method DCNL &#91; 9 &#93; _ , &#91; 10 &#93; _ , &#91; 11 &#93; _ . The algorithm is based on linear DCNL approximations to the objective function and each constraint . The DCNL method wraps a FORTRAN implementation of the algorithm . The DCNL constraints functions \ &apos; fun \ &apos; may return either a single number DCNL or an array or list of numbers . DCNL Method : ref : `SLSQP &lt; optimize.minimize-slsqp &gt; ` uses Sequential DCNL Least SQuares Programming to minimize a function of several DCNL variables with any combination of bounds , equality and inequality DCNL constraints . The method wraps the SLSQP Optimization subroutine DCNL originally implemented by Dieter Kraft &#91; 12 &#93; _ . Note that the DCNL wrapper handles infinite values in bounds by converting them into DCNL large floating values . DCNL * * Custom minimizers * * DCNL It may be useful to pass a custom minimization method , for example DCNL when using a frontend to this method such as `scipy.optimize.basinhopping` DCNL or a different library . You can simply pass a callable as the ``method`` DCNL parameter . DCNL The callable is called as ``method ( fun , x0 , args , * * kwargs , * * options ) `` DCNL where ``kwargs`` corresponds to any other parameters passed to `minimize` DCNL ( such as `callback` , `hess` , etc . ) , except the `options` dict , which has DCNL its contents also passed as `method` parameters pair by pair . Also , if DCNL `jac` has been passed as a bool type , `jac` and `fun` are mangled so that DCNL `fun` returns just the function values and `jac` is converted to a function DCNL returning the Jacobian . The method shall return an ``OptimizeResult`` DCNL object . DCNL The provided `method` callable must be able to accept ( and possibly ignore ) DCNL arbitrary parameters ; the set of parameters accepted by `minimize` may DCNL expand in future versions and then these parameters will be passed to DCNL the method . You can find an example in the scipy.optimize tutorial . DCNL .. versionadded : : 0.11.0 DCNL References DCNL .. &#91; 1 &#93; Nelder , J A , and R Mead . 1965 . A Simplex Method for Function DCNL Minimization . The Computer Journal 7 : 308-13 . DCNL .. &#91; 2 &#93; Wright M H. 1996 . Direct search methods : Once scorned , now DCNL respectable , in Numerical Analysis 1995 : Proceedings of the 1995 DCNL Dundee Biennial Conference in Numerical Analysis ( Eds . D F DCNL Griffiths and G A Watson ) . Addison Wesley Longman , Harlow , UK . DCNL 191-208 . DCNL .. &#91; 3 &#93; Powell , M J D. 1964 . An efficient method for finding the minimum of DCNL a function of several variables without calculating derivatives . The DCNL Computer Journal 7 : 155-162 . DCNL .. &#91; 4 &#93; Press W , S A Teukolsky , W T Vetterling and B P Flannery . DCNL Numerical Recipes ( any edition ) , Cambridge University Press . DCNL .. &#91; 5 &#93; Nocedal , J , and S J Wright . 2006 . Numerical Optimization . DCNL Springer New York . DCNL .. &#91; 6 &#93; Byrd , R H and P Lu and J. Nocedal . 1995 . A Limited Memory DCNL Algorithm for Bound Constrained Optimization . SIAM Journal on DCNL Scientific and Statistical Computing 16 ( 5 ) : 1190-1208 . DCNL .. &#91; 7 &#93; Zhu , C and R H Byrd and J Nocedal . 1997 . L-BFGS-B : Algorithm DCNL 778 : L-BFGS-B , FORTRAN routines for large scale bound constrained DCNL optimization . ACM Transactions on Mathematical Software 23 ( 4 ) : DCNL 550-560 . DCNL .. &#91; 8 &#93; Nash , S G. Newton-Type Minimization Via the Lanczos Method . DCNL 1984 . SIAM Journal of Numerical Analysis 21 : 770-778 . DCNL .. &#91; 9 &#93; Powell , M J D. A direct search optimization method that models DCNL the objective and constraint functions by linear interpolation . DCNL 1994 . Advances in Optimization and Numerical Analysis , eds . S. Gomez DCNL and J-P Hennart , Kluwer Academic ( Dordrecht ) , 51-67 . DCNL .. &#91; 10 &#93; Powell M J D. Direct search algorithms for optimization DCNL calculations . 1998 . Acta Numerica 7 : 287-336 . DCNL .. &#91; 11 &#93; Powell M J D. A view of algorithms for optimization without DCNL derivatives . 2007.Cambridge University Technical Report DAMTP DCNL 2007 / NA03 DCNL .. &#91; 12 &#93; Kraft , D. A software package for sequential quadratic DCNL programming . 1988 . Tech . Rep. DFVLR-FB 88-28 , DLR German Aerospace DCNL Center -- Institute for Flight Mechanics , Koln , Germany . DCNL Examples DCNL Let us consider the problem of minimizing the Rosenbrock function . This DCNL function ( and its respective derivatives ) is implemented in `rosen` DCNL ( resp . `rosen _ der` , `rosen _ hess` ) in the `scipy.optimize`. DCNL &gt; &gt; &gt; from scipy.optimize import minimize , rosen , rosen _ der DCNL A simple application of the * Nelder-Mead * method is : DCNL &gt; &gt; &gt; x0 = &#91; 1.3 , 0.7 , 0.8 , 1.9 , 1.2 &#93; DCNL &gt; &gt; &gt; res = minimize ( rosen , x0 , method = \ &apos; Nelder-Mead \ &apos; , tol = 1e-6 ) DCNL &gt; &gt; &gt; res.x DCNL array ( &#91; 1 . , 1 . , 1 . , 1 . , 1 . &#93; ) DCNL Now using the * BFGS * algorithm , using the first derivative and a few DCNL options : DCNL &gt; &gt; &gt; res = minimize ( rosen , x0 , method = \ &apos; BFGS \ &apos; , jac = rosen _ der , DCNL ... options = { \ &apos; gtol \ &apos; : 1e-6 , \ &apos; disp \ &apos; : True } ) DCNL Optimization terminated successfully . DCNL Current function value : 0.000000 DCNL Iterations : 26 DCNL Function evaluations : 31 DCNL Gradient evaluations : 31 DCNL &gt; &gt; &gt; res.x DCNL array ( &#91; 1 . , 1 . , 1 . , 1 . , 1 . &#93; ) DCNL &gt; &gt; &gt; print ( res.message ) DCNL Optimization terminated successfully . DCNL &gt; &gt; &gt; res.hess _ inv DCNL array ( &#91; &#91; 0.00749589 , 0.01255155 , 0.02396251 , 0.04750988 , 0.09495377 &#93; , # may vary DCNL &#91; 0.01255155 , 0.02510441 , 0.04794055 , 0.09502834 , 0.18996269 &#93; , DCNL &#91; 0.02396251 , 0.04794055 , 0.09631614 , 0.19092151 , 0.38165151 &#93; , DCNL &#91; 0.04750988 , 0.09502834 , 0.19092151 , 0.38341252 , 0.7664427 &#93; , DCNL &#91; 0.09495377 , 0.18996269 , 0.38165151 , 0.7664427 , 1.53713523 &#93; &#93; ) DCNL Next , consider a minimization problem with several constraints ( namely DCNL Example 16.4 from &#91; 5 &#93; _ ) . The objective function is : DCNL &gt; &gt; &gt; fun = lambda x : ( x &#91; 0 &#93; - 1 ) * * 2 + ( x &#91; 1 &#93; - 2.5 ) * * 2 DCNL There are three constraints defined as : DCNL &gt; &gt; &gt; cons = ( { \ &apos; type \ &apos; : \ &apos; ineq \ &apos; , \ &apos; fun \ &apos; : lambda x : x &#91; 0 &#93; - 2 * x &#91; 1 &#93; + 2 } , DCNL ... { \ &apos; type \ &apos; : \ &apos; ineq \ &apos; , \ &apos; fun \ &apos; : lambda x : -x &#91; 0 &#93; - 2 * x &#91; 1 &#93; + 6 } , DCNL ... { \ &apos; type \ &apos; : \ &apos; ineq \ &apos; , \ &apos; fun \ &apos; : lambda x : -x &#91; 0 &#93; + 2 * x &#91; 1 &#93; + 2 } ) DCNL And variables must be positive , hence the following bounds : DCNL &gt; &gt; &gt; bnds = ( ( 0 , None ) , ( 0 , None ) ) DCNL The optimization problem is solved using the SLSQP method as : DCNL &gt; &gt; &gt; res = minimize ( fun , ( 2 , 0 ) , method = \ &apos; SLSQP \ &apos; , bounds = bnds , DCNL ... constraints = cons ) DCNL It should converge to the theoretical solution ( 1.4 , 1.7 )  . &apos; 
&apos;This is a nasty function : it has a max in a spike near -10 , and a long DCNL asymptote that is easy to find , but guides hill-climbing approaches away DCNL from the true max . DCNL The second peak is at x = -10 . DCNL The prior mean is 0 . &apos; 
&apos;Returns true if node is inside the name of an except handler . &apos; 
&apos;Serialize ``obj`` as a JSON formatted stream to ``fp`` ( a DCNL ``.write ( ) ``-supporting file-like object ) . DCNL If ``skipkeys`` is true then ``dict`` keys that are not basic types DCNL ( ``str`` , ``unicode`` , ``int`` , ``long`` , ``float`` , ``bool`` , ``None`` ) DCNL will be skipped instead of raising a ``TypeError`` . DCNL If ``ensure _ ascii`` is false , then the some chunks written to ``fp`` DCNL may be ``unicode`` instances , subject to normal Python ``str`` to DCNL ``unicode`` coercion rules . Unless ``fp.write ( ) `` explicitly DCNL understands ``unicode`` ( as in ``codecs.getwriter ( ) `` ) this is likely DCNL to cause an error . DCNL If ``check _ circular`` is false , then the circular reference check DCNL for container types will be skipped and a circular reference will DCNL result in an ``OverflowError`` ( or worse ) . DCNL If ``allow _ nan`` is false , then it will be a ``ValueError`` to DCNL serialize out of range ``float`` values ( ``nan`` , ``inf`` , ``-inf`` ) DCNL in strict compliance of the JSON specification , instead of using the DCNL JavaScript equivalents ( ``NaN`` , ``Infinity`` , ``-Infinity`` ) . DCNL If * indent * is a string , then JSON array elements and object members DCNL will be pretty-printed with a newline followed by that string repeated DCNL for each level of nesting . ``None`` ( the default ) selects the most compact DCNL representation without any newlines . For backwards compatibility with DCNL versions of simplejson earlier than 2.1.0 , an integer is also accepted DCNL and is converted to a string with that many spaces . DCNL If ``separators`` is an `` ( item _ separator , dict _ separator ) `` tuple DCNL then it will be used instead of the default `` ( \ &apos; , \ &apos; , \ &apos; : \ &apos; ) `` separators . DCNL `` ( \ &apos; , \ &apos; , \ &apos; : \ &apos; ) `` is the most compact JSON representation . DCNL ``encoding`` is the character encoding for str instances , default is UTF-8 . DCNL ``default ( obj ) `` is a function that should return a serializable version DCNL of obj or raise TypeError . The default simply raises TypeError . DCNL If * use _ decimal * is true ( default : ``True`` ) then decimal.Decimal DCNL will be natively serialized to JSON with full precision . DCNL To use a custom ``JSONEncoder`` subclass ( e.g. one that overrides the DCNL ``.default ( ) `` method to serialize additional types ) , specify it with DCNL the ``cls`` kwarg . &apos; 
&apos;Load macros from `source _ module` in the namespace of DCNL `target _ module` . `assignments` maps old names to new names , but is DCNL ignored if `all _ macros` is true . If `prefix` is nonempty , it is DCNL prepended to the name of each imported macro . ( This means you get DCNL macros named things like &quot; mymacromodule.mymacro &quot; , which looks like DCNL an attribute of a module , although it \ &apos; s actually just a symbol DCNL with a period in its name . ) DCNL This function is called from the `require` special form in the compiler . &apos; 
&apos;Get current libvlc _ state of media list player . DCNL @ param p _ mlp : media list player instance . DCNL @ return : libvlc _ state _ t for media list player . &apos; 
&apos;Wrapper around c _ init that initializes py _ name to Py _ None . &apos; 
&apos;evaluates the exponential of an interval&apos;
&apos;Extract ( for now ) the usernames and passwords from Basic DCNL authorization headers&apos;
&apos;Setup a library namespace , with the appropriate top root module name . DCNL Perform all the necessary setup so that all the packages at DCNL \ &apos; base _ path \ &apos; can be imported via &quot; import root _ module _ name.package &quot; . DCNL : param base _ path : Base path for the module . DCNL : param root _ module _ name : Top level name for the module . &apos; 
&apos;Returns the message storage on the request if it exists , otherwise returns DCNL an empty list . &apos; 
&apos;Configure ssh to log to a file for debug&apos;
&apos;Get fixed IPs by compute host . &apos; 
&apos;Check if there is any negative value in an array . DCNL Parameters DCNL X : array-like or sparse matrix DCNL Input data . DCNL whom : string DCNL Who passed X to this function . &apos; 
&apos;Run according to options in sys.argv and diff classifiers . &apos; 
&apos;Set scores to zero for given users . &apos; 
&apos;Synchronous cover download . Returns the &quot; best &quot; cover as per user DCNL prefs / cover resolution . DCNL Returned cover is a tuple : ( plugin , width , height , fmt , data ) DCNL Returns None if no cover is found . &apos; 
&apos;Splits multi line map string into list of rows , treats for UTF-8 encoding . DCNL Args : DCNL game _ map ( str ) : An ASCII map DCNL Returns : DCNL list ( list ) : The map split into rows&apos;
&apos;Add line breaks and indentation to ElementTree in-place . DCNL Sources : DCNL - http : / / effbot.org / zone / element-lib.htm # prettyprint DCNL - http : / / infix.se / 2007 / 02 / 06 / gentlemen-indent-your-xml&apos;
&apos;Set a global mysql variable to a given value DCNL The DB driver will handle quoting of the given value based on its DCNL type , thus numeric strings like \ &apos; 3.0 \ &apos; or \ &apos; 8 \ &apos; are illegal , they DCNL should be passed as numeric literals . &apos; 
&apos;Membership controller DCNL - uses the group _ membership table from PR&apos;
&apos;Checks to see if an interface is part of portchannel bundle DCNL Args : DCNL interface ( str ) : full name of interface , i.e. Ethernet1 / 1 DCNL Returns : DCNL True / False based on if interface is a member of a portchannel bundle&apos;
&apos;sum up the counts for a word&apos;
&apos;Wrap methods into commands for a journalled service . DCNL The resulting callable will have signature identical to wrapped DCNL function , except that it expects journal as first argument , and DCNL returns a Deferred . &apos; 
&apos; : return : The ``bytes`` name of the native package format for this platform . &apos; 
&apos;Return a callable corresponding to lookup _ view . DCNL * If lookup _ view is already a callable , return it . DCNL * If lookup _ view is a string import path that can be resolved to a callable , DCNL import that callable and return it , otherwise raise an exception DCNL ( ImportError or ViewDoesNotExist )  . &apos; 
&apos;Process validation results into the format expected by the web DCNL frontend , including transforming certain fields into HTML , mangling DCNL compatibility messages , and limiting the number of messages displayed . &apos; 
&apos;This view shows cart items . &apos; 
&apos;Enable or disable deinterlace filter . DCNL @ param p _ mi : libvlc media player . DCNL @ param psz _ mode : type of deinterlace filter , NULL to disable . &apos; 
&apos;Display a message on the Vim status line . By default , the message is DCNL highlighted and logged to Vim command-line history ( see : h history ) . DCNL Unset the &#124; warning &#124; parameter to disable this behavior . Set the &#124; truncate &#124; DCNL parameter to avoid hit-enter prompts ( see : h hit-enter ) when the message is DCNL longer than the window width . &apos; 
&apos;Get radius by prefix . &apos; 
&apos;Add the value to the lists . &apos; 
&apos;Update group type by id . &apos; 
&apos;Calls the given command , with the given options and args / kwargs . DCNL This is the primary API you should use for calling specific commands . DCNL Some examples : DCNL call _ command ( \ &apos; syncdb \ &apos; ) DCNL call _ command ( \ &apos; shell \ &apos; , plain = True ) DCNL call _ command ( \ &apos; sqlall \ &apos; , \ &apos; myapp \ &apos; ) &apos;
&apos;Deletes a comment . Confirmation on GET , action on POST . Requires the &quot; can DCNL moderate comments &quot; permission . DCNL Templates : `comments / delete.html` , DCNL Context : DCNL comment DCNL the flagged `comments.comment` object&apos;
&apos;Apply needed filtering / annotating operations to a Document \ &apos; s HTML . &apos; 
&apos;Helper function to build x axis for data captured per minibatch . DCNL Arguments : DCNL minibatches ( int ) : how many total minibatches DCNL minibatch _ markers ( int array ) : cumulative number of minibatches complete at a given epoch DCNL epoch _ axis ( bool ) : whether to render epoch or minibatch as the integer step in the x axis&apos;
&apos;Morning Doji Star&apos;
&apos;Calculates the Gaussian Convolution Kernel&apos;
&apos;Load the register from msgpack files&apos;
&apos;Maps plays to the roles they use . DCNL Input : DCNL graph : A networkx digraph that is used to map Ansible dependencies . DCNL dirs : A list of relative paths to directories in which Ansible playbooks reside . DCNL git _ dir : A path to the top-most directory in the local git repository tool is to be run in . DCNL key : The key in a playbook yaml file in dirs that maps to relevant playbook data . In this case , key is DCNL &quot; roles &quot; , because the roles used by a playbook is of interest . DCNL type _ 1 : Given edges A-B , the type of node A. DCNL type _ 2 : Given edges A-B , the type of node B. DCNL Since this function maps plays to the roles they use , both type _ 1 is a type of playbook and type _ 2 is &quot; role &quot;  . &apos; 
&apos;Install a signal handler which will write a byte to C { fd } when DCNL I { SIGCHLD } is received . DCNL This is implemented by installing an instance of L { _ Handler } wrapped DCNL around C { None } , setting the I { SIGCHLD } handler as not allowed to DCNL interrupt system calls , and using L { signal.set _ wakeup _ fd } to do the DCNL actual writing . DCNL @ param fd : The file descriptor to which to write when I { SIGCHLD } is DCNL received . DCNL @ type fd : C { int } &apos;
&apos;Return the User model . Doesn \ &apos; t require the app cache to be fully DCNL initialised . DCNL This used to live in compat to support both Django 1.4 \ &apos; s fixed User model DCNL and custom user models introduced thereafter . DCNL Support for Django 1.4 has since been dropped in Oscar , but our DCNL get _ user _ model remains because code relies on us annotating the _ meta class DCNL with the additional fields , and other code might rely on it as well . &apos; 
&apos;This method matches the signature for `xblock.runtime : Runtime.handler _ url ( ) ` DCNL See : method : `xblock.runtime : Runtime.handler _ url`&apos;
&apos;Query helper that accounts for context \ &apos; s `read _ deleted` field . DCNL : param context : context to query under DCNL : param session : if present , the session to use DCNL : param read _ deleted : if present , overrides context \ &apos; s read _ deleted field . DCNL : param project _ only : if present and context is user-type , then restrict DCNL query to match the context \ &apos; s project _ id . If set to \ &apos; allow _ none \ &apos; , DCNL restriction includes project _ id = None . DCNL : param base _ model : Where model _ query is passed a &quot; model &quot; parameter which is DCNL not a subclass of NovaBase , we should pass an extra base _ model DCNL parameter that is a subclass of NovaBase and corresponds to the DCNL model parameter . &apos; 
&apos;Returns a SciPy sparse matrix using attributes from G. DCNL If only `G` is passed in , then the adjacency matrix is constructed . DCNL Let A be a discrete set of values for the node attribute `node _ attr` . Then DCNL the elements of A represent the rows and columns of the constructed matrix . DCNL Now , iterate through every edge e = ( u , v ) in `G` and consider the value DCNL of the edge attribute `edge _ attr` . If ua and va are the values of the DCNL node attribute `node _ attr` for u and v , respectively , then the value of DCNL the edge attribute is added to the matrix element at ( ua , va ) . DCNL Parameters DCNL G : graph DCNL The NetworkX graph used to construct the NumPy matrix . DCNL edge _ attr : str , optional DCNL Each element of the matrix represents a running total of the DCNL specified edge attribute for edges whose node attributes correspond DCNL to the rows / cols of the matirx . The attribute must be present for DCNL all edges in the graph . If no attribute is specified , then we DCNL just count the number of edges whose node attributes correspond DCNL to the matrix element . DCNL node _ attr : str , optional DCNL Each row and column in the matrix represents a particular value DCNL of the node attribute . The attribute must be present for all nodes DCNL in the graph . Note , the values of this attribute should be reliably DCNL hashable . So , float values are not recommended . If no attribute is DCNL specified , then the rows and columns will be the nodes of the graph . DCNL normalized : bool , optional DCNL If True , then each row is normalized by the summation of its values . DCNL rc _ order : list , optional DCNL A list of the node attribute values . This list specifies the ordering DCNL of rows and columns of the array . If no ordering is provided , then DCNL the ordering will be random ( and also , a return value ) . DCNL Other Parameters DCNL dtype : NumPy data-type , optional DCNL A valid NumPy dtype used to initialize the array . Keep in mind certain DCNL dtypes can yield unexpected results if the array is to be normalized . DCNL The parameter is passed to numpy.zeros ( ) . If unspecified , the NumPy DCNL default is used . DCNL Returns DCNL M : SciPy sparse matrix DCNL The attribute matrix . DCNL ordering : list DCNL If `rc _ order` was specified , then only the matrix is returned . DCNL However , if `rc _ order` was None , then the ordering used to construct DCNL the matrix is returned as well . DCNL Examples DCNL Construct an adjacency matrix : DCNL &gt; &gt; &gt; G = nx.Graph ( ) DCNL &gt; &gt; &gt; G.add _ edge ( 0,1 , thickness = 1 , weight = 3 ) DCNL &gt; &gt; &gt; G.add _ edge ( 0,2 , thickness = 2 ) DCNL &gt; &gt; &gt; G.add _ edge ( 1,2 , thickness = 3 ) DCNL &gt; &gt; &gt; M = nx.attr _ sparse _ matrix ( G , rc _ order = &#91; 0,1,2 &#93; ) DCNL &gt; &gt; &gt; M.todense ( ) DCNL matrix ( &#91; &#91; 0 . , 1 . , 1 . &#93; , DCNL &#91; 1 . , 0 . , 1 . &#93; , DCNL &#91; 1 . , 1 . , 0 . &#93; &#93; ) DCNL Alternatively , we can obtain the matrix describing edge thickness . DCNL &gt; &gt; &gt; M = nx.attr _ sparse _ matrix ( G , edge _ attr = \ &apos; thickness \ &apos; , rc _ order = &#91; 0,1,2 &#93; ) DCNL &gt; &gt; &gt; M.todense ( ) DCNL matrix ( &#91; &#91; 0 . , 1 . , 2 . &#93; , DCNL &#91; 1 . , 0 . , 3 . &#93; , DCNL &#91; 2 . , 3 . , 0 . &#93; &#93; ) DCNL We can also color the nodes and ask for the probability distribution over DCNL all edges ( u , v ) describing : DCNL Pr ( v has color Y &#124; u has color X ) DCNL &gt; &gt; &gt; G.node &#91; 0 &#93; &#91; \ &apos; color \ &apos; &#93; = \ &apos; red \ &apos; DCNL &gt; &gt; &gt; G.node &#91; 1 &#93; &#91; \ &apos; color \ &apos; &#93; = \ &apos; red \ &apos; DCNL &gt; &gt; &gt; G.node &#91; 2 &#93; &#91; \ &apos; color \ &apos; &#93; = \ &apos; blue \ &apos; DCNL &gt; &gt; &gt; rc = &#91; \ &apos; red \ &apos; , \ &apos; blue \ &apos; &#93; DCNL &gt; &gt; &gt; M = nx.attr _ sparse _ matrix ( G , node _ attr = \ &apos; color \ &apos; , normalized = True , rc _ order = rc ) DCNL &gt; &gt; &gt; M.todense ( ) DCNL matrix ( &#91; &#91; 0.33333333 , 0.66666667 &#93; , DCNL &#91; 1 . , 0 . &#93; &#93; ) DCNL For example , the above tells us that for all edges ( u , v ) : DCNL Pr ( v is red &#124; u is red ) = 1 / 3 DCNL Pr ( v is blue &#124; u is red ) = 2 / 3 DCNL Pr ( v is red &#124; u is blue ) = 1 DCNL Pr ( v is blue &#124; u is blue ) = 0 DCNL Finally , we can obtain the total weights listed by the node colors . DCNL &gt; &gt; &gt; M = nx.attr _ sparse _ matrix ( G , edge _ attr = \ &apos; weight \ &apos; , node _ attr = \ &apos; color \ &apos; , rc _ order = rc ) DCNL &gt; &gt; &gt; M.todense ( ) DCNL matrix ( &#91; &#91; 3 . , 2 . &#93; , DCNL &#91; 2 . , 0 . &#93; &#93; ) DCNL Thus , the total weight over all edges ( u , v ) with u and v having colors : DCNL ( red , red ) is 3 # the sole contribution is from edge ( 0,1 ) DCNL ( red , blue ) is 2 # contributions from edges ( 0,2 ) and ( 1,2 ) DCNL ( blue , red ) is 2 # same as ( red , blue ) since graph is undirected DCNL ( blue , blue ) is 0 # there are no edges with blue endpoints&apos;
&apos;See : meth : `command _ list _ begin ( ) ` . &apos; 
&apos;helper function to convert an ace to a textual representation&apos;
&apos;Builds the offset argument for event rules . &apos; 
&apos;Pickles an object , optionally saving its parameters separately . DCNL Parameters DCNL object _ : object DCNL The object to pickle . If None , only the parameters passed to the DCNL `parameters` argument will be saved . DCNL file _ : file DCNL The destination for saving . DCNL parameters : list , optional DCNL Shared variables whose internal numpy arrays should be saved DCNL separately in the ` _ parameters` field of the tar file . DCNL pickle _ object : bool DCNL If False , `object _ ` will not be serialized , only its parameters . DCNL This flag can be used when `object _ ` is not serializable , but one DCNL still want to save its parameters . Default : True DCNL use _ cpickle : bool DCNL Use cPickle instead of pickle . Setting it to true will disable the DCNL warning message if you try to pickle objects from the main module , DCNL so be sure that there is no warning before turning this flag DCNL on . Default : False . DCNL protocol : int , optional DCNL The pickling protocol to use . Unlike Python \ &apos; s built-in pickle , the DCNL default is set to `2` instead of 0 for Python 2 . The Python 3 DCNL default ( level 3 ) is maintained . DCNL \ * \ * kwargs DCNL Keyword arguments to be passed to `pickle.Pickler` . &apos; 
&apos;Returns True iff xblock has the proper attributes for generating metadata DCNL with get _ discussion _ id _ map _ entry ( ) &apos;
&apos;Filter examples of train for which we have labels DCNL Parameters DCNL train : WRITEME DCNL label : WRITEME DCNL classes : WRITEME DCNL Returns DCNL WRITEME&apos;
&apos;Resets all lists and makes only the given one standard , DCNL if the desktop icon does not exist and the name is a DocType , then will create DCNL an icon for the doctype&apos;
&apos;Return the nth prime , with the primes indexed as prime ( 1 ) = 2 , DCNL prime ( 2 ) = 3 , etc .... The nth prime is approximately n * log ( n ) . DCNL Logarithmic integral of x is a pretty nice approximation for number of DCNL primes &lt; = x , i.e. DCNL li ( x ) ~ pi ( x ) DCNL In fact , for the numbers we are concerned about ( x &lt; 1e11 ) , DCNL li ( x ) - pi ( x ) &lt; 50000 DCNL Also , DCNL li ( x ) &gt; pi ( x ) can be safely assumed for the numbers which DCNL can be evaluated by this function . DCNL Here , we find the least integer m such that li ( m ) &gt; n using binary search . DCNL Now pi ( m-1 ) &lt; li ( m-1 ) &lt; = n , DCNL We find pi ( m - 1 ) using primepi function . DCNL Starting from m , we have to find n - pi ( m-1 ) more primes . DCNL For the inputs this implementation can handle , we will have to test DCNL primality for at max about 10 * * 5 numbers , to get our answer . DCNL References DCNL - https : / / en.wikipedia.org / wiki / Prime _ number _ theorem # Table _ of _ .CF.80.28x.29.2C _ x _ .2F _ log _ x.2C _ and _ li.28x.29 DCNL - https : / / en.wikipedia.org / wiki / Prime _ number _ theorem # Approximations _ for _ the _ nth _ prime _ number DCNL - https : / / en.wikipedia.org / wiki / Skewes % 27 _ number DCNL Examples DCNL &gt; &gt; &gt; from sympy import prime DCNL &gt; &gt; &gt; prime ( 10 ) DCNL 29 DCNL &gt; &gt; &gt; prime ( 1 ) DCNL 2 DCNL &gt; &gt; &gt; prime ( 100000 ) DCNL 1299709 DCNL See Also DCNL sympy.ntheory.primetest.isprime : Test if n is prime DCNL primerange : Generate all primes in a given range DCNL primepi : Return the number of primes less than or equal to n&apos;
&apos;Displays \ &apos; Add to Favorites \ &apos; widget . &apos; 
&apos;Opens the given ``filename`` and yields the fully-qualified names DCNL of TestCases found inside ( one per line )  . &apos; 
&apos;Sanitizes a value according to the current decimal and DCNL thousand separator setting . Used with form field input . &apos; 
&apos;Introspecs the arguments of a callable . DCNL Args : DCNL func : The callable to introspect DCNL Returns : DCNL A list of argument names , excluding * arg and * * kwargs DCNL arguments . &apos; 
&apos;Get the current list of indices from the cluster . DCNL : arg client : An : class : `elasticsearch.Elasticsearch` client object DCNL : rtype : list&apos;
&apos;Messages should be hidden after the timer times out . &apos; 
&apos;Update fancy-dmg Makefile . DCNL See https : / / el-tramo.be / blog / fancy-dmg / &apos;
&apos;Creates a copy of the headers . DCNL Args : DCNL headers : dict , request headers to copy . DCNL Returns : DCNL dict , the copied headers or a new dictionary if the headers DCNL were None . &apos; 
&apos;A context manager that yields a Secret model defined at runtime . DCNL All EncryptedField init logic occurs at model class definition time , not at DCNL object instantiation time . This means that in order to test different keys DCNL and modes , we must generate a new class definition at runtime , after DCNL establishing the correct KeyCzar settings . This context manager handles DCNL that process . DCNL See http : / / dynamic-models.readthedocs.org / en / latest / and DCNL https : / / docs.djangoproject.com / en / dev / topics / db / models / DCNL # differences-between-proxy-inheritance-and-unmanaged-models&apos;
&apos;Return a dict containing information about currently loaded modules DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; kmod.lsmod&apos;
&apos;Mark the specified image as the cover image . &apos; 
&apos;Create read-only fields and backref from VM and VDI to VBD when VBD DCNL is created . &apos; 
&apos;Returns true if the specified xblock is a vertical that is treated as a unit . DCNL A unit is a vertical that is a direct child of a sequential ( aka a subsection )  . &apos; 
&apos;&apos;
&apos;Loop through identifiers to see which formats match . DCNL Parameters DCNL origin : str DCNL A string `` &quot; read`` or `` &quot; write &quot; `` identifying whether the file is to be DCNL opened for reading or writing . DCNL data _ class _ required : object DCNL The specified class for the result of `read` or the class that is to be DCNL written . DCNL path : str , other path object or None DCNL The path to the file or None . DCNL fileobj : File object or None . DCNL An open file object to read the file \ &apos; s contents , or ``None`` if the DCNL file could not be opened . DCNL args : sequence DCNL Positional arguments for the `read` or `write` function . Note that DCNL these must be provided as sequence . DCNL kwargs : dict-like DCNL Keyword arguments for the `read` or `write` function . Note that this DCNL parameter must be `dict`-like . DCNL Returns DCNL valid _ formats : list DCNL List of matching formats . &apos; 
&apos;Returns all translatable strings from a : class : `frappe.core.doctype.Page`&apos;
&apos;Render the given template and pass the given arguments to it . &apos; 
&apos;Assert that no element is found . Use a wait in case the element currently exists DCNL on the page , and we want to wait for it to disappear before doing the assert . DCNL Finds the element using an id . &apos; 
&apos;Reduce the height of `original _ size` by `padding` , maintaining the aspect DCNL ratio . &apos; 
&apos;It \ &apos; s not sufficient to have the absolute path to the compiler , linker , DCNL etc. on Windows , as those tools rely on .dlls being in the PATH . We also DCNL need to support both x86 and x64 compilers within the same build ( to support DCNL msvs _ target _ platform hackery ) . Different architectures require a different DCNL compiler binary , and different supporting environment variables ( INCLUDE , DCNL LIB , LIBPATH ) . So , we extract the environment here , wrap all invocations DCNL of compiler tools ( cl , link , lib , rc , midl , etc . ) via win _ tool.py which DCNL sets up the environment , and then we do not prefix the compiler with DCNL an absolute path , instead preferring something like &quot; cl.exe &quot; in the rule DCNL which will then run whichever the environment setup has put in the path . DCNL When the following procedure to generate environment files does not DCNL meet your requirement ( e.g. for custom toolchains ) , you can pass DCNL &quot; -G ninja _ use _ custom _ environment _ files &quot; to the gyp to suppress file DCNL generation and use custom environment files prepared by yourself . &apos; 
&apos;This is a helper function that determines the destination path and compare DCNL key given parameters received from the ``FileFormat`` class . &apos; 
&apos; : return : The description for the plugin type . &apos; 
&apos;N321 - Use jsonutils instead of json . &apos; 
&apos;Gets all the vlanids&apos;
&apos;Return the latest version of config _ filename from the repository manifest . &apos; 
&apos;供master调用的接口 ： 关闭服务器&apos;
&apos;Read a length prefix from an RLP string . DCNL : param rlp : the rlp string to read from DCNL : param start : the position at which to start reading DCNL : returns : a tuple `` ( type , length , end ) `` , where ``type`` is either ``str`` DCNL or ``list`` depending on the type of the following payload , DCNL ``length`` is the length of the payload in bytes , and ``end`` is DCNL the position of the first payload byte in the rlp string&apos;
&apos;Add assembly linear bearing cage . &apos; 
&apos;Order view as Invoice&apos;
&apos;Get the repository constructor . &apos; 
&apos;Converts JSON formatted date to native Python objects . DCNL The keys in any JSON dict are transformed from camelcase to underscore separated words . &apos; 
&apos;Run pylama after git commit . &apos; 
&apos;Construct BlockManager from string description . DCNL String description syntax looks similar to np.matrix initializer . It looks DCNL like this : : DCNL a , b , c : f8 ; d , e , f : i8 DCNL Rules are rather simple : DCNL * see list of supported datatypes in `create _ block` method DCNL * components are semicolon-separated DCNL * each component is `NAME , NAME , NAME : DTYPE _ ID` DCNL * whitespace around colons &amp; semicolons are removed DCNL * components with same DTYPE _ ID are combined into single block DCNL * to force multiple blocks with same dtype , use \ &apos; -SUFFIX \ &apos; : : DCNL \ &apos; a : f8-1 ; b : f8-2 ; c : f8-foobar \ &apos; &apos;
&apos;Delete a role ( keystone role-delete ) DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; keystone.role _ delete c965f79c4f864eaaa9c3b41904e67082 DCNL salt \ &apos; * \ &apos; keystone.role _ delete role _ id = c965f79c4f864eaaa9c3b41904e67082 DCNL salt \ &apos; * \ &apos; keystone.role _ delete name = admin&apos;
&apos;Determine if the EEG needs an averge EEG reference . DCNL This returns True if no custom reference has been applied and no average DCNL reference projection is present in the list of projections . &apos; 
&apos;adds a new tag to a record , and creates the Tag master&apos;
&apos;Creates a budget and returns its budgetId . DCNL Args : DCNL client : An AdWordsClient instance . DCNL Returns : DCNL An int budgetId for the created Budget . &apos; 
&apos;Flatten a dict from cls - &gt; &#91; fields , ... &#93; and yields values of the form ( cls , fields ) DCNL for each entry in the dictionary value . &apos; 
&apos;Convert Nova network object into os _ vif object DCNL : param network : nova.network.model.Network instance DCNL : returns : os _ vif.objects.network.Network instance&apos;
&apos;Max weight norm constraints and gradient clipping DCNL This takes a TensorVariable and rescales it so that incoming weight DCNL norms are below a specified constraint value . Vectors violating the DCNL constraint are rescaled so that they are within the allowed range . DCNL Parameters DCNL tensor _ var : TensorVariable DCNL Theano expression for update , gradient , or other quantity . DCNL max _ norm : scalar DCNL This value sets the maximum allowed value of any norm in DCNL `tensor _ var` . DCNL norm _ axes : sequence ( list or tuple ) DCNL The axes over which to compute the norm . This overrides the DCNL default norm axes defined for the number of dimensions DCNL in `tensor _ var` . When this is not specified and `tensor _ var` is a DCNL matrix ( 2D ) , this is set to ` ( 0 , ) ` . If `tensor _ var` is a 3D , 4D or DCNL 5D tensor , it is set to a tuple listing all axes but axis 0 . The DCNL former default is useful for working with dense layers , the latter DCNL is useful for 1D , 2D and 3D convolutional layers . DCNL ( Optional ) DCNL epsilon : scalar , optional DCNL Value used to prevent numerical instability when dividing by DCNL very small or zero norms . DCNL Returns DCNL TensorVariable DCNL Input `tensor _ var` with rescaling applied to weight vectors DCNL that violate the specified constraints . DCNL Examples DCNL &gt; &gt; &gt; param = theano.shared ( DCNL ... np.random.randn ( 100 , 200 ) .astype ( theano.config.floatX ) ) DCNL &gt; &gt; &gt; update = param + 100 DCNL &gt; &gt; &gt; update = norm _ constraint ( update , 10 ) DCNL &gt; &gt; &gt; func = theano.function ( &#91; &#93; , &#91; &#93; , updates = &#91; ( param , update ) &#93; ) DCNL &gt; &gt; &gt; # Apply constrained update DCNL &gt; &gt; &gt; _ = func ( ) DCNL &gt; &gt; &gt; from lasagne.utils import compute _ norms DCNL &gt; &gt; &gt; norms = compute _ norms ( param.get _ value ( ) ) DCNL &gt; &gt; &gt; np.isclose ( np.max ( norms ) , 10 ) DCNL True DCNL Notes DCNL When `norm _ axes` is not specified , the axes over which the norm is DCNL computed depend on the dimensionality of the input variable . If it is DCNL 2D , it is assumed to come from a dense layer , and the norm is computed DCNL over axis 0 . If it is 3D , 4D or 5D , it is assumed to come from a DCNL convolutional layer and the norm is computed over all trailing axes DCNL beyond axis 0 . For other uses , you should explicitly specify the axes DCNL over which to compute the norm using `norm _ axes` . &apos; 
&apos;Permanently delete a persistent disk . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-cloud -f delete _ disk gce disk _ name = pd&apos;
&apos;Creates a wx.PySimpleApp instance if a wx.App has not been created . &apos; 
&apos;Find any \ &apos; svn : externals \ &apos; directories&apos;
&apos;Quietly closes a closable object without throwing an exception . DCNL : param closable : Object with a ``close`` method . &apos; 
&apos;Add information needed to train bounding-box regressors . &apos; 
&apos;Check if a package is installed . &apos; 
&apos;Use Preconditioned Conjugate Gradient iteration to solve A x = b DCNL A simple Jacobi ( diagonal ) preconditionner is used . DCNL Parameters DCNL A : _ Sparse _ Matrix _ coo DCNL * A * must have been compressed before by compress _ csc or DCNL compress _ csr method . DCNL b : array DCNL Right hand side of the linear system . DCNL Returns DCNL x : array . DCNL The converged solution . DCNL err : float DCNL The absolute error np.linalg.norm ( A.dot ( x ) - b ) DCNL Other parameters DCNL x0 : array . DCNL Starting guess for the solution . DCNL tol : float . DCNL Tolerance to achieve . The algorithm terminates when the relative DCNL residual is below tol . DCNL maxiter : integer . DCNL Maximum number of iterations . Iteration will stop DCNL after maxiter steps even if the specified tolerance has not DCNL been achieved . &apos; 
&apos;Returns the graph that results from contracting the specified edge . DCNL Edge contraction identifies the two endpoints of the edge as a single node DCNL incident to any edge that was incident to the original two nodes . A graph DCNL that results from edge contraction is called a * minor * of the original DCNL graph . DCNL Parameters DCNL G : NetworkX graph DCNL The graph whose edge will be contracted . DCNL edge : tuple DCNL Must be a pair of nodes in `G` . DCNL self _ loops : Boolean DCNL If this is True , any edges ( including `edge` ) joining the DCNL endpoints of `edge` in `G` become self-loops on the new node in the DCNL returned graph . DCNL Returns DCNL Networkx graph DCNL A new graph object of the same type as `G` ( leaving `G` unmodified ) DCNL with endpoints of `edge` identified in a single node . The right node DCNL of `edge` will be merged into the left one , so only the left one will DCNL appear in the returned graph . DCNL Raises DCNL ValueError DCNL If `edge` is not an edge in `G` . DCNL Examples DCNL Attempting to contract two nonadjacent nodes yields an error : : DCNL &gt; &gt; &gt; import networkx as nx DCNL &gt; &gt; &gt; G = nx.cycle _ graph ( 4 ) DCNL &gt; &gt; &gt; nx.contracted _ edge ( G , ( 1 , 3 ) ) DCNL Traceback ( most recent call last ) : DCNL ValueError : Edge ( 1 , 3 ) does not exist in graph G ; cannot contract it DCNL Contracting two adjacent nodes in the cycle graph on * n * nodes yields the DCNL cycle graph on * n - 1 * nodes : : DCNL &gt; &gt; &gt; import networkx as nx DCNL &gt; &gt; &gt; C5 = nx.cycle _ graph ( 5 ) DCNL &gt; &gt; &gt; C4 = nx.cycle _ graph ( 4 ) DCNL &gt; &gt; &gt; M = nx.contracted _ edge ( C5 , ( 0 , 1 ) , self _ loops = False ) DCNL &gt; &gt; &gt; nx.is _ isomorphic ( M , C4 ) DCNL True DCNL See also DCNL contracted _ nodes DCNL quotient _ graph&apos;
&apos;Test installing from wheel with --compile on&apos;
&apos;Returns 3 orthognal base vectors , the first one colinear to n . &apos; 
&apos;Construct an object holding a date value from the given ticks value DCNL ( number of seconds since the epoch ) . DCNL This function is part of the `DBAPI 2.0 specification DCNL &lt; http : / / www.python.org / dev / peps / pep-0249 / &gt; ` _ . DCNL : rtype : : class : `datetime.date`&apos;
&apos;Delete all tags from the instance . &apos; 
&apos;On success returns True . &apos; 
&apos;Mark `fn` for line coverage analysis . DCNL Results will be printed to sys.stdout on program termination . DCNL Usage : : DCNL def fn ( ... ) : DCNL fn = coverage ( fn ) DCNL If you are using Python 2.4 , you should be able to use the decorator DCNL syntax : : DCNL @ coverage DCNL def fn ( ... ) : &apos;
&apos;Downgrade 012 - &gt; 011 with special SQLite-compatible logic . &apos; 
&apos;http : / / msdn.microsoft.com / en-us / library / system.dynamic ( VS.100 ) .aspx DCNL Only a sanity check here . Exhaustive testing of \ &apos; dynamic \ &apos; will exist DCNL elsewhere . Piggyback off of CSharp / VB \ &apos; s work . &apos; 
&apos;Convert datetime into a human natural date string . &apos; 
&apos;Creates a module dictionary for the hardened part of the process . DCNL Module dictionary will contain modules that should be shared between the DCNL hardened and unhardened parts of the process . DCNL Args : DCNL module _ dict : Module dictionary from which existing modules should be DCNL pulled ( usually sys.modules ) . DCNL Returns : DCNL A new module dictionary . &apos; 
&apos;Cleans build directories&apos;
&apos;Test either if an error is raised when the balancing ratio to fit is DCNL smaller than the one of the data&apos;
&apos;Test that custom models can be subclassed . &apos; 
&apos;Simple method to return the non printable characters found in an string DCNL @ param string : A string DCNL @ return : Number of non printable characters in the string&apos;
&apos;Get the scores dict for the given `video` . DCNL This will return either : data : `episode _ scores` or : data : `movie _ scores` based on the type of the `video` . DCNL : param video : the video to compute the score against . DCNL : type video : : class : ` ~ subliminal.video.Video` DCNL : return : the scores dict . DCNL : rtype : dict&apos;
&apos;Kill a process by PID . DCNL .. code-block : : bash DCNL salt \ &apos; minion \ &apos; ps.kill _ pid pid &#91; signal = signal _ number &#93; DCNL pid DCNL PID of process to kill . DCNL signal DCNL Signal to send to the process . See manpage entry for kill DCNL for possible values . Default : 15 ( SIGTERM ) . DCNL * * Example : * * DCNL Send SIGKILL to process with PID 2000 : DCNL .. code-block : : bash DCNL salt \ &apos; minion \ &apos; ps.kill _ pid 2000 signal = 9&apos;
&apos;Return `text` in triple-double-quoted Python string form . &apos; 
&apos;Converts integer to string eg 3 to &quot; 03 &quot; &apos;
&apos;Validate payload against an api _ model . Aborts in case of failure DCNL - This function is for custom fields as they can \ &apos; t be validated by DCNL flask restplus automatically . DCNL - This is to be called at the start of a post or put method&apos;
&apos;Save a collection item to file system DCNL @ param Collection collection collection DCNL @ param Item item collection item&apos;
&apos;Return the file and line number of the statement that raised the tb . DCNL Returns : ( filename , lineno ) tuple&apos;
&apos;Minimization of scalar function of one or more variables using the DCNL conjugate gradient algorithm . DCNL Options DCNL disp : bool DCNL Set to True to print convergence messages . DCNL maxiter : int DCNL Maximum number of iterations to perform . DCNL gtol : float DCNL Gradient norm must be less than `gtol` before successful DCNL termination . DCNL norm : float DCNL Order of norm ( Inf is max , -Inf is min ) . DCNL eps : float or ndarray DCNL If `jac` is approximated , use this value for the step size . &apos; 
&apos;Return recurring jobs . DCNL : param filter _ data : Filters out which recurring jobs to get . DCNL : return : Sequence of recurring jobs . &apos; 
&apos;Ensure that the named group is absent DCNL name DCNL The name of the group to remove&apos;
&apos;Quit all windows . &apos; 
&apos;Get a value from the REST interface&apos;
&apos;Decorator that checks the fixture with all dtypes . DCNL Args : DCNL name ( str ) : Argument name to which specified dtypes are passed . DCNL no _ float16 ( bool ) : If , True , ``numpy.float16`` is DCNL omitted from candidate dtypes . DCNL no _ bool ( bool ) : If , True , ``numpy.bool _ `` is DCNL omitted from candidate dtypes . DCNL dtypes to be tested : ``numpy.float16`` ( optional ) , ``numpy.float32`` , DCNL ``numpy.float64`` , ``numpy.dtype ( \ &apos; b \ &apos; ) `` , ``numpy.dtype ( \ &apos; h \ &apos; ) `` , DCNL ``numpy.dtype ( \ &apos; i \ &apos; ) `` , ``numpy.dtype ( \ &apos; l \ &apos; ) `` , ``numpy.dtype ( \ &apos; q \ &apos; ) `` , DCNL ``numpy.dtype ( \ &apos; B \ &apos; ) `` , ``numpy.dtype ( \ &apos; H \ &apos; ) `` , ``numpy.dtype ( \ &apos; I \ &apos; ) `` , DCNL ``numpy.dtype ( \ &apos; L \ &apos; ) `` , ``numpy.dtype ( \ &apos; Q \ &apos; ) `` , and ``numpy.bool _ `` ( optional ) . DCNL The usage is as follows . DCNL This test fixture checks if ``cPickle`` successfully reconstructs DCNL : class : `cupy.ndarray` for various dtypes . DCNL ``dtype`` is an argument inserted by the decorator . DCNL &gt; &gt; &gt; import unittest DCNL &gt; &gt; &gt; from cupy import testing DCNL &gt; &gt; &gt; @ testing.gpu DCNL ... class TestNpz ( unittest.TestCase ) : DCNL ... @ testing.for _ all _ dtypes ( ) DCNL ... def test _ pickle ( self , dtype ) : DCNL ... a = testing.shaped _ arange ( ( 2 , 3 , 4 ) , dtype = dtype ) DCNL ... s = six.moves.cPickle.dumps ( a ) DCNL ... b = six.moves.cPickle.loads ( s ) DCNL ... testing.assert _ array _ equal ( a , b ) DCNL Typically , we use this decorator in combination with DCNL decorators that check consistency between NumPy and CuPy like DCNL : func : `cupy.testing.numpy _ cupy _ allclose` . DCNL The following is such an example . DCNL &gt; &gt; &gt; import unittest DCNL &gt; &gt; &gt; from cupy import testing DCNL &gt; &gt; &gt; @ testing.gpu DCNL ... class TestMean ( unittest.TestCase ) : DCNL ... @ testing.for _ all _ dtypes ( ) DCNL ... @ testing.numpy _ cupy _ allclose ( ) DCNL ... def test _ mean _ all ( self , xp , dtype ) : DCNL ... a = testing.shaped _ arange ( ( 2 , 3 ) , xp , dtype ) DCNL ... return a.mean ( ) DCNL .. seealso : : : func : `cupy.testing.for _ dtypes`&apos;
&apos;processes mapping data in list of lists format into a 2 deep dict&apos;
&apos;Outputs the first variable passed that is not False , without escaping . DCNL Outputs nothing if all the passed variables are False . DCNL Sample usage : : DCNL { % firstof var1 var2 var3 % } DCNL This is equivalent to : : DCNL { % if var1 % } DCNL { { var1 &#124; safe } } DCNL { % else % } { % if var2 % } DCNL { { var2 &#124; safe } } DCNL { % else % } { % if var3 % } DCNL { { var3 &#124; safe } } DCNL { % endif % } { % endif % } { % endif % } DCNL but obviously much cleaner ! DCNL You can also use a literal string as a fallback value in case all DCNL passed variables are False : : DCNL { % firstof var1 var2 var3 &quot; fallback value &quot; % } DCNL If you want to escape the output , use a filter tag : : DCNL { % filter force _ escape % } DCNL { % firstof var1 var2 var3 &quot; fallback value &quot; % } DCNL { % endfilter % } &apos;
&apos;List all exceptions found during a scan DCNL : return : A JSON containing a list of : DCNL - Exception resource URL ( eg . / scans / 0 / exceptions / 3 ) DCNL - The exceptions id ( eg . 3 ) DCNL - Exception string DCNL - Exception file name DCNL - Exception line number&apos;
&apos;Checks that the expr has been rewritten using f ( -x ) - &gt; f ( x ) DCNL arg : -x&apos;
&apos;Returns True if the passed in value is a job id&apos;
&apos;Encode `arg` as `typ` . DCNL `arg` will be encoded in a best effort manner , were necessary the function DCNL will try to correctly define the underlying binary representation ( ie . DCNL decoding a hex-encoded address / hash ) . DCNL Args : DCNL typ ( Tuple &#91; ( str , int , list ) &#93; ) : A 3-tuple defining the `arg` type . DCNL The first element defines the type name . DCNL The second element defines the type length in bits . DCNL The third element defines if it \ &apos; s an array type . DCNL Together the first and second defines the elementary type , the third DCNL element must be present but is ignored . DCNL Valid type names are : DCNL - uint DCNL - int DCNL - bool DCNL - ufixed DCNL - fixed DCNL - string DCNL - bytes DCNL - hash DCNL - address DCNL arg ( object ) : The object to be encoded , it must be a python object DCNL compatible with the `typ` . DCNL Raises : DCNL ValueError : when an invalid `typ` is supplied . DCNL ValueOutOfBounds : when `arg` cannot be encoded as `typ` because of the DCNL binary contraints . DCNL Note : DCNL This function don \ &apos; t work with array types , for that use the `enc` DCNL function . &apos; 
&apos;&apos;
&apos;Test hsl to rgb color function&apos;
&apos;Tests that cx _ Oracle ( external dependency ) is built correctly . &apos; 
&apos;Return a channel object based on ``env.host _ string`` . &apos; 
&apos;1 pixel = 9525 EMUs&apos;
&apos;Yield multiple ( code , function ) tuples . &apos; 
&apos;Return basic meta-data about the LRF file in C { stream } as a DCNL L { MetaInformation } object . DCNL @ param stream : A file like object or an instance of L { LRFMetaFile } &apos;
&apos;Selects a valid amino acid sequence given a 3-letter code input . DCNL This function takes a single three-letter amino acid sequence and the phase DCNL of the sequence to return the longest intact amino acid sequence possible . DCNL Parts of the input sequence before and after the selected sequence are also DCNL returned . DCNL This is an internal private function and is meant for parsing Exonerate \ &apos; s DCNL three-letter amino acid output . DCNL &gt; &gt; &gt; from Bio.SearchIO.ExonerateIO. _ base import _ make _ triplets DCNL &gt; &gt; &gt; _ make _ triplets ( \ &apos; GlyThrSerAlaPro \ &apos; ) DCNL ( \ &apos; \ &apos; , &#91; \ &apos; Gly \ &apos; , \ &apos; Thr \ &apos; , \ &apos; Ser \ &apos; , \ &apos; Ala \ &apos; , \ &apos; Pro \ &apos; &#93; , \ &apos; \ &apos; ) DCNL &gt; &gt; &gt; _ make _ triplets ( \ &apos; yThSerAla \ &apos; , phase = 1 ) DCNL ( \ &apos; y \ &apos; , &#91; \ &apos; Thr \ &apos; , \ &apos; Ser \ &apos; , \ &apos; Ala \ &apos; &#93; , \ &apos; \ &apos; ) DCNL &gt; &gt; &gt; _ make _ triplets ( \ &apos; yThSerAlaPr \ &apos; , phase = 1 ) DCNL ( \ &apos; y \ &apos; , &#91; \ &apos; Thr \ &apos; , \ &apos; Ser \ &apos; , \ &apos; Ala \ &apos; &#93; , \ &apos; Pr \ &apos; ) &apos;
&apos;Load external class based on a path . DCNL Example classpath : &quot; Module.Submodule : Classname &quot; . DCNL Equivalent soon-to-be-deprecated classpath : &quot; Module.Submodule.Classname &quot;  . &apos; 
&apos;Implements memoized cache lookups&apos;
&apos;Git Pull handler&apos;
&apos;Return all assets that are referenced in the given CSS document . DCNL The returned URLs are relative to the stylesheet \ &apos; s URL . DCNL Args : DCNL data : The content of the stylesheet to scan as string . DCNL inline : True if the argument is an inline HTML style attribute . &apos; 
&apos;Return full script path , if any valid script exists , else None&apos;
&apos;Follow a user&apos;
&apos;Given a list of template names , returns the first that can be loaded . &apos; 
&apos;Update / Create the SAMLProviderData for the given entity ID . DCNL Return value : DCNL False if nothing has changed and existing data \ &apos; s &quot; fetched at &quot; timestamp is just updated . DCNL True if a new record was created . ( Either this is a new provider or something changed . ) &apos;
&apos;Calls into the IOKit to load a kext by file-system path . DCNL Apple kext API doco here : DCNL http : / / developer.apple.com / library / mac / # documentation / IOKit / Reference / DCNL KextManager _ header _ reference / Reference / reference.html DCNL Args : DCNL kext _ path : Absolute or relative POSIX path to the kext . DCNL Raises : DCNL OSError : On failure to load the kext . &apos; 
&apos;Returns a list of hosts for the the specified VMware environment . DCNL host DCNL The location of the host . DCNL username DCNL The username used to login to the host , such as ``root`` . DCNL password DCNL The password used to login to the host . DCNL protocol DCNL Optionally set to alternate protocol if the host is not using the default DCNL protocol . Default protocol is ``https`` . DCNL port DCNL Optionally set to alternate port if the host is not using the default DCNL port . Default port is ``443`` . DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; vsphere.list _ hosts 1.2.3.4 root bad-password&apos;
&apos;Obtain a cluster from the command line options and environment . DCNL : param BenchmarkOption options : Parsed command line options . DCNL : param dict env : Dictionary of environment variables . DCNL : return BenchmarkCluster : Cluster to benchmark . &apos; 
&apos;Runs a simple HTTP server hosting WSGI app `func` . The directory `static / ` DCNL is hosted statically . DCNL Based on &#91; WsgiServer &#93; ( http : / / www.owlfish.com / software / wsgiutils / documentation / wsgi-server-api.html ) DCNL from &#91; Colin Stewart &#93; ( http : / / www.owlfish.com / )  . &apos; 
&apos;Mimic as _ view and with forms to skip some of the context&apos;
&apos;Returns value safe for CSV dumping DCNL Reference : http : / / tools.ietf.org / html / rfc4180 DCNL &gt; &gt; &gt; safeCSValue ( u \ &apos; foo , bar \ &apos; ) DCNL u \ &apos; &quot; foo , bar &quot; \ &apos; DCNL &gt; &gt; &gt; safeCSValue ( u \ &apos; foobar \ &apos; ) DCNL u \ &apos; foobar \ &apos; &apos;
&apos;Returns an SQL WHERE comparison string using = , i = , ! = , &gt; , &lt; , &gt; = , &lt; = or BETWEEN . DCNL Strings may contain wildcards ( * ) at the start or at the end . DCNL A list or tuple of values can be given when using = , ! = or BETWEEN . &apos; 
&apos;Return ( base , pyversion ) or ( None , None ) for possible .exe name&apos;
&apos;run pylint-gui&apos;
&apos;Processes a caption string into a list of tonenized words . DCNL Args : DCNL caption : A string caption . DCNL Returns : DCNL A list of strings ; the tokenized caption . &apos; 
&apos;Worksheet Class&apos;
&apos;Returns True if x and y are sufficiently close , elementwise . DCNL Parameters DCNL rtol : float DCNL The relative error tolerance . DCNL atol : float DCNL The absolute error tolerance . &apos; 
&apos;Prompts before aborting a merge in progress&apos;
&apos;Wrapper for : py : meth : `boto.emr.EmrConnection.list _ steps ( ) ` DCNL that works around around `boto \ &apos; s startdatetime bug DCNL &lt; https : / / github.com / boto / boto / issues / 3268 &gt; ` _ _  . &apos; 
&apos;Return true if this field has errors that were not accounted for by render _ with _ errors , because DCNL the widget does not support the render _ with _ errors method&apos;
&apos;Cleans up text . DCNL Escapes newlines and tabs . DCNL Parameters DCNL text : str DCNL Text to clean up . &apos; 
&apos;Format a list of message sizes into a STAT response . DCNL This generator function is intended to be used with DCNL L { Cooperator &lt; twisted.internet.task.Cooperator &gt; } . DCNL @ type msgs : L { list } of L { int } DCNL @ param msgs : A list of message sizes . DCNL @ rtype : L { None } or L { bytes } DCNL @ return : Yields none until a result is available , then a string that is DCNL suitable for use in a STAT response . The string consists of the number DCNL of messages and the total size of the messages in octets . &apos; 
&apos;Filter a list of tracks where ``field`` is ``values`` . DCNL : param list tracks : a list of : class : ` ~ mopidy.models.Track` DCNL : param dict query : one or more field / value pairs to search for DCNL : param int limit : maximum number of results to return DCNL : param int offset : offset into result set to use . DCNL : param uris : zero or more URI roots to limit the search to DCNL : type uris : list of strings or : class : `None` DCNL : rtype : : class : ` ~ mopidy.models.SearchResult`&apos;
&apos;Download grades as CSV . &apos; 
&apos;Remove reduction over broadcastable dimensions . &apos; 
&apos;return an attribute of the class that is either present directly DCNL on the class , e.g. not on a superclass , or is from a superclass but DCNL this superclass is a mixin , that is , not a descendant of DCNL the declarative base . DCNL This is used to detect attributes that indicate something about DCNL a mapped class independently from any mapped classes that it may DCNL inherit from . &apos; 
&apos;Detect WikiSyntax ( i.e. InterCaps , a.k.a. CamelCase ) and escape it . &apos; 
&apos;Return a list of ( REALNAME , EMAIL ) for each fieldvalue . &apos; 
&apos;Processes command line parameters into options and files , then checks DCNL or update FITS DATASUM and CHECKSUM keywords for the specified files . &apos; 
&apos;Add is _ default field to \ &apos; show \ &apos; response . &apos; 
&apos;Demonstrate conjugate gradient optimization of a log-linear model DCNL This is demonstrated on MNIST . DCNL : type n _ epochs : int DCNL : param n _ epochs : number of epochs to run the optimizer DCNL : type mnist _ pkl _ gz : string DCNL : param mnist _ pkl _ gz : the path of the mnist training file from DCNL http : / / www.iro.umontreal.ca / ~ lisa / deep / data / mnist / mnist.pkl.gz&apos;
&apos;A function to connect to a bigip device and modify an existing node . DCNL hostname DCNL The host / address of the bigip device DCNL username DCNL The iControl REST username DCNL password DCNL The iControl REST password DCNL name DCNL The name of the node to modify DCNL connection _ limit DCNL &#91; integer &#93; DCNL description DCNL &#91; string &#93; DCNL dynamic _ ratio DCNL &#91; integer &#93; DCNL logging DCNL &#91; enabled &#124; disabled &#93; DCNL monitor DCNL &#91; &#91; name &#93; &#124; none &#124; default &#93; DCNL rate _ limit DCNL &#91; integer &#93; DCNL ratio DCNL &#91; integer &#93; DCNL session DCNL &#91; user-enabled &#124; user-disabled &#93; DCNL state DCNL &#91; user-down &#124; user-up &#93; DCNL trans _ label DCNL The label of the transaction stored within the grain : DCNL ``bigip _ f5 _ trans : &lt; label &gt; `` DCNL CLI Example : : DCNL salt \ &apos; * \ &apos; bigip.modify _ node bigip admin admin 10.1.1.2 ratio = 2 logging = enabled&apos;
&apos;Returns the appropriate Manager class for a given Model class . It DCNL does this by looking in the boto config for a section like this : : DCNL &#91; DB &#93; DCNL db _ type = SimpleDB DCNL db _ user = &lt; aws access key id &gt; DCNL db _ passwd = &lt; aws secret access key &gt; DCNL db _ name = my _ domain DCNL &#91; DB _ TestBasic &#93; DCNL db _ type = SimpleDB DCNL db _ user = &lt; another aws access key id &gt; DCNL db _ passwd = &lt; another aws secret access key &gt; DCNL db _ name = basic _ domain DCNL db _ port = 1111 DCNL The values in the DB section are &quot; generic values &quot; that will be used DCNL if nothing more specific is found . You can also create a section for DCNL a specific Model class that gives the db info for that class . DCNL In the example above , TestBasic is a Model subclass . &apos; 
&apos;Unsigned Long&apos;
&apos;Enable or disable edit mode for the request . DCNL : param request : HTTP request DCNL : type request : django.http.HttpRequest DCNL : param flag : Enable flag DCNL : type flag : bool&apos;
&apos;Register handler to RAW if msg _ type not given . DCNL : type func : callable DCNL : type msg _ type : str or unicode&apos;
&apos;Make a web call to QingCloud IaaS API . &apos; 
&apos;Return True if list is a list of ints . &apos; 
&apos;Return Pade approximation to a polynomial as the ratio of two polynomials . DCNL Parameters DCNL an : ( N , ) array _ like DCNL Taylor series coefficients . DCNL m : int DCNL The order of the returned approximating polynomials . DCNL Returns DCNL p , q : Polynomial class DCNL The Pade approximation of the polynomial defined by `an` is DCNL ``p ( x ) / q ( x ) `` . DCNL Examples DCNL &gt; &gt; &gt; from scipy.interpolate import pade DCNL &gt; &gt; &gt; e _ exp = &#91; 1.0 , 1.0 , 1.0 / 2.0 , 1.0 / 6.0 , 1.0 / 24.0 , 1.0 / 120.0 &#93; DCNL &gt; &gt; &gt; p , q = pade ( e _ exp , 2 ) DCNL &gt; &gt; &gt; e _ exp.reverse ( ) DCNL &gt; &gt; &gt; e _ poly = np.poly1d ( e _ exp ) DCNL Compare ``e _ poly ( x ) `` and the Pade approximation ``p ( x ) / q ( x ) `` DCNL &gt; &gt; &gt; e _ poly ( 1 ) DCNL 2.7166666666666668 DCNL &gt; &gt; &gt; p ( 1 ) / q ( 1 ) DCNL 2.7179487179487181&apos;
&apos;Returns the count of the specified `query` . DCNL This function employs an optimization that bypasses the DCNL : meth : `sqlalchemy.orm.Query.count` method , which can be very slow DCNL for large queries . &apos; 
&apos;Tests creating and accessing Angle objects&apos;
&apos;Get vector3 from prefix and xml element , then remove prefix attributes from dictionary . &apos; 
&apos;Do proper formatting of the jid&apos;
&apos;Parses a string and return a datetime.time. DCNL This function doesn \ &apos; t support time zone offsets . DCNL Raises ValueError if the input is well formatted but not a valid time . DCNL Returns None if the input isn \ &apos; t well formatted , in particular if it DCNL contains an offset . &apos; 
&apos;version list to string&apos;
&apos;Check value is of or can be converted to expected type . &apos; 
&apos;Minify XML files ( strip whitespace and use minimal separators )  . &apos; 
&apos;QZ decomposition for generalized eigenvalues of a pair of matrices . DCNL The QZ , or generalized Schur , decomposition for a pair of N x N DCNL nonsymmetric matrices ( A , B ) is : : DCNL ( A , B ) = ( Q * AA * Z \ &apos; , Q * BB * Z \ &apos; ) DCNL where AA , BB is in generalized Schur form if BB is upper-triangular DCNL with non-negative diagonal and AA is upper-triangular , or for real QZ DCNL decomposition ( ``output = \ &apos; real \ &apos; `` ) block upper triangular with 1x1 DCNL and 2x2 blocks . In this case , the 1x1 blocks correspond to real DCNL generalized eigenvalues and 2x2 blocks are \ &apos; standardized \ &apos; by making DCNL the corresponding elements of BB have the form : : DCNL &#91; a 0 &#93; DCNL &#91; 0 b &#93; DCNL and the pair of corresponding 2x2 blocks in AA and BB will have a complex DCNL conjugate pair of generalized eigenvalues . If ( ``output = \ &apos; complex \ &apos; `` ) or DCNL A and B are complex matrices , Z \ &apos; denotes the conjugate-transpose of Z. DCNL Q and Z are unitary matrices . DCNL Parameters DCNL A : ( N , N ) array _ like DCNL 2d array to decompose DCNL B : ( N , N ) array _ like DCNL 2d array to decompose DCNL output : { \ &apos; real \ &apos; , \ &apos; complex \ &apos; } , optional DCNL Construct the real or complex QZ decomposition for real matrices . DCNL Default is \ &apos; real \ &apos; . DCNL lwork : int , optional DCNL Work array size . If None or -1 , it is automatically computed . DCNL sort : { None , callable , \ &apos; lhp \ &apos; , \ &apos; rhp \ &apos; , \ &apos; iuc \ &apos; , \ &apos; ouc \ &apos; } , optional DCNL NOTE : THIS INPUT IS DISABLED FOR NOW . Use ordqd instead . DCNL Specifies whether the upper eigenvalues should be sorted . A callable DCNL may be passed that , given a eigenvalue , returns a boolean denoting DCNL whether the eigenvalue should be sorted to the top-left ( True ) . For DCNL real matrix pairs , the sort function takes three real arguments DCNL ( alphar , alphai , beta ) . The eigenvalue DCNL ``x = ( alphar + alphai * 1j ) / beta`` . For complex matrix pairs or DCNL output = \ &apos; complex \ &apos; , the sort function takes two complex arguments DCNL ( alpha , beta ) . The eigenvalue ``x = ( alpha / beta ) `` . Alternatively , DCNL string parameters may be used : DCNL - \ &apos; lhp \ &apos; Left-hand plane ( x.real &lt; 0.0 ) DCNL - \ &apos; rhp \ &apos; Right-hand plane ( x.real &gt; 0.0 ) DCNL - \ &apos; iuc \ &apos; Inside the unit circle ( x * x.conjugate ( ) &lt; 1.0 ) DCNL - \ &apos; ouc \ &apos; Outside the unit circle ( x * x.conjugate ( ) &gt; 1.0 ) DCNL Defaults to None ( no sorting ) . DCNL overwrite _ a : bool , optional DCNL Whether to overwrite data in a ( may improve performance ) DCNL overwrite _ b : bool , optional DCNL Whether to overwrite data in b ( may improve performance ) DCNL check _ finite : bool , optional DCNL If true checks the elements of `A` and `B` are finite numbers . If DCNL false does no checking and passes matrix through to DCNL underlying algorithm . DCNL Returns DCNL AA : ( N , N ) ndarray DCNL Generalized Schur form of A. DCNL BB : ( N , N ) ndarray DCNL Generalized Schur form of B. DCNL Q : ( N , N ) ndarray DCNL The left Schur vectors . DCNL Z : ( N , N ) ndarray DCNL The right Schur vectors . DCNL Notes DCNL Q is transposed versus the equivalent function in Matlab . DCNL .. versionadded : : 0.11.0 DCNL Examples DCNL &gt; &gt; &gt; from scipy import linalg DCNL &gt; &gt; &gt; np.random.seed ( 1234 ) DCNL &gt; &gt; &gt; A = np.arange ( 9 ) .reshape ( ( 3 , 3 ) ) DCNL &gt; &gt; &gt; B = np.random.randn ( 3 , 3 ) DCNL &gt; &gt; &gt; AA , BB , Q , Z = linalg.qd ( A , B ) DCNL &gt; &gt; &gt; AA DCNL array ( &#91; &#91; -13.40928183 , -4.62471562 , 1.09215523 &#93; , DCNL &#91; 0 . , 0 . , 1.22805978 &#93; , DCNL &#91; 0 . , 0 . , 0.31973817 &#93; &#93; ) DCNL &gt; &gt; &gt; BB DCNL array ( &#91; &#91; 0.33362547 , -1.37393632 , 0.02179805 &#93; , DCNL &#91; 0 . , 1.68144922 , 0.74683866 &#93; , DCNL &#91; 0 . , 0 . , 0.9258294 &#93; &#93; ) DCNL &gt; &gt; &gt; Q DCNL array ( &#91; &#91; 0.14134727 , -0.97562773 , 0.16784365 &#93; , DCNL &#91; 0.49835904 , -0.07636948 , -0.86360059 &#93; , DCNL &#91; 0.85537081 , 0.20571399 , 0.47541828 &#93; &#93; ) DCNL &gt; &gt; &gt; Z DCNL array ( &#91; &#91; -0.24900855 , -0.51772687 , 0.81850696 &#93; , DCNL &#91; -0.79813178 , 0.58842606 , 0.12938478 &#93; , DCNL &#91; -0.54861681 , -0.6210585 , -0.55973739 &#93; &#93; ) DCNL See also DCNL ordqd&apos;
&apos;Return most recent client from list of clients . &apos; 
&apos;Fit the Berg-Scherg equivalent spherical model dipole parameters . &apos; 
&apos;When a process fails , its output should be logged . &apos; 
&apos;A factory for creating Move objects DCNL Based on `resource` and `offset` , return one of `MoveModule` , DCNL `MoveGlobal` or `MoveMethod` for performing move refactoring . &apos; 
&apos;Return True if provided address ( in printable format ) is a 6to4 DCNL address ( being in 2002 : : / 16 )  . &apos; 
&apos;NAPALM library must be installed for this module to work . DCNL Also , the key proxymodule must be set in the _ _ opts _ _ _ dictionary . &apos; 
&apos;Extract messages from Python source code . DCNL : param fileobj : the seekable , file-like object the messages should be DCNL extracted from DCNL : param keywords : a list of keywords ( i.e. function names ) that should be DCNL recognized as translation functions DCNL : param comment _ tags : a list of translator tags to search for and include DCNL in the results DCNL : param options : a dictionary of additional options ( optional ) DCNL : return : an iterator over `` ( lineno , funcname , message , comments ) `` tuples DCNL : rtype : ``iterator``&apos;
&apos;Create the XML document that contains the new score to be sent to the LTI DCNL consumer . The format of this message is defined in the LTI 1.1 spec . &apos; 
&apos;Obtain input reader parameters . DCNL Utility function for input readers implementation . Fetches parameters DCNL from mapreduce specification giving appropriate usage warnings . DCNL Args : DCNL mapper _ spec : The MapperSpec for the job DCNL allowed _ keys : set of all allowed keys in parameters as strings . If it is not DCNL None , then parameters are expected to be in a separate &quot; input _ reader &quot; DCNL subdictionary of mapper _ spec parameters . DCNL Returns : DCNL mapper parameters as dict DCNL Raises : DCNL BadReaderParamsError : if parameters are invalid / missing or not allowed . &apos; 
&apos;Return a list of all directories on the master&apos;
&apos;Find existing certs that duplicate the request . &apos; 
&apos;Assemble a block into multi-line sub-blocks . &apos; 
&apos;Get new derivation . &apos; 
&apos;Creates a function that colorizes text with the given color . DCNL For example : DCNL green = make _ colorizer ( \ &apos; darkgreen \ &apos; ) DCNL red = make _ colorizer ( \ &apos; red \ &apos; ) DCNL Then , you can use : DCNL print &quot; It \ &apos; s either &quot; + green ( \ &apos; OK \ &apos; ) + \ &apos; or \ &apos; + red ( \ &apos; Oops \ &apos; ) &apos;
&apos;Is `exp` a `Var` node . &apos; 
&apos;``httpexceptions`` middleware ; this catches any DCNL ``paste.httpexceptions.HTTPException`` exceptions ( exceptions like DCNL ``HTTPNotFound`` , ``HTTPMovedPermanently`` , etc ) and turns them DCNL into proper HTTP responses . DCNL ``warning _ level`` can be an integer corresponding to an HTTP code . DCNL Any code over that value will be passed \ &apos; up \ &apos; the chain , potentially DCNL reported on by another piece of middleware . &apos; 
&apos;convert Roman numeral to integer&apos;
&apos;Create a new figure manager instance for the given figure . &apos; 
&apos;Convert the region of the agg buffer bounded by bbox to a wx.Bitmap. If DCNL bbox is None , the entire buffer is converted . DCNL Note : agg must be a backend _ agg.RendererAgg instance . &apos; 
&apos;Generate a presigned url given a client , its method , and arguments DCNL : type ClientMethod : string DCNL : param ClientMethod : The client method to presign for DCNL : type Params : dict DCNL : param Params : The parameters normally passed to DCNL ``ClientMethod`` . DCNL : type ExpiresIn : int DCNL : param ExpiresIn : The number of seconds the presigned url is valid DCNL for . By default it expires in an hour ( 3600 seconds ) DCNL : type HttpMethod : string DCNL : param HttpMethod : The http method to use on the generated url . By DCNL default , the http method is whatever is used in the method \ &apos; s model . DCNL : returns : The presigned url&apos;
&apos;Returns a dict of ( season , episode ) : ( sceneSeason , sceneEpisode ) mappings DCNL for an entire show . Both the keys and values of the dict are tuples . DCNL Will be empty if there are no scene numbers set&apos;
&apos;Generates a random string of given length from a set of alphanumeric characters . DCNL The default source uses &#91; a-z &#93; &#91; A-Z &#93; &#91; 0-9 &#93; DCNL Ex : DCNL - oo _ random _ word ( 3 ) = &gt; aB9 DCNL - oo _ random _ word ( 4 , source = \ &apos; 012 \ &apos; ) = &gt; 0123&apos;
&apos;Make sure that a package is not installed . DCNL name DCNL The name of the package to uninstall DCNL user DCNL The user under which to run pip DCNL bin _ env : None DCNL the pip executable or virtualenenv to use DCNL use _ vt DCNL Use VT terminal emulation ( see output while installing ) &apos;
&apos;Enqueue longjob for taking backup to dropbox&apos;
&apos;Runs Celery workers , Studio , and LMS . &apos; 
&apos;Slice the info axis of `obj` with `indexer` . &apos; 
&apos;Check the memory size of the device memory . DCNL The result is cached in the device memory object . DCNL It may query the driver for the memory size of the device memory allocation . &apos; 
&apos;Filters the contents of the block through variable filters . DCNL Filters can also be piped through each other , and they can have DCNL arguments -- just like in variable syntax . DCNL Sample usage : : DCNL { % filter force _ escape &#124; lower % } DCNL This text will be HTML-escaped , and will appear in lowercase . DCNL { % endfilter % } DCNL Note that the ``escape`` and ``safe`` filters are not acceptable arguments . DCNL Instead , use the ``autoescape`` tag to manage autoescaping for blocks of DCNL template code . &apos; 
&apos;Returns a list with all non-special queue names for app _ id . &apos; 
&apos;Redirects the user to the requests URL with the given key appended to the query parameters . &apos; 
&apos;Checks if a route exists . DCNL .. versionadded : : 2015.8.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ vpc.route _ exists destination _ cidr _ block = \ &apos; 10.0.0.0 / 20 \ &apos; gateway _ id = \ &apos; local \ &apos; route _ table _ name = \ &apos; test \ &apos; &apos;
&apos;Wrap API calls with role based access controls ( RBAC ) . DCNL This handles both the protection of the API parameters as well as any DCNL target entities for single-entity API calls . DCNL More complex API calls ( for example that deal with several different DCNL entities ) should pass in a callback function , that will be subsequently DCNL called to check protection for these multiple entities . This callback DCNL function should gather the appropriate entities needed and then call DCNL check _ protection ( ) in the V3Controller class . &apos; 
&apos; &gt; &gt; &gt; list ( _ domain _ variants ( &quot; foo.bar.example.com &quot; ) ) DCNL &#91; \ &apos; foo.bar.example.com \ &apos; , \ &apos; bar.example.com \ &apos; , \ &apos; example.com \ &apos; &#93; &apos;
&apos;Returns elapsed time from start till now&apos;
&apos;Recursively collects a list of dirs that contain a file matching the DCNL given suffix . DCNL This works by listing the contents of directories and finding DCNL directories that have ` * _ test.py` files . &apos; 
&apos;monkey patch OptionParser.expand _ default since we have a particular DCNL way to handle defaults to avoid overriding values in the configuration DCNL file&apos;
&apos;Shortcut for password prompts . DCNL This is equivalent to decorating a function with : func : `option` with DCNL the following parameters : : DCNL @ click.command ( ) DCNL @ click.option ( \ &apos; --password \ &apos; , prompt = True , confirmation _ prompt = True , DCNL hide _ input = True ) DCNL def changeadmin ( password ) : DCNL pass&apos;
&apos;Stop the specified service DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; service.stop &lt; service name &gt; &apos;
&apos;Validation . DCNL This example validates parameters in different ways . It does it DCNL through callbacks , through a custom type as well as by validating DCNL manually in the function . &apos; 
&apos;Call C { f } with C { args } positional arguments and C { kwargs } keyword arguments DCNL and collect all warnings which are emitted as a result in a list . DCNL @ param observeWarning : A callable which will be invoked with a L { _ Warning } DCNL instance each time a warning is emitted . DCNL @ return : The return value of C { f ( * args , * * kwargs ) }  . &apos; 
&apos;Returns an array of current comments for a filediff , sorted by line number . DCNL Each entry in the array has a dictionary containing the following keys : DCNL Key Description DCNL comment _ id The ID of the comment DCNL text The plain or rich text of the comment DCNL rich _ text The rich text flag for the comment DCNL line The first line number DCNL num _ lines The number of lines this comment spans DCNL user A dictionary containing &quot; username &quot; and &quot; name &quot; keys DCNL for the user DCNL url The URL to the comment DCNL localdraft True if this is the current user \ &apos; s draft comment DCNL review _ id The ID of the review this comment is associated with&apos;
&apos;Match Requests for Sites&apos;
&apos;Get TV ( PRIVATE ) . DCNL Arguments : DCNL - T - proportions of transitional differences DCNL - V - proportions of transversional differences&apos;
&apos;Returns a list of failing checks . &apos; 
&apos;This helper function computes a batch start and end index DCNL : param batch _ nb : the batch number DCNL : param data _ length : the total length of the data being parsed by batches DCNL : param batch _ size : the number of inputs in each batch DCNL : return : pair of ( start , end ) indices&apos;
&apos;import main ( non child ) document&apos;
&apos;fmtstr _ payload ( offset , writes , numbwritten = 0 , write _ size = \ &apos; byte \ &apos; ) - &gt; str DCNL Makes payload with given parameter . DCNL It can generate payload for 32 or 64 bits architectures . DCNL The size of the addr is taken from ``context.bits`` DCNL Arguments : DCNL offset ( int ) : the first formatter \ &apos; s offset you control DCNL writes ( dict ) : dict with addr , value `` { addr : value , addr2 : value2 } `` DCNL numbwritten ( int ) : number of byte already written by the printf function DCNL write _ size ( str ) : must be ``byte`` , ``short`` or ``int`` . Tells if you want to write byte by byte , short by short or int by int ( hhn , hn or n ) DCNL Returns : DCNL The payload in order to do needed writes DCNL Examples : DCNL &gt; &gt; &gt; context.clear ( arch = \ &apos; amd64 \ &apos; ) DCNL &gt; &gt; &gt; print repr ( fmtstr _ payload ( 1 , { 0x0 : 0x1337babe } , write _ size = \ &apos; int \ &apos; ) ) DCNL \ &apos; \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x04 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 % 322419374c % 1 $ n % 3972547906c % 2 $ n \ &apos; DCNL &gt; &gt; &gt; print repr ( fmtstr _ payload ( 1 , { 0x0 : 0x1337babe } , write _ size = \ &apos; short \ &apos; ) ) DCNL \ &apos; \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x02 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x04 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x06 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 % 47774c % 1 $ hn % 22649c % 2 $ hn % 60617c % 3 $ hn % 4 $ hn \ &apos; DCNL &gt; &gt; &gt; print repr ( fmtstr _ payload ( 1 , { 0x0 : 0x1337babe } , write _ size = \ &apos; byte \ &apos; ) ) DCNL \ &apos; \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x01 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x02 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x03 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x04 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x05 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x06 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x07 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 \ x00 % 126c % 1 $ hhn % 252c % 2 $ hhn % 125c % 3 $ hhn % 220c % 4 $ hhn % 237c % 5 $ hhn % 6 $ hhn % 7 $ hhn % 8 $ hhn \ &apos; DCNL &gt; &gt; &gt; context.clear ( arch = \ &apos; i386 \ &apos; ) DCNL &gt; &gt; &gt; print repr ( fmtstr _ payload ( 1 , { 0x0 : 0x1337babe } , write _ size = \ &apos; int \ &apos; ) ) DCNL \ &apos; \ x00 \ x00 \ x00 \ x00 % 322419386c % 1 $ n \ &apos; DCNL &gt; &gt; &gt; print repr ( fmtstr _ payload ( 1 , { 0x0 : 0x1337babe } , write _ size = \ &apos; short \ &apos; ) ) DCNL \ &apos; \ x00 \ x00 \ x00 \ x00 \ x02 \ x00 \ x00 \ x00 % 47798c % 1 $ hn % 22649c % 2 $ hn \ &apos; DCNL &gt; &gt; &gt; print repr ( fmtstr _ payload ( 1 , { 0x0 : 0x1337babe } , write _ size = \ &apos; byte \ &apos; ) ) DCNL \ &apos; \ x00 \ x00 \ x00 \ x00 \ x01 \ x00 \ x00 \ x00 \ x02 \ x00 \ x00 \ x00 \ x03 \ x00 \ x00 \ x00 % 174c % 1 $ hhn % 252c % 2 $ hhn % 125c % 3 $ hhn % 220c % 4 $ hhn \ &apos; &apos;
&apos;Create terminals . DCNL nodes : list of Node objects DCNL title : base title for each DCNL returns : list of created tunnel / terminal processes&apos;
&apos;Set whether network time is on or off . DCNL : param enable : True to enable , False to disable . Can also use \ &apos; on \ &apos; or \ &apos; off \ &apos; DCNL : type : str bool DCNL : return : True if successful , False if not DCNL : rtype : bool DCNL : raises : CommandExecutionError on failure DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; timezone.set _ using _ network _ time True&apos;
&apos;Read a cache file from the given stream DCNL : return : tuple ( version , entries _ dict , extension _ data , content _ sha ) DCNL * version is the integer version number DCNL * entries dict is a dictionary which maps IndexEntry instances to a path at a stage DCNL * extension _ data is \ &apos; \ &apos; or 4 bytes of type + 4 bytes of size + size bytes DCNL * content _ sha is a 20 byte sha on all cache file contents&apos;
&apos;The constructor basically works . &apos; 
&apos;Get vector3 vertexes from attribute dictionary . &apos; 
&apos;Download the data from Yann \ &apos; s website , unless it \ &apos; s already here . &apos; 
&apos;Calls the Salt module &quot; probes &quot; to configure the probes on the device . &apos; 
&apos;Return a list of subsections for the given ``section`` . &apos; 
&apos;Recreate tags from a list of tuples into the Amazon Tag format . DCNL Args : DCNL list _ of _ tags ( list ) : List of tuples . DCNL Basic Usage : DCNL &gt; &gt; &gt; list _ of _ tags = &#91; ( \ &apos; Env \ &apos; , \ &apos; Development \ &apos; ) &#93; DCNL &gt; &gt; &gt; recreate _ tags _ from _ list ( list _ of _ tags ) DCNL &quot; Value &quot; : &quot; Development &quot; , DCNL &quot; Key &quot; : &quot; Env &quot; DCNL Returns : DCNL List&apos;
&apos;Parse a Sphinx search index DCNL Parameters DCNL searchindex : str DCNL The Sphinx search index ( contents of searchindex.js ) DCNL Returns DCNL filenames : list of str DCNL The file names parsed from the search index . DCNL objects : dict DCNL The objects parsed from the search index . &apos; 
&apos;Attempts access nested data structures and not blow up on a gross key DCNL error DCNL &quot; hello &quot; : { DCNL &quot; hi &quot; : 5&apos;
&apos;Remove buckets that are unnecessary in achieving the spend amount&apos;
&apos;Convenient interface to check _ output&apos;
&apos;Returns a list of matching objects&apos;
&apos;Look up the index of ``scope`` and raise a descriptive value error DCNL if not defined . &apos; 
&apos;generate rss feed&apos;
&apos;Set up &amp; run a `Publisher` for command-line-based file I / O ( input and DCNL output file paths taken automatically from the command line ) . Return the DCNL encoded string output also . DCNL Parameters : see `publish _ programmatically` for the remainder . DCNL - `argv` : Command-line argument list to use instead of ``sys.argv &#91; 1 : &#93; `` . DCNL - `usage` : Usage string , output if there \ &apos; s a problem parsing the command DCNL line . DCNL - `description` : Program description , output for the &quot; --help &quot; option DCNL ( along with command-line option descriptions )  . &apos; 
&apos;Remove a cluster admin or a database user . DCNL If a database is specified : it will remove the database user . DCNL If a database is not specified : it will remove the cluster admin . DCNL name DCNL User name to remove DCNL database DCNL The database to remove the user from DCNL user DCNL User name for the new user to delete DCNL user DCNL The user to connect as DCNL password DCNL The password of the user DCNL host DCNL The host to connect to DCNL port DCNL The port to connect to DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; influxdb08.user _ remove &lt; name &gt; DCNL salt \ &apos; * \ &apos; influxdb08.user _ remove &lt; name &gt; &lt; database &gt; DCNL salt \ &apos; * \ &apos; influxdb08.user _ remove &lt; name &gt; &lt; database &gt; &lt; user &gt; &lt; password &gt; &lt; host &gt; &lt; port &gt; &apos;
&apos;For example , the base url of uk.reuters.com = &gt; reuters.com&apos;
&apos;Convert into classpath relative to a directory . DCNL This is eventually used by a jar file located in this directory as its manifest DCNL attribute Class-Path . See DCNL https : / / docs.oracle.com / javase / 7 / docs / technotes / guides / extensions / spec.html # bundled DCNL : param list classpath : Classpath to be relativized . DCNL : param string root _ dir : directory to relativize urls in the classpath , does not DCNL have to exist yet . DCNL : param bool followlinks : whether to follow symlinks to calculate relative path . DCNL : returns : Converted classpath of the same size as input classpath . DCNL : rtype : list of strings&apos;
&apos;Byte-compile a collection of Python source files to either .pyc DCNL or .pyo files in the same directory . \ &apos; py _ files \ &apos; is a list of files DCNL to compile ; any files that don \ &apos; t end in &quot; .py &quot; are silently skipped . DCNL \ &apos; optimize \ &apos; must be one of the following : DCNL 0 - don \ &apos; t optimize ( generate .pyc ) DCNL 1 - normal optimization ( like &quot; python -O &quot; ) DCNL 2 - extra optimization ( like &quot; python -OO &quot; ) DCNL If \ &apos; force \ &apos; is true , all files are recompiled regardless of DCNL timestamps . DCNL The source filename encoded in each bytecode file defaults to the DCNL filenames listed in \ &apos; py _ files \ &apos; ; you can modify these with \ &apos; prefix \ &apos; and DCNL \ &apos; basedir \ &apos; . \ &apos; prefix \ &apos; is a string that will be stripped off of each DCNL source filename , and \ &apos; base _ dir \ &apos; is a directory name that will be DCNL prepended ( after \ &apos; prefix \ &apos; is stripped ) . You can supply either or both DCNL ( or neither ) of \ &apos; prefix \ &apos; and \ &apos; base _ dir \ &apos; , as you wish . DCNL If \ &apos; dry _ run \ &apos; is true , doesn \ &apos; t actually do anything that would DCNL affect the filesystem . DCNL Byte-compilation is either done directly in this interpreter process DCNL with the standard py _ compile module , or indirectly by writing a DCNL temporary script and executing it . Normally , you should let DCNL \ &apos; byte _ compile ( ) \ &apos; figure out to use direct compilation or not ( see DCNL the source for details ) . The \ &apos; direct \ &apos; flag is used by the script DCNL generated in indirect mode ; unless you know what you \ &apos; re doing , leave DCNL it set to None . &apos; 
&apos;Hours since a given timestamp . Floating point . &apos; 
&apos;ensure volume exists and has properties set DCNL name : string DCNL name of volume DCNL volume _ size : string DCNL size of volume DCNL sparse : boolean DCNL create sparse volume DCNL create _ parent : boolean DCNL creates all the non-existing parent datasets . DCNL any property specified on the command line using the -o option is ignored . DCNL cloned _ from : string DCNL name of snapshot to clone DCNL properties : dict DCNL additional zfs properties ( -o ) DCNL .. note : : DCNL ``cloned _ from`` is only use if the volume does not exist yet , DCNL when ``cloned _ from`` is set after the volume exists it will be ignored . DCNL .. note : : DCNL Properties do not get cloned , if you specify the properties in the state file DCNL they will be applied on a subsequent run . DCNL ``volume _ size`` is considered a property , so the volume \ &apos; s size will be DCNL corrected when the properties get updated if it differs from the DCNL original volume . DCNL The sparse parameter is ignored when using ``cloned _ from`` . &apos; 
&apos;Prepare the authorization grant request URI . DCNL The client constructs the request URI by adding the following DCNL parameters to the query component of the authorization endpoint URI DCNL using the ``application / x-www-form-urlencoded`` format as defined by DCNL &#91; `W3C.REC-html401-19991224` _ &#93; : DCNL : param response _ type : To indicate which OAuth 2 grant / flow is required , DCNL &quot; code &quot; and &quot; token &quot; . DCNL : param client _ id : The client identifier as described in `Section 2.2` _ . DCNL : param redirect _ uri : The client provided URI to redirect back to after DCNL authorization as described in `Section 3.1.2` _ . DCNL : param scope : The scope of the access request as described by DCNL `Section 3.3` _ . DCNL : param state : An opaque value used by the client to maintain DCNL state between the request and callback . The authorization DCNL server includes this value when redirecting the user-agent DCNL back to the client . The parameter SHOULD be used for DCNL preventing cross-site request forgery as described in DCNL `Section 10.12` _ . DCNL : param kwargs : Extra arguments to embed in the grant / authorization URL . DCNL An example of an authorization code grant authorization URL : DCNL .. code-block : : http DCNL GET / authorize ? response _ type = code &amp; client _ id = s6BhdRkqt3 &amp; state = xyz DCNL &amp; redirect _ uri = https % 3A % 2F % 2Fclient % 2Eexample % 2Ecom % 2Fcb HTTP / 1.1 DCNL Host : server.example.com DCNL .. _ `W3C.REC-html401-19991224` : http : / / tools.ietf.org / html / rfc6749 # ref-W3C.REC-html401-19991224 DCNL .. _ `Section 2.2` : http : / / tools.ietf.org / html / rfc6749 # section-2.2 DCNL .. _ `Section 3.1.2` : http : / / tools.ietf.org / html / rfc6749 # section-3.1.2 DCNL .. _ `Section 3.3` : http : / / tools.ietf.org / html / rfc6749 # section-3.3 DCNL .. _ `section 10.12` : http : / / tools.ietf.org / html / rfc6749 # section-10.12&apos;
&apos; @ type messages : a list of extended messages . An extended DCNL message is a ( tag , data ) tuple , where \ &apos; data \ &apos; may be L { None } , a DCNL string , or a list of strings to be joined with whitespace . DCNL @ returns : String&apos;
&apos;Broadcast values via zeroconf DCNL If the announced values are static , it is adviced to set run _ once : True DCNL ( do not poll ) on the beacon configuration . DCNL The following are required configuration settings : DCNL \ &apos; servicetype \ &apos; : The service type to announce . DCNL \ &apos; port \ &apos; : The port of the service to announce . DCNL \ &apos; txt \ &apos; : The TXT record of the service being announced as a dict . DCNL Grains can be used to define TXT values using the syntax : DCNL grains . &lt; grain _ name &gt; DCNL or : DCNL grains . &lt; grain _ name &gt; &#91; i &#93; DCNL where i is an integer representing the index of the grain to DCNL use . If the grain is not a list , the index is ignored . DCNL The following are optional configuration settings : DCNL \ &apos; servicename \ &apos; : Set the name of the service . Will use the hostname from DCNL _ _ grains _ _ &#91; \ &apos; host \ &apos; &#93; if not set . DCNL \ &apos; reset _ on _ change \ &apos; : If true and there is a change in TXT records DCNL detected , it will stop announcing the service and DCNL then restart announcing the service . This DCNL interruption in service announcement may be DCNL desirable if the client relies on changes in the DCNL browse records to update its cache of the TXT DCNL records . DCNL Defaults to False . DCNL \ &apos; reset _ wait \ &apos; : The number of seconds to wait after announcement stops DCNL announcing and before it restarts announcing in the DCNL case where there is a change in TXT records detected DCNL and \ &apos; reset _ on _ change \ &apos; is True . DCNL Defaults to 0 . DCNL \ &apos; copy _ grains \ &apos; : If set to True , it will copy the grains passed into DCNL the beacon when it backs them up to check for changes DCNL on the next iteration . Normally , instead of copy , it DCNL would use straight value assignment . This will allow DCNL detection of changes to grains where the grains are DCNL modified in-place instead of completely replaced . DCNL In-place grains changes are not currently done in the DCNL main Salt code but may be done due to a custom DCNL plug-in . DCNL Defaults to False . DCNL Example Config DCNL .. code-block : : yaml DCNL beacons : DCNL avahi _ announce : DCNL run _ once : True DCNL servicetype : _ demo . _ tcp DCNL port : 1234 DCNL txt : DCNL ProdName : grains.productname DCNL SerialNo : grains.serialnumber DCNL Comments : \ &apos; this is a test \ &apos; &apos;
&apos;Indicate that the given relationship attribute should remain unloaded . DCNL This function is part of the : class : `.Load` interface and supports DCNL both method-chained and standalone operation . DCNL : func : `.orm.noload` applies to : func : `.relationship` attributes ; for DCNL column-based attributes , see : func : `.orm.defer` . &apos; 
&apos;&apos;
&apos;Loader for species distribution dataset from Phillips et. al . ( 2006 ) DCNL Read more in the : ref : `User Guide &lt; datasets &gt; ` . DCNL Parameters DCNL data _ home : optional , default : None DCNL Specify another download and cache folder for the datasets . By default DCNL all scikit learn data is stored in \ &apos; ~ / scikit _ learn _ data \ &apos; subfolders . DCNL download _ if _ missing : optional , True by default DCNL If False , raise a IOError if the data is not locally available DCNL instead of trying to download the data from the source site . DCNL Returns DCNL The data is returned as a Bunch object with the following attributes : DCNL coverages : array , shape = &#91; 14 , 1592 , 1212 &#93; DCNL These represent the 14 features measured at each point of the map grid . DCNL The latitude / longitude values for the grid are discussed below . DCNL Missing data is represented by the value -9999 . DCNL train : record array , shape = ( 1623 , ) DCNL The training points for the data . Each point has three fields : DCNL - train &#91; \ &apos; species \ &apos; &#93; is the species name DCNL - train &#91; \ &apos; dd long \ &apos; &#93; is the longitude , in degrees DCNL - train &#91; \ &apos; dd lat \ &apos; &#93; is the latitude , in degrees DCNL test : record array , shape = ( 619 , ) DCNL The test points for the data . Same format as the training data . DCNL Nx , Ny : integers DCNL The number of longitudes ( x ) and latitudes ( y ) in the grid DCNL x _ left _ lower _ corner , y _ left _ lower _ corner : floats DCNL The ( x , y ) position of the lower-left corner , in degrees DCNL grid _ size : float DCNL The spacing between points of the grid , in degrees DCNL Notes DCNL This dataset represents the geographic distribution of species . DCNL The dataset is provided by Phillips et. al . ( 2006 ) . DCNL The two species are : DCNL - ` &quot; Bradypus variegatus &quot; DCNL &lt; http : / / www.iucnredlist.org / details / 3038 / 0 &gt; ` _ , DCNL the Brown-throated Sloth . DCNL - ` &quot; Microryzomys minutus &quot; DCNL &lt; http : / / www.iucnredlist.org / details / 13408 / 0 &gt; ` _ , DCNL also known as the Forest Small Rice Rat , a rodent that lives in Peru , DCNL Colombia , Ecuador , Peru , and Venezuela . DCNL References DCNL * ` &quot; Maximum entropy modeling of species geographic distributions &quot; DCNL &lt; http : / / www.cs.princeton.edu / ~ schapire / papers / ecolmod.pdf &gt; ` _ DCNL S. J. Phillips , R. P. Anderson , R. E. Schapire - Ecological Modelling , DCNL 190 : 231-259 , 2006 . DCNL Notes DCNL * See examples / applications / plot _ species _ distribution _ modeling.py DCNL for an example of using this dataset with scikit-learn&apos;
&apos;List the contents of the auto master DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; mount.automaster&apos;
&apos;Test ICA data raw buffer rejection . &apos; 
&apos;Checks if the name is can be parsed back to its original form for both single and multi episodes . DCNL : return : true if the naming is valid , false if not . &apos; 
&apos;If the requested RGB shade contains a negative weight for DCNL one of the primaries , it lies outside the colour gamut DCNL accessible from the given triple of primaries . Desaturate DCNL it by adding white , equal quantities of R , G , and B , enough DCNL to make RGB all positive . The function returns 1 if the DCNL components were modified , zero otherwise . &apos; 
&apos;Parse the test data set into a namedtuple to use in tests . DCNL Returns : DCNL A list of namedtuples with str attributes : input , keep , no _ keep&apos;
&apos;Parse the network line&apos;
&apos;Generates a permission class that grants access if a particular profile field is DCNL shared with the requesting user . &apos; 
&apos;Fix value of `epoch` to be epoch , which should be 10 or fewer digits long . DCNL : arg epoch : An epoch timestamp , in epoch + milliseconds , or microsecond , or DCNL even nanoseconds . DCNL : rtype : int&apos;
&apos;Uninstall one or several pecl extensions . DCNL pecls DCNL The pecl extensions to uninstall . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pecl.uninstall fuse&apos;
&apos;Makes an user coach on the master course . DCNL This function is needed because an user cannot become a coach of the CCX if s / he is not DCNL coach on the master course . DCNL Args : DCNL user ( User ) : User object DCNL master _ course _ key ( CourseKey ) : Key locator object for the course&apos;
&apos;uniform weights for HAC DCNL this will be moved to another module DCNL Parameters DCNL nlags : int DCNL highest lag in the kernel window , this does not include the zero lag DCNL Returns DCNL kernel : ndarray , ( nlags + 1 , ) DCNL weights for uniform kernel&apos;
&apos;Generate an SQL expression string with bound parameters rendered inline DCNL for the given SQLAlchemy statement . DCNL WARNING : This method of escaping is insecure , incomplete , and for debugging DCNL purposes only . Executing SQL statements with inline-rendered user values is DCNL extremely insecure . &apos; 
&apos;Return a list of all available kernel modules DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; kmod.available&apos;
&apos;return clonespec only if values are valid&apos;
&apos;lettuce should be able to receive emails sent from django server&apos;
&apos;Execute a chef client run and return a dict with the stderr , stdout , DCNL return code , and pid . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; chef.client server = https : / / localhost DCNL server DCNL The chef server URL DCNL client _ key DCNL Set the client key file location DCNL config DCNL The configuration file to use DCNL config-file-jail DCNL Directory under which config files are allowed to be loaded DCNL ( no client.rb or knife.rb outside this path will be loaded ) . DCNL environment DCNL Set the Chef Environment on the node DCNL group DCNL Group to set privilege to DCNL json-attributes DCNL Load attributes from a JSON file or URL DCNL localmode DCNL Point chef-client at local repository if True DCNL log _ level DCNL Set the log level ( debug , info , warn , error , fatal ) DCNL logfile DCNL Set the log file location DCNL node-name DCNL The node name for this client DCNL override-runlist DCNL Replace current run list with specified items for a single run DCNL pid DCNL Set the PID file location , defaults to / tmp / chef-client.pid DCNL run-lock-timeout DCNL Set maximum duration to wait for another client run to finish , DCNL default is indefinitely . DCNL runlist DCNL Permanently replace current run list with specified items DCNL user DCNL User to set privilege to DCNL validation _ key DCNL Set the validation key file location , used for registering new clients DCNL whyrun DCNL Enable whyrun mode when set to True&apos;
&apos;Use source field to set repository account&apos;
&apos;Set whether or not the computer will wake from sleep when network activity DCNL is detected . DCNL : param bool enabled : True to enable , False to disable . &quot; On &quot; and &quot; Off &quot; are DCNL also acceptable values . Additionally you can pass 1 and 0 to represent True DCNL and False respectively DCNL : return : True if successful , False if not DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; power.set _ wake _ on _ network True&apos;
&apos;Checks all files with the file _ check function provided , skipping files DCNL that contain any of the strings in the set provided by exclusions . &apos; 
&apos;Tries to &quot; smartly &quot; determine which output format is desired . DCNL First attempts to find a ``format`` override from the request and supplies DCNL that if found . DCNL If no request format was demanded , it falls back to ``mimeparse`` and the DCNL ``Accepts`` header , allowing specification that way . DCNL If still no format is found , returns the ``default _ format`` ( which defaults DCNL to ``application / json`` if not provided ) . DCNL NOTE : callers * must * be prepared to handle BadRequest exceptions due to DCNL malformed HTTP request headers ! &apos;
&apos;Uninstalls one or more packages if installed . &apos; 
&apos;Get the returner options from salt . &apos; 
&apos;Replacement for os.listdir that works in frozen environments . &apos; 
&apos;Return the object _ id of the device value . DCNL The object _ id contains node _ id and value instance id DCNL to not collide with other entity _ ids . &apos; 
&apos;Computes the alpha confidence interval for the selected quantiles of the DCNL data , with Maritz-Jarrett estimators . DCNL Parameters DCNL data : ndarray DCNL Data array . DCNL prob : sequence , optional DCNL Sequence of quantiles to compute . DCNL alpha : float , optional DCNL Confidence level of the intervals . DCNL axis : int or None , optional DCNL Axis along which to compute the quantiles . DCNL If None , use a flattened array . &apos; 
&apos;Get all pools . &apos; 
&apos;Get a list of cpus to build metric definitions with&apos;
&apos;Test append outside private mode . &apos; 
&apos;Return a signature scheme object `PKCS115 _ SigScheme` that DCNL can create or verify PKCS # 1 v1.5 signatures . DCNL : Parameters : DCNL rsa _ key : RSA key object DCNL The RSA key to use to sign or verify the message . DCNL This is a `Cryptodome.PublicKey.RSA` object . DCNL Signing is only possible if ``rsa _ key`` is a private RSA key . &apos; 
&apos;Load an email backend and return an instance of it . DCNL If backend is None ( default ) settings.EMAIL _ BACKEND is used . DCNL Both fail _ silently and other keyword arguments are used in the DCNL constructor of the backend . &apos; 
&apos;Detect supported CUDA hardware and print a summary of the detected hardware . DCNL Returns a boolean indicating whether any supported devices were detected . &apos; 
&apos;Collect SHA1s of files and directories for specified tree . DCNL : param obj _ store : Object store to get objects by SHA from DCNL : param tree _ sha : tree reference to walk DCNL : param kset : set to fill with references to files and directories&apos;
&apos;Destroy a VM instance . Assumes VM is powered off . &apos; 
&apos;Calculate the log likelihood of the observed topic proportions . DCNL A negative likelihood is more likely than a negative likelihood . DCNL Args : DCNL weights ( chainer.Variable ) : Unnormalized weight vector . The vector DCNL will be passed through a softmax function that will map the input DCNL onto a probability simplex . DCNL alpha ( float ) : The Dirichlet concentration parameter . Alpha DCNL greater than 1.0 results in very dense topic weights such DCNL that each document belongs to many topics . Alpha &lt; 1.0 results DCNL in sparser topic weights . The default is to set alpha to DCNL 1.0 / n _ topics , effectively enforcing the prior belief that a DCNL document belong to very topics at once . DCNL Returns : DCNL ~ chainer.Variable : Output loss variable . &apos; 
&apos;Tries to load data from cache location otherwise downloads it . If it DCNL downloads the data and cache is not None then it will put the downloaded DCNL data in the cache path . &apos; 
&apos;Creates a network acl entry . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ vpc.create _ network _ acl _ entry \ &apos; acl-5fb85d36 \ &apos; \ &apos; 32767 \ &apos; \ DCNL \ &apos; all \ &apos; \ &apos; deny \ &apos; \ &apos; 0.0.0.0 / 0 \ &apos; egress = true&apos;
&apos;A ``PClass`` field which checks that the assigned value provides all the DCNL ``interfaces`` . DCNL : param tuple interfaces : The ``Interface`` that a value must provide . &apos; 
&apos;Delete a resource from a dataset . DCNL You must be a sysadmin or the owner of the resource to delete it . DCNL : param id : the id of the resource DCNL : type id : string&apos;
&apos;Split the specified file at multiple locations ( all tags that match the specified XPath expression . See also : : func : `split` . DCNL Splitting automatically migrates all links and references to the affected DCNL files . DCNL : param before : If True the splits occur before the identified element otherwise after it . &apos; 
&apos;Create a pool on the F5 load balancer DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt-run f5.create _ pool load _ balancer pool _ name loadbalance _ method DCNL salt-run f5.create _ pool load _ balancer my _ pool ROUND _ ROBIN&apos;
&apos;View all the threads in a discussion forum . &apos; 
&apos;Read an unsigned 64-bit integer&apos;
&apos;Helper function to get an object . DCNL Args : DCNL default : A default to return if the object does not exist . &apos; 
&apos;usage : lx extend-links http : / / kuai.xunlei.com / d / ... http : / / www.verycd.com / topics / ... DCNL parse and print links from pages DCNL lx extend-links urls ... DCNL lx extend-links --name urls ... &apos;
&apos;Creates an outgoing message and passes it to the router to be processed DCNL and sent via the respective backend . DCNL Arbitrary arguments are passed along to DCNL : py : meth : ` ~ rapidsms.router.blocking.BlockingRouter.new _ outgoing _ message` . DCNL : param text : text message DCNL : param connections : list or QuerySet of RapidSMS DCNL : py : class : ` ~ rapidsms.models.Connection` objects DCNL : param kwargs : Extra kwargs to pass to DCNL : py : class : ` ~ rapidsms.messages.outgoing.OutgoingMessage` constructor DCNL : returns : message constructed by router . A returned DCNL message object does not indicate that router processing has DCNL finished or even started , as this depends on the router defined DCNL in : setting : `RAPIDSMS _ ROUTER` . DCNL : rtype : : py : class : ` ~ rapidsms.messages.outgoing.OutgoingMessage`&apos;
&apos;Renders a configuration template ( default : Jinja ) and loads the result on the device . DCNL By default this function will commit the changes . If there are no changes , DCNL it does not commit , discards he config and the flag ``already _ configured`` DCNL will be set as ``True`` to point this out . DCNL To avoid committing the configuration , set the argument ``test`` to ``True`` DCNL and will discard ( dry run ) . DCNL To preserve the chnages , set ``commit`` to ``False`` . DCNL However , this is recommended to be used only in exceptional cases DCNL when there are applied few consecutive states DCNL and / or configuration changes . DCNL Otherwise the user might forget that the config DB is locked DCNL and the candidate config buffer is not cleared / merged in the running config . DCNL To replace the config , set ``replace`` to ``True`` . DCNL template _ name DCNL Identifies path to the template source . DCNL The template can be either stored on the local machine , either remotely . DCNL The recommended location is under the ``file _ roots`` DCNL as specified in the master config file . DCNL For example , let \ &apos; s suppose the ``file _ roots`` is configured as : DCNL .. code-block : : yaml DCNL file _ roots : DCNL base : DCNL - / etc / salt / states DCNL Placing the template under `` / etc / salt / states / templates / example.jinja`` , DCNL it can be used as ``salt : / / templates / example.jinja``. DCNL Alternatively , for local files , the user can specify the abolute path . DCNL If remotely , the source can be retrieved via ``http`` , ``https`` or ``ftp`` . DCNL Examples : DCNL - ``salt : / / my _ template.jinja`` DCNL - `` / absolute / path / to / my _ template.jinja`` DCNL - ``http : / / example.com / template.cheetah`` DCNL - ``https : / example.com / template.mako`` DCNL - ``ftp : / / example.com / template.py`` DCNL template _ source : None DCNL Inline config template to be rendered and loaded on the device . DCNL template _ path : None DCNL Required only in case the argument ``template _ name`` provides only the file basename DCNL when referencing a local template using the absolute path . DCNL E.g. : if ``template _ name`` is specified as ``my _ template.jinja`` , DCNL in order to find the template , this argument must be provided : DCNL ``template _ path : / absolute / path / to / `` . DCNL template _ hash : None DCNL Hash of the template file . Format : `` { hash _ type : \ &apos; md5 \ &apos; , \ &apos; hsum \ &apos; : &lt; md5sum &gt; } `` DCNL .. versionadded : : 2016.11.2 DCNL template _ hash _ name : None DCNL When ``template _ hash`` refers to a remote file , DCNL this specifies the filename to look for in that file . DCNL .. versionadded : : 2016.11.2 DCNL template _ group : root DCNL Owner of file . DCNL .. versionadded : : 2016.11.2 DCNL template _ user : root DCNL Group owner of file . DCNL .. versionadded : : 2016.11.2 DCNL template _ user : 755 DCNL Permissions of file . DCNL .. versionadded : : 2016.11.2 DCNL saltenv : base DCNL Specifies the template environment . DCNL This will influence the relative imports inside the templates . DCNL .. versionadded : : 2016.11.2 DCNL template _ engine : jinja DCNL The following templates engines are supported : DCNL - : mod : `cheetah &lt; salt.renderers.cheetah &gt; ` DCNL - : mod : `genshi &lt; salt.renderers.genshi &gt; ` DCNL - : mod : `jinja &lt; salt.renderers.jinja &gt; ` DCNL - : mod : `mako &lt; salt.renderers.mako &gt; ` DCNL - : mod : `py &lt; salt.renderers.py &gt; ` DCNL - : mod : `wempy &lt; salt.renderers.wempy &gt; ` DCNL .. versionadded : : 2016.11.2 DCNL skip _ verify : True DCNL If ``True`` , hash verification of remote file sources DCNL ( ``http : / / `` , ``https : / / `` , ``ftp : / / `` ) will be skipped , DCNL and the ``source _ hash`` argument will be ignored . DCNL .. versionadded : : 2016.11.2 DCNL test : False DCNL Dry run ? If set to ``True`` , will apply the config , DCNL discard and return the changes . DCNL Default : ``False`` and will commit the changes on the device . DCNL commit : True DCNL Commit ? ( default : ``True`` ) DCNL debug : False DCNL Debug mode . Will insert a new key under the output dictionary , DCNL as ``loaded _ config`` contaning the raw result after the template was rendered . DCNL .. versionadded : : 2016.11.2 DCNL replace : False DCNL Load and replace the configuration . DCNL .. versionadded : : 2016.11.2 DCNL defaults : None DCNL Default variables / context passed to the template . DCNL .. versionadded : : 2016.11.2 DCNL * * template _ vars DCNL Dictionary with the arguments / context to be used when the template is rendered . DCNL .. note : : DCNL Do not explicitely specify this argument . DCNL This represents any other variable that will be sent DCNL to the template rendering system . DCNL Please see the examples below ! DCNL : return : a dictionary having the following keys : DCNL * result ( bool ) : if the config was applied successfully . It is ``False`` only in case of failure . In case there are no changes to be applied and successfully performs all operations it is still ``True`` and so will be the ``already _ configured`` flag ( example below ) DCNL * comment ( str ) : a message for the user DCNL * already _ configured ( bool ) : flag to check if there were no changes applied DCNL * loaded _ config ( str ) : the configuration loaded on the device , after rendering the template . Requires ``debug`` to be set as ``True`` DCNL * diff ( str ) : returns the config changes applied DCNL The template can use variables from the ``grains`` , ``pillar`` or ``opts`` , for example : DCNL .. code-block : : jinja DCNL { % set router _ model = grains.get ( \ &apos; model \ &apos; ) - % } DCNL { % set router _ vendor = grains.get ( \ &apos; vendor \ &apos; ) - % } DCNL { % set os _ version = grains.get ( \ &apos; version \ &apos; ) - % } DCNL { % set hostname = pillar.get ( \ &apos; proxy \ &apos; , { } ) .get ( \ &apos; host \ &apos; ) - % } DCNL { % if router _ vendor &#124; lower = = \ &apos; juniper \ &apos; % } DCNL system { DCNL host-name { { hostname } } ; DCNL { % elif router _ vendor &#124; lower = = \ &apos; cisco \ &apos; % } DCNL hostname { { hostname } } DCNL { % endif % } DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; net.load _ template set _ ntp _ peers peers = &#91; 192.168.0.1 &#93; # uses NAPALM default templates DCNL # inline template : DCNL salt -G \ &apos; os : junos \ &apos; net.load _ template set _ hostname template _ source = \ &apos; system { host-name { { host _ name } } ; } \ &apos; host _ name = \ &apos; MX480.lab \ &apos; DCNL # inline template using grains info : DCNL salt -G \ &apos; os : junos \ &apos; net.load _ template set _ hostname template _ source = \ &apos; system { host-name { { grains.model } } .lab ; } \ &apos; DCNL # if the device is a MX480 , the command above will set the hostname as : MX480.lab DCNL # inline template using pillar data : DCNL salt -G \ &apos; os : junos \ &apos; net.load _ template set _ hostname template _ source = \ &apos; system { host-name { { pillar.proxy.host } } ; } \ &apos; DCNL salt \ &apos; * \ &apos; net.load _ template my _ template template _ path = \ &apos; / tmp / tpl / \ &apos; my _ param = \ &apos; aaa \ &apos; # will commit DCNL salt \ &apos; * \ &apos; net.load _ template my _ template template _ path = \ &apos; / tmp / tpl / \ &apos; my _ param = \ &apos; aaa \ &apos; test = True # dry run DCNL salt \ &apos; * \ &apos; net.load _ template salt : / / templates / my _ stuff.jinja debug = True # equivalent of the next command DCNL salt \ &apos; * \ &apos; net.load _ template my _ stuff.jinja template _ path = salt : / / templates / debug = True DCNL # in case the template needs to include files that are not under the same path ( e.g. http : / / ) , DCNL # to help the templating engine find it , you will need to specify the `saltenv` argument : DCNL salt \ &apos; * \ &apos; net.load _ template my _ stuff.jinja template _ path = salt : / / templates saltenv = / path / to / includes debug = True DCNL # render a mako template : DCNL salt \ &apos; * \ &apos; net.load _ template salt : / / templates / my _ stuff.mako template _ engine = mako debug = True DCNL # render remote template DCNL salt -G \ &apos; os : junos \ &apos; net.load _ template http : / / bit.ly / 2fReJg7 test = True debug = True peers = &#91; \ &apos; 192.168.0.1 \ &apos; &#93; DCNL salt -G \ &apos; os : ios \ &apos; net.load _ template http : / / bit.ly / 2gKOj20 test = True debug = True peers = &#91; \ &apos; 192.168.0.1 \ &apos; &#93; DCNL Example output : DCNL .. code-block : : python DCNL \ &apos; comment \ &apos; : \ &apos; \ &apos; , DCNL \ &apos; already _ configured \ &apos; : False , DCNL \ &apos; result \ &apos; : True , DCNL \ &apos; diff \ &apos; : \ &apos; &#91; edit system &#93; + host-name edge01.bjm01 \ &apos; , DCNL \ &apos; loaded _ config \ &apos; : \ &apos; system { host-name edge01.bjm01 ; } \ &apos; \ &apos; &apos;
&apos;Create a caffe Datum from a numpy.ndarray&apos;
&apos;Test the translation model . &apos; 
&apos;Get row and column cals . &apos; 
&apos;Opportunity view&apos;
&apos;Start a droplet in DigitalOcean . DCNL .. versionadded : : 2015.8.8 DCNL name DCNL The name of the droplet to start . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-cloud -a start droplet _ name&apos;
&apos;Inpaint masked points in image with biharmonic equations . DCNL Parameters DCNL img : ( M &#91; , N &#91; , ... , P &#93; &#93; &#91; , C &#93; ) ndarray DCNL Input image . DCNL mask : ( M &#91; , N &#91; , ... , P &#93; &#93; ) ndarray DCNL Array of pixels to be inpainted . Have to be the same shape as one DCNL of the \ &apos; img \ &apos; channels . Unknown pixels have to be represented with 1 , DCNL known pixels - with 0 . DCNL multichannel : boolean , optional DCNL If True , the last `img` dimension is considered as a color channel , DCNL otherwise as spatial . DCNL Returns DCNL out : ( M &#91; , N &#91; , ... , P &#93; &#93; &#91; , C &#93; ) ndarray DCNL Input image with masked pixels inpainted . DCNL References DCNL .. &#91; 1 &#93; N.S.Hoang , S.B.Damelin , &quot; On surface completion and image inpainting DCNL by biharmonic functions : numerical aspects &quot; , DCNL http : / / www.ima.umn.edu / ~ damelin / biharmonic DCNL Examples DCNL &gt; &gt; &gt; img = np.tile ( np.square ( np.linspace ( 0 , 1 , 5 ) ) , ( 5 , 1 ) ) DCNL &gt; &gt; &gt; mask = np.zeros _ like ( img ) DCNL &gt; &gt; &gt; mask &#91; 2 , 2 : &#93; = 1 DCNL &gt; &gt; &gt; mask &#91; 1 , 3 : &#93; = 1 DCNL &gt; &gt; &gt; mask &#91; 0 , 4 : &#93; = 1 DCNL &gt; &gt; &gt; out = inpaint _ biharmonic ( img , mask ) &apos;
&apos;get test result and reset test _ results&apos;
&apos;Apply a Savitzky-Golay filter to an array . DCNL This is a 1-d filter . If `x` has dimension greater than 1 , `axis` DCNL determines the axis along which the filter is applied . DCNL Parameters DCNL x : array _ like DCNL The data to be filtered . If `x` is not a single or double precision DCNL floating point array , it will be converted to type `numpy.float64` DCNL before filtering . DCNL window _ length : int DCNL The length of the filter window ( i.e. the number of coefficients ) . DCNL `window _ length` must be a positive odd integer . DCNL polyorder : int DCNL The order of the polynomial used to fit the samples . DCNL `polyorder` must be less than `window _ length` . DCNL deriv : int , optional DCNL The order of the derivative to compute . This must be a DCNL nonnegative integer . The default is 0 , which means to filter DCNL the data without differentiating . DCNL delta : float , optional DCNL The spacing of the samples to which the filter will be applied . DCNL This is only used if deriv &gt; 0 . Default is 1.0 . DCNL axis : int , optional DCNL The axis of the array `x` along which the filter is to be applied . DCNL Default is -1 . DCNL mode : str , optional DCNL Must be \ &apos; mirror \ &apos; , \ &apos; constant \ &apos; , \ &apos; nearest \ &apos; , \ &apos; wrap \ &apos; or \ &apos; interp \ &apos; . This DCNL determines the type of extension to use for the padded signal to DCNL which the filter is applied . When `mode` is \ &apos; constant \ &apos; , the padding DCNL value is given by `cval` . See the Notes for more details on \ &apos; mirror \ &apos; , DCNL \ &apos; constant \ &apos; , \ &apos; wrap \ &apos; , and \ &apos; nearest \ &apos; . DCNL When the \ &apos; interp \ &apos; mode is selected ( the default ) , no extension DCNL is used . Instead , a degree `polyorder` polynomial is fit to the DCNL last `window _ length` values of the edges , and this polynomial is DCNL used to evaluate the last `window _ length / / 2` output values . DCNL cval : scalar , optional DCNL Value to fill past the edges of the input if `mode` is \ &apos; constant \ &apos; . DCNL Default is 0.0 . DCNL Returns DCNL y : ndarray , same shape as `x` DCNL The filtered data . DCNL See Also DCNL savgol _ coeffs DCNL Notes DCNL Details on the `mode` options : DCNL \ &apos; mirror \ &apos; : DCNL Repeats the values at the edges in reverse order . The value DCNL closest to the edge is not included . DCNL \ &apos; nearest \ &apos; : DCNL The extension contains the nearest input value . DCNL \ &apos; constant \ &apos; : DCNL The extension contains the value given by the `cval` argument . DCNL \ &apos; wrap \ &apos; : DCNL The extension contains the values from the other end of the array . DCNL For example , if the input is &#91; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 &#93; , and DCNL `window _ length` is 7 , the following shows the extended data for DCNL the various `mode` options ( assuming `cval` is 0 ) : : DCNL mode &#124; Ext &#124; Input &#124; Ext DCNL \ &apos; mirror \ &apos; &#124; 4 3 2 &#124; 1 2 3 4 5 6 7 8 &#124; 7 6 5 DCNL \ &apos; nearest \ &apos; &#124; 1 1 1 &#124; 1 2 3 4 5 6 7 8 &#124; 8 8 8 DCNL \ &apos; constant \ &apos; &#124; 0 0 0 &#124; 1 2 3 4 5 6 7 8 &#124; 0 0 0 DCNL \ &apos; wrap \ &apos; &#124; 6 7 8 &#124; 1 2 3 4 5 6 7 8 &#124; 1 2 3 DCNL .. versionadded : : 0.14.0 DCNL Examples DCNL &gt; &gt; &gt; from scipy.signal import savgol _ filter DCNL &gt; &gt; &gt; np.set _ printoptions ( precision = 2 ) # For compact display . DCNL &gt; &gt; &gt; x = np.array ( &#91; 2 , 2 , 5 , 2 , 1 , 0 , 1 , 4 , 9 &#93; ) DCNL Filter with a window length of 5 and a degree 2 polynomial . Use DCNL the defaults for all other parameters . DCNL &gt; &gt; &gt; savgol _ filter ( x , 5 , 2 ) DCNL array ( &#91; 1.66 , 3.17 , 3.54 , 2.86 , 0.66 , 0.17 , 1 . , 4 . , 9 . &#93; ) DCNL Note that the last five values in x are samples of a parabola , so DCNL when mode = \ &apos; interp \ &apos; ( the default ) is used with polyorder = 2 , the last DCNL three values are unchanged . Compare that to , for example , DCNL `mode = \ &apos; nearest \ &apos; ` : DCNL &gt; &gt; &gt; savgol _ filter ( x , 5 , 2 , mode = \ &apos; nearest \ &apos; ) DCNL array ( &#91; 1.74 , 3.03 , 3.54 , 2.86 , 0.66 , 0.17 , 1 . , 4.6 , 7.97 &#93; ) &apos;
&apos;Test to ensure hug introspection can correctly identify when a function takes kwargs&apos;
&apos;Load a bottle application from a module and make sure that the import DCNL does not affect the current default application , but returns a separate DCNL application object . See : func : `load` for the target parameter . &apos; 
&apos;Computes the f1 score for the binary classification . DCNL Computed as , DCNL f1 = 2 * precision * recall / ( precision + recall ) DCNL Parameters DCNL precision : Variable DCNL Precision score of the binary decisions . DCNL recall : Variable DCNL Recall score of the binary decisions . DCNL Returns DCNL f1 : Variable DCNL f1 score for the binary decisions . &apos; 
&apos;Print \ &apos; lead \ &apos; = \ &apos; num \ &apos; in \ &apos; color \ &apos; &apos;
&apos;Stacks arrays horizontally . DCNL If an input array has one dimension , then the array is treated as a DCNL horizontal vector and stacked along the first axis . Otherwise , the array is DCNL stacked along the second axis . DCNL Args : DCNL tup ( sequence of arrays ) : Arrays to be stacked . DCNL Returns : DCNL cupy.ndarray : Stacked array . DCNL .. seealso : : : func : `numpy.hstack`&apos;
&apos;Dumps operating system information to file&apos;
&apos;Construct input for CIFAR evaluation using the Reader ops . DCNL Args : DCNL eval _ data : bool , indicating if one should use the train or eval data set . DCNL data _ dir : Path to the CIFAR-10 data directory . DCNL batch _ size : Number of images per batch . DCNL Returns : DCNL images : Images . 4D tensor of &#91; batch _ size , IMAGE _ SIZE , IMAGE _ SIZE , 3 &#93; size . DCNL labels : Labels . 1D tensor of &#91; batch _ size &#93; size . &apos; 
&apos;Convert a space separated string to a list of scopes . &apos; 
&apos;permutations ( range ( 3 ) , 2 ) -- &gt; ( 0,1 ) ( 0,2 ) ( 1,0 ) ( 1,2 ) ( 2,0 ) ( 2,1 ) &apos;
&apos;Given input in this form : : DCNL u \ &apos; { &quot; status &quot; : &quot; Pulling repository foo / ubuntubox &quot; } : DCNL &quot; image ( latest ) from foo / ... DCNL rogress &quot; : &quot; complete &quot; , &quot; id &quot; : &quot; 2c80228370c9 &quot; } \ &apos; DCNL construct something like that ( load json data is possible ) : : DCNL &#91; u \ &apos; { &quot; status &quot; : &quot; Pulling repository foo / ubuntubox &quot; \ &apos; , DCNL { &quot; status &quot; : &quot; Download &quot; , &quot; progress &quot; : &quot; complete &quot; , &quot; id &quot; : &quot; 2c80228370c9 &quot; } &#93; &apos;
&apos;Get the path for a page in the Cactus build . DCNL We \ &apos; ll need this because paths can be rewritten with prettifying . &apos; 
&apos;histograms plot&apos;
&apos;TODO&apos;
&apos;Add a `Linker` which can be referred to by `name` in `Mode` . &apos; 
&apos;Implements generic MGF1 Mask Generation function as described in DCNL Appendix B.2.1 of RFC 3447 . The hash function is passed by name . DCNL valid values are \ &apos; md2 \ &apos; , \ &apos; md4 \ &apos; , \ &apos; md5 \ &apos; , \ &apos; sha1 \ &apos; , \ &apos; tls , \ &apos; sha256 \ &apos; , DCNL \ &apos; sha384 \ &apos; and \ &apos; sha512 \ &apos; . Returns None on error . DCNL Input : DCNL mgfSeed : seed from which mask is generated , an octet string DCNL maskLen : intended length in octets of the mask , at most 2 ^ 32 * hLen DCNL hLen ( see below ) DCNL h : hash function name ( in \ &apos; md2 \ &apos; , \ &apos; md4 \ &apos; , \ &apos; md5 \ &apos; , \ &apos; sha1 \ &apos; , \ &apos; tls \ &apos; , DCNL \ &apos; sha256 \ &apos; , \ &apos; sha384 \ &apos; ) . hLen denotes the length in octets of DCNL the hash function output . DCNL Output : DCNL an octet string of length maskLen&apos;
&apos;Helper function to convert an ``Image`` to a gRPC ``Image`` . DCNL : type image : : class : ` ~ google.cloud.vision.image.Image` DCNL : param image : Local ``Image`` class to be converted to gRPC ``Image`` . DCNL : rtype : : class : ` ~ google.cloud.grpc.vision.v1.image _ annotator _ pb2.Image` DCNL : returns : gRPC ``Image`` converted from DCNL : class : ` ~ google.cloud.vision.image.Image` . &apos; 
&apos;Initialize the cachedir needed for Salt Cloud to keep track of minions&apos;
&apos;Find all installed extensions . DCNL : returns : list of installed extensions&apos;
&apos;Return a list of methods which , when called with a check name , will each return a check path to inspect&apos;
&apos;Remove given tenant from the group type access list . &apos; 
&apos;Plot concatenated epochs . &apos; 
&apos; &gt; &gt; &gt; from sympy import MatrixSymbol , Q , assuming , refine , det DCNL &gt; &gt; &gt; X = MatrixSymbol ( \ &apos; X \ &apos; , 2 , 2 ) DCNL &gt; &gt; &gt; det ( X ) DCNL Determinant ( X ) DCNL &gt; &gt; &gt; with assuming ( Q.orthogonal ( X ) ) : DCNL ... print ( refine ( det ( X ) ) ) DCNL 1&apos;
&apos;If available , returns a RateLimit instance which is valid for the DCNL current request-response . DCNL .. versionadded : : 0.0.7&apos;
&apos;Language : zh-TW - &gt; sucess outlines colorful&apos;
&apos;Upload archive&apos;
