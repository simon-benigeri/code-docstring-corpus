def _ block2d _ to _ blocknd ( values , placement , shape , labels , ref _ items ) : DCNL &apos; pivot to the labels shape&apos;
def create _ cow _ image ( backing _ file , path , size = None ) : DCNL &apos; Create COW image DCNL Creates a COW image with the given backing file DCNL : param backing _ file : Existing image on which to base the COW image DCNL : param path : Desired location of the COW image&apos;
def reload _ config ( ) : DCNL &apos; Reload the configuration from environment variables , if necessary . &apos; 
def encode _ morse ( msg , sep = &apos; &#124; &apos; , mapping = None ) : DCNL &apos; Encodes a plaintext into popular Morse Code with letters DCNL separated by `sep` and words by a double `sep` . DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Morse _ code DCNL Examples DCNL &gt; &gt; &gt; from sympy.crypto.crypto import encode _ morse DCNL &gt; &gt; &gt; msg = \ &apos; ATTACK RIGHT FLANK \ &apos; DCNL &gt; &gt; &gt; encode _ morse ( msg ) &apos;
def test _ boolean _ field _ choices _ with _ real _ model _ instances ( ) : DCNL &apos; If a booleanField has choices defined , the value argument passed to DCNL BooleanColumn.render ( ) is the rendered value , not a bool . &apos; 
def p _ constant _ expression ( t ) : DCNL &apos; constant _ expression : conditional _ expression&apos;
def nsmallest ( arr , n , keep = &apos; first &apos; ) : DCNL &apos; Find the indices of the n smallest values of a numpy array . DCNL Note : Fails silently with NaN . &apos; 
def consolidate _ hashes ( partition _ dir ) : DCNL &apos; Take what \ &apos; s in hashes.pkl and hashes.invalid , combine them , write the DCNL result back to hashes.pkl , and clear out hashes.invalid. DCNL : param suffix _ dir : absolute path to partition dir containing hashes.pkl DCNL and hashes.invalid DCNL : returns : the hashes , or None if there \ &apos; s no hashes.pkl . &apos; 
def get _ BAIDUID ( ) : DCNL &apos; 获取一个cookie - BAIDUID . DCNL 这里 , 我们访问百度首页 , 返回的response header里面有我们需要的cookie&apos;
def cg _ has _ volumes _ filter ( attached _ or _ with _ snapshots = False ) : DCNL &apos; Return a filter to check if a CG has volumes . DCNL When attached _ or _ with _ snapshots parameter is given a True value only DCNL attached volumes or those with snapshots will be considered . &apos; 
def url _ is _ from _ spider ( url , spider ) : DCNL &apos; Return True if the url belongs to the given spider&apos;
def dup _ spherical _ bessel _ fn _ minus ( n , K ) : DCNL &apos; Low-level implementation of fn ( -n , x ) &apos;
def _ toggle _ proj ( event , params ) : DCNL &apos; Operation to perform when proj boxes clicked . &apos; 
def restore _ ring ( output , coord , width , dense _ input , start _ idx ) : DCNL &apos; .. todo : : DCNL WRITEME DCNL Parameters DCNL output : WRITEME DCNL output matrix in topological order DCNL ( batch , height , width , channels ) DCNL coord : WRITEME DCNL perform average pooling starting at coordinate ( coord , coord ) DCNL width : WRITEME DCNL width of &quot; square ring &quot; to average pool DCNL dense _ input : WRITEME DCNL dense design matrix to convert ( batchsize , dims ) DCNL start _ idx : WRITEME DCNL column index where to start writing the output&apos;
def negate _ real ( builder , val ) : DCNL &apos; Negate real number * val * , with proper handling of zeros . &apos; 
def smoothness _ p ( n , m = ( -1 ) , power = 0 , visual = None ) : DCNL &apos; Return a list of &#91; m , ( p , ( M , sm ( p + m ) , psm ( p + m ) ) ) ... &#93; DCNL where : DCNL 1. p * * M is the base-p divisor of n DCNL 2. sm ( p + m ) is the smoothness of p + m ( m = -1 by default ) DCNL 3. psm ( p + m ) is the power smoothness of p + m DCNL The list is sorted according to smoothness ( default ) or by power smoothness DCNL if power = 1 . DCNL The smoothness of the numbers to the left ( m = -1 ) or right ( m = 1 ) of a DCNL factor govern the results that are obtained from the p + / - 1 type factoring DCNL methods . DCNL &gt; &gt; &gt; from sympy.ntheory.factor _ import smoothness _ p , factorint DCNL &gt; &gt; &gt; smoothness _ p ( 10431 , m = 1 ) DCNL ( 1 , &#91; ( 3 , ( 2 , 2 , 4 ) ) , ( 19 , ( 1 , 5 , 5 ) ) , ( 61 , ( 1 , 31 , 31 ) ) &#93; ) DCNL &gt; &gt; &gt; smoothness _ p ( 10431 ) DCNL ( -1 , &#91; ( 3 , ( 2 , 2 , 2 ) ) , ( 19 , ( 1 , 3 , 9 ) ) , ( 61 , ( 1 , 5 , 5 ) ) &#93; ) DCNL &gt; &gt; &gt; smoothness _ p ( 10431 , power = 1 ) DCNL ( -1 , &#91; ( 3 , ( 2 , 2 , 2 ) ) , ( 61 , ( 1 , 5 , 5 ) ) , ( 19 , ( 1 , 3 , 9 ) ) &#93; ) DCNL If visual = True then an annotated string will be returned : DCNL &gt; &gt; &gt; print ( smoothness _ p ( 21477639576571 , visual = 1 ) ) DCNL p * * i = 4410317 * * 1 has p-1 B = 1787 , B-pow = 1787 DCNL p * * i = 4869863 * * 1 has p-1 B = 2434931 , B-pow = 2434931 DCNL This string can also be generated directly from a factorization dictionary DCNL and vice versa : DCNL &gt; &gt; &gt; factorint ( 17 * 9 ) DCNL { 3 : 2 , 17 : 1 } DCNL &gt; &gt; &gt; smoothness _ p ( _ ) DCNL \ &apos; p * * i = 3 * * 2 has p-1 B = 2 , B-pow = 2 \ np * * i = 17 * * 1 has p-1 B = 2 , B-pow = 16 \ &apos; DCNL &gt; &gt; &gt; smoothness _ p ( _ ) DCNL { 3 : 2 , 17 : 1 } DCNL The table of the output logic is : DCNL &#124; Visual DCNL Input True False other DCNL dict str tuple str DCNL str str tuple dict DCNL tuple str tuple str DCNL n str tuple tuple DCNL mul str tuple tuple DCNL See Also DCNL factorint , smoothness&apos;
def download _ zlib ( dest _ dir , version ) : DCNL &apos; Downloads zlib , returning the filename where the library was downloaded&apos;
def build _ auxiliary _ node _ connectivity ( G ) : DCNL &apos; Creates a directed graph D from an undirected graph G to compute flow DCNL based node connectivity . DCNL For an undirected graph G having `n` nodes and `m` edges we derive a DCNL directed graph D with `2n` nodes and `2m + n` arcs by replacing each DCNL original node `v` with two nodes `vA` , `vB` linked by an ( internal ) DCNL arc in D. Then for each edge ( `u` , `v` ) in G we add two arcs ( `uB` , `vA` ) DCNL and ( `vB` , `uA` ) in D. Finally we set the attribute capacity = 1 for each DCNL arc in D &#91; 1 &#93; _ . DCNL For a directed graph having `n` nodes and `m` arcs we derive a DCNL directed graph D with `2n` nodes and `m + n` arcs by replacing each DCNL original node `v` with two nodes `vA` , `vB` linked by an ( internal ) DCNL arc ( `vA` , `vB` ) in D. Then for each arc ( `u` , `v` ) in G we add one DCNL arc ( `uB` , `vA` ) in D. Finally we set the attribute capacity = 1 for DCNL each arc in D. DCNL A dictionary with a mapping between nodes in the original graph and the DCNL auxiliary digraph is stored as a graph attribute : H.graph &#91; \ &apos; mapping \ &apos; &#93; . DCNL References DCNL .. &#91; 1 &#93; Kammer , Frank and Hanjo Taubig . Graph Connectivity. in Brandes and DCNL Erlebach , \ &apos; Network Analysis : Methodological Foundations \ &apos; , Lecture DCNL Notes in Computer Science , Volume 3418 , Springer-Verlag , 2005 . DCNL http : / / www.informatik.uni-augsburg.de / thi / personen / kammer / Graph _ Connectivity.pdf&apos;
def get _ mem _ info _ linux ( ) : DCNL &apos; Get information about available memory . DCNL Returns a dict of items in / proc / meminfo&apos;
def get _ service ( hass , config , discovery _ info = None ) : DCNL &apos; Get the Telegram notification service . &apos; 
def reverse _ course _ url ( handler _ name , course _ key , kwargs = None ) : DCNL &apos; Creates the URL for handlers that use course _ keys as URL parameters . &apos; 
def _ mask _ to _ limits ( a , limits , inclusive ) : DCNL &apos; Mask an array for values outside of given limits . DCNL This is primarily a utility function . DCNL Parameters DCNL a : array DCNL limits : ( float or None , float or None ) DCNL A tuple consisting of the ( lower limit , upper limit ) . Values in the DCNL input array less than the lower limit or greater than the upper limit DCNL will be masked out . None implies no limit . DCNL inclusive : ( bool , bool ) DCNL A tuple consisting of the ( lower flag , upper flag ) . These flags DCNL determine whether values exactly equal to lower or upper are allowed . DCNL Returns DCNL A MaskedArray . DCNL Raises DCNL A ValueError if there are no values within the given limits . &apos; 
def _ split _ digest _ auth ( data ) : DCNL &apos; This function handles ( Proxy- ) Authorization : Digest values&apos;
def getPathByKey ( key , xmlElement ) : DCNL &apos; Get path from prefix and xml element . &apos; 
def check _ named ( option , opt , value ) : DCNL &apos; check a named value DCNL return a dictionary containing ( name , value ) associations&apos;
def connections _ support _ transactions ( ) : DCNL &apos; Returns True if all connections support transactions . This is messy DCNL because 2.4 doesn \ &apos; t support any or all . &apos; 
@ pytest.fixture ( autouse = True ) DCNL def _ annotate _ environment ( request ) : DCNL &apos; Add project-specific information to test-run environment : DCNL * behave.version DCNL NOTE : autouse : Fixture is automatically used when test-module is imported . &apos; 
def escape _ sql _ like _ special _ characters ( term , escape = &apos; \ \ &apos; ) : DCNL &apos; Escapes characters that are special to the the sql LIKE expression . DCNL In particular , for both postgres and sqlite this means \ &apos; % \ &apos; and \ &apos; _ \ &apos;  . &apos; 
def strip _ version ( idstr ) : DCNL &apos; identity function if arxiv id has no version , otherwise strips it . &apos; 
@ lru _ cache ( maxsize = 1024 ) DCNL def extract _ real _ url _ from _ embedded _ url ( embedded _ url ) : DCNL &apos; 将 embed _ real _ url _ to _ embedded _ url ( ) 编码后的url转换为原来的带有参数的url DCNL `cdn _ redirect _ encode _ query _ str _ into _ url`设置依赖于本函数 , 详细说明请看配置文件中这个参数的部分 DCNL eg : https : / / cdn.domain.com / a.php _ zm24 _ .cT1zb21ldGhpbmc = . _ zm24 _ .css DCNL --- &gt; https : / / foo.com / a.php ? q = something ( assume it returns an css ) ( base64 only ) DCNL eg2 : https : / / cdn.domain.com / a / b / _ zm24 _ .bG92ZT1saXZl. _ zm24 _ .jpg DCNL --- &gt; https : / / foo.com / a / b / ? love = live ( assume it returns an jpg ) ( base64 only ) DCNL eg3 : https : / / cdn.domain.com / a / b / _ zm24z _ . &#91; some long long base64 encoded string &#93; . _ zm24 _ .jpg DCNL --- &gt; https : / / foo.com / a / b / ? love = live &#91; and a long long query string &#93; ( assume it returns an jpg ) ( gzip + base64 ) DCNL eg4 : https : / / cdn.domain.com / a ( no change ) DCNL --- &gt; ( no query string ) : https : / / foo.com / a ( assume it returns an png ) ( no change ) DCNL : param embedded _ url : 可能被编码的URL DCNL : return : 如果传入的是编码后的URL , 则返回解码后的URL , 否则返回None DCNL : type embedded _ url : str DCNL : rtype : Union &#91; str , None &#93; &apos;
def fetch _ 20newsgroups ( data _ home = None , subset = &apos; train &apos; , categories = None , shuffle = True , random _ state = 42 , remove = ( ) , download _ if _ missing = True ) : DCNL &apos; Load the filenames and data from the 20 newsgroups dataset . DCNL Read more in the : ref : `User Guide &lt; 20newsgroups &gt; ` . DCNL Parameters DCNL subset : \ &apos; train \ &apos; or \ &apos; test \ &apos; , \ &apos; all \ &apos; , optional DCNL Select the dataset to load : \ &apos; train \ &apos; for the training set , \ &apos; test \ &apos; DCNL for the test set , \ &apos; all \ &apos; for both , with shuffled ordering . DCNL data _ home : optional , default : None DCNL Specify a download and cache folder for the datasets . If None , DCNL all scikit-learn data is stored in \ &apos; ~ / scikit _ learn _ data \ &apos; subfolders . DCNL categories : None or collection of string or unicode DCNL If None ( default ) , load all the categories . DCNL If not None , list of category names to load ( other categories DCNL ignored ) . DCNL shuffle : bool , optional DCNL Whether or not to shuffle the data : might be important for models that DCNL make the assumption that the samples are independent and identically DCNL distributed ( i.i.d. ) , such as stochastic gradient descent . DCNL random _ state : numpy random number generator or seed integer DCNL Used to shuffle the dataset . DCNL download _ if _ missing : optional , True by default DCNL If False , raise an IOError if the data is not locally available DCNL instead of trying to download the data from the source site . DCNL remove : tuple DCNL May contain any subset of ( \ &apos; headers \ &apos; , \ &apos; footers \ &apos; , \ &apos; quotes \ &apos; ) . Each of DCNL these are kinds of text that will be detected and removed from the DCNL newsgroup posts , preventing classifiers from overfitting on DCNL metadata . DCNL \ &apos; headers \ &apos; removes newsgroup headers , \ &apos; footers \ &apos; removes blocks at the DCNL ends of posts that look like signatures , and \ &apos; quotes \ &apos; removes lines DCNL that appear to be quoting another post . DCNL \ &apos; headers \ &apos; follows an exact standard ; the other filters are not always DCNL correct . &apos; 
def get _ body _ region ( defined ) : DCNL &apos; Return the start and end offsets of function body&apos;
def open _ tasks _ for _ project ( ) : DCNL &apos; Simplified controller to select a project and open the DCNL list of open tasks for it&apos;
def get _ node _ host ( name , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Get hostname from cache node DCNL CLI example : : DCNL salt myminion boto _ elasticache.get _ node _ host myelasticache&apos;
def _ _ virtual _ _ ( ) : DCNL &apos; Set up the libcloud functions and check for Rackspace configuration . &apos; 
def _ enum _ to _ int ( value ) : DCNL &apos; Convert an IntEnum member to a numeric value . DCNL If it \ &apos; s not an IntEnum member return the value itself . &apos; 
def winsorize ( a , limits = None , inclusive = ( True , True ) , inplace = False , axis = None ) : DCNL &apos; Returns a Winsorized version of the input array . DCNL The ( limits &#91; 0 &#93; ) th lowest values are set to the ( limits &#91; 0 &#93; ) th percentile , DCNL and the ( limits &#91; 1 &#93; ) th highest values are set to the ( 1 - limits &#91; 1 &#93; ) th DCNL percentile . DCNL Masked values are skipped . DCNL Parameters DCNL a : sequence DCNL Input array . DCNL limits : { None , tuple of float } , optional DCNL Tuple of the percentages to cut on each side of the array , with respect DCNL to the number of unmasked data , as floats between 0. and 1 . DCNL Noting n the number of unmasked data before trimming , the DCNL ( n * limits &#91; 0 &#93; ) th smallest data and the ( n * limits &#91; 1 &#93; ) th largest data are DCNL masked , and the total number of unmasked data after trimming DCNL is n * ( 1.-sum ( limits ) ) The value of one limit can be set to None to DCNL indicate an open interval . DCNL inclusive : { ( True , True ) tuple } , optional DCNL Tuple indicating whether the number of data being masked on each side DCNL should be rounded ( True ) or truncated ( False ) . DCNL inplace : { False , True } , optional DCNL Whether to winsorize in place ( True ) or to use a copy ( False ) DCNL axis : { None , int } , optional DCNL Axis along which to trim . If None , the whole array is trimmed , but its DCNL shape is maintained . DCNL Notes DCNL This function is applied to reduce the effect of possibly spurious outliers DCNL by limiting the extreme values . &apos; 
def maybe _ add _ auth ( url , auth , force = False ) : DCNL &apos; Add auth if the url doesn \ &apos; t currently have it . DCNL By default , does not replace auth if it already exists . Setting ``force`` to ``True`` DCNL overrides this behavior . DCNL Examples : DCNL &gt; &gt; &gt; maybe _ add _ auth ( &quot; https : / / www.conda.io &quot; , &quot; user : passwd &quot; ) DCNL \ &apos; https : / / user : passwd @ www.conda.io \ &apos; &apos;
def date _ range ( start = None , end = None , periods = None , freq = &apos; D &apos; , tz = None , normalize = False , name = None , closed = None , * * kwargs ) : DCNL &apos; Return a fixed frequency datetime index , with day ( calendar ) as the default DCNL frequency DCNL Parameters DCNL start : string or datetime-like , default None DCNL Left bound for generating dates DCNL end : string or datetime-like , default None DCNL Right bound for generating dates DCNL periods : integer or None , default None DCNL If None , must specify start and end DCNL freq : string or DateOffset , default \ &apos; D \ &apos; ( calendar daily ) DCNL Frequency strings can have multiples , e.g. \ &apos; 5H \ &apos; DCNL tz : string or None DCNL Time zone name for returning localized DatetimeIndex , for example DCNL Asia / Hong _ Kong DCNL normalize : bool , default False DCNL Normalize start / end dates to midnight before generating date range DCNL name : str , default None DCNL Name of the resulting index DCNL closed : string or None , default None DCNL Make the interval closed with respect to the given frequency to DCNL the \ &apos; left \ &apos; , \ &apos; right \ &apos; , or both sides ( None ) DCNL Notes DCNL 2 of start , end , or periods must be specified DCNL To learn more about the frequency strings , please see `this link DCNL &lt; http : / / pandas.pydata.org / pandas-docs / stable / timeseries.html # offset-aliases &gt; ` _ _ . DCNL Returns DCNL rng : DatetimeIndex&apos;
def p _ external _ declaration _ 2 ( t ) : DCNL &apos; external _ declaration : declaration&apos;
def update _ cached _ instance ( sender , instance , * * kwargs ) : DCNL &apos; Re-cache the given instance in the idmapper cache . &apos; 
def capfirst ( value ) : DCNL &apos; Capitalizes the first character of the value&apos;
def blank _ lines ( logical _ line , blank _ lines , indent _ level , line _ number , previous _ logical ) : DCNL &apos; Separate top-level function and class definitions with two blank lines . DCNL Method definitions inside a class are separated by a single blank line . DCNL Extra blank lines may be used ( sparingly ) to separate groups of related DCNL functions . Blank lines may be omitted between a bunch of related DCNL one-liners ( e.g. a set of dummy implementations ) . DCNL Use blank lines in functions , sparingly , to indicate logical sections . &apos; 
def setup _ scanner ( hass , config , see ) : DCNL &apos; Setup the Host objects and return the update function . &apos; 
def is _ monotonic ( Z ) : DCNL &apos; Returns True if the linkage passed is monotonic . DCNL The linkage is monotonic if for every cluster : math : `s` and : math : `t` DCNL joined , the distance between them is no less than the distance DCNL between any previously joined clusters . DCNL Parameters DCNL Z : ndarray DCNL The linkage matrix to check for monotonicity . DCNL Returns DCNL b : bool DCNL A boolean indicating whether the linkage is monotonic . &apos; 
def _ create _ trigger ( trigger _ type ) : DCNL &apos; : param trigger _ type : TriggerType db object . DCNL : type trigger _ type : : class : `TriggerTypeDB`&apos;
def sdm _ LC ( f , K ) : DCNL &apos; Returns the leading coeffcient of ``f`` . &apos; 
def compile _ file ( fullname , ddir = None , force = 0 , rx = None , quiet = 0 ) : DCNL &apos; Byte-compile one file . DCNL Arguments ( only fullname is required ) : DCNL fullname : the file to byte-compile DCNL ddir : if given , the directory name compiled in to the DCNL byte-code file . DCNL force : if 1 , force compilation , even if timestamps are up-to-date DCNL quiet : if 1 , be quiet during compilation&apos;
def hrm _ human _ resource _ controller ( extra _ filter = None ) : DCNL &apos; Human Resources Controller , defined in the model for use from DCNL multiple controllers for unified menus DCNL - used for Summary &amp; Profile views , Imports and S3AddPersonWidget2&apos;
def getLoopsWithCorners ( corners , importRadius , loops , pointTable ) : DCNL &apos; Add corners to the loops . &apos; 
def validate ( obj , obj _ type ) : DCNL &apos; Validate a dictionary , list , or graph object as \ &apos; obj _ type \ &apos; . DCNL This will not alter the \ &apos; obj \ &apos; referenced in the call signature . It will DCNL raise an error if the \ &apos; obj \ &apos; reference could not be instantiated as a DCNL valid \ &apos; obj _ type \ &apos; graph object . &apos; 
@ retry ( exception = ( EnvironmentError , AssertionError ) , logfun = None , timeout = GLOBAL _ TIMEOUT , interval = 0.001 ) DCNL def wait _ for _ file ( fname , delete _ file = True , empty = False ) : DCNL &apos; Wait for a file to be written on disk with some content . &apos; 
def py _ encode _ basestring _ ascii ( s ) : DCNL &apos; Return an ASCII-only JSON representation of a Python string&apos;
def load ( f , persistent _ load = PersistentNdarrayLoad ) : DCNL &apos; Load a file that was dumped to a zip file . DCNL : param f : The file handle to the zip file to load the object from . DCNL : type f : file DCNL : param persistent _ load : The persistent loading function to use for DCNL unpickling . This must be compatible with the `persisten _ id` function DCNL used when pickling . DCNL : type persistent _ load : callable , optional DCNL .. versionadded : : 0.8&apos;
def linear _ transform _ weights ( input _ dim , output _ dim , param _ list = None , name = &apos; &apos; ) : DCNL &apos; theano shared variable given input and output dimension&apos;
def bfs _ beam _ edges ( G , source , value , width = None ) : DCNL &apos; Iterates over edges in a beam search . DCNL The beam search is a generalized breadth-first search in which only DCNL the &quot; best &quot; * w * neighbors of the current node are enqueued , where * w * DCNL is the beam width and &quot; best &quot; is an application-specific DCNL heuristic . In general , a beam search with a small beam width might DCNL not visit each node in the graph . DCNL Parameters DCNL G : NetworkX graph DCNL source : node DCNL Starting node for the breadth-first search ; this function DCNL iterates over only those edges in the component reachable from DCNL this node . DCNL value : function DCNL A function that takes a node of the graph as input and returns a DCNL real number indicating how &quot; good &quot; it is . A higher value means it DCNL is more likely to be visited sooner during the search . When DCNL visiting a new node , only the `width` neighbors with the highest DCNL `value` are enqueued ( in decreasing order of `value` ) . DCNL width : int ( default = None ) DCNL The beam width for the search . This is the number of neighbors DCNL ( ordered by `value` ) to enqueue when visiting each new node . DCNL Yields DCNL edge DCNL Edges in the beam search starting from `source` , given as a pair DCNL of nodes . DCNL Examples DCNL To give nodes with , for example , a higher centrality precedence DCNL during the search , set the `value` function to return the centrality DCNL value of the node : : DCNL &gt; &gt; &gt; G = nx.karate _ club _ graph ( ) DCNL &gt; &gt; &gt; centrality = nx.eigenvector _ centrality ( G ) DCNL &gt; &gt; &gt; source = 0 DCNL &gt; &gt; &gt; width = 5 DCNL &gt; &gt; &gt; for u , v in nx.bfs _ beam _ edges ( G , source , centrality.get , width ) : DCNL ... print ( ( u , v ) ) # doctest : + SKIP&apos;
def repeat ( sequence ) : DCNL &apos; Return a driver function that can advance a repeated of values . DCNL .. code-block : : none DCNL seq = &#91; 0 , 1 , 2 , 3 &#93; DCNL # repeat ( seq ) = &gt; &#91; 0 , 1 , 2 , 3 , 0 , 1 , 2 , 3 , 0 , 1 , ... &#93; DCNL Args : DCNL sequence ( seq ) : a sequence of values for the driver to bounce&apos;
def dump _ and _ add _ to _ dump ( object _ , file _ , parameters = None , to _ add = None , use _ cpickle = False , protocol = DEFAULT _ PROTOCOL , * * kwargs ) : DCNL &apos; Calls both `dump` and `add _ to _ dump` to serialze several objects . DCNL This function is used to serialize several at the same time , using DCNL persistent ID . Its main advantage is that it can be used with DCNL `secure _ dump` . DCNL Parameters DCNL object _ : object DCNL The object to pickle . If None , only the parameters passed to the DCNL `parameters` argument will be saved . DCNL file _ : file DCNL The destination for saving . DCNL parameters : list , optional DCNL Shared variables whose internal numpy arrays should be saved DCNL separately in the ` _ parameters` field of the tar file . DCNL to _ add : dict of objects DCNL A { \ &apos; name \ &apos; : object } dictionnary of additional objects to save in DCNL the tar archive . Its keys will be used as name in the tar file . DCNL use _ cpickle : bool DCNL Use cPickle instead of pickle . Setting it to true will disable the DCNL warning message if you try to pickle objects from the main module , DCNL so be sure that there is no warning before turning this flag DCNL on . Default : False . DCNL protocol : int , optional DCNL The pickling protocol to use . Unlike Python \ &apos; s built-in pickle , the DCNL default is set to `2` instead of 0 for Python 2 . The Python 3 DCNL default ( level 3 ) is maintained . DCNL \ * \ * kwargs DCNL Keyword arguments to be passed to `pickle.Pickler` . &apos; 
def write _ file ( filename , contents ) : DCNL &apos; Create a file with the specified name and write \ &apos; contents \ &apos; ( a DCNL sequence of strings without line terminators ) to it . &apos; 
def _ tgrep _ nltk _ tree _ pos _ action ( _ s , _ l , tokens ) : DCNL &apos; Builds a lambda function representing a predicate on a tree node DCNL which returns true if the node is located at a specific tree DCNL position . &apos; 
def filter _ factory ( global _ conf , * * local _ conf ) : DCNL &apos; Returns a WSGI filter app for use with paste.deploy . &apos; 
def createBrushMask ( shape , style = &apos; Round &apos; , offset = ( 0 , 0 , 0 ) , box = None , chance = 100 , hollow = False ) : DCNL &apos; Return a boolean array for a brush with the given shape and style . DCNL If \ &apos; offset \ &apos; and \ &apos; box \ &apos; are given , then the brush is offset into the world DCNL and only the part of the world contained in box is returned as an array&apos;
def get _ ordered _ categories ( ) : DCNL &apos; Return list-copy of categories section that \ &apos; s ordered DCNL by user \ &apos; s ordering including Default-category&apos;
def getCraftedTextFromText ( gcodeText , towerRepository = None ) : DCNL &apos; Tower a gcode linear move text . &apos; 
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL def service _ add ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Service add&apos;
def nlargest ( n , iterable , key = None ) : DCNL &apos; Find the n largest elements in a dataset . DCNL Equivalent to : sorted ( iterable , key = key , reverse = True ) &#91; : n &#93; &apos;
def active ( display _ progress = False ) : DCNL &apos; Return a report on all actively running jobs from a job id centric DCNL perspective DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-run jobs.active&apos;
def openshift _ deploy _ canceller ( registry , xml _ parent , data ) : DCNL &apos; yaml : openshift-deploy-canceller DCNL This action is intended to provide cleanup for any OpenShift deployments DCNL left running when the Job completes ; this step will allow you to perform DCNL the equivalent of a oc deploy --cancel for the provided deployment config . DCNL Requires the Jenkins : jenkins-wiki : `OpenShift DCNL Pipeline Plugin &lt; OpenShift + Pipeline + Plugin &gt; ` . DCNL : arg str api-url : this would be the value you specify if you leverage the DCNL --server option on the OpenShift `oc` command . DCNL ( default \ &apos; \ https : / / openshift.default.svc.cluster.local \ &apos; ) DCNL : arg str dep-cfg : The value here should be whatever was the output DCNL form `oc project` when you created the BuildConfig you want to run a DCNL Build on ( default frontend ) DCNL : arg str namespace : If you run `oc get bc` for the project listed in DCNL &quot; namespace &quot; , that is the value you want to put here . ( default \ &apos; test \ &apos; ) DCNL : arg str auth-token : The value here is what you supply with the --token DCNL option when invoking the OpenShift `oc` command . ( default \ &apos; \ &apos; ) DCNL : arg bool verbose : This flag is the toggle for DCNL turning on or off detailed logging in this plug-in . ( default false ) DCNL Full Example : DCNL .. literalinclude : : DCNL .. / .. / tests / publishers / fixtures / openshift-deploy-canceller001.yaml DCNL : language : yaml DCNL Minimal Example : DCNL .. literalinclude : : DCNL .. / .. / tests / publishers / fixtures / openshift-deploy-canceller002.yaml DCNL : language : yaml&apos;
@ with _ open _ mode ( &apos; r &apos; ) DCNL @ with _ sizes ( &apos; medium &apos; ) DCNL def seek _ forward _ blockwise ( f ) : DCNL &apos; seek forward 1000 units at a time&apos;
@ register.filter DCNL @ stringfilter DCNL def cut ( value , arg ) : DCNL &apos; Removes all values of arg from the given string . &apos; 
def format _ source _ url ( url ) : DCNL &apos; Format URL suitable for \ &apos; Source \ &apos; stage&apos;
def string _ escape ( text ) : DCNL &apos; Escape values special to javascript in strings . DCNL With this we should be able to use something like : DCNL elem.evaluateJavaScript ( &quot; this.value = \ &apos; { } \ &apos; &quot; .format ( string _ escape ( ... ) ) ) DCNL And all values should work . &apos; 
def _ list _ files ( path , suffix = &apos; &apos; ) : DCNL &apos; .. todo : : DCNL WRITEME DCNL Parameters DCNL path : str DCNL a filepath DCNL suffix : str DCNL Returns DCNL l : list DCNL A list of all files ending in `suffix` contained within `path` . DCNL ( If `path` is a file rather than a directory , it is considered DCNL to &quot; contain &quot; itself ) &apos;
def parse ( handle , * * kwargs ) : DCNL &apos; Iterate over the trees in a CDAO file handle . DCNL : returns : generator of Bio.Phylo.CDAO.Tree objects . &apos; 
@ datastore _ rpc . _ positional ( 1 ) DCNL def inject _ results ( query , updated _ entities = None , deleted _ keys = None ) : DCNL &apos; Creates a query object that will inject changes into results . DCNL Args : DCNL query : The datastore _ query.Query to augment DCNL updated _ entities : A list of entity _ pb.EntityProto \ &apos; s that have been updated DCNL and should take priority over any values returned by query . DCNL deleted _ keys : A list of entity _ pb.Reference \ &apos; s for entities that have been DCNL deleted and should be removed from query results . DCNL Returns : DCNL A datastore _ query.AugmentedQuery if in memory filtering is required , DCNL query otherwise . &apos; 
def encoded _ hash ( sha ) : DCNL &apos; Return a short , 7-bit-safe representation of a hash . DCNL If you pass a sha256 , this results in the hash algorithm that the Wheel DCNL format ( PEP 427 ) uses , except here it \ &apos; s intended to be run across the DCNL downloaded archive before unpacking . &apos; 
def cos ( x ) : DCNL &apos; Computes cos of x element-wise . DCNL # Arguments DCNL x : input tensor . DCNL # Returns DCNL A tensor . &apos; 
def getRadiusAverage ( radiusComplex ) : DCNL &apos; Get average radius from radiusComplex . &apos; 
def test _ lambda ( n ) : DCNL &apos; &gt; &gt; &gt; &#91; f ( ) for f in test _ lambda ( 3 ) &#93; DCNL &#91; 0 , 1 , 2 &#93; &apos;
def simplefilter ( f ) : DCNL &apos; Decorator that converts a function into a filter : : DCNL @ simplefilter DCNL def lowercase ( lexer , stream , options ) : DCNL for ttype , value in stream : DCNL yield ttype , value.lower ( ) &apos;
def returner ( ret ) : DCNL &apos; Return data to a remote carbon server using the text metric protocol DCNL Each metric will look like : : DCNL &#91; module &#93; . &#91; function &#93; . &#91; minion _ id &#93; . &#91; metric path &#91; ... &#93; &#93; . &#91; metric name &#93; &apos;
def decode _ byte _ list ( byte _ list ) : DCNL &apos; Helper function that takes a list of byte strings and decodes each item DCNL according to the _ _ salt _ system _ encoding _ _ value . Returns a list of strings . &apos; 
def organization _ purge ( context , data _ dict ) : DCNL &apos; Purge an organization . DCNL .. warning : : Purging an organization cannot be undone ! DCNL Purging an organization completely removes the organization from the CKAN DCNL database , whereas deleting an organization simply marks the organization as DCNL deleted ( it will no longer show up in the frontend , but is still in the DCNL db ) . DCNL Datasets owned by the organization will remain , just not in an DCNL organization any more . DCNL You must be authorized to purge the organization . DCNL : param id : the name or id of the organization to be purged DCNL : type id : string&apos;
def tests _ get _ by _ job _ idx ( job _ idx ) : DCNL &apos; Returns all tests based on its job idx&apos;
def mod _ aggregate ( low , chunks , running ) : DCNL &apos; The mod _ aggregate function which looks up all rules in the available DCNL low chunks and merges them into a single rules ref in the present low data&apos;
def xsym ( sym ) : DCNL &apos; get symbology for a \ &apos; character \ &apos; &apos;
def require ( divisions , parts , required = None ) : DCNL &apos; Clear out divisions where required components are not present DCNL In left , right , or inner joins we exclude portions of the dataset if one DCNL side or the other is not present . We can achieve this at the partition DCNL level as well DCNL &gt; &gt; &gt; divisions = &#91; 1 , 3 , 5 , 7 , 9 &#93; DCNL &gt; &gt; &gt; parts = &#91; ( ( \ &apos; a \ &apos; , 0 ) , None ) , DCNL ... ( ( \ &apos; a \ &apos; , 1 ) , ( \ &apos; b \ &apos; , 0 ) ) , DCNL ... ( ( \ &apos; a \ &apos; , 2 ) , ( \ &apos; b \ &apos; , 1 ) ) , DCNL ... ( None , ( \ &apos; b \ &apos; , 2 ) ) &#93; DCNL &gt; &gt; &gt; divisions2 , parts2 = require ( divisions , parts , required = &#91; 0 &#93; ) DCNL &gt; &gt; &gt; divisions2 DCNL ( 1 , 3 , 5 , 7 ) DCNL &gt; &gt; &gt; parts2 # doctest : + NORMALIZE _ WHITESPACE DCNL ( ( ( \ &apos; a \ &apos; , 0 ) , None ) , DCNL ( ( \ &apos; a \ &apos; , 1 ) , ( \ &apos; b \ &apos; , 0 ) ) , DCNL ( ( \ &apos; a \ &apos; , 2 ) , ( \ &apos; b \ &apos; , 1 ) ) ) DCNL &gt; &gt; &gt; divisions2 , parts2 = require ( divisions , parts , required = &#91; 1 &#93; ) DCNL &gt; &gt; &gt; divisions2 DCNL ( 3 , 5 , 7 , 9 ) DCNL &gt; &gt; &gt; parts2 # doctest : + NORMALIZE _ WHITESPACE DCNL ( ( ( \ &apos; a \ &apos; , 1 ) , ( \ &apos; b \ &apos; , 0 ) ) , DCNL ( ( \ &apos; a \ &apos; , 2 ) , ( \ &apos; b \ &apos; , 1 ) ) , DCNL ( None , ( \ &apos; b \ &apos; , 2 ) ) ) DCNL &gt; &gt; &gt; divisions2 , parts2 = require ( divisions , parts , required = &#91; 0 , 1 &#93; ) DCNL &gt; &gt; &gt; divisions2 DCNL ( 3 , 5 , 7 ) DCNL &gt; &gt; &gt; parts2 # doctest : + NORMALIZE _ WHITESPACE DCNL ( ( ( \ &apos; a \ &apos; , 1 ) , ( \ &apos; b \ &apos; , 0 ) ) , DCNL ( ( \ &apos; a \ &apos; , 2 ) , ( \ &apos; b \ &apos; , 1 ) ) ) &apos;
def separate _ users ( node , user _ ids ) : DCNL &apos; Separates users into ones with permissions and ones without given a list . DCNL : param node : Node to separate based on permissions DCNL : param user _ ids : List of ids , will also take and return User instances DCNL : return : list of subbed , list of removed user ids&apos;
def hash _ of _ file ( path ) : DCNL &apos; Return the hash of a downloaded file . &apos; 
@ protocol.commands.add ( u &apos;rescan &apos; ) DCNL def rescan ( context , uri = None ) : DCNL &apos; * musicpd.org , music database section : * DCNL ``rescan &#91; URI &#93; `` DCNL Same as ``update`` , but also rescans unmodified files . &apos; 
def test _ record _ good ( ) : DCNL &apos; Tests that when we record a sequence of events , then DCNL repeat it exactly , the Record class : DCNL 1 ) Records it correctly DCNL 2 ) Does not raise any errors&apos;
def docker _ custom _ build _ env ( registry , xml _ parent , data ) : DCNL &apos; yaml : docker-custom-build-env DCNL Allows the definition of a build environment for a job using a Docker DCNL container . DCNL Requires the Jenkins : jenkins-wiki : `CloudBees Docker Custom Build DCNL Environment Plugin &lt; CloudBees + Docker + Custom + Build + Environment + Plugin &gt; ` . DCNL : arg str image-type : Docker image type . Valid values and their DCNL additional attributes described in the image _ types _ table DCNL : arg str docker-tool : The name of the docker installation to use DCNL ( default \ &apos; Default \ &apos; ) DCNL : arg str host : URI to the docker host you are using DCNL : arg str credentials-id : Argument to specify the ID of credentials to use DCNL for docker host ( optional ) DCNL : arg str registry-credentials-id : Argument to specify the ID of DCNL credentials to use for docker registry ( optional ) DCNL : arg list volumes : Volumes to bind mound from slave host into container DCNL : volume : * * * host-path * * ( `str` ) Path on host DCNL * * * path * * ( `str` ) Path inside container DCNL : arg bool verbose : Log docker commands executed by plugin on build log DCNL ( default false ) DCNL : arg bool privileged : Run in privileged mode ( default false ) DCNL : arg bool force-pull : Force pull ( default false ) DCNL : arg str group : The user to run build has to be the same as the Jenkins DCNL slave user so files created in workspace have adequate owner and DCNL permission set DCNL : arg str command : Container start command ( default \ &apos; / bin / cat \ &apos; ) DCNL : arg str net : Network bridge ( default \ &apos; bridge \ &apos; ) DCNL .. _ image _ types : DCNL Image Type Description DCNL dockerfile Build docker image from a Dockerfile in project DCNL workspace . With this option , project can define the DCNL build environment as a Dockerfile stored in SCM with DCNL project source code DCNL : context-path : ( str ) Path to docker context DCNL ( default \ &apos; . \ &apos; ) DCNL : dockerfile : ( str ) Use an alternate Dockerfile to DCNL build the container hosting this build DCNL ( default \ &apos; Dockerfile \ &apos; ) DCNL pull Pull specified docker image from Docker repository DCNL : image : ( str ) Image id / tag DCNL Example : DCNL .. literalinclude : : DCNL / .. / .. / tests / wrappers / fixtures / docker-custom-build-env001.yaml DCNL : language : yaml&apos;
def _ SecToUsec ( t ) : DCNL &apos; Converts a time in seconds since the epoch to usec since the epoch . DCNL Args : DCNL t : Time in seconds since the unix epoch DCNL Returns : DCNL An integer containing the number of usec since the unix epoch . &apos; 
def auth ( username , password , * * kwargs ) : DCNL &apos; Returns True if the given user cert ( password is the cert contents ) DCNL was issued by the CA and if cert \ &apos; s Common Name is equal to username . DCNL Returns False otherwise . DCNL ``username`` : we need it to run the auth function from CLI / API ; DCNL it should be in master config auth / acl DCNL ``password`` : contents of user certificate ( pem-encoded user public key ) ; DCNL why &quot; password &quot; ? For CLI , it \ &apos; s the only available name DCNL Configure the CA cert in the master config file : DCNL .. code-block : : yaml DCNL external _ auth : DCNL pki : DCNL ca _ file : / etc / pki / tls / ca _ certs / trusted-ca.crt DCNL your _ user : &apos;
def MapItemsIterator ( function , items ) : DCNL &apos; Maps ItemsIterator via given function . &apos; 
def _ revs _ equal ( rev1 , rev2 , rev _ type ) : DCNL &apos; Shorthand helper function for comparing SHA1s . If rev _ type = = \ &apos; sha1 \ &apos; then DCNL the comparison will be done using str.startwith ( ) to allow short SHA1s to DCNL compare successfully . DCNL NOTE : This means that rev2 must be the short rev . &apos; 
def check _ virtualserver ( lb , name ) : DCNL &apos; Check to see if a virtual server exists DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt-run f5.check _ virtualserver load _ balancer virtual _ server&apos;
def cpu _ freq ( ) : DCNL &apos; Return CPU frequency . DCNL On Windows per-cpu frequency is not supported . &apos; 
def add _ permission ( user , model , permission _ codename ) : DCNL &apos; Add a permission to a user . DCNL Creates the permission if it doesn \ &apos; t exist . &apos; 
def git ( registry , xml _ parent , data ) : DCNL &apos; yaml : git DCNL This plugin will configure the Jenkins Git plugin to DCNL push merge results , tags , and / or branches to DCNL remote repositories after the job completes . DCNL Requires the Jenkins : jenkins-wiki : `Git Plugin &lt; Git + Plugin &gt; ` . DCNL : arg bool push-merge : push merges back to the origin specified in the DCNL pre-build merge options ( default false ) DCNL : arg bool push-only-if-success : Only push to remotes if the build succeeds DCNL - otherwise , nothing will be pushed . DCNL ( default true ) DCNL : arg bool force-push : Add force option to git push ( default false ) DCNL : arg list tags : tags to push at the completion of the build DCNL : tag : * * * remote * * ( `str` ) remote repo name to push to DCNL ( default \ &apos; origin \ &apos; ) DCNL * * * name * * ( `str` ) name of tag to push DCNL * * * message * * ( `str` ) message content of the tag DCNL * * * create-tag * * ( `bool` ) whether or not to create the tag DCNL after the build , if this is False then the tag needs to DCNL exist locally ( default false ) DCNL * * * update-tag * * ( `bool` ) whether to overwrite a remote tag DCNL or not ( default false ) DCNL : arg list branches : branches to push at the completion of the build DCNL : branch : * * * remote * * ( `str` ) remote repo name to push to DCNL ( default \ &apos; origin \ &apos; ) DCNL * * * name * * ( `str` ) name of remote branch to push to DCNL : arg list notes : notes to push at the completion of the build DCNL : note : * * * remote * * ( `str` ) remote repo name to push to DCNL ( default \ &apos; origin \ &apos; ) DCNL * * * message * * ( `str` ) content of the note DCNL * * * namespace * * ( `str` ) namespace of the note DCNL ( default master ) DCNL * * * replace-note * * ( `bool` ) whether to overwrite a note or not DCNL ( default false ) DCNL Example : DCNL .. literalinclude : : / .. / .. / tests / publishers / fixtures / git001.yaml DCNL : language : yaml&apos;
def preserve _ value ( namespace , name ) : DCNL &apos; Function decorator to wrap a function that sets a namespace item . DCNL In particular if we modify a global namespace and want to restore the value DCNL after we have finished , use this function . DCNL This is decorator version of the context manager from DCNL http : / / stackoverflow.com / a / 6811921 . We use a decorator since Python 2.4 DCNL doesn \ &apos; t have context managers . DCNL : param namespace : namespace to modify , e.g. sys DCNL : type namespace : object DCNL : param name : attribute in the namespace , e.g. dont _ write _ bytecode DCNL : type name : str DCNL : return : New function decorator that wraps the attribute modification DCNL : rtype : function&apos;
def to _ marshallable _ type ( obj ) : DCNL &apos; Helper for converting an object to a dictionary only if it is not DCNL dictionary already or an indexable object nor a simple type&apos;
def random _ shift ( x , wrg , hrg , row _ axis = 1 , col _ axis = 2 , channel _ axis = 0 , fill _ mode = &apos; nearest &apos; , cval = 0.0 ) : DCNL &apos; Performs a random spatial shift of a Numpy image tensor . DCNL # Arguments DCNL x : Input tensor . Must be 3D . DCNL wrg : Width shift range , as a float fraction of the width . DCNL hrg : Height shift range , as a float fraction of the height . DCNL row _ axis : Index of axis for rows in the input tensor . DCNL col _ axis : Index of axis for columns in the input tensor . DCNL channel _ axis : Index of axis for channels in the input tensor . DCNL fill _ mode : Points outside the boundaries of the input DCNL are filled according to the given mode DCNL ( one of ` { \ &apos; constant \ &apos; , \ &apos; nearest \ &apos; , \ &apos; reflect \ &apos; , \ &apos; wrap \ &apos; } ` ) . DCNL cval : Value used for points outside the boundaries DCNL of the input if `mode = \ &apos; constant \ &apos; ` . DCNL # Returns DCNL Shifted Numpy image tensor . &apos; 
def build _ repository _ type _ select _ field ( trans , repository = None , name = &apos; repository _ type &apos; ) : DCNL &apos; Called from the Tool Shed to generate the current list of supported repository types . &apos; 
def dict _ factory ( cursor , row ) : DCNL &apos; Return a dictionary for the current database position&apos;
@ cinder _ utils.trace _ method DCNL @ cinder _ utils.synchronized ( &apos; map _ es _ volume &apos; ) DCNL def map _ volume _ to _ single _ host ( client , volume , eseries _ vol , host , vol _ map , multiattach _ enabled ) : DCNL &apos; Maps the e-series volume to host with initiator . &apos; 
def get _ dependencies ( ) : DCNL &apos; Warn if dependencies aren \ &apos; t met . &apos; 
def save _ sent _ email ( crispin _ client , account _ id , message _ id ) : DCNL &apos; Create an email on the remote backend . Generic providers expect DCNL us to create a copy of the message in the sent folder . &apos; 
def polygamma ( n , x ) : DCNL &apos; Polygamma function n . DCNL This is the nth derivative of the digamma ( psi ) function . DCNL Parameters DCNL n : array _ like of int DCNL The order of the derivative of `psi` . DCNL x : array _ like DCNL Where to evaluate the polygamma function . DCNL Returns DCNL polygamma : ndarray DCNL The result . DCNL Examples DCNL &gt; &gt; &gt; from scipy import special DCNL &gt; &gt; &gt; x = &#91; 2 , 3 , 25.5 &#93; DCNL &gt; &gt; &gt; special.polygamma ( 1 , x ) DCNL array ( &#91; 0.64493407 , 0.39493407 , 0.03999467 &#93; ) DCNL &gt; &gt; &gt; special.polygamma ( 0 , x ) = = special.psi ( x ) DCNL array ( &#91; True , True , True &#93; , dtype = bool ) &apos;
def safe _ minidom _ parse _ string ( xml _ string ) : DCNL &apos; Parse an XML string using minidom safely . &apos; 
def add _ indep ( x , varnames , dtype = None ) : DCNL &apos; construct array with independent columns DCNL x is either iterable ( list , tuple ) or instance of ndarray or a subclass of it . DCNL If x is an ndarray , then each column is assumed to represent a variable with DCNL observations in rows . &apos; 
def prompt _ n ( msg , inputs ) : DCNL &apos; Presents the user with N input widgets and returns the results&apos;
def run ( app = None , server = &apos; wsgiref &apos; , host = &apos; 127.0.0.1 &apos; , port = 8080 , interval = 1 , reloader = False , quiet = False , plugins = None , debug = None , config = None , * * kargs ) : DCNL &apos; Start a server instance . This method blocks until the server terminates . DCNL : param app : WSGI application or target string supported by DCNL : func : `load _ app` . ( default : : func : `default _ app` ) DCNL : param server : Server adapter to use . See : data : `server _ names` keys DCNL for valid names or pass a : class : `ServerAdapter` subclass . DCNL ( default : `wsgiref` ) DCNL : param host : Server address to bind to . Pass ``0.0.0.0`` to listens on DCNL all interfaces including the external one . ( default : 127.0.0.1 ) DCNL : param port : Server port to bind to . Values below 1024 require root DCNL privileges . ( default : 8080 ) DCNL : param reloader : Start auto-reloading server ? ( default : False ) DCNL : param interval : Auto-reloader interval in seconds ( default : 1 ) DCNL : param quiet : Suppress output to stdout and stderr ? ( default : False ) DCNL : param options : Options passed to the server adapter . &apos; 
def _ check _ for _ exception _ catch ( evaluator , jedi _ obj , exception , payload = None ) : DCNL &apos; Checks if a jedi object ( e.g. `Statement` ) sits inside a try / catch and DCNL doesn \ &apos; t count as an error ( if equal to `exception` ) . DCNL Also checks `hasattr` for AttributeErrors and uses the `payload` to compare DCNL it . DCNL Returns True if the exception was catched . &apos; 
def dent ( individual , lambda _ = 0.85 ) : DCNL &apos; Test problem Dent . Two-objective problem with a &quot; dent &quot; . * individual * has DCNL two attributes that take values in &#91; -1.5 , 1.5 &#93; . DCNL From : Schuetze , O. , Laumanns , M. , Tantar , E. , Coello Coello , C.A. , &amp; Talbi , E.-G. ( 2010 ) . DCNL Computing gap free Pareto front approximations with stochastic search algorithms . DCNL Evolutionary Computation , 18 ( 1 ) , 65--96. doi : 10.1162 / evco.2010.18.1.18103 DCNL Note that in that paper Dent source is stated as : DCNL K. Witting and M. Hessel von Molo . Private communication , 2006 . &apos; 
def hours ( h ) : DCNL &apos; Return hours as days . &apos; 
def test _ retry _ on _ normal _ error ( collect ) : DCNL &apos; Ensure retries are processed for most errors . &apos; 
def createFactoryCopy ( state ) : DCNL &apos; Factory of L { SimpleFactoryCopy } , getting a created instance given the DCNL C { id } found in C { state }  . &apos; 
def clone ( git _ path , module , repo , dest , remote , depth , version , bare , reference , refspec , verify _ commit ) : DCNL &apos; makes a new git repo if it does not already exist&apos;
def send _ email ( subject = None , recipients = &#91; &#93; , html = &apos; &apos; ) : DCNL &apos; Given a message , will send that message over SES or SMTP , depending upon how the app is configured . &apos; 
def load _ pandas ( ) : DCNL &apos; Load the Spector dataset and returns a Dataset class instance . DCNL Returns DCNL Dataset instance : DCNL See DATASET _ PROPOSAL.txt for more information . &apos; 
def schedule _ delayed _ delete _ from _ backend ( context , image _ id , location ) : DCNL &apos; Given a location , schedule the deletion of an image location and DCNL update location status to db . DCNL : param context : The request context DCNL : param image _ id : The image identifier DCNL : param location : The image location entry&apos;
def cache _ page ( * args , * * kwargs ) : DCNL &apos; Decorator for views that tries getting the page from the cache and DCNL populates the cache if the page isn \ &apos; t in the cache yet . DCNL The cache is keyed by the URL and some data from the headers . DCNL Additionally there is the key prefix that is used to distinguish different DCNL cache areas in a multi-site setup . You could use the DCNL sites.get _ current ( ) .domain , for example , as that is unique across a Django DCNL project . DCNL Additionally , all headers from the response \ &apos; s Vary header will be taken DCNL into account on caching -- just like the middleware does . &apos; 
def _ warn _ node ( self , msg , node , * args , * * kwargs ) : DCNL &apos; Mute warnings that are like ``WARNING : nonlocal image URI found : https : / / img . ... `` DCNL Solution was found by googling , copied it from SO : DCNL http : / / stackoverflow.com / questions / 12772927 / specifying-an-online-image-in-sphinx-restructuredtext-format&apos;
def to _ string ( ip ) : DCNL &apos; Convert 32-bit integer to dotted IPv4 address . &apos; 
def setup _ masquerade ( request , course _ key , staff _ access = False , reset _ masquerade _ data = False ) : DCNL &apos; Sets up masquerading for the current user within the current request . The request \ &apos; s user is DCNL updated to have a \ &apos; masquerade _ settings \ &apos; attribute with the dict of all masqueraded settings if DCNL called from within a request context . The function then returns a pair ( CourseMasquerade , User ) DCNL with the masquerade settings for the specified course key or None if there isn \ &apos; t one , and the DCNL user we are masquerading as or request.user if masquerading as a specific user is not active . DCNL If the reset _ masquerade _ data flag is set , the field data stored in the session will be cleared . &apos; 
def init _ widgets ( ) : DCNL &apos; Initialize the widgets subsystem . DCNL This will listen for events in order to manage the widget caches . &apos; 
def get _ client ( env ) : DCNL &apos; Guesses the client address from the environment variables DCNL First tries \ &apos; http _ x _ forwarded _ for \ &apos; , secondly \ &apos; remote _ addr \ &apos; DCNL if all fails , assume \ &apos; 127.0.0.1 \ &apos; or \ &apos; : : 1 \ &apos; ( running locally ) &apos;
def is _ internal _ attribute ( obj , attr ) : DCNL &apos; Test if the attribute given is an internal python attribute . For DCNL example this function returns `True` for the `func _ code` attribute of DCNL python objects . This is useful if the environment method DCNL : meth : ` ~ SandboxedEnvironment.is _ safe _ attribute` is overridden . DCNL &gt; &gt; &gt; from jinja2.sandbox import is _ internal _ attribute DCNL &gt; &gt; &gt; is _ internal _ attribute ( str , &quot; mro &quot; ) DCNL True DCNL &gt; &gt; &gt; is _ internal _ attribute ( str , &quot; upper &quot; ) DCNL False&apos;
def all _ pairs _ shortest _ path ( G , cutoff = None ) : DCNL &apos; Compute shortest paths between all nodes . DCNL Parameters DCNL G : NetworkX graph DCNL cutoff : integer , optional DCNL Depth at which to stop the search . Only paths of length at most DCNL `cutoff` are returned . DCNL Returns DCNL lengths : dictionary DCNL Dictionary , keyed by source and target , of shortest paths . DCNL Examples DCNL &gt; &gt; &gt; G = nx.path _ graph ( 5 ) DCNL &gt; &gt; &gt; path = nx.all _ pairs _ shortest _ path ( G ) DCNL &gt; &gt; &gt; print ( path &#91; 0 &#93; &#91; 4 &#93; ) DCNL &#91; 0 , 1 , 2 , 3 , 4 &#93; DCNL See Also DCNL floyd _ warshall ( ) &apos;
def get _ type _ hints ( obj , globalns = None , localns = None ) : DCNL &apos; In Python 2 this is not supported and always returns None . &apos; 
def _ section _ certificates ( course ) : DCNL &apos; Section information for the certificates panel . DCNL The certificates panel allows global staff to generate DCNL example certificates and enable self-generated certificates DCNL for a course . DCNL Arguments : DCNL course ( Course ) DCNL Returns : DCNL dict&apos;
def ms _ payload ( payload ) : DCNL &apos; Receives the input given by the user from create _ payload.py DCNL and create _ payloads.py&apos;
def extract ( path , to _ path = &apos; &apos; ) : DCNL &apos; Unpack the tar or zip file at the specified path to the directory DCNL specified by to _ path . &apos; 
def parse _ field _ path ( field _ path ) : DCNL &apos; Take a path to a field like &quot; mezzanine.pages.models.Page.feature _ image &quot; DCNL and return a model key , which is a tuple of the form ( \ &apos; pages \ &apos; , \ &apos; page \ &apos; ) , DCNL and a field name , e.g. &quot; feature _ image &quot;  . &apos; 
def stub _ set _ host _ enabled ( context , host _ name , enabled ) : DCNL &apos; Simulates three possible behaviours for VM drivers or compute drivers when DCNL enabling or disabling a host . DCNL \ &apos; enabled \ &apos; means new instances can go to this host DCNL \ &apos; disabled \ &apos; means they can \ &apos; t&apos;
def secgroup _ create ( name , description , profile = None ) : DCNL &apos; Add a secgroup to nova ( nova secgroup-create ) DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nova.secgroup _ create mygroup \ &apos; This is my security group \ &apos; &apos;
@ nottest DCNL def _ get _ tests ( fname , selector = None , nose _ params = NOSE _ COLLECT _ PARAMS ) : DCNL &apos; Collect tests and return them . DCNL : param fname : The tests will be written to fname in xunit format DCNL : param selector : Tests are filtered based on selector DCNL : return : A test suite as returned by xunitparser with all the tests available DCNL in the w3af framework source code , without any selectors . &apos; 
@ check _ feature _ enabled ( feature _ name = &apos; ENTRANCE _ EXAMS &apos; ) DCNL def create _ entrance _ exam ( request , course _ key , entrance _ exam _ minimum _ score _ pct ) : DCNL &apos; api method to create an entrance exam . DCNL First clean out any old entrance exams . &apos; 
def request _ authenticate ( request , username , password ) : DCNL &apos; Autenticate the given request ( in place ) using the HTTP basic access DCNL authentication mechanism ( RFC 2617 ) and the given username and password&apos;
def siva ( x , y ) : DCNL &apos; Made me fall in love with Python&apos;
def servicegroup _ add ( sg _ name , sg _ type = &apos; HTTP &apos; , * * connection _ args ) : DCNL &apos; Add a new service group DCNL If no service type is specified , HTTP will be used . DCNL Most common service types : HTTP , SSL , and SSL _ BRIDGE DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; netscaler.servicegroup _ add \ &apos; serviceGroupName \ &apos; DCNL salt \ &apos; * \ &apos; netscaler.servicegroup _ add \ &apos; serviceGroupName \ &apos; \ &apos; serviceGroupType \ &apos; &apos;
def _ is _ ipv4 _ like ( s ) : DCNL &apos; Find if a string superficially looks like an IPv4 address . DCNL AWS documentation plays it fast and loose with this ; in other DCNL regions , it seems like even non-valid IPv4 addresses ( in DCNL particular , ones that possess decimal numbers out of range for DCNL IPv4 ) are rejected . &apos; 
def parsehttpdate ( string _ ) : DCNL &apos; Parses an HTTP date into a datetime object . DCNL &gt; &gt; &gt; parsehttpdate ( \ &apos; Thu , 01 Jan 1970 01 : 01 : 01 GMT \ &apos; ) DCNL datetime.datetime ( 1970 , 1 , 1 , 1 , 1 , 1 ) &apos;
def unsafe _ eval _ enabled ( response ) : DCNL &apos; Method to detect if CSP Policies are specified for Script , DCNL to allow use of the javascript &quot; eval ( ) &quot; function . DCNL : param response : A HTTPResponse object . DCNL : return : True if CSP Policies are specified for Script to allow DCNL use of the javascript &quot; eval ( ) &quot; function , False otherwise . &apos; 
def _ to _ micropennies _ per _ op ( pennies , per ) : DCNL &apos; The price of a single op in micropennies . &apos; 
def find _ xpath _ with _ wait ( context , id _ str , * * kwargs ) : DCNL &apos; Tries to find an element with given XPATH with an explicit timeout . DCNL context : a behave context DCNL id _ str : A string with the XPATH ( no leading # ) DCNL kwargs : can optionally pass &quot; wait _ time &quot; , which will be the max wait time in DCNL seconds . Default is defined by behave _ helpers.py DCNL Returns the element if found or raises TimeoutException&apos;
def subscribe ( hass , callback ) : DCNL &apos; Subscribe to incoming ZigBee frames . &apos; 
def _ current _ component ( view _ func , dashboard = None , panel = None ) : DCNL &apos; Sets the currently-active dashboard and / or panel on the request . &apos; 
def modify _ profile ( hostname , username , password , profile _ type , name , * * kwargs ) : DCNL &apos; A function to connect to a bigip device and create a profile . DCNL A function to connect to a bigip device and create a profile . DCNL hostname DCNL The host / address of the bigip device DCNL username DCNL The iControl REST username DCNL password DCNL The iControl REST password DCNL profile _ type DCNL The type of profile to create DCNL name DCNL The name of the profile to create DCNL kwargs DCNL `` &#91; arg = val &#93; ... &#91; arg = key1 : val1 , key2 : val2 &#93; ... `` DCNL Consult F5 BIGIP user guide for specific options for each monitor type . DCNL Typically , tmsh arg names are used . DCNL Creating Complex Args DCNL Profiles can get pretty complicated in terms of the amount of possible DCNL config options . Use the following shorthand to create complex arguments such DCNL as lists , dictionaries , and lists of dictionaries . An option is also DCNL provided to pass raw json as well . DCNL lists `` &#91; i , i , i &#93; `` : DCNL ``param = \ &apos; item1 , item2 , item3 \ &apos; `` DCNL Dictionary `` &#91; k : v , k : v , k , v &#93; `` : DCNL ``param = \ &apos; key-1 : val-1 , key-2 : val2 , key-3 : va-3 \ &apos; `` DCNL List of Dictionaries `` &#91; k : v , k : v &#124; k : v , k : v &#124; k : v , k : v &#93; `` : DCNL ``param = \ &apos; key-1 : val-1 , key-2 : val-2 &#124; key-1 : val-1 , key-2 : val-2 &#124; key-1 : val-1 , key-2 : val-2 \ &apos; `` DCNL JSON : `` \ &apos; j { ... } j \ &apos; `` : DCNL ``cert-key-chain = \ &apos; j { &quot; default &quot; : { &quot; cert &quot; : &quot; default.crt &quot; , &quot; chain &quot; : &quot; default.crt &quot; , &quot; key &quot; : &quot; default.key &quot; } } j \ &apos; `` DCNL Escaping Delimiters : DCNL Use `` \ , `` or `` \ : `` or `` \ &#124; `` to escape characters which shouldn \ &apos; t DCNL be treated as delimiters i.e. ``ciphers = \ &apos; DEFAULT \ : ! SSLv3 \ &apos; `` DCNL CLI Examples : : DCNL salt \ &apos; * \ &apos; bigip.modify _ profile bigip admin admin http my-http-profile defaultsFrom = \ &apos; / Common / http \ &apos; DCNL salt \ &apos; * \ &apos; bigip.modify _ profile bigip admin admin http my-http-profile defaultsFrom = \ &apos; / Common / http \ &apos; \ DCNL enforcement = maxHeaderCount : 3200 , maxRequests : 10 DCNL salt \ &apos; * \ &apos; bigip.modify _ profile bigip admin admin client-ssl my-client-ssl-1 retainCertificate = false \ DCNL ciphers = \ &apos; DEFAULT \ : ! SSLv3 \ &apos; DCNL cert _ key _ chain = \ &apos; j { &quot; default &quot; : { &quot; cert &quot; : &quot; default.crt &quot; , &quot; chain &quot; : &quot; default.crt &quot; , &quot; key &quot; : &quot; default.key &quot; } } j \ &apos; &apos;
def is _ string _ secure ( string ) : DCNL &apos; Validates that this string does not contain any possible characters DCNL that are indicative of a security breach . DCNL Args : DCNL string : The string to validate DCNL Returns : DCNL True if the string is valid , False otherwise&apos;
def _ try _ all ( image , methods = None , figsize = None , num _ cols = 2 , verbose = True ) : DCNL &apos; Returns a figure comparing the outputs of different methods . DCNL Parameters DCNL image : ( N , M ) ndarray DCNL Input image . DCNL methods : dict , optional DCNL Names and associated functions . DCNL Functions must take and return an image . DCNL figsize : tuple , optional DCNL Figure size ( in inches ) . DCNL num _ cols : int , optional DCNL Number of columns . DCNL verbose : bool , optional DCNL Print function name for each method . DCNL Returns DCNL fig , ax : tuple DCNL Matplotlib figure and axes . &apos; 
def size ( N ) : DCNL &apos; size ( N : long ) : int DCNL Returns the size of the number N in bits . &apos; 
def _ media _ path _ url _ from _ info ( root _ desc , path _ url ) : DCNL &apos; Creates an absolute media path URL . DCNL Constructed using the API root URI and service path from the discovery DCNL document and the relative path for the API method . DCNL Args : DCNL root _ desc : Dictionary ; the entire original deserialized discovery document . DCNL path _ url : String ; the relative URL for the API method . Relative to the API DCNL root , which is specified in the discovery document . DCNL Returns : DCNL String ; the absolute URI for media upload for the API method . &apos; 
def test _ json ( ) : DCNL &apos; Ensure that the json input format works as intended&apos;
def convertFsDirWavToWav ( dirName , Fs , nC ) : DCNL &apos; This function converts the WAV files stored in a folder to WAV using a different sampling freq and number of channels . DCNL ARGUMENTS : DCNL - dirName : the path of the folder where the WAVs are stored DCNL - Fs : the sampling rate of the generated WAV files DCNL - nC : the number of channesl of the generated WAV files&apos;
def parse _ as _ json ( lines ) : DCNL &apos; Parse lines into json objects&apos;
def _ read _ signify _ ed25519 _ signature ( signature _ file ) : DCNL &apos; Read a Ed25519 signature file created with OpenBSD signify . DCNL http : / / man.openbsd.org / OpenBSD-current / man1 / signify.1&apos;
def glob _ escape ( input _ string ) : DCNL &apos; Escapes the given string with `` &#91; c &#93; `` pattern . Examples : DCNL &gt; &gt; &gt; from coalib.parsing.Globbing import glob _ escape DCNL &gt; &gt; &gt; glob _ escape ( \ &apos; test ( 1 ) \ &apos; ) DCNL \ &apos; test &#91; ( &#93; 1 &#91; ) &#93; \ &apos; DCNL &gt; &gt; &gt; glob _ escape ( \ &apos; test folder ? \ &apos; ) DCNL \ &apos; test folder &#91; ? &#93; \ &apos; DCNL &gt; &gt; &gt; glob _ escape ( \ &apos; test * folder \ &apos; ) DCNL \ &apos; test &#91; * &#93; folder \ &apos; DCNL : param input _ string : String that is to be escaped with `` &#91; &#93; `` . DCNL : return : Escaped string in which all the special glob characters DCNL `` ( ) &#91; &#93; &#124; ? * `` are escaped . &apos; 
def get _ info ( process = None , interval = 0 , with _ childs = False ) : DCNL &apos; Return information about a process . ( can be an pid or a Process object ) DCNL If process is None , will return the information about the current process . &apos; 
def delete _ blob ( bucket _ name , blob _ name ) : DCNL &apos; Deletes a blob from the bucket . &apos; 
@ must _ be _ valid _ project DCNL @ must _ be _ contributor _ or _ public DCNL @ must _ not _ be _ registration DCNL def togglewatch _ post ( auth , node , * * kwargs ) : DCNL &apos; View for toggling watch mode for a node . &apos; 
def formatstring ( cols , colwidth = _ colwidth , spacing = _ spacing ) : DCNL &apos; Returns a string formatted from n strings , centered within n columns . &apos; 
def import _ library ( taglib _ module ) : DCNL &apos; Load a template tag library module . DCNL Verifies that the library contains a \ &apos; register \ &apos; attribute , and DCNL returns that attribute as the representation of the library&apos;
def fdr _ correction ( pvals , alpha = 0.05 , method = &apos; indep &apos; ) : DCNL &apos; P-value correction with False Discovery Rate ( FDR ) . DCNL Correction for multiple comparison using FDR . DCNL This covers Benjamini / Hochberg for independent or positively correlated and DCNL Benjamini / Yekutieli for general or negatively correlated tests . DCNL Parameters DCNL pvals : array _ like DCNL set of p-values of the individual tests . DCNL alpha : float DCNL error rate DCNL method : \ &apos; indep \ &apos; &#124; \ &apos; negcorr \ &apos; DCNL If \ &apos; indep \ &apos; it implements Benjamini / Hochberg for independent or if DCNL \ &apos; negcorr \ &apos; it corresponds to Benjamini / Yekutieli . DCNL Returns DCNL reject : array , bool DCNL True if a hypothesis is rejected , False if not DCNL pval _ corrected : array DCNL pvalues adjusted for multiple hypothesis testing to limit FDR DCNL Notes DCNL Reference : DCNL Genovese CR , Lazar NA , Nichols T. DCNL Thresholding of statistical maps in functional neuroimaging using the false DCNL discovery rate . Neuroimage . 2002 Apr ; 15 ( 4 ) : 870-8 . &apos; 
def p _ namespace _ scope ( p ) : DCNL &apos; namespace _ scope : \ &apos; * \ &apos; DCNL &#124; IDENTIFIER&apos;
def waist2rayleigh ( w , wavelen ) : DCNL &apos; Calculate the rayleigh range from the waist of a gaussian beam . DCNL See Also DCNL rayleigh2waist , BeamParameter DCNL Examples DCNL &gt; &gt; &gt; from sympy.physics.optics import waist2rayleigh DCNL &gt; &gt; &gt; from sympy import symbols DCNL &gt; &gt; &gt; w , wavelen = symbols ( \ &apos; w wavelen \ &apos; ) DCNL &gt; &gt; &gt; waist2rayleigh ( w , wavelen ) DCNL pi * w * * 2 / wavelen&apos;
def count _ sprintf _ parameters ( string ) : DCNL &apos; Counts the number of sprintf parameters in a string . &apos; 
def GetBatchJob ( client , batch _ job _ id ) : DCNL &apos; Retrieves the BatchJob with the given id . DCNL Args : DCNL client : an instantiated AdWordsClient used to retrieve the BatchJob . DCNL batch _ job _ id : a long identifying the BatchJob to be retrieved . DCNL Returns : DCNL The BatchJob associated with the given id . &apos; 
def reverse _ url ( handler _ name , key _ name = None , key _ value = None , kwargs = None ) : DCNL &apos; Creates the URL for the given handler . DCNL The optional key _ name and key _ value are passed in as kwargs to the handler . &apos; 
def isInIOThread ( ) : DCNL &apos; Are we in the thread responsible for I / O requests ( the event loop ) ? &apos;
def scan _ postfix _ cleanup _ line ( date , _ , collector ) : DCNL &apos; Scan a postfix cleanup log line and extract interesting data DCNL It is assumed that every log of postfix / cleanup indicates an email that was successfulfy received by Postfix . &apos; 
def test _ different _ caller ( ) : DCNL &apos; It \ &apos; s possible to not use names , but another function result or an array DCNL index and then get the call signature of it . &apos; 
def fuse _ getitem ( dsk , func , place ) : DCNL &apos; Fuse getitem with lower operation DCNL Parameters DCNL dsk : dict DCNL dask graph DCNL func : function DCNL A function in a task to merge DCNL place : int DCNL Location in task to insert the getitem key DCNL Examples DCNL &gt; &gt; &gt; def load ( store , partition , columns ) : DCNL ... pass DCNL &gt; &gt; &gt; dsk = { \ &apos; x \ &apos; : ( load , \ &apos; store \ &apos; , \ &apos; part \ &apos; , &#91; \ &apos; a \ &apos; , \ &apos; b \ &apos; &#93; ) , DCNL ... \ &apos; y \ &apos; : ( getitem , \ &apos; x \ &apos; , \ &apos; a \ &apos; ) } DCNL &gt; &gt; &gt; dsk2 = fuse _ getitem ( dsk , load , 3 ) # columns in arg place 3 DCNL &gt; &gt; &gt; cull ( dsk2 , \ &apos; y \ &apos; ) &#91; 0 &#93; DCNL { \ &apos; y \ &apos; : ( &lt; function load at ... &gt; , \ &apos; store \ &apos; , \ &apos; part \ &apos; , \ &apos; a \ &apos; ) } &apos;
def find _ dataset _ changes ( uuid , current _ state , desired _ state ) : DCNL &apos; Find what actions need to be taken to deal with changes in dataset DCNL manifestations between current state and desired state of the cluster . DCNL XXX The logic here assumes the mountpoints have not changed , DCNL and will act unexpectedly if that is the case . See DCNL https : / / clusterhq.atlassian.net / browse / FLOC-351 for more details . DCNL XXX The logic here assumes volumes are never added or removed to DCNL existing applications , merely moved across nodes . As a result test DCNL coverage for those situations is not implemented . See DCNL https : / / clusterhq.atlassian.net / browse / FLOC-352 for more details . DCNL : param UUID uuid : The uuid of the node for which to find changes . DCNL : param Deployment current _ state : The old state of the cluster on which the DCNL changes are based . DCNL : param Deployment desired _ state : The new state of the cluster towards which DCNL the changes are working . DCNL : return DatasetChanges : Changes to datasets that will be needed in DCNL order to match desired configuration . &apos; 
def test _ all _ fields ( script ) : DCNL &apos; Test that all the fields are present&apos;
def neg _ sampling ( W _ list , b _ list , nsamples , beta = 1.0 , pa _ bias = None , marginalize _ odd = True , theano _ rng = None ) : DCNL &apos; Generate a sample from the intermediate distribution defined at inverse DCNL temperature \ &apos; beta \ &apos; , starting from state \ &apos; nsamples \ &apos; . See file docstring for DCNL equation of p _ k ( h1 ) . DCNL Parameters DCNL W _ list : array-like object of theano shared variables DCNL Weight matrices of the DBM . Its first element is ignored , since in the DCNL Pylearn2 framework a visible layer does not have a weight matrix . DCNL b _ list : array-like object of theano shared variables DCNL Biases of the DBM DCNL nsamples : array-like object of theano shared variables DCNL Negative samples corresponding to the previous states DCNL beta : theano.tensor.scalar DCNL Inverse temperature parameter DCNL marginalize _ odd : boolean DCNL Whether to marginalize odd layers DCNL theano _ rng : theano RandomStreams DCNL Random number generator DCNL Returns DCNL new _ nsamples : array-like object of symbolic matrices DCNL new _ nsamples &#91; i &#93; contains new samples for i-th layer . &apos; 
def roundrobin ( iterables ) : DCNL &apos; roundrobin ( \ &apos; ABC \ &apos; , \ &apos; D \ &apos; , \ &apos; EF \ &apos; ) -- &gt; A D E B F C&apos;
def _ pipeline _ present _ with _ definition ( name , expected _ pipeline _ objects , expected _ parameter _ objects , expected _ parameter _ values , region , key , keyid , profile ) : DCNL &apos; Return true if the pipeline exists and the definition matches . DCNL name DCNL The name of the pipeline . DCNL expected _ pipeline _ objects DCNL Pipeline objects that must match the definition . DCNL expected _ parameter _ objects DCNL Parameter objects that must match the definition . DCNL expected _ parameter _ values DCNL Parameter values that must match the definition . DCNL region DCNL Region to connect to . DCNL key DCNL Secret key to be used . DCNL keyid DCNL Access key to be used . DCNL profile DCNL A dict with region , key and keyid , or a pillar key ( string ) DCNL that contains a dict with region , key and keyid . &apos; 
@ require _ admin _ context DCNL def instance _ type _ access _ add ( context , flavor _ id , project _ id ) : DCNL &apos; Add given tenant to the flavor access list . &apos; 
def parse _ inlinefunc ( string , strip = False , * * kwargs ) : DCNL &apos; Parse the incoming string . DCNL Args : DCNL string ( str ) : The incoming string to parse . DCNL strip ( bool , optional ) : Whether to strip function calls rather than DCNL execute them . DCNL Kwargs : DCNL session ( Session ) : This is sent to this function by Evennia when triggering DCNL it . It is passed to the inlinefunc . DCNL kwargs ( any ) : All other kwargs are also passed on to the inlinefunc . &apos; 
def _ log ( msg , facility , loglevel ) : DCNL &apos; Outputs a debugging message&apos;
def update _ single ( f , new ) : DCNL &apos; update in tabSingles&apos;
def p _ expression _ uminus ( p ) : DCNL &apos; expression : \ &apos; - \ &apos; expression % prec UMINUS&apos;
def convert _ case ( s ) : DCNL &apos; Given a string in snake case , convert to CamelCase DCNL Ex : DCNL date _ created - &gt; DateCreated&apos;
def normal ( state , text , i , formats , user _ data ) : DCNL &apos; The normal state ( outside content blocks { } ) &apos;
def istraceback ( object ) : DCNL &apos; Return true if the object is a traceback . DCNL Traceback objects provide these attributes : DCNL tb _ frame frame object at this level DCNL tb _ lasti index of last attempted instruction in bytecode DCNL tb _ lineno current line number in Python source code DCNL tb _ next next inner traceback object ( called by this level ) &apos;
def list _ of _ array _ equal ( s , t ) : DCNL &apos; Compare two lists of ndarrays DCNL s , t : lists of numpy.ndarrays&apos;
def merge _ ownership _ periods ( mappings ) : DCNL &apos; Given a dict of mappings where the values are lists of DCNL OwnershipPeriod objects , returns a dict with the same structure with DCNL new OwnershipPeriod objects adjusted so that the periods have no DCNL gaps . DCNL Orders the periods chronologically , and pushes forward the end date DCNL of each period to match the start date of the following period . The DCNL end date of the last period pushed forward to the max Timestamp . &apos; 
def _ key _ split ( matchobj ) : DCNL &apos; Expands a { key a + b + c } syntax into &lt; span class = &quot; key &quot; &gt; a &lt; / span &gt; + ... DCNL More explicitly , it takes a regex matching { key ctrl + alt + del } and returns : DCNL &lt; span class = &quot; key &quot; &gt; ctrl &lt; / span &gt; + &lt; span class = &quot; key &quot; &gt; alt &lt; / span &gt; + DCNL &lt; span class = &quot; key &quot; &gt; del &lt; / span &gt; &apos;
@ require _ POST DCNL def post _ receive _ hook _ close _ submitted ( request , local _ site _ name = None , repository _ id = None , hosting _ service _ id = None , hooks _ uuid = None ) : DCNL &apos; Closes review requests as submitted automatically after a push . &apos; 
@ require _ context DCNL def group _ types _ get _ by _ name _ or _ id ( context , group _ type _ list ) : DCNL &apos; Return a dict describing specific group _ type . &apos; 
def setup _ logging ( args ) : DCNL &apos; Prepares logging for the program&apos;
def mixing _ dict ( xy , normalized = False ) : DCNL &apos; Return a dictionary representation of mixing matrix . DCNL Parameters DCNL xy : list or container of two-tuples DCNL Pairs of ( x , y ) items . DCNL attribute : string DCNL Node attribute key DCNL normalized : bool ( default = False ) DCNL Return counts if False or probabilities if True . DCNL Returns DCNL d : dictionary DCNL Counts or Joint probability of occurrence of values in xy . &apos; 
def move _ by _ taskmap ( map , * * kwargs ) : DCNL &apos; Move tasks by matching from a ``task _ name : queue`` mapping . DCNL ``queue`` is the queue to move the task to . DCNL Example : DCNL &gt; &gt; &gt; move _ by _ taskmap ( { DCNL ... \ &apos; tasks.add \ &apos; : Queue ( \ &apos; name \ &apos; ) , DCNL ... \ &apos; tasks.mul \ &apos; : Queue ( \ &apos; name \ &apos; ) , &apos;
def gen _ preprocess _ options ( macros , include _ dirs ) : DCNL &apos; Generate C pre-processor options ( -D , -U , -I ) as used by at least DCNL two types of compilers : the typical Unix compiler and Visual C + + . DCNL \ &apos; macros \ &apos; is the usual thing , a list of 1- or 2-tuples , where ( name , ) DCNL means undefine ( -U ) macro \ &apos; name \ &apos; , and ( name , value ) means define ( -D ) DCNL macro \ &apos; name \ &apos; to \ &apos; value \ &apos; . \ &apos; include _ dirs \ &apos; is just a list of directory DCNL names to be added to the header file search path ( -I ) . Returns a list DCNL of command-line options suitable for either Unix compilers or Visual DCNL C + +  . &apos; 
def convert _ time _ to _ utc ( timestr ) : DCNL &apos; Take a string like 08 : 00 : 00 and convert it to a unix timestamp . &apos; 
def share _ db ( ) : DCNL &apos; Generate db client for sharejs db&apos;
def comparison _ type ( logical _ line , noqa ) : DCNL &apos; Object type comparisons should always use isinstance ( ) . DCNL Do not compare types directly . DCNL Okay : if isinstance ( obj , int ) : DCNL E721 : if type ( obj ) is type ( 1 ) : DCNL When checking if an object is a string , keep in mind that it might be a DCNL unicode string too ! In Python 2.3 , str and unicode have a common base DCNL class , basestring , so you can do : DCNL Okay : if isinstance ( obj , basestring ) : DCNL Okay : if type ( a1 ) is type ( b1 ) : &apos;
def create _ patch _ ports ( source , destination ) : DCNL &apos; Hook up two OVS bridges . DCNL The result is two patch ports , each end connected to a bridge . DCNL The two patch port names will start with \ &apos; patch- \ &apos; , followed by identical DCNL four characters . For example patch-xyzw-fedora , and patch-xyzw-ubuntu , DCNL where fedora and ubuntu are random strings . DCNL : param source : Instance of OVSBridge DCNL : param destination : Instance of OVSBridge&apos;
@ image _ comparison ( baseline _ images = &#91; u &apos;colorbar _ extensions _ uniform &apos; , u &apos;colorbar _ extensions _ proportional &apos; &#93; , extensions = &#91; u &apos;png &apos; &#93; ) DCNL def test _ colorbar _ extension _ length ( ) : DCNL &apos; Test variable length colorbar extensions . &apos; 
def vpn _ ping ( address , port , timeout = 0.05 , session _ id = None ) : DCNL &apos; Sends a vpn negotiation packet and returns the server session . DCNL Returns False on a failure . Basic packet structure is below . DCNL Client packet ( 14 bytes ) : : DCNL 0 1 8 9 13 DCNL &#124; x &#124; cli _ id &#124; ? ? ? ? ? &#124; DCNL x = packet identifier 0x38 DCNL cli _ id = 64 bit identifier DCNL ? = unknown , probably flags / padding DCNL Server packet ( 26 bytes ) : : DCNL 0 1 8 9 13 14 21 2225 DCNL &#124; x &#124; srv _ id &#124; ? ? ? ? ? &#124; cli _ id &#124; ? ? ? ? &#124; DCNL x = packet identifier 0x40 DCNL cli _ id = 64 bit identifier DCNL ? = unknown , probably flags / padding DCNL bit 9 was 1 and the rest were 0 in testing&apos;
def get _ documentation ( ) : DCNL &apos; Search documentation and append to current buffer . &apos; 
def httpdate ( date _ obj ) : DCNL &apos; Formats a datetime object for use in HTTP headers . &apos; 
def cmServiceRequest ( PriorityLevel _ presence = 0 ) : DCNL &apos; CM SERVICE REQUEST Section 9.2.9&apos;
def get _ ring ( ) : DCNL &apos; Return the ring status in a structured way . DCNL Returns : DCNL A list of nodes represented by dictionaries . &apos; 
def skill _ type ( ) : DCNL &apos; Skill Types Controller&apos;
def running ( ctid _ or _ name ) : DCNL &apos; Check if the container is running . &apos; 
def get _ int ( int _ str , default = _ no _ default ) : DCNL &apos; For convenience a get-like method for taking the int ( ) of a string . DCNL : param int _ str : the string to convert to integer DCNL : param default : an optional value to return if ValueError is raised . DCNL : return : the int ( ) of « int _ str » or « default » on exception . &apos; 
def is _ color _ like ( c ) : DCNL &apos; Return * True * if * c * can be converted to * RGB * &apos;
def getEvaluatorSplitWords ( value ) : DCNL &apos; Get split words for evaluators . &apos; 
@ dispatch ( object ) DCNL def shape ( expr ) : DCNL &apos; Shape of expression DCNL &gt; &gt; &gt; symbol ( \ &apos; s \ &apos; , \ &apos; 3 * 5 * int32 \ &apos; ) .shape DCNL ( 3 , 5 ) DCNL Works on anything discoverable DCNL &gt; &gt; &gt; shape ( &#91; &#91; 1 , 2 &#93; , &#91; 3 , 4 &#93; &#93; ) DCNL ( 2 , 2 ) &apos;
def sample ( prediction ) : DCNL &apos; Turn a ( column ) prediction into 1-hot encoded samples . &apos; 
def systemd _ result _ parser ( command ) : DCNL &apos; Parse results from systemd style commands . DCNL : param command : command . DCNL : type command : str . DCNL : return : different from the command . DCNL command is status : return true if service is running . DCNL command is is _ enabled : return true if service is enalbled . DCNL command is list : return a dict from service name to status . DCNL command is others : return true if operate success . &apos; 
def _ get _ lut ( ) : DCNL &apos; Helper to get the FreeSurfer LUT . &apos; 
def page _ not _ found ( request , template _ name = &apos; 404.html &apos; ) : DCNL &apos; Default 404 handler , which looks for the requested URL in the redirects DCNL table , redirects if found , and displays 404 page if not redirected . DCNL Templates : `404.html` DCNL Context : DCNL request _ path DCNL The path of the requested URL ( e.g. , \ &apos; / app / pages / bad _ page / \ &apos; ) &apos;
def test _ show _ verbose _ installer ( script , data ) : DCNL &apos; Test that the installer is shown ( this currently needs a wheel install ) &apos;
def rsolve _ poly ( coeffs , f , n , * * hints ) : DCNL &apos; Given linear recurrence operator ` \ operatorname { L } ` of order DCNL `k` with polynomial coefficients and inhomogeneous equation DCNL ` \ operatorname { L } y = f` , where `f` is a polynomial , we seek for DCNL all polynomial solutions over field `K` of characteristic zero . DCNL The algorithm performs two basic steps : DCNL ( 1 ) Compute degree `N` of the general polynomial solution . DCNL ( 2 ) Find all polynomials of degree `N` or less DCNL of ` \ operatorname { L } y = f` . DCNL There are two methods for computing the polynomial solutions . DCNL If the degree bound is relatively small , i.e. it \ &apos; s smaller than DCNL or equal to the order of the recurrence , then naive method of DCNL undetermined coefficients is being used . This gives system DCNL of algebraic equations with `N + 1` unknowns . DCNL In the other case , the algorithm performs transformation of the DCNL initial equation to an equivalent one , for which the system of DCNL algebraic equations has only `r` indeterminates . This method is DCNL quite sophisticated ( in comparison with the naive one ) and was DCNL invented together by Abramov , Bronstein and Petkovsek . DCNL It is possible to generalize the algorithm implemented here to DCNL the case of linear q-difference and differential equations . DCNL Lets say that we would like to compute `m`-th Bernoulli polynomial DCNL up to a constant . For this we can use `b ( n + 1 ) - b ( n ) = m n ^ { m-1 } ` DCNL recurrence , which has solution `b ( n ) = B _ m + C` . For example : DCNL &gt; &gt; &gt; from sympy import Symbol , rsolve _ poly DCNL &gt; &gt; &gt; n = Symbol ( \ &apos; n \ &apos; , integer = True ) DCNL &gt; &gt; &gt; rsolve _ poly ( &#91; -1 , 1 &#93; , 4 * n * * 3 , n ) DCNL C0 + n * * 4 - 2 * n * * 3 + n * * 2 DCNL References DCNL .. &#91; 1 &#93; S. A. Abramov , M. Bronstein and M. Petkovsek , On polynomial DCNL solutions of linear operator equations , in : T. Levelt , ed . , DCNL Proc . ISSAC \ &apos; 95 , ACM Press , New York , 1995 , 290-296 . DCNL .. &#91; 2 &#93; M. Petkovsek , Hypergeometric solutions of linear recurrences DCNL with polynomial coefficients , J. Symbolic Computation , DCNL 14 ( 1992 ) , 243-264 . DCNL .. &#91; 3 &#93; M. Petkovsek , H. S. Wilf , D. Zeilberger , A = B , 1996 . &apos; 
def base64 _ encodestring ( instr ) : DCNL &apos; Encode a string as base64 using the &quot; legacy &quot; Python interface . DCNL Among other possible differences , the &quot; legacy &quot; encoder includes DCNL a newline ( \ &apos; \ n \ &apos; ) character after every 76 characters and always DCNL at the end of the encoded string . DCNL .. versionadded : : 2014.7.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; hashutil.base64 _ encodestring \ &apos; get salted \ &apos; &apos;
def cmd _ map ( args ) : DCNL &apos; map command&apos;
def get _ disable _ keyboard _ on _ lock ( ) : DCNL &apos; Get whether or not the keyboard should be disabled when the X Serve enclosure DCNL lock is engaged . DCNL : return : True if disable keyboard on lock is on , False if off DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; system.get _ disable _ keyboard _ on _ lock&apos;
def course _ detail ( request , username , course _ key ) : DCNL &apos; Return a single course identified by `course _ key` . DCNL The course must be visible to the user identified by `username` and the DCNL logged-in user should have permission to view courses available to that DCNL user . DCNL Arguments : DCNL request ( HTTPRequest ) : DCNL Used to identify the logged-in user and to instantiate the course DCNL module to retrieve the course about description DCNL username ( string ) : DCNL The name of the user `requesting _ user would like to be identified as . DCNL course _ key ( CourseKey ) : Identifies the course of interest DCNL Return value : DCNL `CourseOverview` object representing the requested course&apos;
def extended _ linecache _ checkcache ( filename = None , orig _ checkcache = linecache.checkcache ) : DCNL &apos; Extend linecache.checkcache to preserve the &lt; pyshell # ... &gt; entries DCNL Rather than repeating the linecache code , patch it to save the DCNL &lt; pyshell # ... &gt; entries , call the original linecache.checkcache ( ) DCNL ( which destroys them ) , and then restore the saved entries . DCNL orig _ checkcache is bound at definition time to the original DCNL method , allowing it to be patched . &apos; 
def convertSP ( pySp , newSeed ) : DCNL &apos; Given an instance of a python spatial _ pooler return an instance of the CPP DCNL spatial _ pooler with identical parameters . &apos; 
def pop ( queue , quantity = 1 ) : DCNL &apos; Pop one or more or all items from the queue return them . &apos; 
def add _ resource _ manager _ extra _ kwargs _ hook ( f , hook ) : DCNL &apos; Add hook to bind CLI arguments to ResourceManager calls . DCNL The `do _ foo` calls in shell.py will receive CLI args and then in turn pass DCNL them through to the ResourceManager . Before passing through the args , the DCNL hooks registered here will be called , giving us a chance to add extra DCNL kwargs ( taken from the command-line ) to what \ &apos; s passed to the DCNL ResourceManager . &apos; 
def test _ barn _ prefixes ( ) : DCNL &apos; Regression test for https : / / github.com / astropy / astropy / issues / 3753&apos;
@ treeio _ login _ required DCNL def ajax _ location _ lookup ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Returns a list of matching locations&apos;
def ping ( host = None , port = None , db = None , password = None ) : DCNL &apos; Ping the server , returns False on connection errors DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; redis.ping&apos;
def create _ resource ( ) : DCNL &apos; ResourceTypeAssociation resource factory method&apos;
def do _ cli ( manager , options ) : DCNL &apos; Handle irc cli&apos;
@ catch _ error ( &apos; queue DCSP the DCSP specified DCSP image DCSP for DCSP caching &apos; ) DCNL def queue _ image ( options , args ) : DCNL &apos; % ( prog ) s queue-image &lt; IMAGE _ ID &gt; &#91; options &#93; DCNL Queues an image for caching&apos;
def _ _ virtual _ _ ( ) : DCNL &apos; Only load if the Zenoss execution module is available . &apos; 
def hex _ digest ( x ) : DCNL &apos; Returns a short , mostly hexadecimal hash of a numpy ndarray&apos;
def starts _ with ( text , substring ) : DCNL &apos; Assert `text` starts with `substring` . &apos; 
def minimum ( image , selem , out = None , mask = None , shift _ x = False , shift _ y = False ) : DCNL &apos; Return local minimum of an image . DCNL Parameters DCNL image : 2-D array ( uint8 , uint16 ) DCNL Input image . DCNL selem : 2-D array DCNL The neighborhood expressed as a 2-D array of 1 \ &apos; s and 0 \ &apos; s . DCNL out : 2-D array ( same dtype as input ) DCNL If None , a new array is allocated . DCNL mask : ndarray DCNL Mask array that defines ( &gt; 0 ) area of the image included in the local DCNL neighborhood . If None , the complete image is used ( default ) . DCNL shift _ x , shift _ y : int DCNL Offset added to the structuring element center point . Shift is bounded DCNL to the structuring element sizes ( center must be inside the given DCNL structuring element ) . DCNL Returns DCNL out : 2-D array ( same dtype as input image ) DCNL Output image . DCNL See also DCNL skimage.morphology.erosion DCNL Notes DCNL The lower algorithm complexity makes `skimage.filters.rank.minimum` more DCNL efficient for larger images and structuring elements . DCNL Examples DCNL &gt; &gt; &gt; from skimage import data DCNL &gt; &gt; &gt; from skimage.morphology import disk DCNL &gt; &gt; &gt; from skimage.filters.rank import minimum DCNL &gt; &gt; &gt; img = data.camera ( ) DCNL &gt; &gt; &gt; out = minimum ( img , disk ( 5 ) ) &apos;
def entropy _ of _ byte ( packets , position ) : DCNL &apos; Compute the entropy of a byte at a given offset&apos;
def hrm _ competency _ list _ layout ( list _ id , item _ id , resource , rfields , record ) : DCNL &apos; Default dataList item renderer for Skills on the HRM Profile DCNL @ param list _ id : the HTML ID of the list DCNL @ param item _ id : the HTML ID of the item DCNL @ param resource : the S3Resource to render DCNL @ param rfields : the S3ResourceFields to render DCNL @ param record : the record as dict&apos;
@ pytest.fixture ( scope = &apos; session &apos; ) DCNL def stubs ( ) : DCNL &apos; Provide access to stub objects useful for testing . &apos; 
def get _ repository _ file _ contents ( app , file _ path , repository _ id , is _ admin = False ) : DCNL &apos; Return the display-safe contents of a repository file for display in a browser . &apos; 
def read _ stored _ checksum ( target , timestamped = True ) : DCNL &apos; Read the checksum . DCNL Returns the checksum ( as hex ) or None . &apos; 
def _ enable _ libraries ( libraries ) : DCNL &apos; Add enabled libraries to the path . DCNL Args : DCNL libraries : A repeated Config.Library containing the libraries to enable . DCNL Returns : DCNL A list of paths containing the enabled libraries . &apos; 
@ util.positional ( 2 ) DCNL def new _ webhook _ channel ( url , token = None , expiration = None , params = None ) : DCNL &apos; Create a new webhook Channel . DCNL Args : DCNL url : str , URL to post notifications to . DCNL token : str , An arbitrary string associated with the channel that DCNL is delivered to the target address with each notification delivered DCNL over this channel . DCNL expiration : datetime.datetime , A time in the future when the channel DCNL should expire . Can also be None if the subscription should use the DCNL default expiration . Note that different services may have different DCNL limits on how long a subscription lasts . Check the response from the DCNL watch ( ) method to see the value the service has set for an expiration DCNL time . DCNL params : dict , Extra parameters to pass on channel creation . Currently DCNL not used for webhook channels . &apos; 
def main ( ) : DCNL &apos; Get the current package directory . DCNL Prints the package directory out so callers can consume it . &apos; 
def showroom _ get _ roomid _ by _ room _ url _ key ( room _ url _ key ) : DCNL &apos; str- &gt; str&apos;
def deserialize ( collection , topological = True ) : DCNL &apos; Load a collection from file system DCNL @ param Collection collection collection DCNL @ param bool topological&apos;
def get _ rules ( ) : DCNL &apos; Get the virtual server rules DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; lvs.get _ rules&apos;
def group _ membership ( ) : DCNL &apos; RESTful CRUD controller&apos;
def mu _ law _ encode ( audio , quantization _ channels ) : DCNL &apos; Quantizes waveform amplitudes . &apos; 
def location _ to _ query ( location , wildcard = True , tag = &apos; i4x &apos; ) : DCNL &apos; Takes a Location and returns a SON object that will query for that location by subfields DCNL rather than subdoc . DCNL Fields in location that are None are ignored in the query . DCNL If `wildcard` is True , then a None in a location is treated as a wildcard DCNL query . Otherwise , it is searched for literally&apos;
def _ dict _ to _ list _ ids ( objects ) : DCNL &apos; Convert a dictionary to a list of dictionaries , where each element has DCNL a key value pair { \ &apos; id \ &apos; : key } . This makes it easy to override pillar values DCNL while still satisfying the boto api . &apos; 
def profile _ get ( user , default _ hidden = True ) : DCNL &apos; List profiles for user DCNL user : string DCNL username DCNL default _ hidden : boolean DCNL hide default profiles DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; rbac.profile _ get leo DCNL salt \ &apos; * \ &apos; rbac.profile _ get leo default _ hidden = False&apos;
def avail _ locations ( call = None ) : DCNL &apos; List all available locations&apos;
def size ( key , shape ) : DCNL &apos; Finds the dimensions of a sliced expression . DCNL Args : DCNL key : The key used to index / slice . DCNL shape : The shape ( row , col ) of the expression . DCNL Returns : DCNL The dimensions of the expression as ( rows , cols )  . &apos; 
def format _ html ( format _ string , * args , * * kwargs ) : DCNL &apos; Similar to str % foo , but passes all arguments through conditional _ websafe , DCNL and calls \ &apos; unsafe \ &apos; on the result . This function should be used instead DCNL of str.format or % interpolation to build up small HTML fragments . DCNL Example : DCNL format _ html ( &quot; Are you % s ? % s &quot; , name , unsafe ( checkbox _ html ) ) &apos;
def chfullname ( name , fullname ) : DCNL &apos; Change the full name of the user DCNL : param str name : DCNL user name for which to change the full name DCNL : param str fullname : DCNL the new value for the full name DCNL : return : DCNL True if successful . False is unsuccessful . DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; user.chfullname user \ &apos; First Last \ &apos; &apos;
@ export _ as _ api DCNL def update _ universe ( id _ or _ symbols ) : DCNL &apos; This method takes one or a list of id _ or _ symbol ( s ) as argument ( s ) , to DCNL update the current subscription set of the instruments . It takes DCNL effect on the next bar event . DCNL : param id _ or _ symbols : one or a list of id _ or _ symbol ( s ) . DCNL : type id _ or _ symbols : str or an iterable of strings&apos;
def get _ deleted _ objects ( objs , opts , user , admin _ site , using ) : DCNL &apos; Find all objects related to ``objs`` that should also be deleted . ``objs`` DCNL must be a homogenous iterable of objects ( e.g. a QuerySet ) . DCNL Returns a nested list of strings suitable for display in the DCNL template with the ``unordered _ list`` filter . &apos; 
def _ interpolate _ bads _ eeg ( inst ) : DCNL &apos; Interpolate bad EEG channels . DCNL Operates in place . DCNL Parameters DCNL inst : mne.io.Raw , mne.Epochs or mne.Evoked DCNL The data to interpolate . Must be preloaded . &apos; 
def beacons ( opts , functions , context = None ) : DCNL &apos; Load the beacon modules DCNL : param dict opts : The Salt options dictionary DCNL : param dict functions : A dictionary of minion modules , with module names as DCNL keys and funcs as values . &apos; 
def find _ vpc ( module , vpc _ conn , vpc _ id = None , cidr = None ) : DCNL &apos; Finds a VPC that matches a specific id or cidr + tags DCNL module : AnsibleModule object DCNL vpc _ conn : authenticated VPCConnection connection object DCNL Returns : DCNL A VPC object that matches either an ID or CIDR and one or more tag values&apos;
@ attr ( &apos; root &apos; ) DCNL def onlyroot ( meth ) : DCNL &apos; Function to decorate tests that should be called as root . DCNL Raises a nose SkipTest exception if the user doesn \ &apos; t have root permissions . &apos; 
def alter _ db ( name , character _ set = None , collate = None , * * connection _ args ) : DCNL &apos; Modify database using ``ALTER DATABASE % ( dbname ) s CHARACTER SET % ( charset ) s DCNL COLLATE % ( collation ) s ; `` query . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; mysql.alter _ db testdb charset = \ &apos; latin1 \ &apos; &apos;
def extract _ javascript _ msgids ( source ) : DCNL &apos; Return message ids of translateable strings in JS source . &apos; 
def filter _ on _ wire _ representation ( ava , acs , required = None , optional = None ) : DCNL &apos; : param ava : A dictionary with attributes and values DCNL : param acs : List of tuples ( Attribute Converter name , DCNL Attribute Converter instance ) DCNL : param required : A list of saml.Attributes DCNL : param optional : A list of saml.Attributes DCNL : return : Dictionary of expected / wanted attributes and values&apos;
def server _ cert _ absent ( name , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Deletes a server certificate . DCNL .. versionadded : : 2015.8.0 DCNL name ( string ) DCNL The name for the server certificate . Do not include the path in this value . DCNL region ( string ) DCNL The name of the region to connect to . DCNL key ( string ) DCNL The key to be used in order to connect DCNL keyid ( string ) DCNL The keyid to be used in order to connect DCNL profile ( string ) DCNL The profile that contains a dict of region , key , keyid&apos;
def generate _ timestamp ( ) : DCNL &apos; Get seconds since epoch ( UTC ) . DCNL Per `section 3.3` _ of the OAuth 1 RFC 5849 spec . DCNL Per `section 3.2.1` _ of the MAC Access Authentication spec . DCNL .. _ `section 3.2.1` : http : / / tools.ietf.org / html / draft-ietf-oauth-v2-http-mac-01 # section-3.2.1 DCNL .. _ `section 3.3` : http : / / tools.ietf.org / html / rfc5849 # section-3.3&apos;
def _ initial _ nodes _ a ( n , k ) : DCNL &apos; Tricomi initial guesses DCNL Computes an initial approximation to the square of the `k`-th DCNL ( positive ) root : math : `x _ k` of the Hermite polynomial : math : `H _ n` DCNL of order : math : `n` . The formula is the one from lemma 3.1 in the DCNL original paper . The guesses are accurate except in the region DCNL near : math : ` \ sqrt { 2n + 1 } ` . DCNL Parameters DCNL n : int DCNL Quadrature order DCNL k : ndarray of type int DCNL Index of roots to compute DCNL Returns DCNL xksq : ndarray DCNL Square of the approximate roots DCNL See Also DCNL initial _ nodes DCNL roots _ hermite _ asy&apos;
def _ handle _ zeros _ in _ scale ( scale , copy = True ) : DCNL &apos; Makes sure that whenever scale is zero , we handle it correctly . DCNL This happens in most scalers when we have constant features . &apos; 
def _ incs _ list _ to _ string ( incs ) : DCNL &apos; Convert incs list to string DCNL &#91; \ &apos; thirdparty \ &apos; , \ &apos; include \ &apos; &#93; - &gt; -I thirdparty -I include&apos;
def _ dnsmasq _ pid _ for ( dev ) : DCNL &apos; Returns the pid for prior dnsmasq instance for a bridge / device . DCNL Returns None if no pid file exists . DCNL If machine has rebooted pid might be incorrect ( caller should check )  . &apos; 
def ipNum ( w , x , y , z ) : DCNL &apos; Generate unsigned int from components of IP address DCNL returns : w &lt; &lt; 24 &#124; x &lt; &lt; 16 &#124; y &lt; &lt; 8 &#124; z&apos;
def create _ figure ( ) : DCNL &apos; Simply create a figure with the default settings&apos;
def getOnePayload ( results ) : DCNL &apos; From the result of a L { Deferred } returned by L { IResolver.lookupAddress } , DCNL return the payload of the first record in the answer section . &apos; 
@ register.tag DCNL def url ( parser , token ) : DCNL &apos; Return an absolute URL matching the given view with its parameters . DCNL This is a way to define links that aren \ &apos; t tied to a particular URL DCNL configuration : : DCNL { % url &quot; url _ name &quot; arg1 arg2 % } DCNL or DCNL { % url &quot; url _ name &quot; name1 = value1 name2 = value2 % } DCNL The first argument is a django.conf.urls.url ( ) name . Other arguments are DCNL space-separated values that will be filled in place of positional and DCNL keyword arguments in the URL . Don \ &apos; t mix positional and keyword arguments . DCNL All arguments for the URL must be present . DCNL For example , if you have a view ``app _ name.views.client _ details`` taking DCNL the client \ &apos; s id and the corresponding line in a URLconf looks like this : : DCNL url ( \ &apos; ^ client / ( \ d + ) / $ \ &apos; , views.client _ details , name = \ &apos; client-detail-view \ &apos; ) DCNL and this app \ &apos; s URLconf is included into the project \ &apos; s URLconf under some DCNL path : : DCNL url ( \ &apos; ^ clients / \ &apos; , include ( \ &apos; app _ name.urls \ &apos; ) ) DCNL then in a template you can create a link for a certain client like this : : DCNL { % url &quot; client-detail-view &quot; client.id % } DCNL The URL will look like `` / clients / client / 123 / `` . DCNL The first argument may also be the name of a template variable that will be DCNL evaluated to obtain the view name or the URL name , e.g. : : DCNL { % with url _ name = &quot; client-detail-view &quot; % } DCNL { % url url _ name client.id % } DCNL { % endwith % } &apos;
def make _ instance ( klass , spec , base64encode = False ) : DCNL &apos; Constructs a class instance containing the specified information DCNL : param klass : The class DCNL : param spec : Information to be placed in the instance ( a dictionary ) DCNL : return : The instance&apos;
def get _ CC _ operators ( ) : DCNL &apos; Returns a tuple ( T1 , T2 ) of unique operators . &apos; 
def _ ValidateSourcesForMSVSProject ( spec , version ) : DCNL &apos; Makes sure if duplicate basenames are not specified in the source list . DCNL Arguments : DCNL spec : The target dictionary containing the properties of the target . DCNL version : The VisualStudioVersion object . &apos; 
def setup ( hass , config ) : DCNL &apos; Setup the InfluxDB component . &apos; 
def moment ( a , moment = 1 , axis = 0 , nan _ policy = &apos; propagate &apos; ) : DCNL &apos; Calculates the nth moment about the mean for a sample . DCNL A moment is a specific quantitative measure of the shape of a set of points . DCNL It is often used to calculate coefficients of skewness and kurtosis due DCNL to its close relationship with them . DCNL Parameters DCNL a : array _ like DCNL data DCNL moment : int or array _ like of ints , optional DCNL order of central moment that is returned . Default is 1 . DCNL axis : int or None , optional DCNL Axis along which the central moment is computed . Default is 0 . DCNL If None , compute over the whole array `a` . DCNL nan _ policy : { \ &apos; propagate \ &apos; , \ &apos; raise \ &apos; , \ &apos; omit \ &apos; } , optional DCNL Defines how to handle when input contains nan . \ &apos; propagate \ &apos; returns nan , DCNL \ &apos; raise \ &apos; throws an error , \ &apos; omit \ &apos; performs the calculations ignoring nan DCNL values . Default is \ &apos; propagate \ &apos; . DCNL Returns DCNL n-th central moment : ndarray or float DCNL The appropriate moment along the given axis or over all values if axis DCNL is None . The denominator for the moment calculation is the number of DCNL observations , no degrees of freedom correction is done . DCNL See also DCNL kurtosis , skew , describe DCNL Notes DCNL The k-th central moment of a data sample is : DCNL .. math : : DCNL m _ k = \ frac { 1 } { n } \ sum _ { i = 1 } ^ n ( x _ i - \ bar { x } ) ^ k DCNL Where n is the number of samples and x-bar is the mean . This function uses DCNL exponentiation by squares &#91; 1 &#93; _ for efficiency . DCNL References DCNL .. &#91; 1 &#93; http : / / eli.thegreenplace.net / 2009 / 03 / 21 / efficient-integer-exponentiation-algorithms&apos;
def create ( vm _ ) : DCNL &apos; Create a single VM from a data dict&apos;
def get _ mem _ info ( ) : DCNL &apos; Get information about available memory&apos;
def get _ resource _ ignore _ params ( params ) : DCNL &apos; Helper method to determine which parameters to ignore for actions DCNL : returns : A list of the parameter names that does not need to be DCNL included in a resource \ &apos; s method call for documentation purposes . &apos; 
def test _ array _ _ _ subclasshook _ _ ( ) : DCNL &apos; TODO&apos;
def get _ nominal ( attribute ) : DCNL &apos; If attribute is nominal , returns a list of the values&apos;
def derivation ( p , DE , coefficientD = False , basic = False ) : DCNL &apos; Computes Dp . DCNL Given the derivation D with D = d / dx and p is a polynomial in t over DCNL K ( x ) , return Dp . DCNL If coefficientD is True , it computes the derivation kD DCNL ( kappaD ) , which is defined as kD ( sum ( ai * Xi * * i , ( i , 0 , n ) ) ) = = DCNL sum ( Dai * Xi * * i , ( i , 1 , n ) ) ( Definition 3.2.2 , page 80 ) . X in this case is DCNL T &#91; -1 &#93; , so coefficientD computes the derivative just with respect to T &#91; : -1 &#93; , DCNL with T &#91; -1 &#93; treated as a constant . DCNL If basic = True , the returns a Basic expression . Elements of D can still be DCNL instances of Poly . &apos; 
def clear _ caches ( ) : DCNL &apos; Jinja2 keeps internal caches for environments and lexers . These are DCNL used so that Jinja2 doesn \ &apos; t have to recreate environments and lexers all DCNL the time . Normally you don \ &apos; t have to care about that but if you are DCNL messuring memory consumption you may want to clean the caches . &apos; 
def get _ issue ( issue _ number , repo _ name = None , profile = &apos; github &apos; , output = &apos; min &apos; ) : DCNL &apos; Return information about a single issue in a named repository . DCNL .. versionadded : : 2016.11.0 DCNL issue _ number DCNL The number of the issue to retrieve . DCNL repo _ name DCNL The name of the repository from which to get the issue . This argument is DCNL required , either passed via the CLI , or defined in the configured DCNL profile . A ``repo _ name`` passed as a CLI argument will override the DCNL repo _ name defined in the configured profile , if provided . DCNL profile DCNL The name of the profile configuration to use . Defaults to ``github`` . DCNL output DCNL The amount of data returned by each issue . Defaults to ``min`` . Change DCNL to ``full`` to see all issue output . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion github.get _ issue 514 DCNL salt myminion github.get _ issue 514 repo _ name = salt&apos;
def difference ( G , H ) : DCNL &apos; Return a new graph that contains the edges that exist in G but not in H. DCNL The node sets of H and G must be the same . DCNL Parameters DCNL G , H : graph DCNL A NetworkX graph . G and H must have the same node sets . DCNL Returns DCNL D : A new graph with the same type as G. DCNL Notes DCNL Attributes from the graph , nodes , and edges are not copied to the new DCNL graph . If you want a new graph of the difference of G and H with DCNL with the attributes ( including edge data ) from G use remove _ nodes _ from ( ) DCNL as follows : DCNL &gt; &gt; &gt; G = nx.path _ graph ( 3 ) DCNL &gt; &gt; &gt; H = nx.path _ graph ( 5 ) DCNL &gt; &gt; &gt; R = G.copy ( ) DCNL &gt; &gt; &gt; R.remove _ nodes _ from ( n for n in G if n in H ) &apos;
def check _ uri _ syntax ( uri , host = None ) : DCNL &apos; : return : True if the syntax of the URI section of HTTP is valid ; else DCNL raise an exception . &apos; 
def get _ course _ info _ section _ module ( request , user , course , section _ key ) : DCNL &apos; This returns the course info module for a given section _ key . DCNL Valid keys : DCNL - handouts DCNL - guest _ handouts DCNL - updates DCNL - guest _ updates&apos;
def force _ release ( hosts _ to _ release , username = None ) : DCNL &apos; Force release a collection of hosts from user DCNL This will remove all ACLs from the hosts DCNL : param hosts _ to _ release : strings or idents for hosts to release DCNL : type hosts _ to _ release : list DCNL : param username : login of the user reserving hosts DCNL : type username : str&apos;
def benchmark ( ) : DCNL &apos; multi-threading vs async-io vs regular&apos;
@ intercept _ errors ( UserAPIInternalError , ignore _ errors = &#91; UserAPIRequestError &#93; ) DCNL def delete _ user _ preference ( requesting _ user , preference _ key , username = None ) : DCNL &apos; Deletes a user preference on behalf of a requesting user . DCNL Note : DCNL It is up to the caller of this method to enforce the contract that this method is only called DCNL with the user who made the request . DCNL Arguments : DCNL requesting _ user ( User ) : The user requesting to delete the preference . Only the user with username DCNL \ &apos; username \ &apos; has permissions to delete their own preference . DCNL preference _ key ( str ) : The key for the user preference . DCNL username ( str ) : Optional username specifying which account should be updated . If not specified , DCNL `requesting _ user.username` is assumed . DCNL Returns : DCNL True if the preference was deleted , False if the user did not have a preference with the supplied key . DCNL Raises : DCNL UserNotFound : no user with username `username` exists ( or `requesting _ user.username` if DCNL `username` is not specified ) DCNL UserNotAuthorized : the requesting _ user does not have access to change the account DCNL associated with `username` DCNL PreferenceUpdateError : the operation failed when performing the update . DCNL UserAPIInternalError : the operation failed due to an unexpected error . &apos; 
def delete _ disk ( kwargs = None , conn = None , call = None ) : DCNL &apos; .. versionadded : : 2015.8.0 DCNL Delete a specific disk associated with the account DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt-cloud -f delete _ disk my-azure name = my _ disk DCNL salt-cloud -f delete _ disk my-azure name = my _ disk delete _ vhd = True&apos;
def failing _ job ( ) : DCNL &apos; A background job that fails . &apos; 
def mkXRDTag ( t ) : DCNL &apos; basestring - &gt; basestring DCNL Create a tag name in the XRD 2.0 XML namespace suitable for using DCNL with ElementTree&apos;
def mkfs ( device , fs _ type , * * kwargs ) : DCNL &apos; Create a file system on the specified device DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; extfs.mkfs / dev / sda1 fs _ type = ext4 opts = \ &apos; acl , noexec \ &apos; DCNL Valid options are : DCNL * * * block _ size * * : 1024 , 2048 or 4096 DCNL * * * check * * : check for bad blocks DCNL * * * direct * * : use direct IO DCNL * * * ext _ opts * * : extended file system options ( comma-separated ) DCNL * * * fragment _ size * * : size of fragments DCNL * * * force * * : setting force to True will cause mke2fs to specify the -F DCNL option twice ( it is already set once ) ; this is truly dangerous DCNL * * * blocks _ per _ group * * : number of blocks in a block group DCNL * * * number _ of _ groups * * : ext4 option for a virtual block group DCNL * * * bytes _ per _ inode * * : set the bytes / inode ratio DCNL * * * inode _ size * * : size of the inode DCNL * * * journal * * : set to True to create a journal ( default on ext3 / 4 ) DCNL * * * journal _ opts * * : options for the fs journal ( comma separated ) DCNL * * * blocks _ file * * : read bad blocks from file DCNL * * * label * * : label to apply to the file system DCNL * * * reserved * * : percentage of blocks reserved for super-user DCNL * * * last _ dir * * : last mounted directory DCNL * * * test * * : set to True to not actually create the file system ( mke2fs -n ) DCNL * * * number _ of _ inodes * * : override default number of inodes DCNL * * * creator _ os * * : override &quot; creator operating system &quot; field DCNL * * * opts * * : mount options ( comma separated ) DCNL * * * revision * * : set the filesystem revision ( default 1 ) DCNL * * * super * * : write superblock and group descriptors only DCNL * * * fs _ type * * : set the filesystem type ( REQUIRED ) DCNL * * * usage _ type * * : how the filesystem is going to be used DCNL * * * uuid * * : set the UUID for the file system DCNL See the ``mke2fs ( 8 ) `` manpage for a more complete description of these DCNL options . &apos; 
def _ enqueue ( revent ) : DCNL &apos; Enqueue the event&apos;
def nanmax ( a , axis = None , out = None , keepdims = False ) : DCNL &apos; Returns the maximum of an array along an axis ignoring NaN . DCNL When there is a slice whose elements are all NaN , a : class : `RuntimeWarning` DCNL is raised and NaN is returned . DCNL Args : DCNL a ( cupy.ndarray ) : Array to take the maximum . DCNL axis ( int ) : Along which axis to take the maximum . The flattened array DCNL is used by default . DCNL out ( cupy.ndarray ) : Output array . DCNL keepdims ( bool ) : If ``True`` , the axis is remained as an axis of DCNL size one . DCNL Returns : DCNL cupy.ndarray : The maximum of ``a`` , along the axis if specified . DCNL .. seealso : : : func : `numpy.nanmax`&apos;
def pager ( text ) : DCNL &apos; The first time this is called , determine what kind of pager to use . &apos; 
def get _ browse _ partitioned _ table _ limit ( ) : DCNL &apos; Get the old default&apos;
def shorten _ paths ( path _ list , is _ unsaved ) : DCNL &apos; Takes a list of paths and tries to &quot; intelligently &quot; shorten them all . The DCNL aim is to make it clear to the user where the paths differ , as that is DCNL likely what they care about . Note that this operates on a list of paths DCNL not on individual paths . DCNL If the path ends in an actual file name , it will be trimmed off . &apos; 
def dnslib _ record2iplist ( record ) : DCNL &apos; convert dnslib.DNSRecord to iplist&apos;
def install _ setuptools ( python _ cmd = &apos; python &apos; , use _ sudo = True ) : DCNL &apos; Install the latest version of `setuptools` _ . DCNL import fabtools DCNL fabtools.python _ setuptools.install _ setuptools ( ) &apos;
def collect _ error _ snapshots ( ) : DCNL &apos; Scheduled task to collect error snapshots from files and push into Error Snapshot table&apos;
def patch _ tpool _ proxy ( ) : DCNL &apos; eventlet.tpool.Proxy doesn \ &apos; t work with old-style class in _ _ str _ _ ( ) DCNL or _ _ repr _ _ ( ) calls . See bug # 962840 for details . DCNL We perform a monkey patch to replace those two instance methods . &apos; 
def auto _ reconnect _ connection ( func ) : DCNL &apos; Attempt to safely reconnect when an error is hit that resembles the DCNL bouncer disconnecting the client due to a timeout / etc . &apos; 
def _ getExcelCellName ( col , row ) : DCNL &apos; Returns the excel cell name for a row and column ( zero-indexed ) DCNL &gt; &gt; &gt; _ getExcelCellName ( 0,0 ) DCNL \ &apos; A1 \ &apos; DCNL &gt; &gt; &gt; _ getExcelCellName ( 2,1 ) DCNL \ &apos; C2 \ &apos; &apos;
def target _ info _ from _ filename ( filename ) : DCNL &apos; Transforms / some / path / foo.png into ( \ &apos; / some / path \ &apos; , \ &apos; foo.png \ &apos; , \ &apos; png \ &apos; )  . &apos; 
def warn ( msg ) : DCNL &apos; Issue a warning . DCNL If msg is a string , : class : `.exc.SAWarning` is used as DCNL the category . &apos; 
def same _ file ( a , b ) : DCNL &apos; Return 0 if A and B have nothing in common DCNL return 1 if A and B are actually the same path DCNL return 2 if B is a subfolder of A&apos;
def client _ generator ( port = 5557 , host = &apos; localhost &apos; , hwm = 20 ) : DCNL &apos; Generator in client side should extend this generator DCNL Parameters DCNL port : int DCNL hwm : int , optional DCNL The `ZeroMQ high-water mark ( HWM ) DCNL &lt; http : / / zguide.zeromq.org / page : all # High-Water-Marks &gt; ` _ on the DCNL sending socket . Increasing this increases the buffer , which can be DCNL useful if your data preprocessing times are very random . However , DCNL it will increase memory usage . There is no easy way to tell how DCNL many batches will actually be queued with a particular HWM . DCNL Defaults to 10 . Be sure to set the corresponding HWM on the DCNL receiving end as well . &apos; 
def dmp _ mul _ ground ( f , c , u , K ) : DCNL &apos; Multiply ``f`` by a constant value in ``K &#91; X &#93; `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys import ring , ZZ DCNL &gt; &gt; &gt; R , x , y = ring ( &quot; x , y &quot; , ZZ ) DCNL &gt; &gt; &gt; R.dmp _ mul _ ground ( 2 * x + 2 * y , ZZ ( 3 ) ) DCNL 6 * x + 6 * y&apos;
def build _ title ( title _ dict , canonical = None , canonicalSeries = None , canonicalEpisode = None , ptdf = 0 , lang = None , _ doYear = 1 , _ emptyString = u &apos; &apos; , appendKind = True ) : DCNL &apos; Given a dictionary that represents a &quot; long &quot; IMDb title , DCNL return a string . DCNL If canonical is None ( default ) , the title is returned in the stored style . DCNL If canonical is True , the title is converted to canonical style . DCNL If canonical is False , the title is converted to normal format . DCNL lang can be used to specify the language of the title . DCNL If ptdf is true , the plain text data files format is used . &apos; 
def BoundedSemaphore ( value = 1 ) : DCNL &apos; Returns a bounded semaphore object&apos;
def no _ such _ executable _ logged ( case , logger ) : DCNL &apos; Validate the error logging behavior of `` _ sync _ command _ error _ squashed`` . &apos; 
def substitute _ bindings ( fstruct , bindings , fs _ class = u &apos;default &apos; ) : DCNL &apos; Return the feature structure that is obtained by replacing each DCNL variable bound by ``bindings`` with its binding . If a variable is DCNL aliased to a bound variable , then it will be replaced by that DCNL variable \ &apos; s value . If a variable is aliased to an unbound DCNL variable , then it will be replaced by that variable . DCNL : type bindings : dict ( Variable - &gt; any ) DCNL : param bindings : A dictionary mapping from variables to values . &apos; 
def createModel ( modelParams ) : DCNL &apos; Given a model params dictionary , create a CLA Model . Automatically enables DCNL inference for kw _ energy _ consumption . DCNL : param modelParams : Model params dict DCNL : return : OPF Model object&apos;
def make _ pidlockfile _ scenarios ( ) : DCNL &apos; Make a collection of scenarios for testing PIDLockFile instances . &apos; 
def getBevelPath ( begin , center , close , end , radius ) : DCNL &apos; Get bevel path . &apos; 
def test _ dont _ break _ imports _ without _ namespaces ( ) : DCNL &apos; The code checking for ``from _ _ future _ _ import absolute _ import`` shouldn \ &apos; t DCNL assume that all imports have non-``None`` namespaces . &apos; 
def _ make _ req ( node , part , method , path , _ headers , stype , conn _ timeout = 5 , response _ timeout = 15 ) : DCNL &apos; Make request to backend storage node . DCNL ( i.e. \ &apos; Account \ &apos; , \ &apos; Container \ &apos; , \ &apos; Object \ &apos; ) DCNL : param node : a node dict from a ring DCNL : param part : an integer , the partion number DCNL : param method : a string , the HTTP method ( e.g. \ &apos; PUT \ &apos; , \ &apos; DELETE \ &apos; , etc ) DCNL : param path : a string , the request path DCNL : param headers : a dict , header name = &gt; value DCNL : param stype : a string , describing the type of service DCNL : returns : an HTTPResponse object&apos;
def build _ model ( vectors , shape , settings ) : DCNL &apos; Compile the model . &apos; 
def main ( ) : DCNL &apos; The main function runs the BloggerExample application with the provided DCNL username and password values . Authentication credentials are required . DCNL NOTE : It is recommended that you run this sample using a test account . &apos; 
def parse _ alpha ( args ) : DCNL &apos; If args is a list of a single INTEGER or NUMBER token , DCNL retur its value clipped to the 0 .. 1 range DCNL Otherwise , return None . &apos; 
def _ statsmodels _ univariate _ kde ( data , kernel , bw , gridsize , cut , clip , cumulative = False ) : DCNL &apos; Compute a univariate kernel density estimate using statsmodels . &apos; 
def version ( parser , token ) : DCNL &apos; Displaying a version of an existing Image according to the predefined VERSIONS settings ( see filebrowser settings ) . DCNL { % version fileobject version _ suffix % } DCNL Use { % version fileobject \ &apos; medium \ &apos; % } in order to DCNL display the medium-size version of an image . DCNL version _ suffix can be a string or a variable. if version _ suffix is a string , use quotes . DCNL Return a context variable \ &apos; var _ name \ &apos; with the FileObject DCNL { % version fileobject version _ suffix as var _ name % } DCNL Use { % version fileobject \ &apos; medium \ &apos; as version _ medium % } in order to DCNL retrieve the medium version of an image stored in a variable version _ medium . DCNL version _ suffix can be a string or a variable . If version _ suffix is a string , use quotes . &apos; 
@ xmlrpc _ func ( returns = &apos; string &apos; , args = &#91; &apos; string &apos; , &apos; string &apos; , &apos; string &apos; , &apos; struct &apos; , &apos; boolean &apos; &#93; ) DCNL def new _ post ( blog _ id , username , password , post , publish ) : DCNL &apos; metaWeblog.newPost ( blog _ id , username , password , post , publish ) DCNL = &gt; post _ id&apos;
def checkCrash ( player , upperPipes , lowerPipes ) : DCNL &apos; returns True if player collders with base or pipes . &apos; 
def unpickle ( fname ) : DCNL &apos; Load pickled object from `fname`&apos;
def _ _ virtual _ _ ( ) : DCNL &apos; Only works on Windows systems&apos;
def _ write _ with _ fallback ( s , write , fileobj ) : DCNL &apos; Write the supplied string with the given write function like DCNL ``write ( s ) `` , but use a writer for the locale \ &apos; s preferred encoding in case DCNL of a UnicodeEncodeError . Failing that attempt to write with \ &apos; utf-8 \ &apos; or DCNL \ &apos; latin-1 \ &apos;  . &apos; 
def check _ existing ( package , pkg _ files , formula _ def , conn = None ) : DCNL &apos; Check the filesystem for existing files&apos;
def test _ give _ classifier _ obj ( ) : DCNL &apos; Test the fit and sample routine with classifier a object&apos;
@ core _ helper DCNL def nav _ link ( text , * args , * * kwargs ) : DCNL &apos; : param class _ : pass extra class ( es ) to add to the `` &lt; a &gt; `` tag DCNL : param icon : name of ckan icon to use within the link DCNL : param condition : if ``False`` then no link is returned&apos;
def role _ list ( ) : DCNL &apos; List all available roles DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; rbac.role _ list&apos;
def claim _ build ( registry , xml _ parent , data ) : DCNL &apos; yaml : claim-build DCNL Claim build failures DCNL Requires the Jenkins : jenkins-wiki : `Claim Plugin &lt; Claim + plugin &gt; ` . DCNL Example : DCNL .. literalinclude : : / .. / .. / tests / publishers / fixtures / claim-build001.yaml DCNL : language : yaml&apos;
@ register.simple _ tag ( takes _ context = True ) DCNL def locale _ js _ include ( context ) : DCNL &apos; If the user has a non-English locale set , returns a &lt; script &gt; tag pointing DCNL to the relevant locale JavaScript file&apos;
def _ raise _ document _ too _ large ( operation , doc _ size , max _ size ) : DCNL &apos; Internal helper for raising DocumentTooLarge . &apos; 
def create _ model ( session , forward _ only ) : DCNL &apos; Create translation model and initialize or load parameters in session . &apos; 
def setup _ platform ( hass , config , add _ devices , discovery _ info = None ) : DCNL &apos; Setup the dovado platform for sensors . &apos; 
def create _ credential _ resolver ( session ) : DCNL &apos; Create a default credential resolver . DCNL This creates a pre-configured credential resolver DCNL that includes the default lookup chain for DCNL credentials . &apos; 
@ cli.command ( ) DCNL def edit ( ) : DCNL &apos; Opens an editor with some text in it . &apos; 
def test _ randomize _ corrmat _ dist ( ) : DCNL &apos; Test that the distribution looks right . &apos; 
def to _ str _ py27 ( value ) : DCNL &apos; Encode dictionary for python 2&apos;
def _ nonlinear _ 3eq _ order1 _ type5 ( x , y , t , eq ) : DCNL &apos; .. math : : x \ &apos; = x ( c F _ 2 - b F _ 3 ) , \ enspace y \ &apos; = y ( a F _ 3 - c F _ 1 ) , \ enspace z \ &apos; = z ( b F _ 1 - a F _ 2 ) DCNL where `F _ n = F _ n ( x , y , z , t ) ` and are arbitrary functions . DCNL First Integral : DCNL .. math : : \ left &#124; x \ right &#124; ^ { a } \ left &#124; y \ right &#124; ^ { b } \ left &#124; z \ right &#124; ^ { c } = C _ 1 DCNL where `C` is an arbitrary constant . If the function `F _ n` is independent of `t` , DCNL then , by eliminating `t` and `z` from the first two equations of the system , one DCNL arrives at a first-order equation . DCNL References DCNL -http : / / eqworld.ipmnet.ru / en / solutions / sysode / sode0406.pdf&apos;
def folders _ at _ path ( path , include _ parent = False , show _ hidden = False ) : DCNL &apos; Returns a list of dictionaries with the folders contained at the given path DCNL Give the empty string as the path to list the contents of the root path DCNL under Unix this means &quot; / &quot; , on Windows this will be a list of drive letters ) &apos;
def getGaleraFile ( ) : DCNL &apos; Used for ensuring that Percona XtraDB Cluster is installed DCNL and not a common MySQL-Server&apos;
def test _ pick _ bio ( ) : DCNL &apos; Test picking BIO channels . &apos; 
def get _ func _ full _ args ( func ) : DCNL &apos; Return a list of ( argument name , default value ) tuples . If the argument DCNL does not have a default value , omit it in the tuple . Arguments such as DCNL * args and * * kwargs are also included . &apos; 
def opening _ tag ( cdata _ tags , state , text , i , formats , user _ data ) : DCNL &apos; An opening tag , like &lt; a &gt; &apos;
@ evalcontextfilter DCNL def do _ replace ( eval _ ctx , s , old , new , count = None ) : DCNL &apos; Return a copy of the value with all occurrences of a substring DCNL replaced with a new one . The first argument is the substring DCNL that should be replaced , the second is the replacement string . DCNL If the optional third argument ``count`` is given , only the first DCNL ``count`` occurrences are replaced : DCNL .. sourcecode : : jinja DCNL { { &quot; Hello World &quot; &#124; replace ( &quot; Hello &quot; , &quot; Goodbye &quot; ) } } DCNL - &gt; Goodbye World DCNL { { &quot; aaaaargh &quot; &#124; replace ( &quot; a &quot; , &quot; d \ &apos; oh , &quot; , 2 ) } } DCNL - &gt; d \ &apos; oh , d \ &apos; oh , aaargh&apos;
def html _ unquote ( s , encoding = None ) : DCNL &apos; Decode the value . &apos; 
@ check _ is _ trading DCNL @ export _ as _ api DCNL @ ExecutionContext.enforce _ phase ( EXECUTION _ PHASE.HANDLE _ BAR , EXECUTION _ PHASE.SCHEDULED ) DCNL def order _ lots ( id _ or _ ins , amount , style = None ) : DCNL &apos; Place an order by specified number of lots . Order type is also passed DCNL in as parameters if needed . If style is omitted , it fires a market DCNL order by default . DCNL : param id _ or _ ins : the instrument to be ordered DCNL : type id _ or _ ins : str or Instrument DCNL : param float amount : Number of lots to order . Positive means buy , DCNL negative means sell . DCNL : param style : Order type and default is `MarketOrder ( ) ` . The DCNL available order types are : `MarketOrder ( ) ` and DCNL `LimitOrder ( limit _ price ) ` DCNL : return : A unique order id . DCNL : rtype : int&apos;
def test _ basic _ auth ( ) : DCNL &apos; Test to ensure hug provides basic _ auth handler works as expected&apos;
def build _ flow _ dict ( G , R ) : DCNL &apos; Build a flow dictionary from a residual network . &apos; 
def detach _ principal _ policy ( policyName , principal , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Detach the specified policy from the specified principal ( certificate or other DCNL credential . ) DCNL Returns { detached : true } if the policy was detached DCNL { detached : False } if the policy was not detached . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ iot.detach _ principal _ policy mypolicy mycognitoID&apos;
def disabled ( name ) : DCNL &apos; Return True if the named service is enabled , false otherwise DCNL .. versionadded : : 2015.5.6 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; daemontools.disabled &lt; service name &gt; &apos;
def setup ( hass , config ) : DCNL &apos; Use config values to set up a function enabling status retrieval . &apos; 
def getfullargspec ( func ) : DCNL &apos; Compatibility function to provide inspect.getfullargspec in Python 2 DCNL This should be rewritten using a backport of Python 3 signature DCNL once we drop support for Python 2.6 . We went for a simpler DCNL approach at the time of writing because signature uses OrderedDict DCNL which is not available in Python 2.6 . &apos; 
def group _ create ( context , data _ dict ) : DCNL &apos; Create a new group . DCNL You must be authorized to create groups . DCNL Plugins may change the parameters of this function depending on the value DCNL of the ``type`` parameter , see the DCNL : py : class : ` ~ ckan.plugins.interfaces.IGroupForm` plugin interface . DCNL : param name : the name of the group , a string between 2 and 100 characters DCNL long , containing only lowercase alphanumeric characters , ``-`` and DCNL : type name : string DCNL : param id : the id of the group ( optional ) DCNL : type id : string DCNL : param title : the title of the group ( optional ) DCNL : type title : string DCNL : param description : the description of the group ( optional ) DCNL : type description : string DCNL : param image _ url : the URL to an image to be displayed on the group \ &apos; s page DCNL ( optional ) DCNL : type image _ url : string DCNL : param type : the type of the group ( optional ) , DCNL : py : class : ` ~ ckan.plugins.interfaces.IGroupForm` plugins DCNL associate themselves with different group types and provide custom DCNL group handling behaviour for these types DCNL Cannot be \ &apos; organization \ &apos; DCNL : type type : string DCNL : param state : the current state of the group , e.g. `` \ &apos; active \ &apos; `` or DCNL `` \ &apos; deleted \ &apos; `` , only active groups show up in search results and DCNL other lists of groups , this parameter will be ignored if you are not DCNL authorized to change the state of the group ( optional , default : DCNL `` \ &apos; active \ &apos; `` ) DCNL : type state : string DCNL : param approval _ status : ( optional ) DCNL : type approval _ status : string DCNL : param extras : the group \ &apos; s extras ( optional ) , extras are arbitrary DCNL ( key : value ) metadata items that can be added to groups , each extra DCNL dictionary should have keys `` \ &apos; key \ &apos; `` ( a string ) , `` \ &apos; value \ &apos; `` ( a DCNL string ) , and optionally `` \ &apos; deleted \ &apos; `` DCNL : type extras : list of dataset extra dictionaries DCNL : param packages : the datasets ( packages ) that belong to the group , a list DCNL of dictionaries each with keys `` \ &apos; name \ &apos; `` ( string , the id or name of DCNL the dataset ) and optionally `` \ &apos; title \ &apos; `` ( string , the title of the DCNL dataset ) DCNL : type packages : list of dictionaries DCNL : param groups : the groups that belong to the group , a list of dictionaries DCNL each with key `` \ &apos; name \ &apos; `` ( string , the id or name of the group ) and DCNL optionally `` \ &apos; capacity \ &apos; `` ( string , the capacity in which the group is DCNL a member of the group ) DCNL : type groups : list of dictionaries DCNL : param users : the users that belong to the group , a list of dictionaries DCNL each with key `` \ &apos; name \ &apos; `` ( string , the id or name of the user ) and DCNL optionally `` \ &apos; capacity \ &apos; `` ( string , the capacity in which the user is DCNL a member of the group ) DCNL : type users : list of dictionaries DCNL : returns : the newly created group ( unless \ &apos; return _ id _ only \ &apos; is set to True DCNL in the context , in which case just the group id will DCNL be returned ) DCNL : rtype : dictionary&apos;
def find _ and _ create _ file _ from _ metadata ( children , source , destination , destination _ node , obj ) : DCNL &apos; Given a Guid obj , recursively search for the metadata of its referent ( a file obj ) DCNL in the waterbutler response . If found , create a new addon FileNode with that metadata DCNL and return the new file . &apos; 
def generate _ gantt _ chart ( logfile , cores , minute _ scale = 10 , space _ between _ minutes = 50 , colors = &#91; u &apos; # 7070FF &apos; , u &apos; # 4E4EB2 &apos; , u &apos; # 2D2D66 &apos; , u &apos; # 9B9BFF &apos; &#93; ) : DCNL &apos; Generates a gantt chart in html showing the workflow execution based on a callback log file . DCNL This script was intended to be used with the MultiprocPlugin . DCNL The following code shows how to set up the workflow in order to generate the log file : DCNL Parameters DCNL logfile : string DCNL filepath to the callback log file to plot the gantt chart of DCNL cores : integer DCNL the number of cores given to the workflow via the \ &apos; n _ procs \ &apos; DCNL plugin arg DCNL minute _ scale : integer ( optional ) ; default = 10 DCNL the scale , in minutes , at which to plot line markers for the DCNL gantt chart ; for example , minute _ scale = 10 means there are lines DCNL drawn at every 10 minute interval from start to finish DCNL space _ between _ minutes : integer ( optional ) ; default = 50 DCNL scale factor in pixel spacing between minute line markers DCNL colors : list ( optional ) DCNL a list of colors to choose from when coloring the nodes in the DCNL gantt chart DCNL Returns DCNL None DCNL the function does not return any value but writes out an html DCNL file in the same directory as the callback log path passed in DCNL Usage DCNL # import logging DCNL # import logging.handlers DCNL # from nipype.pipeline.plugins.callback _ log import log _ nodes _ cb DCNL # log _ filename = \ &apos; callback.log \ &apos; DCNL # logger = logging.getLogger ( \ &apos; callback \ &apos; ) DCNL # logger.setLevel ( logging.DEBUG ) DCNL # handler = logging.FileHandler ( log _ filename ) DCNL # logger.addHandler ( handler ) DCNL # # create workflow DCNL # workflow = ... DCNL # workflow.run ( plugin = \ &apos; MultiProc \ &apos; , DCNL # plugin _ args = { \ &apos; n _ procs \ &apos; : 8 , \ &apos; memory \ &apos; : 12 , \ &apos; status _ callback \ &apos; : log _ nodes _ cb } ) DCNL # generate _ gantt _ chart ( \ &apos; callback.log \ &apos; , 8 ) &apos;
def check _ page _ faults ( con , host , port , warning , critical , perf _ data ) : DCNL &apos; A function to get page _ faults per second from the system&apos;
def collect _ emojis ( ) : DCNL &apos; Returns a dictionary containing all emojis with their DCNL name and filename . If the folder doesn \ &apos; t exist it returns a empty DCNL dictionary . &apos; 
def abstract ( cls ) : DCNL &apos; A decorator to mark abstract base classes derived from &#124; HasProps &#124;  . &apos; 
@ pytest.fixture ( autouse = True ) DCNL def mock _ inline _ css ( monkeypatch ) : DCNL &apos; Mock jingo _ minify.helpers.is _ external : don \ &apos; t break on missing files . DCNL When testing , we don \ &apos; t want nor need the bundled / minified css files , so DCNL pretend that all the css files are external . DCNL Mocking this will prevent amo.helpers.inline _ css to believe it should DCNL bundle the css . &apos; 
def assert _ json _ response ( response , status _ code , body , headers = None , body _ cmp = operator.eq ) : DCNL &apos; Assert JSON response has the expected status _ code , body , and headers . DCNL Asserts that the response \ &apos; s content-type is application / json . DCNL body _ cmp is a callable that takes the JSON-decoded response body and DCNL expected body and returns a boolean stating whether the comparison DCNL succeeds . DCNL body _ cmp ( json.loads ( response.data.decode ( \ &apos; utf-8 \ &apos; ) ) , body ) &apos;
def wait _ for _ volume _ status ( client , volume _ id , status ) : DCNL &apos; Waits for a Volume to reach a given status . &apos; 
def between ( expr , lower _ bound , upper _ bound , symmetric = False ) : DCNL &apos; Produce a ``BETWEEN`` predicate clause . DCNL E.g. : : DCNL from sqlalchemy import between DCNL stmt = select ( &#91; users _ table &#93; ) .where ( between ( users _ table.c.id , 5 , 7 ) ) DCNL Would produce SQL resembling : : DCNL SELECT id , name FROM user WHERE id BETWEEN : id _ 1 AND : id _ 2 DCNL The : func : `.between` function is a standalone version of the DCNL : meth : `.ColumnElement.between` method available on all DCNL SQL expressions , as in : : DCNL stmt = select ( &#91; users _ table &#93; ) .where ( users _ table.c.id.between ( 5 , 7 ) ) DCNL All arguments passed to : func : `.between` , including the left side DCNL column expression , are coerced from Python scalar values if a DCNL the value is not a : class : `.ColumnElement` subclass . For example , DCNL three fixed values can be compared as in : : DCNL print ( between ( 5 , 3 , 7 ) ) DCNL Which would produce : : DCNL : param _ 1 BETWEEN : param _ 2 AND : param _ 3 DCNL : param expr : a column expression , typically a : class : `.ColumnElement` DCNL instance or alternatively a Python scalar expression to be coerced DCNL into a column expression , serving as the left side of the ``BETWEEN`` DCNL expression . DCNL : param lower _ bound : a column or Python scalar expression serving as the DCNL lower bound of the right side of the ``BETWEEN`` expression . DCNL : param upper _ bound : a column or Python scalar expression serving as the DCNL upper bound of the right side of the ``BETWEEN`` expression . DCNL : param symmetric : if True , will render &quot; BETWEEN SYMMETRIC &quot; . Note DCNL that not all databases support this syntax . DCNL .. versionadded : : 0.9.5 DCNL .. seealso : : DCNL : meth : `.ColumnElement.between`&apos;
def new _ figure _ manager ( num , * args , * * kwargs ) : DCNL &apos; Create a new figure manager instance&apos;
def _ abstractPath ( case ) : DCNL &apos; Return a new , unique abstract namespace path to be listened on . &apos; 
def set _ review _ unavailable ( apps , schema _ editor ) : DCNL &apos; For historic DocumentSpamAttempt , set to REVIEW _ UNAVAILABLE . &apos; 
@ dispatch ( Expr , Mapping ) DCNL def compute ( expr , d , return _ type = no _ default , * * kwargs ) : DCNL &apos; Compute expression against data sources . DCNL Parameters DCNL expr : Expr DCNL The blaze expression to compute . DCNL d : any DCNL The data source to compute expression on . DCNL return _ type : { \ &apos; native \ &apos; , \ &apos; core \ &apos; , type } , optional DCNL Type to return data as . Defaults to \ &apos; native \ &apos; but will be changed DCNL to \ &apos; core \ &apos; in version 0.11 . \ &apos; core \ &apos; forces the computation into a core DCNL type . \ &apos; native \ &apos; returns the result as is from the respective backend \ &apos; s DCNL ``post _ compute`` . If a type is passed , it will odo the result into the DCNL type before returning . DCNL Examples DCNL &gt; &gt; &gt; t = symbol ( \ &apos; t \ &apos; , \ &apos; var * { name : string , balance : int } \ &apos; ) DCNL &gt; &gt; &gt; deadbeats = t &#91; t &#91; \ &apos; balance \ &apos; &#93; &lt; 0 &#93; &#91; \ &apos; name \ &apos; &#93; DCNL &gt; &gt; &gt; data = &#91; &#91; \ &apos; Alice \ &apos; , 100 &#93; , &#91; \ &apos; Bob \ &apos; , -50 &#93; , &#91; \ &apos; Charlie \ &apos; , -20 &#93; &#93; DCNL &gt; &gt; &gt; list ( compute ( deadbeats , { t : data } ) ) DCNL &#91; \ &apos; Bob \ &apos; , \ &apos; Charlie \ &apos; &#93; &apos;
def replace ( old _ value , new _ value , full _ match = False ) : DCNL &apos; Replace string or full line matches in switch \ &apos; s running config DCNL If full _ match is set to True , then the whole line will need to be matched DCNL as part of the old value . DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nxos.cmd replace \ &apos; TESTSTRINGHERE \ &apos; \ &apos; NEWTESTSTRINGHERE \ &apos; &apos;
@ verbose DCNL def read _ epochs ( fname , proj = True , preload = True , verbose = None ) : DCNL &apos; Read epochs from a fif file . DCNL Parameters DCNL fname : str DCNL The name of the file , which should end with -epo.fif or -epo.fif.gz. DCNL proj : bool &#124; \ &apos; delayed \ &apos; DCNL Apply SSP projection vectors . If proj is \ &apos; delayed \ &apos; and reject is not DCNL None the single epochs will be projected before the rejection DCNL decision , but used in unprojected state if they are kept . DCNL This way deciding which projection vectors are good can be postponed DCNL to the evoked stage without resulting in lower epoch counts and DCNL without producing results different from early SSP application DCNL given comparable parameters . Note that in this case baselining , DCNL detrending and temporal decimation will be postponed . DCNL If proj is False no projections will be applied which is the DCNL recommended value if SSPs are not used for cleaning the data . DCNL preload : bool DCNL If True , read all epochs from disk immediately . If False , epochs will DCNL be read on demand . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL epochs : instance of Epochs DCNL The epochs&apos;
def resource _ create ( context , data _ dict ) : DCNL &apos; Appends a new resource to a datasets list of resources . DCNL : param package _ id : id of package that the resource should be added to . DCNL : type package _ id : string DCNL : param url : url of resource DCNL : type url : string DCNL : param revision _ id : ( optional ) DCNL : type revision _ id : string DCNL : param description : ( optional ) DCNL : type description : string DCNL : param format : ( optional ) DCNL : type format : string DCNL : param hash : ( optional ) DCNL : type hash : string DCNL : param name : ( optional ) DCNL : type name : string DCNL : param resource _ type : ( optional ) DCNL : type resource _ type : string DCNL : param mimetype : ( optional ) DCNL : type mimetype : string DCNL : param mimetype _ inner : ( optional ) DCNL : type mimetype _ inner : string DCNL : param cache _ url : ( optional ) DCNL : type cache _ url : string DCNL : param size : ( optional ) DCNL : type size : int DCNL : param created : ( optional ) DCNL : type created : iso date string DCNL : param last _ modified : ( optional ) DCNL : type last _ modified : iso date string DCNL : param cache _ last _ updated : ( optional ) DCNL : type cache _ last _ updated : iso date string DCNL : param upload : ( optional ) DCNL : type upload : FieldStorage ( optional ) needs multipart / form-data DCNL : returns : the newly created resource DCNL : rtype : dictionary&apos;
@ not _ implemented _ for ( &apos; directed &apos; ) DCNL @ not _ implemented _ for ( &apos; multigraph &apos; ) DCNL def cycle _ basis ( G , root = None ) : DCNL &apos; Returns a list of cycles which form a basis for cycles of G. DCNL A basis for cycles of a network is a minimal collection of DCNL cycles such that any cycle in the network can be written DCNL as a sum of cycles in the basis . Here summation of cycles DCNL is defined as &quot; exclusive or &quot; of the edges . Cycle bases are DCNL useful , e.g. when deriving equations for electric circuits DCNL using Kirchhoff \ &apos; s Laws . DCNL Parameters DCNL G : NetworkX Graph DCNL root : node , optional DCNL Specify starting node for basis . DCNL Returns DCNL A list of cycle lists . Each cycle list is a list of nodes DCNL which forms a cycle ( loop ) in G. DCNL Examples DCNL &gt; &gt; &gt; G = nx.Graph ( ) DCNL &gt; &gt; &gt; nx.add _ cycle ( G , &#91; 0 , 1 , 2 , 3 &#93; ) DCNL &gt; &gt; &gt; nx.add _ cycle ( G , &#91; 0 , 3 , 4 , 5 &#93; ) DCNL &gt; &gt; &gt; print ( nx.cycle _ basis ( G , 0 ) ) DCNL &#91; &#91; 3 , 4 , 5 , 0 &#93; , &#91; 1 , 2 , 3 , 0 &#93; &#93; DCNL Notes DCNL This is adapted from algorithm CACM 491 &#91; 1 &#93; _ . DCNL References DCNL .. &#91; 1 &#93; Paton , K. An algorithm for finding a fundamental set of DCNL cycles of a graph . Comm . ACM 12 , 9 ( Sept 1969 ) , 514-518 . DCNL See Also DCNL simple _ cycles&apos;
def computeEncryptionKey ( password , dictOwnerPass , dictUserPass , dictOE , dictUE , fileID , pElement , dictKeyLength = 128 , revision = 3 , encryptMetadata = False , passwordType = None ) : DCNL &apos; Compute an encryption key to encrypt / decrypt the PDF file DCNL @ param password : The password entered by the user DCNL @ param dictOwnerPass : The owner password from the standard security handler dictionary DCNL @ param dictUserPass : The user password from the standard security handler dictionary DCNL @ param dictOE : The owner encrypted string from the standard security handler dictionary DCNL @ param dictUE : The user encrypted string from the standard security handler dictionary DCNL @ param fileID : The / ID element in the trailer dictionary of the PDF file DCNL @ param pElement : The / P element of the Encryption dictionary DCNL @ param dictKeyLength : The length of the key DCNL @ param revision : The algorithm revision DCNL @ param encryptMetadata : A boolean extracted from the standard security handler dictionary to specify if it \ &apos; s necessary to encrypt the document metadata or not DCNL @ param passwordType : It specifies the given password type . It can be \ &apos; USER \ &apos; , \ &apos; OWNER \ &apos; or None . DCNL @ return : A tuple ( status , statusContent ) , where statusContent is the encryption key in case status = 0 or an error message in case status = -1&apos;
def redirect ( uri , permanent = False , abort = False , code = None , body = None , request = None , response = None ) : DCNL &apos; Issues an HTTP redirect to the given relative URI . DCNL This won \ &apos; t stop code execution unless * * abort * * is True . A common DCNL practice is to return when calling this method : : DCNL return redirect ( \ &apos; / some-path \ &apos; ) DCNL : param uri : DCNL A relative or absolute URI ( e.g. , `` \ &apos; .. / flowers.html \ &apos; `` ) . DCNL : param permanent : DCNL If True , uses a 301 redirect instead of a 302 redirect . DCNL : param abort : DCNL If True , raises an exception to perform the redirect . DCNL : param code : DCNL The redirect status code . Supported codes are 301 , 302 , 303 , 305 , DCNL and 307 . 300 is not supported because it \ &apos; s not a real redirect DCNL and 304 because it \ &apos; s the answer for a request with defined DCNL ``If-Modified-Since`` headers . DCNL : param body : DCNL Response body , if any . DCNL : param request : DCNL Optional request object . If not set , uses : func : `get _ request` . DCNL : param response : DCNL Optional response object . If not set , a new response is created . DCNL : returns : DCNL A : class : `Response` instance . &apos; 
def _ handleDescriptionFromFileOption ( filename , outDir , usageStr , hsVersion , claDescriptionTemplateFile ) : DCNL &apos; Parses and validates the --descriptionFromFile option and executes the DCNL request DCNL Parameters : DCNL filename : File from which we \ &apos; ll extract description JSON DCNL outDir : where to place generated experiment files DCNL usageStr : program usage string DCNL hsVersion : which version of hypersearch permutations file to generate , can DCNL be \ &apos; v1 \ &apos; or \ &apos; v2 \ &apos; DCNL claDescriptionTemplateFile : Filename containing the template description DCNL retval : nothing&apos;
def get _ create _ test _ view _ sql ( ) : DCNL &apos; Returns the SQL code that creates the test view&apos;
def lv _ check ( vg _ name , lv _ name ) : DCNL &apos; Check whether provided logical volume exists . &apos; 
def raw _ cron ( user ) : DCNL &apos; Return the contents of the user \ &apos; s crontab DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cron.raw _ cron root&apos;
def create _ logger ( app ) : DCNL &apos; Creates a logger for the given application . This logger works DCNL similar to a regular Python logger but changes the effective logging DCNL level based on the application \ &apos; s debug flag . Furthermore this DCNL function also removes all attached handlers in case there was a DCNL logger with the log name before . &apos; 
def _ parse _ relators ( rels ) : DCNL &apos; Parse the passed relators . &apos; 
def get _ future _ timestamp ( idx , timestamps ) : DCNL &apos; recursive function to find most recent valid timestamp in the future&apos;
def get _ pull _ request ( project , num , auth = False ) : DCNL &apos; get pull request info by number&apos;
def shebang _ matches ( text , regex ) : DCNL &apos; Check if the given regular expression matches the last part of the DCNL shebang if one exists . DCNL &gt; &gt; &gt; from pygments.util import shebang _ matches DCNL &gt; &gt; &gt; shebang _ matches ( \ &apos; # ! / usr / bin / env python \ &apos; , r \ &apos; python ( 2 \ . \ d ) ? \ &apos; ) DCNL True DCNL &gt; &gt; &gt; shebang _ matches ( \ &apos; # ! / usr / bin / python2.4 \ &apos; , r \ &apos; python ( 2 \ . \ d ) ? \ &apos; ) DCNL True DCNL &gt; &gt; &gt; shebang _ matches ( \ &apos; # ! / usr / bin / python-ruby \ &apos; , r \ &apos; python ( 2 \ . \ d ) ? \ &apos; ) DCNL False DCNL &gt; &gt; &gt; shebang _ matches ( \ &apos; # ! / usr / bin / python / ruby \ &apos; , r \ &apos; python ( 2 \ . \ d ) ? \ &apos; ) DCNL False DCNL &gt; &gt; &gt; shebang _ matches ( \ &apos; # ! / usr / bin / startsomethingwith python \ &apos; , DCNL ... r \ &apos; python ( 2 \ . \ d ) ? \ &apos; ) DCNL True DCNL It also checks for common windows executable file extensions : : DCNL &gt; &gt; &gt; shebang _ matches ( \ &apos; # ! C : \ Python2.4 \ Python.exe \ &apos; , r \ &apos; python ( 2 \ . \ d ) ? \ &apos; ) DCNL True DCNL Parameters ( `` \ &apos; -f \ &apos; `` or `` \ &apos; --foo \ &apos; `` are ignored so `` \ &apos; perl \ &apos; `` does DCNL the same as `` \ &apos; perl -e \ &apos; `` ) DCNL Note that this method automatically searches the whole string ( eg : DCNL the regular expression is wrapped in `` \ &apos; ^ $ \ &apos; `` ) &apos;
@ cython.test _ fail _ if _ path _ exists ( &apos; / / ForInStatNode &apos; ) DCNL def for _ in _ empty ( ) : DCNL &apos; &gt; &gt; &gt; for _ in _ empty ( ) &apos;
def theq ( a , b ) : DCNL &apos; theano equality&apos;
def PrintUsageExit ( code ) : DCNL &apos; Prints usage information and exits with a status code . DCNL Args : DCNL code : Status code to pass to sys.exit ( ) after displaying usage information . &apos; 
def shutdown ( opts ) : DCNL &apos; This is called when the proxy-minion is exiting to make sure the DCNL connection to the device is closed cleanly . &apos; 
def process _ mistral _ config ( config _ path ) : DCNL &apos; Remove sensitive data ( credentials ) from the Mistral config . DCNL : param config _ path : Full absolute path to the mistral config inside / tmp . DCNL : type config _ path : ``str``&apos;
def upgrade _ config ( config , config _ path = os.path.expanduser ( &apos; ~ / .jrnl _ conf &apos; ) ) : DCNL &apos; Checks if there are keys missing in a given config dict , and if so , updates the config file accordingly . DCNL This essentially automatically ports jrnl installations if new config parameters are introduced in later DCNL versions . &apos; 
def get _ klass _ info ( klass , max _ depth = 0 , cur _ depth = 0 , requested = None , only _ load = None , from _ parent = None ) : DCNL &apos; Helper function that recursively returns an information for a klass , to be DCNL used in get _ cached _ row . It exists just to compute this information only DCNL once for entire queryset . Otherwise it would be computed for each row , which DCNL leads to poor perfomance on large querysets . DCNL Arguments : DCNL * klass - the class to retrieve ( and instantiate ) DCNL * max _ depth - the maximum depth to which a select _ related ( ) DCNL relationship should be explored . DCNL * cur _ depth - the current depth in the select _ related ( ) tree . DCNL Used in recursive calls to determin if we should dig deeper . DCNL * requested - A dictionary describing the select _ related ( ) tree DCNL that is to be retrieved. keys are field names ; values are DCNL dictionaries describing the keys on that related object that DCNL are themselves to be select _ related ( ) . DCNL * only _ load - if the query has had only ( ) or defer ( ) applied , DCNL this is the list of field names that will be returned . If None , DCNL the full field list for `klass` can be assumed . DCNL * from _ parent - the parent model used to get to this model DCNL Note that when travelling from parent to child , we will only load child DCNL fields which aren \ &apos; t in the parent . &apos; 
def _ install ( quidditch , retries = 5 ) : DCNL &apos; and the last wrapper method. keeping things simple . &apos; 
def _ reorder _ unifrac _ res ( unifrac _ res , sample _ names _ in _ desired _ order ) : DCNL &apos; reorder unifrac result DCNL unifrac res is distmtx , sample _ names. sample names not in unifrac \ &apos; s DCNL sample names ( not in tree , all zeros in otu table ( ? ) ) will be included , DCNL with a user warning . &apos; 
def organisation ( ) : DCNL &apos; RESTful Controller for Organisation ( Referral Agencies ) &apos;
def download _ youtube _ subs ( youtube _ id , video _ descriptor , settings ) : DCNL &apos; Download transcripts from Youtube and save them to assets . DCNL Args : DCNL youtube _ id : str , actual youtube _ id of the video . DCNL video _ descriptor : video descriptor instance . DCNL We save transcripts for 1.0 speed , as for other speed conversion is done on front-end . DCNL Returns : DCNL None , if transcripts were successfully downloaded and saved . DCNL Raises : DCNL GetTranscriptsFromYouTubeException , if fails . &apos; 
def _ collapse _ address _ list _ recursive ( addresses ) : DCNL &apos; Loops through the addresses , collapsing concurrent netblocks . DCNL Example : DCNL ip1 = IPv4Network \ &apos; 1.1.0.0 / 24 \ &apos; ) DCNL ip2 = IPv4Network \ &apos; 1.1.1.0 / 24 \ &apos; ) DCNL ip3 = IPv4Network \ &apos; 1.1.2.0 / 24 \ &apos; ) DCNL ip4 = IPv4Network \ &apos; 1.1.3.0 / 24 \ &apos; ) DCNL ip5 = IPv4Network \ &apos; 1.1.4.0 / 24 \ &apos; ) DCNL ip6 = IPv4Network \ &apos; 1.1.0.1 / 22 \ &apos; ) DCNL _ collapse _ address _ list _ recursive ( &#91; ip1 , ip2 , ip3 , ip4 , ip5 , ip6 &#93; ) - &gt; DCNL &#91; IPv4Network ( \ &apos; 1.1.0.0 / 22 \ &apos; ) , IPv4Network ( \ &apos; 1.1.4.0 / 24 \ &apos; ) &#93; DCNL This shouldn \ &apos; t be called directly ; it is called via DCNL collapse _ address _ list ( &#91; &#93; ) . DCNL Args : DCNL addresses : A list of IPv4Network \ &apos; s or IPv6Network \ &apos; s DCNL Returns : DCNL A list of IPv4Network \ &apos; s or IPv6Network \ &apos; s depending on what we were DCNL passed . &apos; 
def add _ handlers ( handler _ list , subparsers ) : DCNL &apos; Registers CommandHandlers for interacting with Stackdriver . &apos; 
def splitline ( text ) : DCNL &apos; Splits the given text at newline . DCNL &gt; &gt; &gt; splitline ( \ &apos; foo \ nbar \ &apos; ) DCNL ( \ &apos; foo \ n \ &apos; , \ &apos; bar \ &apos; ) DCNL &gt; &gt; &gt; splitline ( \ &apos; foo \ &apos; ) DCNL ( \ &apos; foo \ &apos; , \ &apos; \ &apos; ) DCNL &gt; &gt; &gt; splitline ( \ &apos; \ &apos; ) &apos;
def prism ( ) : DCNL &apos; set the default colormap to prism and apply to current image if any . DCNL See help ( colormaps ) for more information&apos;
def _ machinectl ( cmd , output _ loglevel = &apos; debug &apos; , ignore _ retcode = False , use _ vt = False ) : DCNL &apos; Helper function to run machinectl&apos;
def scott _ bin _ width ( data , return _ bins = False ) : DCNL &apos; Return the optimal histogram bin width using Scott \ &apos; s rule DCNL Scott \ &apos; s rule is a normal reference rule : it minimizes the integrated DCNL mean squared error in the bin approximation under the assumption that the DCNL data is approximately Gaussian . DCNL Parameters DCNL data : array-like , ndim = 1 DCNL observed ( one-dimensional ) data DCNL return _ bins : bool ( optional ) DCNL if True , then return the bin edges DCNL Returns DCNL width : float DCNL optimal bin width using Scott \ &apos; s rule DCNL bins : ndarray DCNL bin edges : returned if ``return _ bins`` is True DCNL Notes DCNL The optimal bin width is DCNL .. math : : DCNL \ Delta _ b = \ frac { 3.5 \ sigma } { n ^ { 1 / 3 } } DCNL where : math : ` \ sigma` is the standard deviation of the data , and DCNL : math : `n` is the number of data points &#91; 1 &#93; _ . DCNL References DCNL .. &#91; 1 &#93; Scott , David W. ( 1979 ) . &quot; On optimal and data-based histograms &quot; . DCNL Biometricka 66 ( 3 ) : 605-610 DCNL See Also DCNL knuth _ bin _ width DCNL freedman _ bin _ width DCNL bayesian _ blocks DCNL histogram&apos;
def _ quoteattr ( data , entities = { } ) : DCNL &apos; Escape and quote an attribute value . DCNL Escape &amp; , &lt; , and &gt; in a string of data , then quote it for use as DCNL an attribute value . The &quot; character will be escaped as well , if DCNL necessary . DCNL You can escape other strings of data by passing a dictionary as DCNL the optional entities parameter . The keys and values must all be DCNL strings ; each key will be replaced with its corresponding value . &apos; 
def default _ key _ func ( key , key _ prefix , version ) : DCNL &apos; Default function to generate keys . DCNL Constructs the key used by all other methods . By default it prepends DCNL the `key _ prefix \ &apos; . KEY _ FUNCTION can be used to specify an alternate DCNL function with custom key making behavior . &apos; 
def get _ host _ numa _ usage _ from _ instance ( host , instance , free = False , never _ serialize _ result = False ) : DCNL &apos; Calculate new host NUMA usage from an instance \ &apos; s NUMA usage . DCNL Until the RPC version is bumped to 5.x , both host and instance DCNL representations may be provided in a variety of formats . Extract DCNL both host and instance numa topologies from provided DCNL representations , and use the latter to update the NUMA usage DCNL information of the former . DCNL : param host : nova.objects.ComputeNode instance , or a db object or DCNL dict DCNL : param instance : nova.objects.Instance instance , or a db object or DCNL dict DCNL : param free : if True the returned topology will have its usage DCNL decreased instead DCNL : param never _ serialize _ result : if True result will always be an DCNL instance of objects.NUMATopology DCNL : returns : a objects.NUMATopology instance if never _ serialize _ result DCNL was True , else numa _ usage in the format it was on the DCNL host&apos;
@ protocol.commands.add ( u &apos;pause &apos; , state = protocol.BOOL ) DCNL def pause ( context , state = None ) : DCNL &apos; * musicpd.org , playback section : * DCNL ``pause { PAUSE } `` DCNL Toggles pause / resumes playing , ``PAUSE`` is 0 or 1 . DCNL * MPDroid : * DCNL - Calls ``pause`` without any arguments to toogle pause . &apos; 
def send _ message ( to , text , sender = None ) : DCNL &apos; Send a private message . DCNL : arg to : a list of Users to send the message to DCNL : arg sender : the User who is sending the message DCNL : arg text : the message text&apos;
def validate ( filename ) : DCNL &apos; Use W3C validator service : https : / / bitbucket.org / nmb10 / py _ w3c / . DCNL : param filename : the filename to validate&apos;
def _ _ get _ hosts _ filename ( ) : DCNL &apos; Return the path to the appropriate hosts file&apos;
def collect _ bears ( bear _ dirs , bear _ globs , kinds , log _ printer , warn _ if _ unused _ glob = True ) : DCNL &apos; Collect all bears from bear directories that have a matching kind DCNL matching the given globs . DCNL : param bear _ dirs : Directory name or list of such that can contain DCNL bears . DCNL : param bear _ globs : Globs of bears to collect . DCNL : param kinds : List of bear kinds to be collected . DCNL : param log _ printer : log _ printer to handle logging . DCNL : param warn _ if _ unused _ glob : True if warning message should be shown if a DCNL glob didn \ &apos; t give any bears . DCNL : return : Tuple of list of matching bear classes based on DCNL kind . The lists are in the same order as kinds . &apos; 
def _ format _ content ( password , salt , encrypt = True ) : DCNL &apos; Format the password and salt for saving DCNL : arg password : the plaintext password to save DCNL : arg salt : the salt to use when encrypting a password DCNL : arg encrypt : Whether the user requests that this password is encrypted . DCNL Note that the password is saved in clear . Encrypt just tells us if we DCNL must save the salt value for idempotence . Defaults to True . DCNL : returns : a text string containing the formatted information DCNL .. warning : : Passwords are saved in clear . This is because the playbooks DCNL expect to get cleartext passwords from this lookup . &apos; 
def _ prep _ stats _ dict ( values ) : DCNL &apos; Make list of ComputeNodeStats . &apos; 
def metric _ init ( params ) : DCNL &apos; metric _ init ( params ) this is called by gmond to initialise the metrics&apos;
def arcball _ nearest _ axis ( point , axes ) : DCNL &apos; Return axis , which arc is nearest to point . &apos; 
def regions ( ) : DCNL &apos; Get all available regions for the Amazon Elastic MapReduce service . DCNL : rtype : list DCNL : return : A list of : class : `boto.regioninfo.RegionInfo`&apos;
def contains _ nan ( arr , node = None , var = None ) : DCNL &apos; Test whether a numpy.ndarray contains any `np.nan` values . DCNL Parameters DCNL arr : np.ndarray or output of any Theano op DCNL node : None or an Apply instance . DCNL If arr is the output of a Theano op , the node associated to it . DCNL var : The Theano symbolic variable . DCNL Returns DCNL contains _ nan : bool DCNL `True` if the array contains any `np.nan` values , `False` otherwise . DCNL Notes DCNL Tests for the presence of `np.nan` \ &apos; s using `np.isnan ( np.min ( ndarray ) ) ` . DCNL This approach is faster and more memory efficient than the obvious DCNL alternative , calling `np.any ( np.isnan ( ndarray ) ) ` , which requires the DCNL construction of a boolean array with the same shape as the input array . &apos; 
def strip _ html _ tags ( text ) : DCNL &apos; Remove html tags from text&apos;
def runtests ( args = None ) : DCNL &apos; Run the Bokeh tests under the bokeh python directory using pytest . DCNL Does not run tests from bokehjs or examples . DCNL Args : DCNL args ( list , optional ) : command line arguments accepted by py.test DCNL e.g. args = &#91; \ &apos; -s \ &apos; , \ &apos; -k charts \ &apos; &#93; prevents capture of standard out DCNL and only runs tests that match charts . For more py.test options DCNL see http : / / pytest.org / latest / usage.html # usage . DCNL Returns : DCNL int : pytest exitcode&apos;
def wait _ for _ free _ port ( host , port , timeout = None ) : DCNL &apos; Wait for the specified port to become free ( drop requests )  . &apos; 
def _ get _ service _ result _ parser ( run = utils.run ) : DCNL &apos; Get the ServiceResultParser using the auto-detect init command . DCNL : return : ServiceResultParser fro the current init command . DCNL : rtype : _ ServiceResultParser&apos;
def update ( context , qos _ specs _ id , specs ) : DCNL &apos; Update qos specs . DCNL : param specs : dictionary that contains key / value pairs for updating DCNL existing specs . DCNL e.g. { \ &apos; consumer \ &apos; : \ &apos; front-end \ &apos; , DCNL \ &apos; total _ iops _ sec \ &apos; : 500 , DCNL \ &apos; total _ bytes _ sec \ &apos; : 512000 , } &apos;
def handle _ extensions ( extensions = ( &apos; html &apos; , ) , ignored = ( &apos; py &apos; , ) ) : DCNL &apos; Organizes multiple extensions that are separated with commas or passed by DCNL using --extension / -e multiple times . Note that the .py extension is ignored DCNL here because of the way non- * .py files are handled in make _ messages ( ) ( they DCNL are copied to file.ext.py files to trick xgettext to parse them as Python DCNL files ) . DCNL For example : running \ &apos; django-admin makemessages -e js , txt -e xhtml -a \ &apos; DCNL would result in an extension list : &#91; \ &apos; .js \ &apos; , \ &apos; .txt \ &apos; , \ &apos; .xhtml \ &apos; &#93; DCNL &gt; &gt; &gt; handle _ extensions ( &#91; \ &apos; .html \ &apos; , \ &apos; html , js , py , py , py , .py \ &apos; , \ &apos; py , .py \ &apos; &#93; ) DCNL set ( &#91; \ &apos; .html \ &apos; , \ &apos; .js \ &apos; &#93; ) DCNL &gt; &gt; &gt; handle _ extensions ( &#91; \ &apos; .html , txt , .tpl \ &apos; &#93; ) DCNL set ( &#91; \ &apos; .html \ &apos; , \ &apos; .tpl \ &apos; , \ &apos; .txt \ &apos; &#93; ) &apos;
def dtlz7 ( ind , n _ objs ) : DCNL &apos; DTLZ7 multiobjective function . It returns a tuple of * obj * values . The DCNL individual must have at least * obj * elements . DCNL From : K. Deb , L. Thiele , M. Laumanns and E. Zitzler . Scalable Multi-Objective DCNL Optimization Test Problems . CEC 2002 , p . 825-830 , IEEE Press , 2002 . &apos; 
def offset _ spines ( offset = 10 , fig = None , ax = None ) : DCNL &apos; Simple function to offset spines away from axes . DCNL Use this immediately after creating figure and axes objects . DCNL Offsetting spines after plotting or manipulating the axes DCNL objects may result in loss of labels , ticks , and formatting . DCNL Parameters DCNL offset : int , optional DCNL Absolute distance , in points , spines should be moved away DCNL from the axes ( negative values move spines inward ) . DCNL fig : matplotlib figure , optional DCNL Figure to despine all axes of , default uses current figure . DCNL ax : matplotlib axes , optional DCNL Specific axes object to despine DCNL Returns DCNL None&apos;
@ verbose DCNL def spatio _ temporal _ dist _ connectivity ( src , n _ times , dist , verbose = None ) : DCNL &apos; Compute connectivity from distances in a source space and time instants . DCNL Parameters DCNL src : instance of SourceSpaces DCNL The source space must have distances between vertices computed , such DCNL that src &#91; \ &apos; dist \ &apos; &#93; exists and is useful . This can be obtained using MNE DCNL with a call to mne _ add _ patch _ info with the --dist option . DCNL n _ times : int DCNL Number of time points DCNL dist : float DCNL Maximal geodesic distance ( in m ) between vertices in the DCNL source space to consider neighbors . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL connectivity : sparse COO matrix DCNL The connectivity matrix describing the spatio-temporal DCNL graph structure . If N is the number of vertices in the DCNL source space , the N first nodes in the graph are the DCNL vertices are time 1 , the nodes from 2 to 2N are the vertices DCNL during time 2 , etc . &apos; 
def security _ group _ rule _ get _ by _ instance ( context , instance _ uuid ) : DCNL &apos; Get all rules for a given instance . &apos; 
def get _ font ( section = &apos; main &apos; , option = &apos; font &apos; , font _ size _ delta = 0 ) : DCNL &apos; Get console font properties depending on OS and user options&apos;
@ pytest.mark.django _ db DCNL def test _ save _ store _ fs _ bad _ lang ( po _ directory , tp0 _ store _ fs ) : DCNL &apos; Try to save a store with a non-existent lang code&apos;
def flexible _ boolean ( boolean ) : DCNL &apos; Returns True for any of &quot; 1 &quot; , &quot; true &quot; , or &quot; True &quot; . Returns False otherwise . &apos; 
def get _ all _ remote _ methods ( resolver = None , ns _ prefix = u &apos; &apos; ) : DCNL &apos; Returns a dictionary to be used for calling ``djangoCall.configure ( ) `` , which itself extends the DCNL Angular API to the client , offering him to call remote methods . &apos; 
def removeGeneratedFiles ( ) : DCNL &apos; Remove generated files . &apos; 
def print _ and _ modify ( obj , mods , dels ) : DCNL &apos; Print the modifications to an item and return a bool indicating DCNL whether any changes were made . DCNL `mods` is a dictionary of fields and values to update on the object ; DCNL `dels` is a sequence of fields to delete . &apos; 
def labeled _ comprehension ( input , labels , index , func , out _ dtype , default , pass _ positions = False ) : DCNL &apos; Roughly equivalent to &#91; func ( input &#91; labels = = i &#93; ) for i in index &#93; . DCNL Sequentially applies an arbitrary function ( that works on array _ like input ) DCNL to subsets of an n-D image array specified by `labels` and `index` . DCNL The option exists to provide the function with positional parameters as the DCNL second argument . DCNL Parameters DCNL input : array _ like DCNL Data from which to select `labels` to process . DCNL labels : array _ like or None DCNL Labels to objects in `input` . DCNL If not None , array must be same shape as `input` . DCNL If None , `func` is applied to raveled `input` . DCNL index : int , sequence of ints or None DCNL Subset of `labels` to which to apply `func` . DCNL If a scalar , a single value is returned . DCNL If None , `func` is applied to all non-zero values of `labels` . DCNL func : callable DCNL Python function to apply to `labels` from `input` . DCNL out _ dtype : dtype DCNL Dtype to use for `result` . DCNL default : int , float or None DCNL Default return value when a element of `index` does not exist DCNL in `labels` . DCNL pass _ positions : bool , optional DCNL If True , pass linear indices to `func` as a second argument . DCNL Default is False . DCNL Returns DCNL result : ndarray DCNL Result of applying `func` to each of `labels` to `input` in `index` . DCNL Examples DCNL &gt; &gt; &gt; a = np.array ( &#91; &#91; 1 , 2 , 0 , 0 &#93; , DCNL ... &#91; 5 , 3 , 0 , 4 &#93; , DCNL ... &#91; 0 , 0 , 0 , 7 &#93; , DCNL ... &#91; 9 , 3 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; from scipy import ndimage DCNL &gt; &gt; &gt; lbl , nlbl = ndimage.label ( a ) DCNL &gt; &gt; &gt; lbls = np.arange ( 1 , nlbl + 1 ) DCNL &gt; &gt; &gt; ndimage.labeled _ comprehension ( a , lbl , lbls , np.mean , float , 0 ) DCNL array ( &#91; 2.75 , 5.5 , 6 . &#93; ) DCNL Falling back to `default` : DCNL &gt; &gt; &gt; lbls = np.arange ( 1 , nlbl + 2 ) DCNL &gt; &gt; &gt; ndimage.labeled _ comprehension ( a , lbl , lbls , np.mean , float , -1 ) DCNL array ( &#91; 2.75 , 5.5 , 6 . , -1 . &#93; ) DCNL Passing positions : DCNL &gt; &gt; &gt; def fn ( val , pos ) : DCNL ... print ( &quot; fn says : % s : % s &quot; % ( val , pos ) ) DCNL ... return ( val.sum ( ) ) if ( pos.sum ( ) % 2 = = 0 ) else ( -val.sum ( ) ) DCNL &gt; &gt; &gt; ndimage.labeled _ comprehension ( a , lbl , lbls , fn , float , 0 , True ) DCNL fn says : &#91; 1 2 5 3 &#93; : &#91; 0 1 4 5 &#93; DCNL fn says : &#91; 4 7 &#93; : &#91; 7 11 &#93; DCNL fn says : &#91; 9 3 &#93; : &#91; 12 13 &#93; DCNL array ( &#91; 11 . , 11 . , -12 . , 0 . &#93; ) &apos;
def get _ file _ hash ( filePath ) : DCNL &apos; Returns the ed2k hash of a given file . &apos; 
def backup _ destroy ( context , backup _ id ) : DCNL &apos; Destroy the backup or raise if it does not exist . &apos; 
def _ _ determine _ resource _ obj ( service , resource ) : DCNL &apos; Find the desired resource object method container from the service . DCNL Args : DCNL service : &#91; stub &#93; Google API stub object . DCNL resource : &#91; string &#93; \ &apos; . \ &apos; delimited resource name in service API . &apos; 
def t _ preprocessor ( t ) : DCNL &apos; \ # ( . ) * ? \ n&apos;
def _ list _ designs ( user , querydict , page _ size , prefix = &apos; &apos; , is _ trashed = False ) : DCNL &apos; _ list _ designs ( user , querydict , page _ size , prefix , is _ trashed ) - &gt; ( page , filter _ param ) DCNL A helper to gather the designs page . It understands all the GET params in DCNL ``list _ designs`` , by reading keys from the ``querydict`` with the given ``prefix`` . &apos; 
def _ get _ hold ( line , pattern = _ _ HOLD _ PATTERN , full = True ) : DCNL &apos; Resolve a package name from a line containing the hold expression . If the DCNL regex is not matched , None is returned . DCNL yum = = &gt; 2 : vim-enhanced-7.4.629-5.el6. * DCNL dnf = = &gt; vim-enhanced-2 : 7.4.827-1.fc22. * &apos;
def boxplot _ frame _ groupby ( grouped , subplots = True , column = None , fontsize = None , rot = 0 , grid = True , ax = None , figsize = None , layout = None , * * kwds ) : DCNL &apos; Make box plots from DataFrameGroupBy data . DCNL Parameters DCNL grouped : Grouped DataFrame DCNL subplots : DCNL * ``False`` - no subplots will be used DCNL * ``True`` - create a subplot for each group DCNL column : column name or list of names , or vector DCNL Can be any valid input to groupby DCNL fontsize : int or string DCNL rot : label rotation angle DCNL grid : Setting this to True will show the grid DCNL ax : Matplotlib axis object , default None DCNL figsize : A tuple ( width , height ) in inches DCNL layout : tuple ( optional ) DCNL ( rows , columns ) for the layout of the plot DCNL kwds : other plotting keyword arguments to be passed to matplotlib boxplot DCNL function DCNL Returns DCNL dict of key / value = group key / DataFrame.boxplot return value DCNL or DataFrame.boxplot return value in case subplots = figures = False DCNL Examples DCNL &gt; &gt; &gt; import pandas DCNL &gt; &gt; &gt; import numpy as np DCNL &gt; &gt; &gt; import itertools DCNL &gt; &gt; &gt; tuples = &#91; t for t in itertools.product ( range ( 1000 ) , range ( 4 ) ) &#93; DCNL &gt; &gt; &gt; index = pandas.MultiIndex.from _ tuples ( tuples , names = &#91; \ &apos; lvl0 \ &apos; , \ &apos; lvl1 \ &apos; &#93; ) DCNL &gt; &gt; &gt; data = np.random.randn ( len ( index ) , 4 ) DCNL &gt; &gt; &gt; df = pandas.DataFrame ( data , columns = list ( \ &apos; ABCD \ &apos; ) , index = index ) DCNL &gt; &gt; &gt; grouped = df.groupby ( level = \ &apos; lvl1 \ &apos; ) DCNL &gt; &gt; &gt; boxplot _ frame _ groupby ( grouped ) DCNL &gt; &gt; &gt; grouped = df.unstack ( level = \ &apos; lvl1 \ &apos; ) .groupby ( level = 0 , axis = 1 ) DCNL &gt; &gt; &gt; boxplot _ frame _ groupby ( grouped , subplots = False ) &apos;
@ login _ required DCNL def delete _ favorite ( req , id ) : DCNL &apos; delete favorite and put favorite _ info object in response . DCNL method is idempotent , if favorite does not exist , just return favorite _ info . &apos; 
def set _ task _ user ( f ) : DCNL &apos; Sets the user to be the task user , then unsets it . &apos; 
@ treeio _ login _ required DCNL @ handle _ response _ format DCNL def ordered _ product _ add ( request , order _ id = None , response _ format = &apos; html &apos; ) : DCNL &apos; Add new Ordered Product&apos;
@ nx.utils.open _ file ( 5 , &apos; w &apos; ) DCNL def view _ pygraphviz ( G , edgelabel = None , prog = &apos; dot &apos; , args = &apos; &apos; , suffix = &apos; &apos; , path = None ) : DCNL &apos; Views the graph G using the specified layout algorithm . DCNL Parameters DCNL G : NetworkX graph DCNL The machine to draw . DCNL edgelabel : str , callable , None DCNL If a string , then it specifes the edge attribute to be displayed DCNL on the edge labels . If a callable , then it is called for each DCNL edge and it should return the string to be displayed on the edges . DCNL The function signature of `edgelabel` should be edgelabel ( data ) , DCNL where `data` is the edge attribute dictionary . DCNL prog : string DCNL Name of Graphviz layout program . DCNL args : str DCNL Additional arguments to pass to the Graphviz layout program . DCNL suffix : str DCNL If `filename` is None , we save to a temporary file . The value of DCNL `suffix` will appear at the tail end of the temporary filename . DCNL path : str , None DCNL The filename used to save the image . If None , save to a temporary DCNL file . File formats are the same as those from pygraphviz.agraph.draw. DCNL Returns DCNL path : str DCNL The filename of the generated image . DCNL A : PyGraphviz graph DCNL The PyGraphviz graph instance used to generate the image . DCNL Notes DCNL If this function is called in succession too quickly , sometimes the DCNL image is not displayed . So you might consider time.sleep ( .5 ) between DCNL calls if you experience problems . &apos; 
def parseString ( string , namespaces = True ) : DCNL &apos; Parse a document from a string , returning the resulting DCNL Document node . &apos; 
def getblock ( lines ) : DCNL &apos; Extract the block of code at the top of the given list of lines . &apos; 
def tolist ( val ) : DCNL &apos; Convert a value that may be a list or a ( possibly comma-separated ) DCNL string into a list . The exception : None is returned as None , not &#91; None &#93; . DCNL &gt; &gt; &gt; tolist ( &#91; &quot; one &quot; , &quot; two &quot; &#93; ) DCNL &#91; \ &apos; one \ &apos; , \ &apos; two \ &apos; &#93; DCNL &gt; &gt; &gt; tolist ( &quot; hello &quot; ) DCNL &#91; \ &apos; hello \ &apos; &#93; DCNL &gt; &gt; &gt; tolist ( &quot; separate , values , with , commas , spaces , are , ok &quot; ) DCNL &#91; \ &apos; separate \ &apos; , \ &apos; values \ &apos; , \ &apos; with \ &apos; , \ &apos; commas \ &apos; , \ &apos; spaces \ &apos; , \ &apos; are \ &apos; , \ &apos; ok \ &apos; &#93; &apos;
def worker _ destroy ( context , * * filters ) : DCNL &apos; Delete a worker ( no soft delete )  . &apos; 
def get _ output _ volume ( ) : DCNL &apos; Get the output volume ( range 0 to 100 ) DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; desktop.get _ output _ volume&apos;
@ manager _ config DCNL @ no _ xinerama DCNL def test _ last _ float _ size ( qtile ) : DCNL &apos; When you re-float something it would be preferable to have it use the previous float size&apos;
def create _ chunks ( sequence , size ) : DCNL &apos; Generate chunks from a sequence . DCNL Parameters DCNL sequence : iterable DCNL Any iterable object DCNL size : int DCNL The chunksize to be returned&apos;
def simplefilter ( action , category = Warning , lineno = 0 , append = 0 ) : DCNL &apos; Insert a simple entry into the list of warnings filters ( at the front ) . DCNL A simple filter matches all modules and messages . DCNL \ &apos; action \ &apos; -- one of &quot; error &quot; , &quot; ignore &quot; , &quot; always &quot; , &quot; default &quot; , &quot; module &quot; , DCNL or &quot; once &quot; DCNL \ &apos; category \ &apos; -- a class that the warning must be a subclass of DCNL \ &apos; lineno \ &apos; -- an integer line number , 0 matches all warnings DCNL \ &apos; append \ &apos; -- if true , append to the list of filters&apos;
def dont _ import _ local _ tempest _ into _ lib ( logical _ line , filename ) : DCNL &apos; Check that tempest.lib should not import local tempest code DCNL T112&apos;
def modify ( name , * * kwargs ) : DCNL &apos; Modify an existing job in the schedule DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; schedule.modify job1 function = \ &apos; test.ping \ &apos; seconds = 3600&apos;
def task _ upgrade _ kernel ( distribution ) : DCNL &apos; Upgrade kernel . &apos; 
@ app.route ( &apos; / delay / &lt; delay &gt; &apos; ) DCNL def delay _ response ( delay ) : DCNL &apos; Returns a delayed response&apos;
def is _ larger ( unit _ 1 , unit _ 2 ) : DCNL &apos; Returns a boolean indicating whether unit _ 1 is larger than unit _ 2 . DCNL E.g : DCNL &gt; &gt; &gt; is _ larger ( \ &apos; KB \ &apos; , \ &apos; B \ &apos; ) DCNL True DCNL &gt; &gt; &gt; is _ larger ( \ &apos; min \ &apos; , \ &apos; day \ &apos; ) DCNL False&apos;
def requirement _ available ( requirement ) : DCNL &apos; Checks if requirement can be imported . DCNL : rtype : bool DCNL : returns : ``True`` iff requirement can be imported&apos;
def _ trace _ D ( gj , p _ i , Dxtrav ) : DCNL &apos; Return the representative h satisfying h &#91; gj &#93; = = p _ i DCNL If there is not such a representative return None&apos;
def launch ( no _ flow = False , network = &apos; 192.168.0.0 / 24 &apos; , first = 1 , last = None , count = None , ip = &apos; 192.168.0.254 &apos; , router = ( ) , dns = ( ) ) : DCNL &apos; Launch DHCP server DCNL Defaults to serving 192.168.0.1 to 192.168.0.253 DCNL network Subnet to allocate addresses from DCNL first First \ &apos; th address in subnet to use ( 256 is x.x.1.0 in a / 16 ) DCNL last Last \ &apos; th address in subnet to use DCNL count Alternate way to specify last address to use DCNL ip IP to use for DHCP server DCNL router Router IP to tell clients . Defaults to \ &apos; ip \ &apos; . \ &apos; None \ &apos; will DCNL stop the server from telling clients anything DCNL dns DNS IP to tell clients . Defaults to \ &apos; router \ &apos; . \ &apos; None \ &apos; will DCNL stop the server from telling clients anything . &apos; 
def getparser ( use _ datetime = 0 ) : DCNL &apos; getparser ( ) - &gt; parser , unmarshaller DCNL Create an instance of the fastest available parser , and attach it DCNL to an unmarshalling object . Return both objects . &apos; 
def detachAcceptMsOriginating ( ) : DCNL &apos; DETACH ACCEPT Section 9.4.6.2&apos;
def protected _ view ( context , request ) : DCNL &apos; &apos;
def parse _ http _ load ( full _ load , http _ methods ) : DCNL &apos; Split the raw load into list of headers and body string&apos;
def long _ to _ bson _ ts ( val ) : DCNL &apos; Convert integer into BSON timestamp . &apos; 
def run ( cmd , cwd = None , stdin = None , runas = None , shell = DEFAULT _ SHELL , python _ shell = None , env = None , clean _ env = False , template = None , rstrip = True , umask = None , output _ loglevel = &apos; debug &apos; , log _ callback = None , timeout = None , reset _ system _ locale = True , ignore _ retcode = False , saltenv = &apos; base &apos; , use _ vt = False , bg = False , password = None , encoded _ cmd = False , * * kwargs ) : DCNL &apos; Execute the passed command and return the output as a string DCNL Note that ``env`` represents the environment variables for the command , and DCNL should be formatted as a dict , or a YAML string which resolves to a dict . DCNL : param str cmd : The command to run. ex : ``ls -lart / home`` DCNL : param str cwd : The current working directory to execute the command in . DCNL Defaults to the home directory of the user specified by ``runas`` . DCNL : param str stdin : A string of standard input can be specified for the DCNL command to be run using the ``stdin`` parameter . This can be useful in cases DCNL where sensitive information must be read from standard input . : DCNL : param str runas : User to run script as . If running on a Windows minion you DCNL must also pass a password DCNL : param str password : Windows only . Required when specifying ``runas`` . This DCNL parameter will be ignored on non-Windows platforms . DCNL .. versionadded : : 2016.3.0 DCNL : param str shell : Shell to execute under . Defaults to the system default DCNL shell . DCNL : param bool python _ shell : If False , let python handle the positional DCNL arguments . Set to True to use shell features , such as pipes or redirection DCNL : param bool bg : If True , run command in background and do not await or deliver it \ &apos; s results DCNL : param list env : A list of environment variables to be set prior to DCNL execution . DCNL Example : DCNL .. code-block : : yaml DCNL salt : / / scripts / foo.sh : DCNL cmd.script : DCNL - env : DCNL - BATCH : \ &apos; yes \ &apos; DCNL .. warning : : DCNL The above illustrates a common PyYAML pitfall , that * * yes * * , DCNL * * no * * , * * on * * , * * off * * , * * true * * , and * * false * * are all loaded as DCNL boolean ``True`` and ``False`` values , and must be enclosed in DCNL quotes to be used as strings . More info on this ( and other ) PyYAML DCNL idiosyncrasies can be found : ref : `here &lt; yaml-idiosyncrasies &gt; ` . DCNL Variables as values are not evaluated . So $ PATH in the following DCNL example is a literal \ &apos; $ PATH \ &apos; : DCNL .. code-block : : yaml DCNL salt : / / scripts / bar.sh : DCNL cmd.script : DCNL - env : &quot; PATH = / some / path : $ PATH &quot; DCNL One can still use the existing $ PATH by using a bit of Jinja : DCNL .. code-block : : yaml DCNL { % set current _ path = salt &#91; \ &apos; environ.get \ &apos; &#93; ( \ &apos; PATH \ &apos; , \ &apos; / bin : / usr / bin \ &apos; ) % } DCNL mycommand : DCNL cmd.run : DCNL - name : ls -l / DCNL - env : DCNL - PATH : { { &#91; current _ path , \ &apos; / my / special / bin \ &apos; &#93; &#124; join ( \ &apos; : \ &apos; ) } } DCNL : param bool clean _ env : Attempt to clean out all other shell environment DCNL variables and set only those provided in the \ &apos; env \ &apos; argument to this DCNL function . DCNL : param str template : If this setting is applied then the named templating DCNL engine will be used to render the downloaded file . Currently jinja , mako , DCNL and wempy are supported DCNL : param bool rstrip : Strip all whitespace off the end of output before it is DCNL returned . DCNL : param str umask : The umask ( in octal ) to use when running the command . DCNL : param str output _ loglevel : Control the loglevel at which the output from DCNL the command is logged . Note that the command being run will still be logged DCNL ( loglevel : DEBUG ) regardless , unless ``quiet`` is used for this value . DCNL : param int timeout : A timeout in seconds for the executed process to return . DCNL : param bool use _ vt : Use VT utils ( saltstack ) to stream the command output DCNL more interactively to the console and the logs . This is experimental . DCNL : param bool encoded _ cmd : Specify if the supplied command is encoded . DCNL Only applies to shell \ &apos; powershell \ &apos; . DCNL .. warning : : DCNL This function does not process commands through a shell DCNL unless the python _ shell flag is set to True . This means that any DCNL shell-specific functionality such as \ &apos; echo \ &apos; or the use of pipes , DCNL redirection or &amp; &amp; , should either be migrated to cmd.shell or DCNL have the python _ shell = True flag set here . DCNL The use of python _ shell = True means that the shell will accept _ any _ input DCNL including potentially malicious commands such as \ &apos; good _ command ; rm -rf / \ &apos; . DCNL Be absolutely certain that you have sanitized your input prior to using DCNL python _ shell = True DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run &quot; ls -l &#124; awk \ &apos; / foo / { print \ \ $ 2 } \ &apos; &quot; DCNL The template arg can be set to \ &apos; jinja \ &apos; or another supported template DCNL engine to render the command arguments before execution . DCNL For example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run template = jinja &quot; ls -l / tmp / { { grains.id } } &#124; awk \ &apos; / foo / { print \ \ $ 2 } \ &apos; &quot; DCNL Specify an alternate shell with the shell parameter : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run &quot; Get-ChildItem C : \ \ &quot; shell = \ &apos; powershell \ &apos; DCNL A string of standard input can be specified for the command to be run using DCNL the ``stdin`` parameter . This can be useful in cases where sensitive DCNL information must be read from standard input . : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run &quot; grep f &quot; stdin = \ &apos; one \ \ ntwo \ \ nthree \ \ nfour \ \ nfive \ \ n \ &apos; DCNL If an equal sign ( `` = `` ) appears in an argument to a Salt command it is DCNL interpreted as a keyword argument in the format ``key = val`` . That DCNL processing can be bypassed in order to pass an equal sign through to the DCNL remote shell command by manually specifying the kwarg : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run cmd = \ &apos; sed -e s / = / : / g \ &apos; &apos;
@ core _ helper DCNL def resource _ preview ( resource , package ) : DCNL &apos; Returns a rendered snippet for a embedded resource preview . DCNL Depending on the type , different previews are loaded . DCNL This could be an img tag where the image is loaded directly or an iframe DCNL that embeds a web page or a recline preview . &apos; 
def keybinding ( attr ) : DCNL &apos; Return keybinding&apos;
def forwards ( apps , schema _ editor ) : DCNL &apos; Add the service user . &apos; 
def get _ current _ timezone ( ) : DCNL &apos; Returns the currently active time zone as a tzinfo instance . &apos; 
def _ get _ lights ( ) : DCNL &apos; Get all available lighting devices . &apos; 
def saltstack ( parser , xml _ parent , data ) : DCNL &apos; yaml : saltstack DCNL Send a message to Salt API . Requires the : jenkins-wiki : `saltstack plugin DCNL &lt; saltstack-plugin &gt; ` . DCNL : arg str servername : Salt master server name ( required ) DCNL : arg str authtype : Authentication type ( \ &apos; pam \ &apos; or \ &apos; ldap \ &apos; , default \ &apos; pam \ &apos; ) DCNL : arg str credentials : Credentials ID for which to authenticate to Salt DCNL master ( required ) DCNL : arg str target : Target minions ( default \ &apos; \ &apos; ) DCNL : arg str targettype : Target type ( \ &apos; glob \ &apos; , \ &apos; pcre \ &apos; , \ &apos; list \ &apos; , \ &apos; grain \ &apos; , DCNL \ &apos; pillar \ &apos; , \ &apos; nodegroup \ &apos; , \ &apos; range \ &apos; , or \ &apos; compound \ &apos; , default \ &apos; glob \ &apos; ) DCNL : arg str function : Function to execute ( default \ &apos; \ &apos; ) DCNL : arg str arguments : Salt function arguments ( default \ &apos; \ &apos; ) DCNL : arg str kwarguments : Salt keyword arguments ( default \ &apos; \ &apos; ) DCNL : arg bool saveoutput : Save Salt return data into environment variable DCNL ( default false ) DCNL : arg str clientinterface : Client interface type ( \ &apos; local \ &apos; , \ &apos; local-batch \ &apos; , DCNL or \ &apos; runner \ &apos; , default \ &apos; local \ &apos; ) DCNL : arg bool wait : Wait for completion of command ( default false ) DCNL : arg str polltime : Number of seconds to wait before polling job completion DCNL status ( default \ &apos; \ &apos; ) DCNL : arg str batchsize : Salt batch size , absolute value or % -age ( default 100 % ) DCNL : arg str mods : Mods to runner ( default \ &apos; \ &apos; ) DCNL : arg bool setpillardata : Set Pillar data ( default false ) DCNL : arg str pillarkey : Pillar key ( default \ &apos; \ &apos; ) DCNL : arg str pillarvalue : Pillar value ( default \ &apos; \ &apos; ) DCNL Minimal Example : DCNL .. literalinclude : : .. / .. / tests / builders / fixtures / saltstack-minimal.yaml DCNL : language : yaml DCNL Full Example : DCNL .. literalinclude : : .. / .. / tests / builders / fixtures / saltstack-full.yaml DCNL : language : yaml&apos;
def compile _ file ( filepath , libraries = None , combined = &apos; bin , abi &apos; , optimize = True , extra _ args = None ) : DCNL &apos; Return the compile contract code . DCNL Args : DCNL filepath ( str ) : The path to the contract source code . DCNL libraries ( dict ) : A dictionary mapping library name to it \ &apos; s address . DCNL combined ( str ) : The argument for solc \ &apos; s --combined-json . DCNL optimize ( bool ) : Enable / disables compiler optimization . DCNL Returns : DCNL dict : A mapping from the contract name to it \ &apos; s binary . &apos; 
def test _ try _ finally _ regression ( c ) : DCNL &apos; &gt; &gt; &gt; test _ try _ finally _ regression ( True ) DCNL ( 123 , ) DCNL &gt; &gt; &gt; test _ try _ finally _ regression ( False ) DCNL Traceback ( most recent call last ) : DCNL UnboundLocalError : local variable \ &apos; a \ &apos; referenced before assignment&apos;
def send _ notif _ for _ after _ purchase ( user , invoice _ id , order _ url ) : DCNL &apos; Send notification with order invoice link after purchase&apos;
def make _ letterboxed _ thumbnail ( image , shape ) : DCNL &apos; Scales image down to shape . Preserves proportions of image , introduces DCNL black letterboxing if necessary . DCNL Parameters DCNL image : WRITEME DCNL shape : WRITEME DCNL Returns DCNL WRITEME&apos;
def threshold _ minimum ( image , nbins = 256 , bias = &apos; min &apos; , max _ iter = 10000 ) : DCNL &apos; Return threshold value based on minimum method . DCNL The histogram of the input `image` is computed and smoothed until there are DCNL only two maxima . Then the minimum in between is the threshold value . DCNL Parameters DCNL image : ( M , N ) ndarray DCNL Input image . DCNL nbins : int , optional DCNL Number of bins used to calculate histogram . This value is ignored for DCNL integer arrays . DCNL bias : { \ &apos; min \ &apos; , \ &apos; mid \ &apos; , \ &apos; max \ &apos; } , optional DCNL \ &apos; min \ &apos; , \ &apos; mid \ &apos; , \ &apos; max \ &apos; return lowest , middle , or highest pixel value DCNL with minimum histogram value . DCNL max _ iter : int , optional DCNL Maximum number of iterations to smooth the histogram . DCNL Returns DCNL threshold : float DCNL Upper threshold value . All pixels with an intensity higher than DCNL this value are assumed to be foreground . DCNL Raises DCNL RuntimeError DCNL If unable to find two local maxima in the histogram or if the DCNL smoothing takes more than 1e4 iterations . DCNL References DCNL .. &#91; 1 &#93; Prewitt , JMS &amp; Mendelsohn , ML ( 1966 ) , &quot; The analysis of cell images &quot; , DCNL Annals of the New York Academy of Sciences 128 : 1035-1053 DCNL DOI : 10.1111 / j.1749-6632.1965.tb11715.x DCNL Examples DCNL &gt; &gt; &gt; from skimage.data import camera DCNL &gt; &gt; &gt; image = camera ( ) DCNL &gt; &gt; &gt; thresh = threshold _ minimum ( image ) DCNL &gt; &gt; &gt; binary = image &gt; thresh&apos;
def Pluralize ( count , singular = &apos; &apos; , plural = &apos; s &apos; ) : DCNL &apos; Return the pluralization suffix for &quot; count &quot; item ( s ) . For example : DCNL \ &apos; item \ &apos; + Pluralize ( 1 ) = \ &apos; item \ &apos; DCNL \ &apos; item \ &apos; + Pluralize ( 2 ) = \ &apos; items \ &apos; DCNL \ &apos; activit \ &apos; + Pluralize ( 1 , \ &apos; y \ &apos; , \ &apos; ies \ &apos; ) = \ &apos; activity \ &apos; DCNL \ &apos; activit \ &apos; + Pluralize ( 0 , \ &apos; y \ &apos; , \ &apos; ies \ &apos; ) = \ &apos; activities \ &apos; &apos;
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL def index ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Default index page&apos;
def _ ssh _ slave _ addresses ( ssh _ bin , master _ address , ec2 _ key _ pair _ file ) : DCNL &apos; Get the IP addresses of the slave nodes . Fails silently because it DCNL makes testing easier and if things are broken they will fail before this DCNL function is called . &apos; 
def _ algorithm _ 2 _ 2 ( A , AT , t ) : DCNL &apos; This is Algorithm 2.2 . DCNL Parameters DCNL A : ndarray or other linear operator DCNL A linear operator that can produce matrix products . DCNL AT : ndarray or other linear operator DCNL The transpose of A. DCNL t : int , optional DCNL A positive parameter controlling the tradeoff between DCNL accuracy versus time and memory usage . DCNL Returns DCNL g : sequence DCNL A non-negative decreasing vector DCNL such that g &#91; j &#93; is a lower bound for the 1-norm DCNL of the column of A of jth largest 1-norm . DCNL The first entry of this vector is therefore a lower bound DCNL on the 1-norm of the linear operator A. DCNL This sequence has length t . DCNL ind : sequence DCNL The ith entry of ind is the index of the column A whose 1-norm DCNL is given by g &#91; i &#93; . DCNL This sequence of indices has length t , and its entries are DCNL chosen from range ( n ) , possibly with repetition , DCNL where n is the order of the operator A. DCNL Notes DCNL This algorithm is mainly for testing . DCNL It uses the \ &apos; ind \ &apos; array in a way that is similar to DCNL its usage in algorithm 2.4 . This algorithm 2.2 may be easier to test , DCNL so it gives a chance of uncovering bugs related to indexing DCNL which could have propagated less noticeably to algorithm 2.4 . &apos; 
def get _ user _ api _ key ( ) : DCNL &apos; Test user API key to use for functional tests . If set , this should drive DCNL API based testing - if not set master API key should be used to create a new DCNL user and API key for tests . &apos; 
def pad _ sequences ( sequences , maxlen = None , dtype = &apos; int32 &apos; , padding = &apos; post &apos; , truncating = &apos; pre &apos; , value = 0.0 ) : DCNL &apos; Pads each sequence to the same length : DCNL the length of the longest sequence . DCNL If maxlen is provided , any sequence longer DCNL than maxlen is truncated to maxlen . DCNL Truncation happens off either the beginning ( default ) or DCNL the end of the sequence . DCNL Supports post-padding and pre-padding ( default ) . DCNL Parameters DCNL sequences : list of lists where each element is a sequence DCNL maxlen : int , maximum length DCNL dtype : type to cast the resulting sequence . DCNL padding : \ &apos; pre \ &apos; or \ &apos; post \ &apos; , pad either before or after each sequence . DCNL truncating : \ &apos; pre \ &apos; or \ &apos; post \ &apos; , remove values from sequences larger than DCNL maxlen either in the beginning or in the end of the sequence DCNL value : float , value to pad the sequences to the desired value . DCNL Returns DCNL x : numpy array with dimensions ( number _ of _ sequences , maxlen ) DCNL Examples DCNL &gt; &gt; &gt; sequences = &#91; &#91; 1,1,1,1,1 &#93; , &#91; 2,2,2 &#93; , &#91; 3,3 &#93; &#93; DCNL &gt; &gt; &gt; sequences = pad _ sequences ( sequences , maxlen = None , dtype = \ &apos; int32 \ &apos; , DCNL ... padding = \ &apos; post \ &apos; , truncating = \ &apos; pre \ &apos; , value = 0 . ) DCNL ... &#91; &#91; 1 1 1 1 1 &#93; DCNL ... &#91; 2 2 2 0 0 &#93; DCNL ... &#91; 3 3 0 0 0 &#93; &#93; &apos;
def trim _ lex ( tokens ) : DCNL &apos; Takes a lexed set of tokens , and removes whitespace when there is DCNL a directive on a line by itself : DCNL &gt; &gt; &gt; tokens = lex ( \ &apos; { { if x } } \ nx \ n { { endif } } \ ny \ &apos; , trim _ whitespace = False ) DCNL &gt; &gt; &gt; tokens DCNL &#91; ( \ &apos; if x \ &apos; , ( 1 , 3 ) ) , \ &apos; \ nx \ n \ &apos; , ( \ &apos; endif \ &apos; , ( 3 , 3 ) ) , \ &apos; \ ny \ &apos; &#93; DCNL &gt; &gt; &gt; trim _ lex ( tokens ) DCNL &#91; ( \ &apos; if x \ &apos; , ( 1 , 3 ) ) , \ &apos; x \ n \ &apos; , ( \ &apos; endif \ &apos; , ( 3 , 3 ) ) , \ &apos; y \ &apos; &#93; &apos;
def overwrite _ from _ dates ( asof , dense _ dates , sparse _ dates , asset _ idx , value ) : DCNL &apos; Construct a `Float64Overwrite` with the correct DCNL start and end date based on the asof date of the delta , DCNL the dense _ dates , and the dense _ dates . DCNL Parameters DCNL asof : datetime DCNL The asof date of the delta . DCNL dense _ dates : pd.DatetimeIndex DCNL The dates requested by the loader . DCNL sparse _ dates : pd.DatetimeIndex DCNL The dates that appeared in the dataset . DCNL asset _ idx : tuple of int DCNL The index of the asset in the block . If this is a tuple , then this DCNL is treated as the first and last index to use . DCNL value : np.float64 DCNL The value to overwrite with . DCNL Returns DCNL overwrite : Float64Overwrite DCNL The overwrite that will apply the new value to the data . DCNL Notes DCNL This is forward-filling all dense dates that are between the asof _ date date DCNL and the next sparse date after the asof _ date . DCNL For example : DCNL let ``asof = pd.Timestamp ( \ &apos; 2014-01-02 \ &apos; ) `` , DCNL ``dense _ dates = pd.date _ range ( \ &apos; 2014-01-01 \ &apos; , \ &apos; 2014-01-05 \ &apos; ) `` DCNL ``sparse _ dates = pd.to _ datetime ( &#91; \ &apos; 2014-01 \ &apos; , \ &apos; 2014-02 \ &apos; , \ &apos; 2014-04 \ &apos; &#93; ) `` DCNL Then the overwrite will apply to indexes : 1 , 2 , 3 , 4&apos;
def item _ create ( item , item _ id , item _ type , create = &apos; create &apos; , extra _ args = None , cibfile = None ) : DCNL &apos; Create an item via pcs command DCNL ( mainly for use with the pcs state module ) DCNL item DCNL config , property , resource , constraint etc . DCNL item _ id DCNL id of the item DCNL item _ type DCNL item type DCNL create DCNL create command ( create or set f.e. , default : create ) DCNL extra _ args DCNL additional options for the pcs command DCNL cibfile DCNL use cibfile instead of the live CIB&apos;
def random _ reduce ( circuit , gate _ ids , seed = None ) : DCNL &apos; Shorten the length of a quantum circuit . DCNL random _ reduce looks for circuit identities in circuit , randomly chooses DCNL one to remove , and returns a shorter yet equivalent circuit . If no DCNL identities are found , the same circuit is returned . DCNL Parameters DCNL circuit : Gate tuple of Mul DCNL A tuple of Gates representing a quantum circuit DCNL gate _ ids : list , GateIdentity DCNL List of gate identities to find in circuit DCNL seed : int or list DCNL seed used for _ randrange ; to override the random selection , provide a DCNL list of integers : the elements of gate _ ids will be tested in the order DCNL given by the list&apos;
def _ connect _ user ( request , facebook , overwrite = True ) : DCNL &apos; Update the fields on the user model and connects it to the facebook account&apos;
def path _ separator ( ) : DCNL &apos; Get the path separator for the current operating system . The path DCNL separator is used to separate elements of a path string , such as DCNL &quot; PATH &quot; or &quot; CLASSPATH &quot; . ( It \ &apos; s a &quot; : &quot; on Unix-like systems and a &quot; ; &quot; DCNL on Windows . ) DCNL : rtype : str DCNL : return : the path separator&apos;
def write _ cron _ file ( user , path ) : DCNL &apos; Writes the contents of a file to a user \ &apos; s crontab DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cron.write _ cron _ file root / tmp / new _ cron DCNL .. versionchanged : : 2015.8.9 DCNL .. note : : DCNL Some OS \ &apos; do not support specifying user via the `crontab` command i.e. ( Solaris , AIX ) &apos;
def get _ img _ channel ( image _ path ) : DCNL &apos; Load a image and return the channel of the image DCNL : param image _ path : DCNL : return : the channel of the image&apos;
def get _ partial _ date _ formats ( ) : DCNL &apos; Checks whether translation files provide a translation for some technical DCNL message ID to store partial date formats . If it doesn \ &apos; t contain one , the DCNL formats provided in the settings will be used . &apos; 
def _ string _ from _ json ( value , _ ) : DCNL &apos; NOOP string - &gt; string coercion&apos;
def generate _ cert ( name ) : DCNL &apos; Generate an icinga2 certificate and key on the client . DCNL name DCNL The domain name for which this certificate and key will be generated&apos;
def check _ mount ( root , drive ) : DCNL &apos; Verify that the path to the device is a mount point and mounted . This DCNL allows us to fast fail on drives that have been unmounted because of DCNL issues , and also prevents us for accidentally filling up the root DCNL partition . DCNL : param root : base path where the devices are mounted DCNL : param drive : drive name to be checked DCNL : returns : True if it is a valid mounted device , False otherwise&apos;
def show ( config _ file = False ) : DCNL &apos; Return a list of sysctl parameters for this minion DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; sysctl.show&apos;
def _ step4 ( state ) : DCNL &apos; Find a noncovered zero and prime it . If there is no starred zero DCNL in the row containing this primed zero , Go to Step 5 . Otherwise , DCNL cover this row and uncover the column containing the starred DCNL zero . Continue in this manner until there are no uncovered zeros DCNL left . Save the smallest uncovered value and Go to Step 6 . &apos; 
def hook ( ui , repo , * * kwargs ) : DCNL &apos; Invoked by configuring a &#91; hook &#93; entry in .hg / hgrc . &apos; 
def is _ coroutine ( function ) : DCNL &apos; Returns True if the passed in function is a coroutine&apos;
def decompress ( fileobj , path ) : DCNL &apos; Take a * fileobj * correponding to the given path and returns an iterator DCNL that yield chunks of bytes , or , if * path * doesn \ &apos; t correspond to a DCNL compressed file type , * fileobj * itself . &apos; 
def nextLine ( ) : DCNL &apos; Retrive the file name and line number immediately after where this function DCNL is called . DCNL @ return : the file name and line number DCNL @ rtype : 2-L { tuple } of L { str } , L { int } &apos;
def _ ConvertToCygpath ( path ) : DCNL &apos; Convert to cygwin path if we are using cygwin . &apos; 
def load _ werkzeug ( path ) : DCNL &apos; Load werkzeug . &apos; 
def signature ( obj ) : DCNL &apos; Get a signature object for the passed callable . &apos; 
def set _ server _ setting ( settings , server = _ DEFAULT _ SERVER ) : DCNL &apos; Set the value of the setting for the SMTP virtual server . DCNL .. note : : DCNL The setting names are case-sensitive . DCNL : param str settings : A dictionary of the setting names and their values . DCNL : param str server : The SMTP server name . DCNL : return : A boolean representing whether all changes succeeded . DCNL : rtype : bool DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; win _ smtp _ server.set _ server _ setting settings = &quot; { \ &apos; MaxRecipients \ &apos; : \ &apos; 500 \ &apos; } &quot; &apos;
def get _ ip _ version ( network ) : DCNL &apos; Returns the IP version of a network ( IPv4 or IPv6 ) . Raises DCNL AddrFormatError if invalid network . &apos; 
def task _ accepted ( request , _ all _ total _ count = all _ total _ count , add _ active _ request = active _ requests.add , add _ to _ total _ count = total _ count.update ) : DCNL &apos; Update global state when a task has been accepted . &apos; 
def ustr ( value , hint _ encoding = &apos; utf-8 &apos; , errors = &apos; strict &apos; ) : DCNL &apos; This method is similar to the builtin `unicode` , except DCNL that it may try multiple encodings to find one that works DCNL for decoding `value` , and defaults to \ &apos; utf-8 \ &apos; first . DCNL : param : value : the value to convert DCNL : param : hint _ encoding : an optional encoding that was detecte DCNL upstream and should be tried first to decode ``value`` . DCNL : param str errors : optional `errors` flag to pass to the unicode DCNL built-in to indicate how illegal character values should be DCNL treated when converting a string : \ &apos; strict \ &apos; , \ &apos; ignore \ &apos; or \ &apos; replace \ &apos; DCNL ( see ``unicode ( ) `` constructor ) . DCNL Passing anything other than \ &apos; strict \ &apos; means that the first DCNL encoding tried will be used , even if it \ &apos; s not the correct DCNL one to use , so be careful ! Ignored if value is not a string / unicode . DCNL : raise : UnicodeError if value cannot be coerced to unicode DCNL : return : unicode string representing the given value&apos;
def make _ secret _ key ( project _ directory ) : DCNL &apos; Generates and saves random secret key&apos;
def deprecatedModuleAttribute ( version , message , moduleName , name ) : DCNL &apos; Declare a module-level attribute as being deprecated . DCNL @ type version : L { incremental.Version } DCNL @ param version : Version that the attribute was deprecated in DCNL @ type message : C { str } DCNL @ param message : Deprecation message DCNL @ type moduleName : C { str } DCNL @ param moduleName : Fully-qualified Python name of the module containing DCNL the deprecated attribute ; if called from the same module as the DCNL attributes are being deprecated in , using the C { _ _ name _ _ } global can DCNL be helpful DCNL @ type name : C { str } DCNL @ param name : Attribute name to deprecate&apos;
def _ tgrep _ rel _ disjunction _ action ( _ s , _ l , tokens ) : DCNL &apos; Builds a lambda function representing a predicate on a tree node DCNL from the disjunction of several other such lambda functions . &apos; 
def EnumTlbs ( excludeFlags = 0 ) : DCNL &apos; Return a list of TypelibSpec objects , one for each registered library . &apos; 
def samplesize _ confint _ proportion ( proportion , half _ length , alpha = 0.05 , method = &apos; normal &apos; ) : DCNL &apos; find sample size to get desired confidence interval length DCNL Parameters DCNL proportion : float in ( 0 , 1 ) DCNL proportion or quantile DCNL half _ length : float in ( 0 , 1 ) DCNL desired half length of the confidence interval DCNL alpha : float in ( 0 , 1 ) DCNL significance level , default 0.05 , DCNL coverage of the two-sided interval is ( approximately ) ``1 - alpha`` DCNL method : string in &#91; \ &apos; normal \ &apos; &#93; DCNL method to use for confidence interval , DCNL currently only normal approximation DCNL Returns DCNL n : float DCNL sample size to get the desired half length of the confidence interval DCNL Notes DCNL this is mainly to store the formula . DCNL possible application : number of replications in bootstrap samples&apos;
def test _ resample ( ) : DCNL &apos; Github issue # 6025 pointed to incorrect ListedColormap . _ resample ; DCNL here we test the method for LinearSegmentedColormap as well . &apos; 
@ treeio _ login _ required DCNL def account _ view ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Account view&apos;
def _ is _ resumable ( exc ) : DCNL &apos; Check if caught exception represents EINTR error . DCNL : param exc : exception ; must be one of classes in _ SELECT _ ERRORS&apos;
def get _ pointer ( ctypes _ func ) : DCNL &apos; Get a pointer to the underlying function for a ctypes function as an DCNL integer . &apos; 
def _ invalidWin32App ( pywinerr ) : DCNL &apos; Determine if a pywintypes.error is telling us that the given process is DCNL \ &apos; not a valid win32 application \ &apos; , i.e. not a PE format executable . DCNL @ param pywinerr : a pywintypes.error instance raised by CreateProcess DCNL @ return : a boolean&apos;
def _ generate _ meta ( ) : DCNL &apos; Generate Meta information for export&apos;
def assert _ array _ list _ equal ( xlist , ylist , err _ msg = &apos; &apos; , verbose = True ) : DCNL &apos; Compares lists of arrays pairwise with ``assert _ array _ equal`` . DCNL Args : DCNL x ( array _ like ) : Array of the actual objects . DCNL y ( array _ like ) : Array of the desired , expected objects . DCNL err _ msg ( str ) : The error message to be printed in case of failure . DCNL verbose ( bool ) : If ``True`` , the conflicting values DCNL are appended to the error message . DCNL Each element of ``x`` and ``y`` must be either : class : `numpy.ndarray` DCNL or : class : `cupy.ndarray`. ``x`` and ``y`` must have same length . DCNL Otherwise , this function raises ``AssertionError`` . DCNL It compares elements of ``x`` and ``y`` pairwise DCNL with : func : `assert _ array _ equal` and raises error if at least one DCNL pair is not equal . DCNL .. seealso : : : func : `numpy.testing.assert _ array _ equal`&apos;
def test _ system _ numerics _ complex ( ) : DCNL &apos; http : / / msdn.microsoft.com / en-us / library / system.numerics.complex ( VS.100 ) .aspx DCNL This should be tested minimally here , and hit comprehensively from number DCNL tests . Basically any &quot; complex &quot; test should pass against a Complex . &apos; 
def _ get _ output _ filename ( dataset _ dir , split _ name ) : DCNL &apos; Creates the output filename . DCNL Args : DCNL dataset _ dir : The dataset directory where the dataset is stored . DCNL split _ name : The name of the train / test split . DCNL Returns : DCNL An absolute file path . &apos; 
@ auth.route ( &apos; / reset-password &apos; , methods = &#91; &apos; GET &apos; , &apos; POST &apos; &#93; ) DCNL def forgot _ password ( ) : DCNL &apos; Sends a reset password token to the user . &apos; 
def request _ elements ( * args , * * kwargs ) : DCNL &apos; .. warning : : DCNL This function is * * deprecated * * and will be removed in version 0.1.0 ! DCNL Use the : meth : `.Authomatic.request _ elements` method instead . &apos; 
def lambdify ( leaves , expr ) : DCNL &apos; Lambda for an expresion DCNL &gt; &gt; &gt; t = symbol ( \ &apos; t \ &apos; , \ &apos; { x : int , y : int , z : int , when : datetime } \ &apos; ) DCNL &gt; &gt; &gt; f = lambdify ( &#91; t &#93; , t.x + t.y ) DCNL &gt; &gt; &gt; f ( ( 1 , 10 , 100 , \ &apos; \ &apos; ) ) DCNL 11 DCNL &gt; &gt; &gt; f = lambdify ( &#91; t.x , t.y , t.z , t.when &#93; , t.x + cos ( t.y ) ) DCNL &gt; &gt; &gt; f ( 1 , 0 , 100 , \ &apos; \ &apos; ) DCNL 2.0&apos;
def test _ escape _ decode ( ) : DCNL &apos; &apos;
def CheckForFunctionLengths ( filename , clean _ lines , linenum , function _ state , error ) : DCNL &apos; Reports for long function bodies . DCNL For an overview why this is done , see : DCNL http : / / google-styleguide.googlecode.com / svn / trunk / cppguide.xml # Write _ Short _ Functions DCNL Uses a simplistic algorithm assuming other style guidelines DCNL ( especially spacing ) are followed . DCNL Only checks unindented functions , so class members are unchecked . DCNL Trivial bodies are unchecked , so constructors with huge initializer lists DCNL may be missed . DCNL Blank / comment lines are not counted so as to avoid encouraging the removal DCNL of vertical space and comments just to get through a lint check . DCNL NOLINT * on the last line of a function * disables this check . DCNL Args : DCNL filename : The name of the current file . DCNL clean _ lines : A CleansedLines instance containing the file . DCNL linenum : The number of the line to check . DCNL function _ state : Current function name and lines in body so far . DCNL error : The function to call with any errors found . &apos; 
def display _ path ( path ) : DCNL &apos; Gives the display value for a given path , making it relative to cwd DCNL if possible . &apos; 
def run _ all ( plugin , args = &apos; &apos; ) : DCNL &apos; Run nagios plugin and return all the data execution with cmd.run _ all&apos;
def next _ redirect ( data , default , default _ view , * * get _ kwargs ) : DCNL &apos; Handle the &quot; where should I go next ? &quot; part of comment views . DCNL The next value could be a kwarg to the function ( ``default`` ) , or a DCNL `` ? next = ... `` GET arg , or the URL of a given view ( ``default _ view`` ) . See DCNL the view modules for examples . DCNL Returns an ``HttpResponseRedirect`` . &apos; 
def _ iexp ( x , M , L = 8 ) : DCNL &apos; Given integers x and M , M &gt; 0 , such that x / M is small in absolute DCNL value , compute an integer approximation to M * exp ( x / M ) . For 0 &lt; = DCNL x / M &lt; = 2.4 , the absolute error in the result is bounded by 60 ( and DCNL is usually much smaller )  . &apos; 
def ContactVCard ( parent ) : DCNL &apos; A factory for generating contact commands&apos;
def safecall ( func ) : DCNL &apos; Wraps a function so that it swallows exceptions . &apos; 
def quote _ unix ( value ) : DCNL &apos; Return a quoted ( shell-escaped ) version of the value which can be used as one token in a shell DCNL command line . DCNL : param value : Value to quote . DCNL : type value : ``str`` DCNL : rtype : ``str``&apos;
@ LocalContext DCNL def unpack _ many ( data , word _ size = None ) : DCNL &apos; unpack ( data , word _ size = None , endianness = None , sign = None ) - &gt; int list DCNL Splits `data` into groups of ``word _ size / / 8`` bytes and calls : func : `unpack` on each group . Returns a list of the results . DCNL `word _ size` must be a multiple of `8` or the string &quot; all &quot; . In the latter case a singleton list will always be returned . DCNL Args DCNL number ( int ) : String to convert DCNL word _ size ( int ) : Word size of the converted integers or the string &quot; all &quot; . DCNL endianness ( str ) : Endianness of the converted integer ( &quot; little &quot; / &quot; big &quot; ) DCNL sign ( str ) : Signedness of the converted integer ( False / True ) DCNL kwargs : Anything that can be passed to context.local DCNL Returns : DCNL The unpacked numbers . DCNL Examples : DCNL &gt; &gt; &gt; map ( hex , unpack _ many ( \ &apos; \ xaa \ x55 \ xcc \ x33 \ &apos; , 16 , endian = \ &apos; little \ &apos; , sign = False ) ) DCNL &#91; \ &apos; 0x55aa \ &apos; , \ &apos; 0x33cc \ &apos; &#93; DCNL &gt; &gt; &gt; map ( hex , unpack _ many ( \ &apos; \ xaa \ x55 \ xcc \ x33 \ &apos; , 16 , endian = \ &apos; big \ &apos; , sign = False ) ) DCNL &#91; \ &apos; 0xaa55 \ &apos; , \ &apos; 0xcc33 \ &apos; &#93; DCNL &gt; &gt; &gt; map ( hex , unpack _ many ( \ &apos; \ xaa \ x55 \ xcc \ x33 \ &apos; , 16 , endian = \ &apos; big \ &apos; , sign = True ) ) DCNL &#91; \ &apos; -0x55ab \ &apos; , \ &apos; -0x33cd \ &apos; &#93; DCNL &gt; &gt; &gt; map ( hex , unpack _ many ( \ &apos; \ xff \ x02 \ x03 \ &apos; , \ &apos; all \ &apos; , endian = \ &apos; little \ &apos; , sign = True ) ) DCNL &#91; \ &apos; 0x302ff \ &apos; &#93; DCNL &gt; &gt; &gt; map ( hex , unpack _ many ( \ &apos; \ xff \ x02 \ x03 \ &apos; , \ &apos; all \ &apos; , endian = \ &apos; big \ &apos; , sign = True ) ) DCNL &#91; \ &apos; -0xfdfd \ &apos; &#93; &apos;
def prox _ l21 ( Y , alpha , n _ orient , shape = None , is _ stft = False ) : DCNL &apos; Proximity operator for l21 norm . DCNL L2 over columns and L1 over rows = &gt; groups contain n _ orient rows . DCNL It can eventually take into account the negative frequencies DCNL when a complex value is passed and is _ stft = True . DCNL Example DCNL &gt; &gt; &gt; Y = np.tile ( np.array ( &#91; 0 , 4 , 3 , 0 , 0 &#93; , dtype = np.float ) , ( 2 , 1 ) ) DCNL &gt; &gt; &gt; Y = np.r _ &#91; Y , np.zeros _ like ( Y ) &#93; DCNL &gt; &gt; &gt; print ( Y ) DCNL &#91; &#91; 0 . 4 . 3 . 0 . 0 . &#93; DCNL &#91; 0 . 4 . 3 . 0 . 0 . &#93; DCNL &#91; 0 . 0 . 0 . 0 . 0 . &#93; DCNL &#91; 0 . 0 . 0 . 0 . 0 . &#93; &#93; DCNL &gt; &gt; &gt; Yp , active _ set = prox _ l21 ( Y , 2 , 2 ) DCNL &gt; &gt; &gt; print ( Yp ) DCNL &#91; &#91; 0 . 2.86862915 2.15147186 0 . 0 . &#93; DCNL &#91; 0 . 2.86862915 2.15147186 0 . 0 . &#93; &#93; DCNL &gt; &gt; &gt; print ( active _ set ) DCNL &#91; True True False False &#93; &apos;
def interval _ distance ( label1 , label2 ) : DCNL &apos; Krippendorff \ &apos; s interval distance metric DCNL &gt; &gt; &gt; from nltk.metrics import interval _ distance DCNL &gt; &gt; &gt; interval _ distance ( 1,10 ) DCNL 81 DCNL Krippendorff 1980 , Content Analysis : An Introduction to its Methodology&apos;
@ _ FFI.callback ( u &apos;Value ( ExternContext * , DCSP uint8 _ t * , DCSP uint64 _ t ) &apos; ) DCNL def extern _ create _ exception ( context _ handle , msg _ ptr , msg _ len ) : DCNL &apos; Given a utf8 message string , create an Exception object . &apos; 
def deprecatedProperty ( version , replacement = None ) : DCNL &apos; Return a decorator that marks a property as deprecated . To deprecate a DCNL regular callable or class , see L { deprecated } . DCNL @ type version : L { incremental.Version } DCNL @ param version : The version in which the callable will be marked as DCNL having been deprecated . The decorated function will be annotated DCNL with this version , having it set as its C { deprecatedVersion } DCNL attribute . DCNL @ param version : the version that the callable was deprecated in . DCNL @ type version : L { incremental.Version } DCNL @ param replacement : what should be used in place of the callable . DCNL Either pass in a string , which will be inserted into the warning DCNL message , or a callable , which will be expanded to its full import DCNL path . DCNL @ type replacement : C { str } or callable DCNL @ return : A new property with deprecated setter and getter . DCNL @ rtype : C { property } DCNL @ since : 16.1.0&apos;
def get _ flow ( db _ api , image _ service _ api , availability _ zones , create _ what , scheduler _ rpcapi = None , volume _ rpcapi = None ) : DCNL &apos; Constructs and returns the api entrypoint flow . DCNL This flow will do the following : DCNL 1 . Inject keys &amp; values for dependent tasks . DCNL 2 . Extracts and validates the input keys &amp; values . DCNL 3 . Reserves the quota ( reverts quota on any failures ) . DCNL 4 . Creates the database entry . DCNL 5 . Commits the quota . DCNL 6 . Casts to volume manager or scheduler for further processing . &apos; 
def ensure _ completely _ loaded ( force = False ) : DCNL &apos; This method ensures all models are completely loaded DCNL FeinCMS requires Django to be completely initialized before proceeding , DCNL because of the extension mechanism and the dynamically created content DCNL types . DCNL For more informations , have a look at issue # 23 on github : DCNL http : / / github.com / feincms / feincms / issues # issue / 23&apos;
def stub _ out ( test , funcs ) : DCNL &apos; Set the stubs in mapping in the db api . &apos; 
def _ close _ conn ( conn ) : DCNL &apos; Close the postgres connection . &apos; 
def deleted ( cond ) : DCNL &apos; &gt; &gt; &gt; deleted ( False ) DCNL &gt; &gt; &gt; deleted ( True ) DCNL Traceback ( most recent call last ) : DCNL UnboundLocalError : local variable \ &apos; a \ &apos; referenced before assignment&apos;
def run ( command ) : DCNL &apos; Execute a single command and check the returns&apos;
def decode _ barcode _ 8 ( nt _ barcode ) : DCNL &apos; Decode length 8 barcode ( 16 bits ) &apos;
def gen _ lower _ listing ( path = None ) : DCNL &apos; Generate lowering listing to ``path`` or ( if None ) to stdout . &apos; 
def getmacbyip ( ip , chainCC = 0 ) : DCNL &apos; Return MAC address corresponding to a given IP address&apos;
def RekallEProcessRenderer ( x ) : DCNL &apos; Function used to render Rekall \ &apos; _ EPROCESS \ &apos; objects . &apos; 
def requires _ auth ( f ) : DCNL &apos; Custom decorator to restrict non-login access to views DCNL sets g.user to the successfully authenticated user DCNL Allows JWT token based access and Basic auth access DCNL Falls back to active session if both are not present&apos;
def test _ get _ editor _ filter ( ) : DCNL &apos; Tests editor filters are correctly constructed . &apos; 
def build _ docs ( branch ) : DCNL &apos; Changes into gitdname and builds the docs using BUILDENV virtualenv&apos;
def global _ subsystem _ instance ( subsystem _ type , options = None ) : DCNL &apos; Returns the global instance of a subsystem , for use in tests . DCNL : API : public DCNL : param type subsystem _ type : The subclass of : class : `pants.subsystem.subsystem.Subsystem` DCNL to create . DCNL : param options : dict of scope - &gt; ( dict of option name - &gt; value ) . DCNL The scopes may be that of the global instance of the subsystem ( i.e. , DCNL subsystem _ type.options _ scope ) and / or the scopes of instances of the DCNL subsystems it transitively depends on . &apos; 
def _ check _ surfaces ( surfs ) : DCNL &apos; Check that the surfaces are complete and non-intersecting . &apos; 
def is _ pidfile _ stale ( pidfile ) : DCNL &apos; Determine whether a PID file is stale . DCNL Return ``True`` ( “ stale ” ) if the contents of the PID file are DCNL valid but do not match the PID of a currently-running process ; DCNL otherwise return ``False`` . &apos; 
def _ lookup _ syslog _ config ( config ) : DCNL &apos; Helper function that looks up syslog _ config keys available from DCNL ``vsphere.get _ syslog _ config`` . &apos; 
def trimHistory ( ) : DCNL &apos; Trims history table to 1 month of history from today&apos;
def create _ comment ( request , comment _ data ) : DCNL &apos; Create a comment . DCNL Arguments : DCNL request : The django request object used for build _ absolute _ uri and DCNL determining the requesting user . DCNL comment _ data : The data for the created comment . DCNL Returns : DCNL The created comment ; see discussion _ api.views.CommentViewSet for more DCNL detail . &apos; 
@ hook.command ( &apos; scuser &apos; ) DCNL def soundcloud _ user ( text ) : DCNL &apos; &lt; query &gt; -- Searches for users on SoundCloud . &apos; 
def EMSA _ PSS _ ENCODE ( mhash , emBits , randFunc , mgf , sLen ) : DCNL &apos; Implement the ``EMSA-PSS-ENCODE`` function , as defined DCNL in PKCS # 1 v2.1 ( RFC3447 , 9.1.1 ) . DCNL The original ``EMSA-PSS-ENCODE`` actually accepts the message ``M`` as input , DCNL and hash it internally . Here , we expect that the message has already DCNL been hashed instead . DCNL : Parameters : DCNL mhash : hash object DCNL The hash object that holds the digest of the message being signed . DCNL emBits : int DCNL Maximum length of the final encoding , in bits . DCNL randFunc : callable DCNL An RNG function that accepts as only parameter an int , and returns DCNL a string of random bytes , to be used as salt . DCNL mgf : callable DCNL A mask generation function that accepts two parameters : a string to DCNL use as seed , and the lenth of the mask to generate , in bytes . DCNL sLen : int DCNL Length of the salt , in bytes . DCNL : Return : An ``emLen`` byte long string that encodes the hash DCNL ( with ``emLen = \ ceil ( emBits / 8 ) `` ) . DCNL : Raise ValueError : DCNL When digest or salt length are too big . &apos; 
@ verbose DCNL def _ apply _ dics ( data , info , tmin , forward , noise _ csd , data _ csd , reg , label = None , picks = None , pick _ ori = None , verbose = None ) : DCNL &apos; Dynamic Imaging of Coherent Sources ( DICS ) . DCNL Calculate the DICS spatial filter based on a given cross-spectral DCNL density object and return estimates of source activity based on given data . DCNL Parameters DCNL data : array or list / iterable DCNL Sensor space data . If data.ndim = = 2 a single observation is assumed DCNL and a single stc is returned . If data.ndim = = 3 or if data is DCNL a list / iterable , a list of stc \ &apos; s is returned . DCNL info : dict DCNL Measurement info . DCNL tmin : float DCNL Time of first sample . DCNL forward : dict DCNL Forward operator . DCNL noise _ csd : instance of CrossSpectralDensity DCNL The noise cross-spectral density . DCNL data _ csd : instance of CrossSpectralDensity DCNL The data cross-spectral density . DCNL reg : float DCNL The regularization for the cross-spectral density . DCNL label : Label &#124; None DCNL Restricts the solution to a given label . DCNL picks : array-like of int &#124; None DCNL Indices ( in info ) of data channels . If None , MEG and EEG data channels DCNL ( without bad channels ) will be used . DCNL pick _ ori : None &#124; \ &apos; normal \ &apos; DCNL If \ &apos; normal \ &apos; , rather than pooling the orientations by taking the norm , DCNL only the radial component is kept . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL stc : SourceEstimate &#124; VolSourceEstimate DCNL Source time courses&apos;
def spearmanr ( a , b = None , axis = 0 , nan _ policy = &apos; propagate &apos; ) : DCNL &apos; Calculates a Spearman rank-order correlation coefficient and the p-value DCNL to test for non-correlation . DCNL The Spearman correlation is a nonparametric measure of the monotonicity DCNL of the relationship between two datasets . Unlike the Pearson correlation , DCNL the Spearman correlation does not assume that both datasets are normally DCNL distributed . Like other correlation coefficients , this one varies DCNL between -1 and + 1 with 0 implying no correlation . Correlations of -1 or DCNL + 1 imply an exact monotonic relationship . Positive correlations imply that DCNL as x increases , so does y . Negative correlations imply that as x DCNL increases , y decreases . DCNL The p-value roughly indicates the probability of an uncorrelated system DCNL producing datasets that have a Spearman correlation at least as extreme DCNL as the one computed from these datasets . The p-values are not entirely DCNL reliable but are probably reasonable for datasets larger than 500 or so . DCNL Parameters DCNL a , b : 1D or 2D array _ like , b is optional DCNL One or two 1-D or 2-D arrays containing multiple variables and DCNL observations . When these are 1-D , each represents a vector of DCNL observations of a single variable . For the behavior in the 2-D case , DCNL see under ``axis`` , below . DCNL Both arrays need to have the same length in the ``axis`` dimension . DCNL axis : int or None , optional DCNL If axis = 0 ( default ) , then each column represents a variable , with DCNL observations in the rows . If axis = 1 , the relationship is transposed : DCNL each row represents a variable , while the columns contain observations . DCNL If axis = None , then both arrays will be raveled . DCNL nan _ policy : { \ &apos; propagate \ &apos; , \ &apos; raise \ &apos; , \ &apos; omit \ &apos; } , optional DCNL Defines how to handle when input contains nan . \ &apos; propagate \ &apos; returns nan , DCNL \ &apos; raise \ &apos; throws an error , \ &apos; omit \ &apos; performs the calculations ignoring nan DCNL values . Default is \ &apos; propagate \ &apos; . DCNL Returns DCNL correlation : float or ndarray ( 2-D square ) DCNL Spearman correlation matrix or correlation coefficient ( if only 2 DCNL variables are given as parameters . Correlation matrix is square with DCNL length equal to total number of variables ( columns or rows ) in a and b DCNL combined . DCNL pvalue : float DCNL The two-sided p-value for a hypothesis test whose null hypothesis is DCNL that two sets of data are uncorrelated , has same dimension as rho . DCNL Notes DCNL Changes in scipy 0.8.0 : rewrite to add tie-handling , and axis . DCNL References DCNL .. &#91; 1 &#93; Zwillinger , D. and Kokoska , S. ( 2000 ) . CRC Standard DCNL Probability and Statistics Tables and Formulae . Chapman &amp; Hall : New DCNL York . 2000 . DCNL Section 14.7 DCNL Examples DCNL &gt; &gt; &gt; from scipy import stats DCNL &gt; &gt; &gt; stats.spearmanr ( &#91; 1,2,3,4,5 &#93; , &#91; 5,6,7,8,7 &#93; ) DCNL ( 0.82078268166812329 , 0.088587005313543798 ) DCNL &gt; &gt; &gt; np.random.seed ( 1234321 ) DCNL &gt; &gt; &gt; x2n = np.random.randn ( 100 , 2 ) DCNL &gt; &gt; &gt; y2n = np.random.randn ( 100 , 2 ) DCNL &gt; &gt; &gt; stats.spearmanr ( x2n ) DCNL ( 0.059969996999699973 , 0.55338590803773591 ) DCNL &gt; &gt; &gt; stats.spearmanr ( x2n &#91; : , 0 &#93; , x2n &#91; : , 1 &#93; ) DCNL ( 0.059969996999699973 , 0.55338590803773591 ) DCNL &gt; &gt; &gt; rho , pval = stats.spearmanr ( x2n , y2n ) DCNL &gt; &gt; &gt; rho DCNL array ( &#91; &#91; 1 . , 0.05997 , 0.18569457 , 0.06258626 &#93; , DCNL &#91; 0.05997 , 1 . , 0.110003 , 0.02534653 &#93; , DCNL &#91; 0.18569457 , 0.110003 , 1 . , 0.03488749 &#93; , DCNL &#91; 0.06258626 , 0.02534653 , 0.03488749 , 1 . &#93; &#93; ) DCNL &gt; &gt; &gt; pval DCNL array ( &#91; &#91; 0 . , 0.55338591 , 0.06435364 , 0.53617935 &#93; , DCNL &#91; 0.55338591 , 0 . , 0.27592895 , 0.80234077 &#93; , DCNL &#91; 0.06435364 , 0.27592895 , 0 . , 0.73039992 &#93; , DCNL &#91; 0.53617935 , 0.80234077 , 0.73039992 , 0 . &#93; &#93; ) DCNL &gt; &gt; &gt; rho , pval = stats.spearmanr ( x2n.T , y2n.T , axis = 1 ) DCNL &gt; &gt; &gt; rho DCNL array ( &#91; &#91; 1 . , 0.05997 , 0.18569457 , 0.06258626 &#93; , DCNL &#91; 0.05997 , 1 . , 0.110003 , 0.02534653 &#93; , DCNL &#91; 0.18569457 , 0.110003 , 1 . , 0.03488749 &#93; , DCNL &#91; 0.06258626 , 0.02534653 , 0.03488749 , 1 . &#93; &#93; ) DCNL &gt; &gt; &gt; stats.spearmanr ( x2n , y2n , axis = None ) DCNL ( 0.10816770419260482 , 0.1273562188027364 ) DCNL &gt; &gt; &gt; stats.spearmanr ( x2n.ravel ( ) , y2n.ravel ( ) ) DCNL ( 0.10816770419260482 , 0.1273562188027364 ) DCNL &gt; &gt; &gt; xint = np.random.randint ( 10 , size = ( 100 , 2 ) ) DCNL &gt; &gt; &gt; stats.spearmanr ( xint ) DCNL ( 0.052760927029710199 , 0.60213045837062351 ) &apos;
def get _ default _ gcs _ bucket _ name ( deadline = None ) : DCNL &apos; Gets the default gs bucket name for the app . DCNL Args : DCNL deadline : Optional deadline in seconds for the operation ; the default DCNL is a system-specific deadline ( typically 5 seconds ) . DCNL Returns : DCNL Default bucket name for the app . &apos; 
def notify _ info _ yielded ( event ) : DCNL &apos; Makes a generator send the event \ &apos; event \ &apos; every time it yields . DCNL This decorator is supposed to decorate a generator , but any function DCNL returning an iterable should work . DCNL Each yielded value is passed to plugins using the \ &apos; info \ &apos; parameter of DCNL \ &apos; send \ &apos;  . &apos; 
def LoadSingleAppInfo ( app _ info ) : DCNL &apos; Load a single AppInfo object where one and only one is expected . DCNL Validates that the the values in the AppInfo match the validators defined DCNL in this file . ( in particular , in AppInfoExternal.ATTRIBUTES ) DCNL Args : DCNL app _ info : A file-like object or string . If it is a string , parse it as DCNL a configuration file . If it is a file-like object , read in data and DCNL parse . DCNL Returns : DCNL An instance of AppInfoExternal as loaded from a YAML file . DCNL Raises : DCNL ValueError : if a specified service is not valid . DCNL EmptyConfigurationFile : when there are no documents in YAML file . DCNL MultipleConfigurationFile : when there is more than one document in YAML DCNL file . DCNL DuplicateBackend : if backend is found more than once in \ &apos; backends \ &apos; . DCNL yaml _ errors.EventError : if the app.yaml fails validation . DCNL appinfo _ errors.MultipleProjectNames : if the app.yaml has both \ &apos; application \ &apos; DCNL and \ &apos; project \ &apos;  . &apos; 
def IDAnalyzer ( lowercase = False ) : DCNL &apos; Deprecated , just use an IDTokenizer directly , with a LowercaseFilter if DCNL desired . &apos; 
def _ CopyDocumentToProtocolBuffer ( document , pb ) : DCNL &apos; Copies Document to a document _ pb.Document protocol buffer . &apos; 
def buttap ( N ) : DCNL &apos; Return ( z , p , k ) for analog prototype of Nth-order Butterworth filter . DCNL The filter will have an angular ( e.g. rad / s ) cutoff frequency of 1 . DCNL See Also DCNL butter : Filter design function using this prototype&apos;
def _ get _ limit _ param ( request ) : DCNL &apos; Extract integer limit from request or fail&apos;
def _ validate _ snap _ name ( name , snap _ name , strict = True , runas = None ) : DCNL &apos; Validate snapshot name and convert to snapshot ID DCNL : param str name : DCNL Name / ID of VM whose snapshot name is being validated DCNL : param str snap _ name : DCNL Name / ID of snapshot DCNL : param bool strict : DCNL Raise an exception if multiple snapshot IDs are found DCNL : param str runas : DCNL The user that the prlctl command will be run as&apos;
def read _ font _ record ( data , extent = 1040 ) : DCNL &apos; Return the font encoded in the MOBI FONT record represented by data . DCNL The return value in a dict with fields raw _ data , font _ data , err , ext , DCNL headers . DCNL : param extent : The number of obfuscated bytes . So far I have only DCNL encountered files with 1040 obfuscated bytes . If you encounter an DCNL obfuscated record for which this function fails , try different extent DCNL values ( easily automated ) . DCNL raw _ data is the raw data in the font record DCNL font _ data is the decoded font _ data or None if an error occurred DCNL err is not None if some error occurred DCNL ext is the font type ( ttf for TrueType , dat for unknown and failed if an DCNL error occurred ) DCNL headers is the list of decoded headers from the font record or None if DCNL decoding failed&apos;
def create _ version _ h ( svn _ version ) : DCNL &apos; Create lxml-version.h&apos;
@ authenticated _ json _ view DCNL @ has _ request _ variables DCNL def json _ subscription _ property ( request , user _ profile , subscription _ data = REQ ( validator = check _ list ( check _ dict ( &#91; ( &apos; stream &apos; , check _ string ) , ( &apos; property &apos; , check _ string ) , ( &apos; value &apos; , check _ variable _ type ( &#91; check _ string , check _ bool &#93; ) ) &#93; ) ) ) ) : DCNL &apos; This is the entry point to changing subscription properties . This DCNL is a bulk endpoint : requestors always provide a subscription _ data DCNL list containing dictionaries for each stream of interest . DCNL Requests are of the form : DCNL &#91; { &quot; stream &quot; : &quot; devel &quot; , &quot; property &quot; : &quot; in _ home _ view &quot; , &quot; value &quot; : False } , DCNL { &quot; stream &quot; : &quot; devel &quot; , &quot; property &quot; : &quot; color &quot; , &quot; value &quot; : &quot; # c2c2c2 &quot; } &#93; &apos;
def process _ options ( arglist = None , parse _ argv = False , config _ file = None , parser = None ) : DCNL &apos; Process options passed either via arglist or via command line args . &apos; 
def project _ time _ week ( row ) : DCNL &apos; Virtual field for project _ time - returns the date of the Monday DCNL ( = first day of the week ) of this entry , used for project time report . DCNL Requires &quot; date &quot; to be in the additional report _ fields DCNL @ param row : the Row&apos;
def start _ time ( pid ) : DCNL &apos; Provides the unix timestamp when the given process started . DCNL : param int pid : process id of the process to be queried DCNL : returns : * * float * * for the unix timestamp when the process began , * * None * * DCNL if it can \ &apos; t be determined&apos;
def init ( mpstate ) : DCNL &apos; initialise module&apos;
def get _ avg _ dists ( state1 _ samids , state2 _ samids , distdict ) : DCNL &apos; foreach sample in stat1 _ sams , return average dist to all state2 _ sams DCNL doesn \ &apos; t include distance to self in average , but usually state2 doesn \ &apos; t DCNL overlap with state1 , so it dist to self doesn \ &apos; t apply DCNL returns a list of length = len ( state1 _ samids ) &apos;
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL def project _ edit ( request , project _ id , response _ format = &apos; html &apos; ) : DCNL &apos; Project edit page&apos;
def _ get _ search _ rank ( collection _ id ) : DCNL &apos; Gets the search rank of a given collection . DCNL Args : DCNL collection _ id : str . ID of the collection whose rank is to be retrieved . DCNL Returns : DCNL int . An integer determining the document \ &apos; s rank in search . DCNL Featured collections get a ranking bump , and so do collections that DCNL have been more recently updated . &apos; 
def register ( ) : DCNL &apos; Plugin registration . &apos; 
def abspath ( path ) : DCNL &apos; Return an absolute path . &apos; 
def foldersAtPath ( path , includeParent = False ) : DCNL &apos; Returns a list of dictionaries with the folders contained at the given path DCNL Give the empty string as the path to list the contents of the root path DCNL under Unix this means &quot; / &quot; , on Windows this will be a list of drive letters ) &apos;
def in6 _ get6to4Prefix ( addr ) : DCNL &apos; Returns the / 48 6to4 prefix associated with provided IPv4 address DCNL On error , None is returned . No check is performed on public / private DCNL status of the address&apos;
def _ aggr _ mean ( inList ) : DCNL &apos; Returns mean of non-None elements of the list&apos;
def copytree ( src , dst , symlinks = False , ignore = None , copy _ function = copy2 , ignore _ dangling _ symlinks = False ) : DCNL &apos; Recursively copy a directory tree . DCNL The destination directory must not already exist . DCNL If exception ( s ) occur , an Error is raised with a list of reasons . DCNL If the optional symlinks flag is true , symbolic links in the DCNL source tree result in symbolic links in the destination tree ; if DCNL it is false , the contents of the files pointed to by symbolic DCNL links are copied . If the file pointed by the symlink doesn \ &apos; t DCNL exist , an exception will be added in the list of errors raised in DCNL an Error exception at the end of the copy process . DCNL You can set the optional ignore _ dangling _ symlinks flag to true if you DCNL want to silence this exception . Notice that this has no effect on DCNL platforms that don \ &apos; t support os.symlink. DCNL The optional ignore argument is a callable . If given , it DCNL is called with the `src` parameter , which is the directory DCNL being visited by copytree ( ) , and `names` which is the list of DCNL `src` contents , as returned by os.listdir ( ) : DCNL callable ( src , names ) - &gt; ignored _ names DCNL Since copytree ( ) is called recursively , the callable will be DCNL called once for each directory that is copied . It returns a DCNL list of names relative to the `src` directory that should DCNL not be copied . DCNL The optional copy _ function argument is a callable that will be used DCNL to copy each file . It will be called with the source path and the DCNL destination path as arguments . By default , copy2 ( ) is used , but any DCNL function that supports the same signature ( like copy ( ) ) can be used . &apos; 
def test _ zeros ( ) : DCNL &apos; Test reconstruction with image and mask of zeros&apos;
def append _ slash _ redirect ( environ , code = 301 ) : DCNL &apos; Redirect to the same URL but with a slash appended . The behavior DCNL of this function is undefined if the path ends with a slash already . DCNL : param environ : the WSGI environment for the request that triggers DCNL the redirect . DCNL : param code : the status code for the redirect . &apos; 
def javascript _ catalog ( request , domain = &apos; djangojs &apos; , packages = None ) : DCNL &apos; Returns the selected language catalog as a javascript library . DCNL Receives the list of packages to check for translations in the DCNL packages parameter either from an infodict or as a + -delimited DCNL string from the request . Default is \ &apos; django.conf \ &apos; . DCNL Additionally you can override the gettext domain for this view , DCNL but usually you don \ &apos; t want to do that , as JavaScript messages DCNL go to the djangojs domain . But this might be needed if you DCNL deliver your JavaScript source from Django templates . &apos; 
def serialize ( node , stream = None , Dumper = Dumper , * * kwds ) : DCNL &apos; Serialize a representation tree into a YAML stream . DCNL If stream is None , return the produced string instead . &apos; 
def group _ list _ of _ dict ( array ) : DCNL &apos; Helper method to group list of dict to dict with all possible values&apos;
def log ( s ) : DCNL &apos; Print a log message to stderr . &apos; 
def bind _ expression _ to _ resources ( expr , resources ) : DCNL &apos; Bind a Blaze expression to resources . DCNL Parameters DCNL expr : bz.Expr DCNL The expression to which we want to bind resources . DCNL resources : dict &#91; bz.Symbol - &gt; any &#93; DCNL Mapping from the loadable terms of ``expr`` to actual data resources . DCNL Returns DCNL bound _ expr : bz.Expr DCNL ``expr`` with bound resources . &apos; 
@ release.command ( ) DCNL def changelog ( ) : DCNL &apos; Get the most recent version \ &apos; s changelog as Markdown . &apos; 
def test _ sobel _ h _ horizontal ( ) : DCNL &apos; Horizontal Sobel on an edge should be a horizontal line . &apos; 
def _ other _ endian ( typ ) : DCNL &apos; Return the type with the \ &apos; other \ &apos; byte order . Simple types like DCNL c _ int and so on already have _ _ ctype _ be _ _ and _ _ ctype _ le _ _ DCNL attributes which contain the types , for more complicated types DCNL only arrays are supported . &apos; 
def farray ( ptr , shape , dtype = None ) : DCNL &apos; Return a Numpy array view over the data pointed to by * ptr * with the DCNL given * shape * , in Fortran order . If * dtype * is given , it is used as the DCNL array \ &apos; s dtype , otherwise the array \ &apos; s dtype is inferred from * ptr * \ &apos; s type . &apos; 
@ protocol.commands.add ( u &apos;listmounts &apos; ) DCNL def listmounts ( context ) : DCNL &apos; * musicpd.org , mounts and neighbors section : * DCNL ``listmounts`` DCNL Queries a list of all mounts . By default , this contains just the DCNL configured music _ directory . Example : : DCNL listmounts DCNL mount : DCNL storage : / home / foo / music DCNL mount : foo DCNL storage : nfs : / / 192.168.1.4 / export / mp3 DCNL OK DCNL .. versionadded : : 0.19 DCNL New in MPD protocol version 0.19&apos;
def cscore ( v1 , v2 ) : DCNL &apos; Calculate C-score between v1 and v2 according to Stone and Roberts 1990 . DCNL Parameters DCNL v1 : array-like DCNL List or array of numeric values to be tested . DCNL v2 : array-like DCNL List or array of numeric values to be tested . DCNL Returns DCNL cscore : float DCNL C-score between v1 and v2 DCNL Notes DCNL This function calculates the C-score between equal length vectors v1 and v2 DCNL according to the formulation given in &#91; 1 &#93; _ . DCNL References DCNL .. &#91; 1 &#93; Stone and Roberts . 1990 , Oecologia 85 : 74-79&apos;
@ verbose DCNL def source _ induced _ power ( epochs , inverse _ operator , frequencies , label = None , lambda2 = ( 1.0 / 9.0 ) , method = &apos; dSPM &apos; , nave = 1 , n _ cycles = 5 , decim = 1 , use _ fft = False , pick _ ori = None , baseline = None , baseline _ mode = &apos; logratio &apos; , pca = True , n _ jobs = 1 , zero _ mean = False , prepared = False , verbose = None ) : DCNL &apos; Compute induced power and phase lock . DCNL Computation can optionaly be restricted in a label . DCNL Parameters DCNL epochs : instance of Epochs DCNL The epochs . DCNL inverse _ operator : instance of InverseOperator DCNL The inverse operator . DCNL frequencies : array DCNL Array of frequencies of interest . DCNL label : Label DCNL Restricts the source estimates to a given label . DCNL lambda2 : float DCNL The regularization parameter of the minimum norm . DCNL method : &quot; MNE &quot; &#124; &quot; dSPM &quot; &#124; &quot; sLORETA &quot; DCNL Use mininum norm , dSPM or sLORETA . DCNL nave : int DCNL The number of averages used to scale the noise covariance matrix . DCNL n _ cycles : float &#124; array of float DCNL Number of cycles . Fixed number or one per frequency . DCNL decim : int DCNL Temporal decimation factor . DCNL use _ fft : bool DCNL Do convolutions in time or frequency domain with FFT . DCNL pick _ ori : None &#124; &quot; normal &quot; DCNL If &quot; normal &quot; , rather than pooling the orientations by taking the norm , DCNL only the radial component is kept . This is only implemented DCNL when working with loose orientations . DCNL baseline : None ( default ) or tuple of length 2 DCNL The time interval to apply baseline correction . DCNL If None do not apply it . If baseline is ( a , b ) DCNL the interval is between &quot; a ( s ) &quot; and &quot; b ( s ) &quot; . DCNL If a is None the beginning of the data is used DCNL and if b is None then b is set to the end of the interval . DCNL If baseline is equal ot ( None , None ) all the time DCNL interval is used . DCNL baseline _ mode : None &#124; \ &apos; logratio \ &apos; &#124; \ &apos; zscore \ &apos; DCNL Do baseline correction with ratio ( power is divided by mean DCNL power during baseline ) or zscore ( power is divided by standard DCNL deviation of power during baseline after subtracting the mean , DCNL power = &#91; power - mean ( power _ baseline ) &#93; / std ( power _ baseline ) ) . DCNL pca : bool DCNL If True , the true dimension of data is estimated before running DCNL the time-frequency transforms . It reduces the computation times DCNL e.g. with a dataset that was maxfiltered ( true dim is 64 ) . DCNL n _ jobs : int DCNL Number of jobs to run in parallel . DCNL zero _ mean : bool DCNL Make sure the wavelets are zero mean . DCNL prepared : bool DCNL If True , do not call `prepare _ inverse _ operator` . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more )  . &apos; 
def read _ metadata _ kfx ( stream , read _ cover = True ) : DCNL &apos; Read the metadata.kfx file that is found in the sdr book folder for KFX files&apos;
def compute _ grad ( J , f ) : DCNL &apos; Compute gradient of the least-squares cost function . &apos; 
def secgroup _ info ( call = None , kwargs = None ) : DCNL &apos; Retrieves information for the given security group . Either a name or a DCNL secgroup _ id must be supplied . DCNL .. versionadded : : 2016.3.0 DCNL name DCNL The name of the security group for which to gather information . Can be DCNL used instead of ``secgroup _ id`` . DCNL secgroup _ id DCNL The ID of the security group for which to gather information . Can be DCNL used instead of ``name`` . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-cloud -f secgroup _ info opennebula name = my-secgroup DCNL salt-cloud --function secgroup _ info opennebula secgroup _ id = 5&apos;
def _ make _ complex _ eigvecs ( w , vin , dtype ) : DCNL &apos; Produce complex-valued eigenvectors from LAPACK DGGEV real-valued output&apos;
@ conf.commands.register DCNL def corrupt _ bits ( s , p = 0.01 , n = None ) : DCNL &apos; Flip a given percentage or number of bits from a string&apos;
def require _ module ( module ) : DCNL &apos; Check if the given module is loaded . Skip the test if not . &apos; 
def bayesian _ info _ criterion _ lsq ( ssr , n _ params , n _ samples ) : DCNL &apos; Computes the Bayesian Information Criterion ( BIC ) assuming that the DCNL observations come from a Gaussian distribution . DCNL In this case , BIC is given as DCNL .. math : : DCNL \ mathrm { BIC } = n \ ln \ left ( \ dfrac { \ mathrm { SSR } } { n } \ right ) + k \ ln ( n ) DCNL in which : math : `n` is the sample size , : math : `k` is the number of free DCNL parameters and : math : ` \ mathrm { SSR } ` stands for the sum of squared residuals DCNL between model and data . DCNL This is applicable , for instance , when the parameters of a model are DCNL estimated using the least squares statistic . See &#91; 1 &#93; _ and &#91; 2 &#93; _ . DCNL Parameters DCNL ssr : float DCNL Sum of squared residuals ( SSR ) between model and data . DCNL n _ params : int DCNL Number of free parameters of the model , i.e. , dimension of the DCNL parameter space . DCNL n _ samples : int DCNL Number of observations . DCNL Returns DCNL bic : float DCNL Examples DCNL Consider the simple 1-D fitting example presented in the Astropy DCNL modeling webpage &#91; 3 &#93; _ . There , two models ( Box and Gaussian ) were fitted to DCNL a source flux using the least squares statistic . However , the fittings DCNL themselves do not tell much about which model better represents this DCNL hypothetical source . Therefore , we are going to apply to BIC in order to DCNL decide in favor of a model . DCNL &gt; &gt; &gt; import numpy as np DCNL &gt; &gt; &gt; from astropy.modeling import models , fitting DCNL &gt; &gt; &gt; from astropy.stats.info _ theory import bayesian _ info _ criterion _ lsq DCNL &gt; &gt; &gt; # Generate fake data DCNL &gt; &gt; &gt; np.random.seed ( 0 ) DCNL &gt; &gt; &gt; x = np.linspace ( -5 . , 5 . , 200 ) DCNL &gt; &gt; &gt; y = 3 * np.exp ( -0.5 * ( x - 1.3 ) * * 2 / 0.8 * * 2 ) DCNL &gt; &gt; &gt; y + = np.random.normal ( 0 . , 0.2 , x.shape ) DCNL &gt; &gt; &gt; # Fit the data using a Box model DCNL &gt; &gt; &gt; t _ init = models.Trapezoid1D ( amplitude = 1 . , x _ 0 = 0 . , width = 1 . , slope = 0.5 ) DCNL &gt; &gt; &gt; fit _ t = fitting.LevMarLSQFitter ( ) DCNL &gt; &gt; &gt; t = fit _ t ( t _ init , x , y ) DCNL &gt; &gt; &gt; # Fit the data using a Gaussian DCNL &gt; &gt; &gt; g _ init = models.Gaussian1D ( amplitude = 1 . , mean = 0 , stddev = 1 . ) DCNL &gt; &gt; &gt; fit _ g = fitting.LevMarLSQFitter ( ) DCNL &gt; &gt; &gt; g = fit _ g ( g _ init , x , y ) DCNL &gt; &gt; &gt; # Compute the mean squared errors DCNL &gt; &gt; &gt; ssr _ t = np.sum ( ( t ( x ) - y ) * ( t ( x ) - y ) ) DCNL &gt; &gt; &gt; ssr _ g = np.sum ( ( g ( x ) - y ) * ( g ( x ) - y ) ) DCNL &gt; &gt; &gt; # Compute the bics DCNL &gt; &gt; &gt; bic _ t = bayesian _ info _ criterion _ lsq ( ssr _ t , 4 , x.shape &#91; 0 &#93; ) DCNL &gt; &gt; &gt; bic _ g = bayesian _ info _ criterion _ lsq ( ssr _ g , 3 , x.shape &#91; 0 &#93; ) DCNL &gt; &gt; &gt; bic _ t - bic _ g # doctest : + FLOAT _ CMP DCNL 30.644474706065466 DCNL Hence , there is a very strong evidence that the Gaussian model has a DCNL significantly better representation of the data than the Box model . This DCNL is , obviously , expected since the true model is Gaussian . DCNL References DCNL .. &#91; 1 &#93; Wikipedia . Bayesian Information Criterion . DCNL &lt; https : / / en.wikipedia.org / wiki / Bayesian _ information _ criterion &gt; DCNL .. &#91; 2 &#93; Origin Lab . Comparing Two Fitting Functions . DCNL &lt; http : / / www.originlab.com / doc / Origin-Help / PostFit-CompareFitFunc &gt; DCNL .. &#91; 3 &#93; Astropy Models and Fitting DCNL &lt; http : / / docs.astropy.org / en / stable / modeling &gt; &apos;
def sort _ dependencies ( app _ list ) : DCNL &apos; Sort a list of app , modellist pairs into a single list of models . DCNL The single list of models is sorted so that any model with a natural key DCNL is serialized before a normal model , and any model with a natural key DCNL dependency has it \ &apos; s dependencies serialized first . &apos; 
def _ sig _ key ( key , date _ stamp , regionName , serviceName ) : DCNL &apos; Get a signature key . See : DCNL http : / / docs.aws.amazon.com / general / latest / gr / signature-v4-examples.html # signature-v4-examples-python&apos;
def mask _ secret _ parameters ( parameters , secret _ parameters ) : DCNL &apos; Introspect the parameters dict and return a new dict with masked secret DCNL parameters . DCNL : param parameters : Parameters to process . DCNL : type parameters : ``dict`` DCNL : param secret _ parameters : List of parameter names which are secret . DCNL : type secret _ parameters : ``list``&apos;
@ mock _ ec2 DCNL def test _ eip _ release _ bogus _ eip ( ) : DCNL &apos; Release bogus EIP&apos;
def validate _ int _ or _ basestring ( option , value ) : DCNL &apos; Validates that \ &apos; value \ &apos; is an integer or string . &apos; 
def with _ inline _ css ( html _ without _ css ) : DCNL &apos; Returns html with inline css if the css file path exists DCNL else returns html with out the inline css . &apos; 
def track _ distance ( item , info ) : DCNL &apos; Gets the track distance calculated by all loaded plugins . DCNL Returns a Distance object . &apos; 
def user ( pid ) : DCNL &apos; Provides the user a process is running under . DCNL : param int pid : process id of the process to be queried DCNL : returns : * * str * * with the username a process is running under , * * None * * if DCNL it can \ &apos; t be determined&apos;
@ testing.requires _ testing _ data DCNL @ requires _ fs _ or _ nibabel DCNL def test _ vertex _ to _ mni ( ) : DCNL &apos; Test conversion of vertices to MNI coordinates&apos;
def get _ database _ password ( name ) : DCNL &apos; Return the configured database password . &apos; 
def retrieve _ token ( userid , secret ) : DCNL &apos; Return a token for the backend of annotations . DCNL It uses the course id to retrieve a variable that contains the secret DCNL token found in inheritance.py. It also contains information of when DCNL the token was issued . This will be stored with the user along with DCNL the id for identification purposes in the backend . &apos; 
@ testing.requires _ testing _ data DCNL def test _ preload _ modify ( ) : DCNL &apos; Test preloading and modifying data . &apos; 
def sample _ content ( name ) : DCNL &apos; Read content into a string from a file . &apos; 
def parse229 ( resp , peer ) : DCNL &apos; Parse the \ &apos; 229 \ &apos; response for an EPSV request . DCNL Raises error _ proto if it does not contain \ &apos; ( &#124; &#124; &#124; port &#124; ) \ &apos; DCNL Return ( \ &apos; host.addr.as.numbers \ &apos; , port # ) tuple . &apos; 
def set _ ( key , value , profile = None , ttl = None , directory = False ) : DCNL &apos; .. versionadded : : 2014.7.0 DCNL Set a key in etcd by direct path . Optionally , create a directory DCNL or set a TTL on the key . Returns None on failure . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion etcd.set / path / to / key value DCNL salt myminion etcd.set / path / to / key value profile = my _ etcd _ config DCNL salt myminion etcd.set / path / to / dir \ &apos; \ &apos; directory = True DCNL salt myminion etcd.set / path / to / key value ttl = 5&apos;
@ login _ required DCNL def comment ( request , pk ) : DCNL &apos; Adds new comment . &apos; 
def getFloatListListsByPaths ( paths ) : DCNL &apos; Get float lists by paths . &apos; 
def write _ trace ( expt _ dir , best _ val , best _ job , n _ candidates , n _ pending , n _ complete ) : DCNL &apos; Append current experiment state to trace file . &apos; 
def tag _ item ( item , search _ artist = None , search _ title = None , search _ id = None ) : DCNL &apos; Attempts to find metadata for a single track . Returns a DCNL ` ( candidates , recommendation ) ` pair where `candidates` is a list of DCNL TrackMatch objects . `search _ artist` and `search _ title` may be used DCNL to override the current metadata for the purposes of the MusicBrainz DCNL title ; likewise `search _ id` . &apos; 
@ click.command ( cls = ComplexCLI , context _ settings = CONTEXT _ SETTINGS ) DCNL @ click.option ( &apos; --home &apos; , type = click.Path ( exists = True , file _ okay = False , resolve _ path = True ) , help = &apos; Changes DCSP the DCSP folder DCSP to DCSP operate DCSP on . &apos; ) DCNL @ click.option ( &apos; -v &apos; , &apos; --verbose &apos; , is _ flag = True , help = &apos; Enables DCSP verbose DCSP mode . &apos; ) DCNL @ pass _ context DCNL def cli ( ctx , verbose , home ) : DCNL &apos; A complex command line interface . &apos; 
def main ( ) : DCNL &apos; Display the carve dialog . &apos; 
def get _ engine ( ) : DCNL &apos; Return a SQLAlchemy engine . &apos; 
def dictreverse ( mapping ) : DCNL &apos; Returns a new dictionary with keys and values swapped . DCNL &gt; &gt; &gt; dictreverse ( { 1 : 2 , 3 : 4 } ) DCNL { 2 : 1 , 4 : 3 } &apos;
def squared _ loss ( y _ true , y _ pred ) : DCNL &apos; Compute the squared loss for regression . DCNL Parameters DCNL y _ true : array-like or label indicator matrix DCNL Ground truth ( correct ) values . DCNL y _ pred : array-like or label indicator matrix DCNL Predicted values , as returned by a regression estimator . DCNL Returns DCNL loss : float DCNL The degree to which the samples are correctly predicted . &apos; 
def GroupDecoder ( field _ number , is _ repeated , is _ packed , key , new _ default ) : DCNL &apos; Returns a decoder for a group field . &apos; 
def _ get _ pnics ( host _ reference ) : DCNL &apos; Helper function that returns a list of PhysicalNics and their information . &apos; 
def getFundamentalsPath ( subName = &apos; &apos; ) : DCNL &apos; Get the evaluate _ fundamentals directory path . &apos; 
def loads ( data , use _ datetime = 0 ) : DCNL &apos; data - &gt; unmarshalled data , method name DCNL Convert an XML-RPC packet to unmarshalled data plus a method DCNL name ( None if not present ) . DCNL If the XML-RPC packet represents a fault condition , this function DCNL raises a Fault exception . &apos; 
def code _ name ( code , number = 0 ) : DCNL &apos; Compute a ( probably ) unique name for code for caching . DCNL This now expects code to be unicode . &apos; 
def iriToURI ( iri ) : DCNL &apos; Transform an IRI to a URI by escaping unicode . &apos; 
def pack _ bitstring ( bits ) : DCNL &apos; Creates a string out of an array of bits DCNL : param bits : A bit array DCNL example : : DCNL bits = &#91; False , True , False , True &#93; DCNL result = pack _ bitstring ( bits ) &apos;
def safe _ walk ( top , topdown = True , onerror = None , followlinks = True , _ seen = None ) : DCNL &apos; A clone of the python os.walk function with some checks for recursive DCNL symlinks . Unlike os.walk this follows symlinks by default . &apos; 
def get _ introspection _ module ( namespace ) : DCNL &apos; Returns the non proxied module for a namespace&apos;
def generate _ fused _ type ( codes ) : DCNL &apos; Generate name of and cython code for a fused type . DCNL Parameters DCNL typecodes : str DCNL Valid inputs to CY _ TYPES ( i.e. f , d , g , ... )  . &apos; 
@ timefunc ( 1 ) DCNL def conesearch _ timer ( * args , * * kwargs ) : DCNL &apos; Time a single Cone Search using `astropy.utils.timer.timefunc` DCNL with a single try and a verbose timer . DCNL Parameters DCNL args , kwargs : see : func : `conesearch` DCNL Returns DCNL t : float DCNL Run time in seconds . DCNL obj : `astropy.io.votable.tree.Table` DCNL First table from first successful VO service request . &apos; 
def to _ unicode _ optional _ iterator ( x ) : DCNL &apos; Raise TypeError if x is a str containing non-utf8 bytes or if x is DCNL an iterable which contains such a str . &apos; 
def test _ setitem ( hist ) : DCNL &apos; Test _ _ setitem _ _  . &apos; 
def run _ bg ( cmd , cwd = None , runas = None , shell = DEFAULT _ SHELL , python _ shell = None , env = None , clean _ env = False , template = None , umask = None , timeout = None , output _ loglevel = &apos; debug &apos; , log _ callback = None , reset _ system _ locale = True , ignore _ retcode = False , saltenv = &apos; base &apos; , password = None , * * kwargs ) : DCNL &apos; .. versionadded : 2016.3.0 DCNL Execute the passed command in the background and return it \ &apos; s PID DCNL Note that ``env`` represents the environment variables for the command , and DCNL should be formatted as a dict , or a YAML string which resolves to a dict . DCNL : param str cmd : The command to run. ex : \ &apos; ls -lart / home \ &apos; DCNL : param str cwd : The current working directory to execute the command in . DCNL Defaults to the home directory of the user specified by ``runas`` . DCNL : param str output _ loglevel : Control the loglevel at which the output from DCNL the command is logged . Note that the command being run will still be logged DCNL ( loglevel : DEBUG ) regardless , unless ``quiet`` is used for this value . DCNL : param str runas : User to run script as . If running on a Windows minion you DCNL must also pass a password DCNL : param str password : Windows only . Required when specifying ``runas`` . This DCNL parameter will be ignored on non-Windows platforms . DCNL .. versionadded : : 2016.3.0 DCNL : param str shell : Shell to execute under . Defaults to the system default DCNL shell . DCNL : param bool python _ shell : If False , let python handle the positional DCNL arguments . Set to True to use shell features , such as pipes or redirection DCNL : param list env : A list of environment variables to be set prior to DCNL execution . DCNL Example : DCNL .. code-block : : yaml DCNL salt : / / scripts / foo.sh : DCNL cmd.script : DCNL - env : DCNL - BATCH : \ &apos; yes \ &apos; DCNL .. warning : : DCNL The above illustrates a common PyYAML pitfall , that * * yes * * , DCNL * * no * * , * * on * * , * * off * * , * * true * * , and * * false * * are all loaded as DCNL boolean ``True`` and ``False`` values , and must be enclosed in DCNL quotes to be used as strings . More info on this ( and other ) PyYAML DCNL idiosyncrasies can be found : ref : `here &lt; yaml-idiosyncrasies &gt; ` . DCNL Variables as values are not evaluated . So $ PATH in the following DCNL example is a literal \ &apos; $ PATH \ &apos; : DCNL .. code-block : : yaml DCNL salt : / / scripts / bar.sh : DCNL cmd.script : DCNL - env : &quot; PATH = / some / path : $ PATH &quot; DCNL One can still use the existing $ PATH by using a bit of Jinja : DCNL .. code-block : : yaml DCNL { % set current _ path = salt &#91; \ &apos; environ.get \ &apos; &#93; ( \ &apos; PATH \ &apos; , \ &apos; / bin : / usr / bin \ &apos; ) % } DCNL mycommand : DCNL cmd.run : DCNL - name : ls -l / DCNL - env : DCNL - PATH : { { &#91; current _ path , \ &apos; / my / special / bin \ &apos; &#93; &#124; join ( \ &apos; : \ &apos; ) } } DCNL : param bool clean _ env : Attempt to clean out all other shell environment DCNL variables and set only those provided in the \ &apos; env \ &apos; argument to this DCNL function . DCNL : param str template : If this setting is applied then the named templating DCNL engine will be used to render the downloaded file . Currently jinja , mako , DCNL and wempy are supported DCNL : param str umask : The umask ( in octal ) to use when running the command . DCNL : param int timeout : A timeout in seconds for the executed process to return . DCNL .. warning : : DCNL This function does not process commands through a shell DCNL unless the python _ shell flag is set to True . This means that any DCNL shell-specific functionality such as \ &apos; echo \ &apos; or the use of pipes , DCNL redirection or &amp; &amp; , should either be migrated to cmd.shell or DCNL have the python _ shell = True flag set here . DCNL The use of python _ shell = True means that the shell will accept _ any _ input DCNL including potentially malicious commands such as \ &apos; good _ command ; rm -rf / \ &apos; . DCNL Be absolutely certain that you have sanitized your input prior to using DCNL python _ shell = True DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run _ bg &quot; fstrim-all &quot; DCNL The template arg can be set to \ &apos; jinja \ &apos; or another supported template DCNL engine to render the command arguments before execution . DCNL For example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run _ bg template = jinja &quot; ls -l / tmp / { { grains.id } } &#124; awk \ &apos; / foo / { print \ \ $ 2 } \ &apos; &quot; DCNL Specify an alternate shell with the shell parameter : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run _ bg &quot; Get-ChildItem C : \ \ &quot; shell = \ &apos; powershell \ &apos; DCNL If an equal sign ( `` = `` ) appears in an argument to a Salt command it is DCNL interpreted as a keyword argument in the format ``key = val`` . That DCNL processing can be bypassed in order to pass an equal sign through to the DCNL remote shell command by manually specifying the kwarg : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cmd.run _ bg cmd = \ &apos; ls -lR / &#124; sed -e s / = / : / g &gt; / tmp / dontwait \ &apos; &apos;
def mock _ action ( action _ name ) : DCNL &apos; Decorator to easily mock a CKAN action in the context of a test function DCNL It adds a mock object for the provided action as a parameter to the test DCNL function . The mock is discarded at the end of the function , even if there DCNL is an exception raised . DCNL Note that this mocks the action both when it \ &apos; s called directly via DCNL ``ckan.logic.get _ action`` and via ``ckan.plugins.toolkit.get _ action`` . DCNL Usage : : DCNL @ mock _ action ( \ &apos; user _ list \ &apos; ) DCNL def test _ mock _ user _ list ( self , mock _ user _ list ) : DCNL mock _ user _ list.return _ value = \ &apos; hi \ &apos; DCNL # user _ list is mocked DCNL eq _ ( helpers.call _ action ( \ &apos; user _ list \ &apos; , { } ) , \ &apos; hi \ &apos; ) DCNL assert mock _ user _ list.called DCNL : param action _ name : the name of the action to be mocked , DCNL e.g. ``package _ create`` DCNL : type action _ name : string&apos;
def schema _ create ( dbname , name , owner = None , user = None , db _ user = None , db _ password = None , db _ host = None , db _ port = None ) : DCNL &apos; Creates a Postgres schema . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; postgres.schema _ create dbname name owner = \ &apos; owner \ &apos; \ DCNL user = \ &apos; user \ &apos; \ DCNL db _ user = \ &apos; user \ &apos; db _ password = \ &apos; password \ &apos; DCNL db _ host = \ &apos; hostname \ &apos; db _ port = \ &apos; port \ &apos; &apos;
def is _ valid _ connection _ id ( entry ) : DCNL &apos; Checks if a string is a valid format for being a connection identifier . DCNL Currently , this is just an alias to : func : ` ~ stem.util.tor _ tools.is _ valid _ circuit _ id` . DCNL : returns : * * True * * if the string could be a connection id , * * False * * otherwise&apos;
def generate _ random _ str ( N ) : DCNL &apos; &apos;
def join _ list ( delimeter ) : DCNL &apos; Join a list into a string using the delimeter . DCNL This is just a wrapper for string.join. DCNL Args : DCNL delimeter : The delimiter to use when joining the string . DCNL Returns : DCNL Method which joins the list into a string with the delimeter . &apos; 
def get _ elliptic _ curves ( ) : DCNL &apos; Return a set of objects representing the elliptic curves supported in the DCNL OpenSSL build in use . DCNL The curve objects have a : py : class : `unicode` ``name`` attribute by which DCNL they identify themselves . DCNL The curve objects are useful as values for the argument accepted by DCNL : py : meth : `Context.set _ tmp _ ecdh` to specify which elliptical curve should be DCNL used for ECDHE key exchange . &apos; 
def upload _ fileobj ( self , Fileobj , Bucket , Key , ExtraArgs = None , Callback = None , Config = None ) : DCNL &apos; Upload a file-like object to S3 . DCNL The file-like object must be in binary mode . DCNL This is a managed transfer which will perform a multipart upload in DCNL multiple threads if necessary . DCNL Usage : : DCNL import boto3 DCNL s3 = boto3.client ( \ &apos; s3 \ &apos; ) DCNL with open ( \ &apos; filename \ &apos; , \ &apos; rb \ &apos; ) as data : DCNL s3.upload _ fileobj ( data , \ &apos; mybucket \ &apos; , \ &apos; mykey \ &apos; ) DCNL : type Fileobj : a file-like object DCNL : param Fileobj : A file-like object to upload . At a minimum , it must DCNL implement the `read` method , and must return bytes . DCNL : type Bucket : str DCNL : param Bucket : The name of the bucket to upload to . DCNL : type Key : str DCNL : param Key : The name of the key to upload to . DCNL : type ExtraArgs : dict DCNL : param ExtraArgs : Extra arguments that may be passed to the DCNL client operation . DCNL : type Callback : method DCNL : param Callback : A method which takes a number of bytes transferred to DCNL be periodically called during the upload . DCNL : type Config : boto3.s3.transfer.TransferConfig DCNL : param Config : The transfer configuration to be used when performing the DCNL upload . &apos; 
def reset ( ) : DCNL &apos; Reset the CUDA subsystem for the current thread . DCNL In the main thread : DCNL This removes all CUDA contexts . Only use this at shutdown or for DCNL cleaning up between tests . DCNL In non-main threads : DCNL This clear the CUDA context stack only . &apos; 
def escape4xml ( value ) : DCNL &apos; Escape some chars that can \ &apos; t be present in a XML value . &apos; 
def make _ cgi _ application ( global _ conf , script , path = None , include _ os _ environ = None , query _ string = None ) : DCNL &apos; Paste Deploy interface for : class : `CGIApplication` DCNL This object acts as a proxy to a CGI application . You pass in the DCNL script path ( ``script`` ) , an optional path to search for the DCNL script ( if the name isn \ &apos; t absolute ) ( ``path`` ) . If you don \ &apos; t give DCNL a path , then `` $ PATH`` will be used . &apos; 
def owner ( * paths ) : DCNL &apos; Return the name of the package that owns the file . Multiple file paths can DCNL be passed . If a single path is passed , a string will be returned , DCNL and if multiple paths are passed , a dictionary of file / package name DCNL pairs will be returned . DCNL If the file is not owned by a package , or is not present on the minion , DCNL then an empty string will be returned for that path . DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.owner / usr / bin / apachectl DCNL salt \ &apos; * \ &apos; pkg.owner / usr / bin / apachectl / etc / httpd / conf / httpd.conf&apos;
def locks ( registry , xml _ parent , data ) : DCNL &apos; yaml : locks DCNL Control parallel execution of jobs . DCNL Requires the Jenkins : jenkins-wiki : `Locks and Latches Plugin DCNL &lt; Locks + and + Latches + plugin &gt; ` . DCNL : arg : list of locks to use DCNL Example : DCNL .. literalinclude : : / .. / .. / tests / wrappers / fixtures / locks002.yaml DCNL : language : yaml&apos;
def entity _ to _ unicode ( match , exceptions = &#91; &#93; , encoding = &apos; cp1252 &apos; , result _ exceptions = { } ) : DCNL &apos; : param match : A match object such that \ &apos; &amp; \ &apos; + match.group ( 1 ) \ &apos; ; \ &apos; is the entity . DCNL : param exceptions : A list of entities to not convert ( Each entry is the name of the entity , for e.g. \ &apos; apos \ &apos; or \ &apos; # 1234 \ &apos; DCNL : param encoding : The encoding to use to decode numeric entities between 128 and 256 . DCNL If None , the Unicode UCS encoding is used . A common encoding is cp1252 . DCNL : param result _ exceptions : A mapping of characters to entities . If the result DCNL is in result _ exceptions , result _ exception &#91; result &#93; is returned instead . DCNL Convenient way to specify exception for things like &lt; or &gt; that can be DCNL specified by various actual entities . &apos; 
@ debug DCNL @ timeit DCNL @ cacheit DCNL def limitinf ( e , x ) : DCNL &apos; Limit e ( x ) for x- &gt; oo&apos;
def connected ( perspective ) : DCNL &apos; Login callback which invokes the remote &quot; foo &quot; method on the perspective DCNL which the server returned . &apos; 
def date _ range ( start _ date , end _ date = None , num = None , delta = None ) : DCNL &apos; Get a set of dates as a list based on a start , end and delta , delta DCNL can be something that can be added to ``datetime.datetime`` DCNL or a cron expression as a ``str`` DCNL : param start _ date : anchor date to start the series from DCNL : type start _ date : datetime.datetime DCNL : param end _ date : right boundary for the date range DCNL : type end _ date : datetime.datetime DCNL : param num : alternatively to end _ date , you can specify the number of DCNL number of entries you want in the range . This number can be negative , DCNL output will always be sorted regardless DCNL : type num : int DCNL &gt; &gt; &gt; date _ range ( datetime ( 2016 , 1 , 1 ) , datetime ( 2016 , 1 , 3 ) , delta = timedelta ( 1 ) ) DCNL &#91; datetime.datetime ( 2016 , 1 , 1 , 0 , 0 ) , datetime.datetime ( 2016 , 1 , 2 , 0 , 0 ) , datetime.datetime ( 2016 , 1 , 3 , 0 , 0 ) &#93; DCNL &gt; &gt; &gt; date _ range ( datetime ( 2016 , 1 , 1 ) , datetime ( 2016 , 1 , 3 ) , delta = \ &apos; 0 0 * * * \ &apos; ) DCNL &#91; datetime.datetime ( 2016 , 1 , 1 , 0 , 0 ) , datetime.datetime ( 2016 , 1 , 2 , 0 , 0 ) , datetime.datetime ( 2016 , 1 , 3 , 0 , 0 ) &#93; DCNL &gt; &gt; &gt; date _ range ( datetime ( 2016 , 1 , 1 ) , datetime ( 2016 , 3 , 3 ) , delta = &quot; 0 0 0 * * &quot; ) DCNL &#91; datetime.datetime ( 2016 , 1 , 1 , 0 , 0 ) , datetime.datetime ( 2016 , 2 , 1 , 0 , 0 ) , datetime.datetime ( 2016 , 3 , 1 , 0 , 0 ) &#93; &apos;
def set _ default _ etree ( etree ) : DCNL &apos; Sets the default interface that will called apon to both de / serialise XML DCNL entities . This means providing both C { tostring } and C { fromstring } functions . DCNL For testing purposes , will return the previous value for this ( if any )  . &apos; 
def create _ pull _ queue _ tables ( cluster , session ) : DCNL &apos; Create the required tables for pull queues . DCNL Args : DCNL cluster : A cassandra-driver cluster . DCNL session : A cassandra-driver session . &apos; 
def find _ it ( ) : DCNL &apos; Find occurrences . &apos; 
def inroot _ notwritable ( prefix ) : DCNL &apos; return True if the prefix is under root and root is not writeable&apos;
def find _ tables ( clause , check _ columns = False , include _ aliases = False , include _ joins = False , include _ selects = False , include _ crud = False ) : DCNL &apos; locate Table objects within the given expression . &apos; 
def p _ additive _ expression _ 1 ( t ) : DCNL &apos; additive _ expression : multiplicative _ expression&apos;
def _ skip _ bytes ( f , n ) : DCNL &apos; Skip `n` bytes&apos;
def locate ( path , forceload = 0 ) : DCNL &apos; Locate an object by name or dotted path , importing as necessary . &apos; 
def get _ benchmark _ returns ( symbol , start _ date , end _ date ) : DCNL &apos; Get a Series of benchmark returns from Yahoo . DCNL Returns a Series with returns from ( start _ date , end _ date &#93; . DCNL start _ date is * * not * * included because we need the close from day N - 1 to DCNL compute the returns for day N . &apos; 
def cheby2 ( N , rs , Wn , btype = &apos; low &apos; , analog = False , output = &apos; ba &apos; ) : DCNL &apos; Chebyshev type II digital and analog filter design . DCNL Design an Nth-order digital or analog Chebyshev type II filter and DCNL return the filter coefficients . DCNL Parameters DCNL N : int DCNL The order of the filter . DCNL rs : float DCNL The minimum attenuation required in the stop band . DCNL Specified in decibels , as a positive number . DCNL Wn : array _ like DCNL A scalar or length-2 sequence giving the critical frequencies . DCNL For Type II filters , this is the point in the transition band at which DCNL the gain first reaches -`rs` . DCNL For digital filters , `Wn` is normalized from 0 to 1 , where 1 is the DCNL Nyquist frequency , pi radians / sample . ( `Wn` is thus in DCNL half-cycles / sample . ) DCNL For analog filters , `Wn` is an angular frequency ( e.g. rad / s ) . DCNL btype : { \ &apos; lowpass \ &apos; , \ &apos; highpass \ &apos; , \ &apos; bandpass \ &apos; , \ &apos; bandstop \ &apos; } , optional DCNL The type of filter . Default is \ &apos; lowpass \ &apos; . DCNL analog : bool , optional DCNL When True , return an analog filter , otherwise a digital filter is DCNL returned . DCNL output : { \ &apos; ba \ &apos; , \ &apos; zpk \ &apos; , \ &apos; sos \ &apos; } , optional DCNL Type of output : numerator / denominator ( \ &apos; ba \ &apos; ) , pole-zero ( \ &apos; zpk \ &apos; ) , or DCNL second-order sections ( \ &apos; sos \ &apos; ) . Default is \ &apos; ba \ &apos; . DCNL Returns DCNL b , a : ndarray , ndarray DCNL Numerator ( `b` ) and denominator ( `a` ) polynomials of the IIR filter . DCNL Only returned if ``output = \ &apos; ba \ &apos; `` . DCNL z , p , k : ndarray , ndarray , float DCNL Zeros , poles , and system gain of the IIR filter transfer DCNL function . Only returned if ``output = \ &apos; zpk \ &apos; `` . DCNL sos : ndarray DCNL Second-order sections representation of the IIR filter . DCNL Only returned if ``output = = \ &apos; sos \ &apos; `` . DCNL See Also DCNL cheb2ord , cheb2ap DCNL Notes DCNL The Chebyshev type II filter maximizes the rate of cutoff between the DCNL frequency response \ &apos; s passband and stopband , at the expense of ripple in DCNL the stopband and increased ringing in the step response . DCNL Type II filters do not roll off as fast as Type I ( `cheby1` ) . DCNL The `` \ &apos; sos \ &apos; `` output parameter was added in 0.16.0 . DCNL Examples DCNL Plot the filter \ &apos; s frequency response , showing the critical points : DCNL &gt; &gt; &gt; from scipy import signal DCNL &gt; &gt; &gt; import matplotlib.pyplot as plt DCNL &gt; &gt; &gt; b , a = signal.cheby2 ( 4 , 40 , 100 , \ &apos; low \ &apos; , analog = True ) DCNL &gt; &gt; &gt; w , h = signal.freqs ( b , a ) DCNL &gt; &gt; &gt; plt.semilogx ( w , 20 * np.log10 ( abs ( h ) ) ) DCNL &gt; &gt; &gt; plt.title ( \ &apos; Chebyshev Type II frequency response ( rs = 40 ) \ &apos; ) DCNL &gt; &gt; &gt; plt.xlabel ( \ &apos; Frequency &#91; radians / second &#93; \ &apos; ) DCNL &gt; &gt; &gt; plt.ylabel ( \ &apos; Amplitude &#91; dB &#93; \ &apos; ) DCNL &gt; &gt; &gt; plt.margins ( 0 , 0.1 ) DCNL &gt; &gt; &gt; plt.grid ( which = \ &apos; both \ &apos; , axis = \ &apos; both \ &apos; ) DCNL &gt; &gt; &gt; plt.axvline ( 100 , color = \ &apos; green \ &apos; ) # cutoff frequency DCNL &gt; &gt; &gt; plt.axhline ( -40 , color = \ &apos; green \ &apos; ) # rs DCNL &gt; &gt; &gt; plt.show ( ) &apos;
def pick _ disk _ driver _ name ( hypervisor _ version , is _ block _ dev = False ) : DCNL &apos; Pick the libvirt primary backend driver name DCNL If the hypervisor supports multiple backend drivers we have to tell libvirt DCNL which one should be used . DCNL Xen supports the following drivers : &quot; tap &quot; , &quot; tap2 &quot; , &quot; phy &quot; , &quot; file &quot; , or DCNL &quot; qemu &quot; , being &quot; qemu &quot; the preferred one . Qemu only supports &quot; qemu &quot; . DCNL : param is _ block _ dev : DCNL : returns : driver _ name or None&apos;
def test _ multi _ explicit _ fail ( ) : DCNL &apos; Model a failure of the explicit segment under concurrency . &apos; 
def set _ value ( dictionary , keys , value ) : DCNL &apos; Similar to Python \ &apos; s built in `dictionary &#91; key &#93; = value` , DCNL but takes a list of nested keys instead of a single key . DCNL set _ value ( { \ &apos; a \ &apos; : 1 } , &#91; &#93; , { \ &apos; b \ &apos; : 2 } ) - &gt; { \ &apos; a \ &apos; : 1 , \ &apos; b \ &apos; : 2 } DCNL set _ value ( { \ &apos; a \ &apos; : 1 } , &#91; \ &apos; x \ &apos; &#93; , 2 ) - &gt; { \ &apos; a \ &apos; : 1 , \ &apos; x \ &apos; : 2 } DCNL set _ value ( { \ &apos; a \ &apos; : 1 } , &#91; \ &apos; x \ &apos; , \ &apos; y \ &apos; &#93; , 2 ) - &gt; { \ &apos; a \ &apos; : 1 , \ &apos; x \ &apos; : { \ &apos; y \ &apos; : 2 } } &apos;
@ require _ admin _ context DCNL def instance _ type _ create ( context , values ) : DCNL &apos; Create a new instance type . In order to pass in extra specs , DCNL the values dict should contain a \ &apos; extra _ specs \ &apos; key / value pair : DCNL { \ &apos; extra _ specs \ &apos; : { \ &apos; k1 \ &apos; : \ &apos; v1 \ &apos; , \ &apos; k2 \ &apos; : \ &apos; v2 \ &apos; , ... } } &apos;
@ testing.requires _ testing _ data DCNL def test _ sensitivity _ maps ( ) : DCNL &apos; Test sensitivity map computation . &apos; 
def cmd _ log ( cmd , cwd ) : DCNL &apos; Helper function to redirect stderr to stdout and log the command DCNL used along with the output . Will raise subprocess.CalledProcessError if DCNL command doesn \ &apos; t return 0 , and returns the command \ &apos; s output . &apos; 
def remove _ invalid _ options ( context , search _ options , allowed _ search _ options ) : DCNL &apos; Remove search options that are not valid for non-admin API / context . &apos; 
def set _ date ( name , date ) : DCNL &apos; Sets the value for the date the password was last changed to days since the DCNL epoch ( January 1 , 1970 ) . See man chage . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; shadow.set _ date username 0&apos;
def get _ os _ vendor ( ) : DCNL &apos; Try to guess what \ &apos; s the os vendor . &apos; 
def ljust ( value , arg ) : DCNL &apos; Left-aligns the value in a field of a given width DCNL Argument : field size&apos;
def get _ image _ label ( name , default = &apos; not _ found.png &apos; ) : DCNL &apos; Return image inside a QLabel object&apos;
def path _ to _ local _ track _ uri ( relpath ) : DCNL &apos; Convert path relative to : confval : `local / media _ dir` to local track DCNL URI . &apos; 
def flatten _ const _ node _ list ( environment , node _ list ) : DCNL &apos; Try to flatten the given node list into a single string . DCNL : param environment : Jinja2 environment DCNL : type environment : jinja2.environment.Environment DCNL : param node _ list : List of nodes DCNL : type node _ list : list &#91; jinja2.nodes.Node &#93; DCNL : return : String of content DCNL : rtype : str DCNL : raise Unflattenable : Raised when the node list can \ &apos; t be flattened into DCNL a constant&apos;
@ contextmanager DCNL @ deprecated ( u &apos; 1.4.0 &apos; , _ deprecation _ msg ) DCNL def subsystem _ instance ( subsystem _ type , scope = None , * * options ) : DCNL &apos; Creates a Subsystem instance for test . DCNL : API : public DCNL : param type subsystem _ type : The subclass of : class : `pants.subsystem.subsystem.Subsystem` DCNL to create . DCNL : param string scope : An optional scope to create the subsystem in ; defaults to global . DCNL : param * * options : Keyword args representing option values explicitly set via the command line . &apos; 
def count ( s , * args ) : DCNL &apos; count ( s , sub &#91; , start &#91; , end &#93; &#93; ) - &gt; int DCNL Return the number of occurrences of substring sub in string DCNL s &#91; start : end &#93; . Optional arguments start and end are DCNL interpreted as in slice notation . &apos; 
@ command ( ( &apos; rmp \ \ s * ( \ \ d + &#124; % s ) &apos; % WORD ) ) DCNL def playlist _ remove ( name ) : DCNL &apos; Delete a saved playlist by name - or purge working playlist if * all . &apos; 
def set _ present ( name , set _ type , family = &apos; ipv4 &apos; , * * kwargs ) : DCNL &apos; .. versionadded : : 2014.7.0 DCNL Verify the set exists . DCNL name DCNL A user-defined set name . DCNL set _ type DCNL The type for the set . DCNL family DCNL Networking family , either ipv4 or ipv6&apos;
@ must _ be _ valid _ project DCNL @ must _ have _ permission ( ADMIN ) DCNL @ must _ not _ be _ registration DCNL def project _ contributors _ post ( auth , node , * * kwargs ) : DCNL &apos; Add contributors to a node . &apos; 
def findController ( controllers = DefaultControllers ) : DCNL &apos; Return first available controller from list , if any&apos;
def port _ create _ vxlan ( br , port , id , remote , dst _ port = None ) : DCNL &apos; Virtual eXtensible Local Area Network - creates VXLAN tunnel between endpoints . DCNL Args : DCNL br : A string - bridge name . DCNL port : A string - port name . DCNL id : An integer - unsigned 64-bit number , tunnel \ &apos; s key . DCNL remote : A string - remote endpoint \ &apos; s IP address . DCNL dst _ port : An integer - port to use when creating tunnelport in the switch . DCNL Returns : DCNL True on success , else False . DCNL .. versionadded : : 2016.3.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; openvswitch.port _ create _ vxlan br0 vx1 5001 192.168.1.10 8472&apos;
def setup _ redis ( ) : DCNL &apos; Starts the connection pool for all configured redis servers&apos;
def log _ methods _ calls ( fname , some _ class , prefix = None ) : DCNL &apos; Hack `some _ class` to log all method calls into `fname` file . DCNL If `prefix` format is not set , each log entry is prefixed with : DCNL -- &#91; asked / called / defined &#93; -- DCNL asked - name of `some _ class` DCNL called - name of class for which a method is called DCNL defined - name of class where method is defined DCNL Must be used carefully , because it monkeypatches _ _ getattribute _ _ call . DCNL Example : log _ methods _ calls ( \ &apos; log.log \ &apos; , ShellBaseWidget ) &apos;
@ hook.command ( &apos; octopart &apos; , &apos; octo &apos; ) DCNL def octopart ( text , reply ) : DCNL &apos; octopart &lt; keyword &gt; -- Search for any part on the Octopart database . &apos; 
def create _ config _ file ( watch , start _ cmd , stop _ cmd , ports , env _ vars = { } , max _ memory = 500 , syslog _ server = &apos; &apos; , host = None , upgrade _ flag = False , match _ cmd = &apos; &apos; ) : DCNL &apos; Reads in a template file for monit and fills it with the DCNL correct configuration . The caller is responsible for deleting DCNL the created file . DCNL Args : DCNL watch : A string which identifies this process with monit DCNL start _ cmd : The start command to start the process DCNL stop _ cmd : The stop command to kill the process DCNL ports : A list of ports that are being watched DCNL env _ vars : The environment variables used when starting the process DCNL max _ memory : An int that names the maximum amount of memory that this process DCNL is allowed to use ( in megabytes ) before monit should restart it . DCNL syslog _ server : The IP of the remote syslog server to use . DCNL host : The private IP of a server that runs the appengine role ; used for DCNL reliably detecting a running app server process . DCNL Returns : DCNL The name of the created configuration file . DCNL Raises : DCNL TypeError with bad argument types&apos;
def save _ categories ( shop , categories _ pk ) : DCNL &apos; Save a list of PK as a list of sample categories for a shop&apos;
def proxy ( base = None , local = &apos; X-Forwarded-Host &apos; , remote = &apos; X-Forwarded-For &apos; , scheme = &apos; X-Forwarded-Proto &apos; , debug = False ) : DCNL &apos; Change the base URL ( scheme : / / host &#91; : port &#93; &#91; / path &#93; ) . DCNL For running a CP server behind Apache , lighttpd , or other HTTP server . DCNL If you want the new request.base to include path info ( not just the host ) , DCNL you must explicitly set base to the full base path , and ALSO set \ &apos; local \ &apos; DCNL to \ &apos; \ &apos; , so that the X-Forwarded-Host request header ( which never includes DCNL path info ) does not override it . Regardless , the value for \ &apos; base \ &apos; MUST DCNL NOT end in a slash . DCNL cherrypy.request.remote.ip ( the IP address of the client ) will be DCNL rewritten if the header specified by the \ &apos; remote \ &apos; arg is valid . DCNL By default , \ &apos; remote \ &apos; is set to \ &apos; X-Forwarded-For \ &apos; . If you do not DCNL want to rewrite remote.ip , set the \ &apos; remote \ &apos; arg to an empty string . &apos; 
def _ strips ( direction , text , remove ) : DCNL &apos; strips \ &apos; remove \ &apos; from \ &apos; text \ &apos; at \ &apos; direction \ &apos; end&apos;
def setAttributeDictionaryByArguments ( argumentNames , arguments , xmlElement ) : DCNL &apos; Set the attribute dictionary to the arguments . &apos; 
def expand _ dimension _ links ( metadata ) : DCNL &apos; Expands links to dimensions . `metadata` should be a list of strings or DCNL dictionaries ( might be mixed ) . Returns a list of dictionaries with at DCNL least one key `name` . Other keys are : `hierarchies` , DCNL `default _ hierarchy _ name` , `nonadditive` , `cardinality` , `template`&apos;
@ register.inclusion _ tag ( u &apos;generic / includes / comment.html &apos; , takes _ context = True ) DCNL def comment _ thread ( context , parent ) : DCNL &apos; Return a list of child comments for the given parent , storing all DCNL comments in a dict in the context when first called , using parents DCNL as keys for retrieval on subsequent recursive calls from the DCNL comments template . &apos; 
def listify _ value ( arg , split = None ) : DCNL &apos; Make a list out of an argument . DCNL Values from `distutils` argument parsing are always single strings ; DCNL values from `optparse` parsing may be lists of strings that may need DCNL to be further split . DCNL No matter the input , this function returns a flat list of whitespace-trimmed DCNL strings , with `None` values filtered out . DCNL &gt; &gt; &gt; listify _ value ( &quot; foo bar &quot; ) DCNL &#91; \ &apos; foo \ &apos; , \ &apos; bar \ &apos; &#93; DCNL &gt; &gt; &gt; listify _ value ( &#91; &quot; foo bar &quot; &#93; ) DCNL &#91; \ &apos; foo \ &apos; , \ &apos; bar \ &apos; &#93; DCNL &gt; &gt; &gt; listify _ value ( &#91; &#91; &quot; foo &quot; &#93; , &quot; bar &quot; &#93; ) DCNL &#91; \ &apos; foo \ &apos; , \ &apos; bar \ &apos; &#93; DCNL &gt; &gt; &gt; listify _ value ( &#91; &#91; &quot; foo &quot; &#93; , &#91; &quot; bar &quot; , None , &quot; foo &quot; &#93; &#93; ) DCNL &#91; \ &apos; foo \ &apos; , \ &apos; bar \ &apos; , \ &apos; foo \ &apos; &#93; DCNL &gt; &gt; &gt; listify _ value ( &quot; foo , bar , quux &quot; , &quot; , &quot; ) DCNL &#91; \ &apos; foo \ &apos; , \ &apos; bar \ &apos; , \ &apos; quux \ &apos; &#93; DCNL : param arg : A string or a list of strings DCNL : param split : The argument to pass to `str.split ( ) ` . DCNL : return : &apos;
def temp _ fail _ retry ( error , fun , * args ) : DCNL &apos; Retry to execute function , ignoring EINTR error ( interruptions ) &apos;
def paginated ( model , query = None , increment = 200 , each = True ) : DCNL &apos; Paginate a MODM query . DCNL : param StoredObject model : Model to query . DCNL : param Q query : Optional query object . DCNL : param int increment : Page size DCNL : param bool each : If True , each record is yielded . If False , pages DCNL are yielded . &apos; 
def power _ divergence ( f _ obs , f _ exp = None , ddof = 0 , axis = 0 , lambda _ = None ) : DCNL &apos; Cressie-Read power divergence statistic and goodness of fit test . DCNL This function tests the null hypothesis that the categorical data DCNL has the given frequencies , using the Cressie-Read power divergence DCNL statistic . DCNL Parameters DCNL f _ obs : array _ like DCNL Observed frequencies in each category . DCNL f _ exp : array _ like , optional DCNL Expected frequencies in each category . By default the categories are DCNL assumed to be equally likely . DCNL ddof : int , optional DCNL &quot; Delta degrees of freedom &quot; : adjustment to the degrees of freedom DCNL for the p-value . The p-value is computed using a chi-squared DCNL distribution with ``k - 1 - ddof`` degrees of freedom , where `k` DCNL is the number of observed frequencies . The default value of `ddof` DCNL is 0 . DCNL axis : int or None , optional DCNL The axis of the broadcast result of `f _ obs` and `f _ exp` along which to DCNL apply the test . If axis is None , all values in `f _ obs` are treated DCNL as a single data set . Default is 0 . DCNL lambda _ : float or str , optional DCNL `lambda _ ` gives the power in the Cressie-Read power divergence DCNL statistic . The default is 1 . For convenience , `lambda _ ` may be DCNL assigned one of the following strings , in which case the DCNL corresponding numerical value is used : : DCNL String Value Description DCNL &quot; pearson &quot; 1 Pearson \ &apos; s chi-squared statistic . DCNL In this case , the function is DCNL equivalent to `stats.chisquare`. DCNL &quot; log-likelihood &quot; 0 Log-likelihood ratio . Also known as DCNL the G-test &#91; 3 &#93; _ . DCNL &quot; freeman-tukey &quot; -1 / 2 Freeman-Tukey statistic . DCNL &quot; mod-log-likelihood &quot; -1 Modified log-likelihood ratio . DCNL &quot; neyman &quot; -2 Neyman \ &apos; s statistic . DCNL &quot; cressie-read &quot; 2 / 3 The power recommended in &#91; 5 &#93; _ . DCNL Returns DCNL statistic : float or ndarray DCNL The Cressie-Read power divergence test statistic . The value is DCNL a float if `axis` is None or if` `f _ obs` and `f _ exp` are 1-D . DCNL pvalue : float or ndarray DCNL The p-value of the test . The value is a float if `ddof` and the DCNL return value `stat` are scalars . DCNL See Also DCNL chisquare DCNL Notes DCNL This test is invalid when the observed or expected frequencies in each DCNL category are too small . A typical rule is that all of the observed DCNL and expected frequencies should be at least 5 . DCNL When `lambda _ ` is less than zero , the formula for the statistic involves DCNL dividing by `f _ obs` , so a warning or error may be generated if any value DCNL in `f _ obs` is 0 . DCNL Similarly , a warning or error may be generated if any value in `f _ exp` is DCNL zero when `lambda _ ` &gt; = 0 . DCNL The default degrees of freedom , k-1 , are for the case when no parameters DCNL of the distribution are estimated . If p parameters are estimated by DCNL efficient maximum likelihood then the correct degrees of freedom are DCNL k-1-p . If the parameters are estimated in a different way , then the DCNL dof can be between k-1-p and k-1 . However , it is also possible that DCNL the asymptotic distribution is not a chisquare , in which case this DCNL test is not appropriate . DCNL This function handles masked arrays . If an element of `f _ obs` or `f _ exp` DCNL is masked , then data at that position is ignored , and does not count DCNL towards the size of the data set . DCNL .. versionadded : : 0.13.0 DCNL References DCNL .. &#91; 1 &#93; Lowry , Richard . &quot; Concepts and Applications of Inferential DCNL Statistics &quot; . Chapter 8. http : / / faculty.vassar.edu / lowry / ch8pt1.html DCNL .. &#91; 2 &#93; &quot; Chi-squared test &quot; , http : / / en.wikipedia.org / wiki / Chi-squared _ test DCNL .. &#91; 3 &#93; &quot; G-test &quot; , http : / / en.wikipedia.org / wiki / G-test DCNL .. &#91; 4 &#93; Sokal , R. R. and Rohlf , F. J. &quot; Biometry : the principles and DCNL practice of statistics in biological research &quot; , New York : Freeman DCNL ( 1981 ) DCNL .. &#91; 5 &#93; Cressie , N. and Read , T. R. C. , &quot; Multinomial Goodness-of-Fit DCNL Tests &quot; , J. Royal Stat . Soc . Series B , Vol . 46 , No. 3 ( 1984 ) , DCNL pp. 440-464 . DCNL Examples DCNL ( See `chisquare` for more examples . ) DCNL When just `f _ obs` is given , it is assumed that the expected frequencies DCNL are uniform and given by the mean of the observed frequencies . Here we DCNL perform a G-test ( i.e. use the log-likelihood ratio statistic ) : DCNL &gt; &gt; &gt; from scipy.stats import power _ divergence DCNL &gt; &gt; &gt; power _ divergence ( &#91; 16 , 18 , 16 , 14 , 12 , 12 &#93; , lambda _ = \ &apos; log-likelihood \ &apos; ) DCNL ( 2.006573162632538 , 0.84823476779463769 ) DCNL The expected frequencies can be given with the `f _ exp` argument : DCNL &gt; &gt; &gt; power _ divergence ( &#91; 16 , 18 , 16 , 14 , 12 , 12 &#93; , DCNL ... f _ exp = &#91; 16 , 16 , 16 , 16 , 16 , 8 &#93; , DCNL ... lambda _ = \ &apos; log-likelihood \ &apos; ) DCNL ( 3.3281031458963746 , 0.6495419288047497 ) DCNL When `f _ obs` is 2-D , by default the test is applied to each column . DCNL &gt; &gt; &gt; obs = np.array ( &#91; &#91; 16 , 18 , 16 , 14 , 12 , 12 &#93; , &#91; 32 , 24 , 16 , 28 , 20 , 24 &#93; &#93; ) .T DCNL &gt; &gt; &gt; obs.shape DCNL ( 6 , 2 ) DCNL &gt; &gt; &gt; power _ divergence ( obs , lambda _ = &quot; log-likelihood &quot; ) DCNL ( array ( &#91; 2.00657316 , 6.77634498 &#93; ) , array ( &#91; 0.84823477 , 0.23781225 &#93; ) ) DCNL By setting ``axis = None`` , the test is applied to all data in the array , DCNL which is equivalent to applying the test to the flattened array . DCNL &gt; &gt; &gt; power _ divergence ( obs , axis = None ) DCNL ( 23.31034482758621 , 0.015975692534127565 ) DCNL &gt; &gt; &gt; power _ divergence ( obs.ravel ( ) ) DCNL ( 23.31034482758621 , 0.015975692534127565 ) DCNL `ddof` is the change to make to the default degrees of freedom . DCNL &gt; &gt; &gt; power _ divergence ( &#91; 16 , 18 , 16 , 14 , 12 , 12 &#93; , ddof = 1 ) DCNL ( 2.0 , 0.73575888234288467 ) DCNL The calculation of the p-values is done by broadcasting the DCNL test statistic with `ddof` . DCNL &gt; &gt; &gt; power _ divergence ( &#91; 16 , 18 , 16 , 14 , 12 , 12 &#93; , ddof = &#91; 0,1,2 &#93; ) DCNL ( 2.0 , array ( &#91; 0.84914504 , 0.73575888 , 0.5724067 &#93; ) ) DCNL `f _ obs` and `f _ exp` are also broadcast . In the following , `f _ obs` has DCNL shape ( 6 , ) and `f _ exp` has shape ( 2 , 6 ) , so the result of broadcasting DCNL `f _ obs` and `f _ exp` has shape ( 2 , 6 ) . To compute the desired chi-squared DCNL statistics , we must use ``axis = 1`` : DCNL &gt; &gt; &gt; power _ divergence ( &#91; 16 , 18 , 16 , 14 , 12 , 12 &#93; , DCNL ... f _ exp = &#91; &#91; 16 , 16 , 16 , 16 , 16 , 8 &#93; , DCNL ... &#91; 8 , 20 , 20 , 16 , 12 , 12 &#93; &#93; , DCNL ... axis = 1 ) DCNL ( array ( &#91; 3.5 , 9.25 &#93; ) , array ( &#91; 0.62338763 , 0.09949846 &#93; ) ) &apos;
def get _ version ( ) : DCNL &apos; Return the VERSION as a string , e.g. for VERSION = = ( 0 , 10 , 7 ) , DCNL return \ &apos; 0.10.7 \ &apos;  . &apos; 
def to _ dict ( sequences , key _ function = None ) : DCNL &apos; Turns a sequence iterator or list into a dictionary . DCNL - sequences - An iterator that returns SeqRecord objects , DCNL or simply a list of SeqRecord objects . DCNL - key _ function - Optional callback function which when given a DCNL SeqRecord should return a unique key for the dictionary . DCNL e.g. key _ function = lambda rec : rec.name DCNL or , key _ function = lambda rec : rec.description.split ( ) &#91; 0 &#93; DCNL If key _ function is omitted then record.id is used , on the assumption DCNL that the records objects returned are SeqRecords with a unique id . DCNL If there are duplicate keys , an error is raised . DCNL Example usage , defaulting to using the record.id as key : DCNL &gt; &gt; &gt; from Bio import SeqIO DCNL &gt; &gt; &gt; filename = &quot; GenBank / cor6 _ 6.gb &quot; DCNL &gt; &gt; &gt; format = &quot; genbank &quot; DCNL &gt; &gt; &gt; id _ dict = SeqIO.to _ dict ( SeqIO.parse ( filename , format ) ) DCNL &gt; &gt; &gt; print ( sorted ( id _ dict ) ) DCNL &#91; \ &apos; AF297471.1 \ &apos; , \ &apos; AJ237582.1 \ &apos; , \ &apos; L31939.1 \ &apos; , \ &apos; M81224.1 \ &apos; , \ &apos; X55053.1 \ &apos; , \ &apos; X62281.1 \ &apos; &#93; DCNL &gt; &gt; &gt; print ( id _ dict &#91; &quot; L31939.1 &quot; &#93; .description ) DCNL Brassica rapa ( clone bif72 ) kin mRNA , complete cds DCNL A more complex example , using the key _ function argument in order to DCNL use a sequence checksum as the dictionary key : DCNL &gt; &gt; &gt; from Bio import SeqIO DCNL &gt; &gt; &gt; from Bio.SeqUtils.CheckSum import seguid DCNL &gt; &gt; &gt; filename = &quot; GenBank / cor6 _ 6.gb &quot; DCNL &gt; &gt; &gt; format = &quot; genbank &quot; DCNL &gt; &gt; &gt; seguid _ dict = SeqIO.to _ dict ( SeqIO.parse ( filename , format ) , DCNL ... key _ function = lambda rec : seguid ( rec.seq ) ) DCNL &gt; &gt; &gt; for key , record in sorted ( seguid _ dict.items ( ) ) : DCNL ... print ( &quot; % s % s &quot; % ( key , record.id ) ) DCNL / wQvmrl87QWcm9llO4 / efg23Vgg AJ237582.1 DCNL BUg6YxXSKWEcFFH0L08JzaLGhQs L31939.1 DCNL SabZaA4V2eLE9 / 2Fm5FnyYy07J4 X55053.1 DCNL TtWsXo45S3ZclIBy4X / WJc39 + CY M81224.1 DCNL l7gjJFE6W / S1jJn5 + 1ASrUKW / FA X62281.1 DCNL uVEYeAQSV5EDQOnFoeMmVea + Oow AF297471.1 DCNL This approach is not suitable for very large sets of sequences , as all DCNL the SeqRecord objects are held in memory . Instead , consider using the DCNL Bio.SeqIO.index ( ) function ( if it supports your particular file format )  . &apos; 
def get _ best _ language ( accept _ lang ) : DCNL &apos; Given an Accept-Language header , return the best-matching language . &apos; 
def certificate ( ) : DCNL &apos; Certificates Controller&apos;
def diff ( * paths ) : DCNL &apos; Return a formatted diff between current files and original in a package . DCNL NOTE : this function includes all files ( configuration and not ) , but does DCNL not work on binary content . DCNL : param path : Full path to the installed file DCNL : return : Difference string or raises and exception if examined file is binary . DCNL CLI example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.diff / etc / apache2 / httpd.conf / etc / sudoers&apos;
def base64 _ decode ( input , errors = &apos; strict &apos; ) : DCNL &apos; Decodes the object input and returns a tuple ( output DCNL object , length consumed ) . DCNL input must be an object which provides the bf _ getreadbuf DCNL buffer slot . Python strings , buffer objects and memory DCNL mapped files are examples of objects providing this slot . DCNL errors defines the error handling to apply . It defaults to DCNL \ &apos; strict \ &apos; handling which is the only currently supported DCNL error handling for this codec . &apos; 
def metric _ cleanup ( ) : DCNL &apos; Teardown ; part of Gmond interface&apos;
def search ( request ) : DCNL &apos; Search Scan by MD5 Route&apos;
def initialize ( ) : DCNL &apos; Initializes local config object&apos;
def shlex _ quote ( s ) : DCNL &apos; Return a shell-escaped version of the string * s * . DCNL Backported from Python 3.3 standard library module shlex . &apos; 
def simple _ norm ( data , stretch = &apos; linear &apos; , power = 1.0 , asinh _ a = 0.1 , min _ cut = None , max _ cut = None , min _ percent = None , max _ percent = None , percent = None , clip = True ) : DCNL &apos; Return a Normalization class that can be used for displaying images DCNL with Matplotlib . DCNL This function enables only a subset of image stretching functions DCNL available in ` ~ astropy.visualization.mpl _ normalize.ImageNormalize`. DCNL This function is used by the DCNL ``astropy.visualization.scripts.fits2bitmap`` script . DCNL Parameters DCNL data : ` ~ numpy.ndarray` DCNL The image array . DCNL stretch : { \ &apos; linear \ &apos; , \ &apos; sqrt \ &apos; , \ &apos; power \ &apos; , log \ &apos; , \ &apos; asinh \ &apos; } , optional DCNL The stretch function to apply to the image . The default is DCNL \ &apos; linear \ &apos; . DCNL power : float , optional DCNL The power index for ``stretch = \ &apos; power \ &apos; `` . The default is 1.0 . DCNL asinh _ a : float , optional DCNL For ``stretch = \ &apos; asinh \ &apos; `` , the value where the asinh curve DCNL transitions from linear to logarithmic behavior , expressed as a DCNL fraction of the normalized image . Must be in the range between DCNL 0 and 1 . The default is 0.1 . DCNL min _ cut : float , optional DCNL The pixel value of the minimum cut level . Data values less than DCNL ``min _ cut`` will set to ``min _ cut`` before stretching the image . DCNL The default is the image minimum . ``min _ cut`` overrides DCNL ``min _ percent`` . DCNL max _ cut : float , optional DCNL The pixel value of the maximum cut level . Data values greater DCNL than ``min _ cut`` will set to ``min _ cut`` before stretching the DCNL image . The default is the image maximum . ``max _ cut`` overrides DCNL ``max _ percent`` . DCNL min _ percent : float , optional DCNL The percentile value used to determine the pixel value of DCNL minimum cut level . The default is 0.0 . ``min _ percent`` DCNL overrides ``percent`` . DCNL max _ percent : float , optional DCNL The percentile value used to determine the pixel value of DCNL maximum cut level . The default is 100.0 . ``max _ percent`` DCNL overrides ``percent`` . DCNL percent : float , optional DCNL The percentage of the image values used to determine the pixel DCNL values of the minimum and maximum cut levels . The lower cut DCNL level will set at the `` ( 100 - percent ) / 2`` percentile , while DCNL the upper cut level will be set at the `` ( 100 + percent ) / 2`` DCNL percentile . The default is 100.0 . ``percent`` is ignored if DCNL either ``min _ percent`` or ``max _ percent`` is input . DCNL clip : bool , optional DCNL If `True` ( default ) , data values outside the &#91; 0 : 1 &#93; range are DCNL clipped to the &#91; 0 : 1 &#93; range . DCNL Returns DCNL result : `ImageNormalize` instance DCNL An `ImageNormalize` instance that can be used for displaying DCNL images with Matplotlib . &apos; 
def get _ role _ permissions ( meta , user = None , verbose = False ) : DCNL &apos; Returns dict of evaluated role permissions like ` { &quot; read &quot; : True , &quot; write &quot; : False } ` DCNL If user permissions are applicable , it adds a dict of user permissions like DCNL / / user permissions will apply on these rights DCNL &quot; apply _ user _ permissions &quot; : { &quot; read &quot; : 1 , &quot; write &quot; : 1 } , DCNL / / doctypes that will be applicable for each right DCNL &quot; user _ permission _ doctypes &quot; : { DCNL &quot; read &quot; : &#91; DCNL / / AND between &quot; DocType 1 &quot; and &quot; DocType 2 &quot; DCNL &#91; &quot; DocType 1 &quot; , &quot; DocType 2 &quot; &#93; , DCNL / / OR DCNL &#91; &quot; DocType 3 &quot; &#93; DCNL &quot; if _ owner &quot; : { &quot; read &quot; : 1 , &quot; write &quot; : 1 } &apos;
def evaluation ( y _ test = None , y _ predict = None , n _ classes = None ) : DCNL &apos; Input the predicted results , targets results and DCNL the number of class , return the confusion matrix , F1-score of each class , DCNL accuracy and macro F1-score . DCNL Parameters DCNL y _ test : numpy.array or list DCNL target results DCNL y _ predict : numpy.array or list DCNL predicted results DCNL n _ classes : int DCNL number of classes DCNL Examples DCNL &gt; &gt; &gt; c _ mat , f1 , acc , f1 _ macro = evaluation ( y _ test , y _ predict , n _ classes ) &apos;
def auto _ fields ( resource ) : DCNL &apos; Returns a list of automatically handled fields for a resource . DCNL : param resource : the resource currently being accessed by the client . DCNL .. versionchanged : 0.5 DCNL ETAG is now a preserved meta data ( # 369 ) . DCNL .. versionadded : : 0.4&apos;
def use _ setuptools ( version = DEFAULT _ VERSION , download _ base = DEFAULT _ URL , to _ dir = os.curdir ) : DCNL &apos; Automatically find / download setuptools and make it available on sys.path DCNL `version` should be a valid setuptools version number that is available DCNL as an egg for download under the `download _ base` URL ( which should end with DCNL a \ &apos; / \ &apos; ) . `to _ dir` is the directory where setuptools will be downloaded , if DCNL it is not already available . DCNL If an older version of setuptools is installed , this will print a message DCNL to ``sys.stderr`` and raise SystemExit in an attempt to abort the calling DCNL script . &apos; 
def setup ( * * attrs ) : DCNL &apos; The gateway to the Distutils : do everything your setup script needs DCNL to do , in a highly flexible and user-driven way . Briefly : create a DCNL Distribution instance ; find and parse config files ; parse the command DCNL line ; run each Distutils command found there , customized by the options DCNL supplied to \ &apos; setup ( ) \ &apos; ( as keyword arguments ) , in config files , and on DCNL the command line . DCNL The Distribution instance might be an instance of a class supplied via DCNL the \ &apos; distclass \ &apos; keyword argument to \ &apos; setup \ &apos; ; if no such class is DCNL supplied , then the Distribution class ( in dist.py ) is instantiated . DCNL All other arguments to \ &apos; setup \ &apos; ( except for \ &apos; cmdclass \ &apos; ) are used to set DCNL attributes of the Distribution instance . DCNL The \ &apos; cmdclass \ &apos; argument , if supplied , is a dictionary mapping command DCNL names to command classes . Each command encountered on the command line DCNL will be turned into a command class , which is in turn instantiated ; any DCNL class found in \ &apos; cmdclass \ &apos; is used in place of the default , which is DCNL ( for command \ &apos; foo _ bar \ &apos; ) class \ &apos; foo _ bar \ &apos; in module DCNL \ &apos; distutils.command.foo _ bar \ &apos; . The command class must provide a DCNL \ &apos; user _ options \ &apos; attribute which is a list of option specifiers for DCNL \ &apos; distutils.fancy _ getopt \ &apos; . Any command-line options between the current DCNL and the next command are used to set attributes of the current command DCNL object . DCNL When the entire command-line has been successfully parsed , calls the DCNL \ &apos; run ( ) \ &apos; method on each command object in turn . This method will be DCNL driven entirely by the Distribution object ( which each command object DCNL has a reference to , thanks to its constructor ) , and the DCNL command-specific options that became attributes of each command DCNL object . &apos; 
def get _ messages ( request ) : DCNL &apos; Returns the message storage on the request if it exists , otherwise returns DCNL user.message _ set.all ( ) as the old auth context processor did . &apos; 
def _ _ virtual _ _ ( ) : DCNL &apos; Only load if the mfs commands are installed&apos;
def document _ batch _ action ( section , resource _ name , event _ emitter , batch _ action _ model , service _ model , collection _ model , include _ signature = True ) : DCNL &apos; Documents a collection \ &apos; s batch action DCNL : param section : The section to write to DCNL : param resource _ name : The name of the resource DCNL : param action _ name : The name of collection action . Currently only DCNL can be all , filter , limit , or page _ size DCNL : param event _ emitter : The event emitter to use to emit events DCNL : param batch _ action _ model : The model of the batch action DCNL : param collection _ model : The model of the collection DCNL : param service _ model : The model of the service DCNL : param include _ signature : Whether or not to include the signature . DCNL It is useful for generating docstrings . &apos; 
def tuple2str ( tagged _ token , sep = &apos; / &apos; ) : DCNL &apos; Given the tuple representation of a tagged token , return the DCNL corresponding string representation . This representation is DCNL formed by concatenating the token \ &apos; s word string , followed by the DCNL separator , followed by the token \ &apos; s tag . ( If the tag is None , DCNL then just return the bare word string . ) DCNL &gt; &gt; &gt; from nltk.tag.util import tuple2str DCNL &gt; &gt; &gt; tagged _ token = ( \ &apos; fly \ &apos; , \ &apos; NN \ &apos; ) DCNL &gt; &gt; &gt; tuple2str ( tagged _ token ) DCNL \ &apos; fly / NN \ &apos; DCNL : type tagged _ token : tuple ( str , str ) DCNL : param tagged _ token : The tuple representation of a tagged token . DCNL : type sep : str DCNL : param sep : The separator string used to separate word strings DCNL from tags . &apos; 
def close _ enough ( sa , sb ) : DCNL &apos; Compare two strings and return true if they \ &apos; re the same notwithstanding any whitespace or case . &apos; 
def SynthesizeUserId ( email ) : DCNL &apos; Return a synthetic user ID from an email address . DCNL Note that this is not the same user ID found in the production system . DCNL Args : DCNL email : An email address . DCNL Returns : DCNL A string userid derived from the email address . &apos; 
def get _ cache ( ) : DCNL &apos; Returns internal cache object from globally installed ``CachedSession``&apos;
def set _ store ( store , key = _ store _ registry _ key , app = None ) : DCNL &apos; Sets an instance of : class : `AuthStore` in the app registry . DCNL : param store : DCNL An instance of : class : `AuthStore` . DCNL : param key : DCNL The key used to retrieve the instance from the registry . A default DCNL is used if it is not set . DCNL : param request : DCNL A : class : `webapp2.WSGIApplication` instance used to retrieve the DCNL instance . The active app is used if it is not set . &apos; 
def get _ server _ info ( request = None ) : DCNL &apos; Returns server information for use in the API . DCNL This is used for the root resource and for the deprecated server DCNL info resource . &apos; 
def holdings _ cover _ maked _ nextbar ( data , cover _ entries , capital , short _ margin , volume _ multiple ) : DCNL &apos; 策略 : 空头限价平仓且下一根bar成交 DCNL 买入点 ： &#91; 相关bar的最低点减去OFFSET &#93; DCNL 当天卖出点 ： sell1&apos;
def flatten ( x , outdim = 1 ) : DCNL &apos; Reshapes the variable x by keeping DCNL the first outdim-1 dimension size ( s ) of x the same , DCNL and making the last dimension size of x equal to DCNL the multiplication of its remaining dimension size ( s ) . DCNL Parameters DCNL x : theano.tensor.var.TensorVariable DCNL the variable that should be reshaped . DCNL outdim : int DCNL the number of dimensions of the returned variable DCNL Returns DCNL theano.tensor.var.TensorVariable DCNL the flattend variable with dimensionality of outdim&apos;
def distros _ for _ filename ( filename , metadata = None ) : DCNL &apos; Yield possible egg or source distribution objects based on a filename&apos;
def _ parseTCP ( factory , port , interface = &apos; &apos; , backlog = 50 ) : DCNL &apos; Internal parser function for L { _ parseServer } to convert the string DCNL arguments for a TCP ( IPv4 ) stream endpoint into the structured arguments . DCNL @ param factory : the protocol factory being parsed , or L { None } . ( This was a DCNL leftover argument from when this code was in C { strports } , and is now DCNL mostly None and unused . ) DCNL @ type factory : L { IProtocolFactory } or L { None } DCNL @ param port : the integer port number to bind DCNL @ type port : C { str } DCNL @ param interface : the interface IP to listen on DCNL @ param backlog : the length of the listen queue DCNL @ type backlog : C { str } DCNL @ return : a 2-tuple of ( args , kwargs ) , describing the parameters to DCNL L { IReactorTCP.listenTCP } ( or , modulo argument 2 , the factory , arguments DCNL to L { TCP4ServerEndpoint }  . &apos; 
def show _ snapshot ( kwargs = None , call = None ) : DCNL &apos; Show the details of an existing snapshot . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-cloud -f show _ snapshot gce name = mysnapshot&apos;
def diff _ jid ( jid , config = &apos; root &apos; ) : DCNL &apos; Returns the changes applied by a `jid` DCNL jid DCNL The job id to lookup DCNL config DCNL Configuration name . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; snapper.diff _ jid jid = 20160607130930720112&apos;
def _ is _ host _ full ( client , host ) : DCNL &apos; Checks whether maximum volumes attached to a host have been reached . &apos; 
def get _ xstatic _ dirs ( XSTATIC _ MODULES , HORIZON _ CONFIG ) : DCNL &apos; Discover static file configuration of the xstatic modules . DCNL For each entry in the XSTATIC _ MODULES list we determine the entry DCNL point files ( which may come from the xstatic MAIN var ) and then DCNL determine where in the Django static tree the xstatic package \ &apos; s contents DCNL should be placed . DCNL For jquery.bootstrap.wizard.js the module name is None the static file is DCNL actually a 3rd-party file but resides in the Horizon source tree and not DCNL an xstatic package . DCNL The xstatic.pkg.jquery _ ui package had its contents moved by packagers so DCNL it must be handled as a special case . &apos; 
def dict _ subset ( d , keys ) : DCNL &apos; Return a new dictionary that is built from copying select keys from d&apos;
def Repr ( class _ instance , ordered _ dictionary ) : DCNL &apos; Generates an unambiguous representation for instance and ordered dict . &apos; 
def team _ absent ( name , profile = &apos; github &apos; , * * kwargs ) : DCNL &apos; Ensure a team is absent . DCNL Example : DCNL .. code-block : : yaml DCNL ensure team test is present in github : DCNL github.team _ absent : DCNL - name : \ &apos; test \ &apos; DCNL The following parameters are required : DCNL name DCNL This is the name of the team in the organization . DCNL .. versionadded : : 2016.11.0&apos;
def count ( typename , objects = None ) : DCNL &apos; Count objects tracked by the garbage collector with a given class name . DCNL Example : DCNL &gt; &gt; &gt; count ( \ &apos; dict \ &apos; ) DCNL 42 DCNL &gt; &gt; &gt; count ( \ &apos; MyClass \ &apos; , get _ leaking _ objects ( ) ) DCNL 3 DCNL &gt; &gt; &gt; count ( \ &apos; mymodule.MyClass \ &apos; ) DCNL 2 DCNL Note that the GC does not track simple objects like int or str . DCNL .. versionchanged : : 1.7 DCNL New parameter : ``objects`` . DCNL .. versionchanged : : 1.8 DCNL Accepts fully-qualified type names ( i.e. \ &apos; package.module.ClassName \ &apos; ) DCNL as well as short type names ( i.e. \ &apos; ClassName \ &apos; )  . &apos; 
def _ split _ symbol _ mappings ( df ) : DCNL &apos; Split out the symbol : sid mappings from the raw data . DCNL Parameters DCNL df : pd.DataFrame DCNL The dataframe with multiple rows for each symbol : sid pair . DCNL Returns DCNL asset _ info : pd.DataFrame DCNL The asset info with one row per asset . DCNL symbol _ mappings : pd.DataFrame DCNL The dataframe of just symbol : sid mappings . The index will be DCNL the sid , then there will be three columns : symbol , start _ date , and DCNL end _ date . &apos; 
def set _ cache _ under _ settings ( destination , setting , key _ prefix , value , ttl , list _ = False ) : DCNL &apos; Take the value passed , and merge the current `setting` over it . Once DCNL complete , take the value and set the cache `key` and destination.settings DCNL `setting` to that value , using the `ttl` for set _ cache ( ) . DCNL : param destination : DCNL An object that has a `.settings` attribute that is a dict DCNL : param setting : DCNL The dict key to use when pushing the value into the settings dict DCNL : param key _ prefix : DCNL The string to prefix to `setting` to make the cache key DCNL : param value : DCNL The value to set DCNL : param ttl : DCNL The cache ttl to use&apos;
def _ getPlatformString ( dist = None ) : DCNL &apos; If generic = = True then returns empty _ _ build _ platform _ _ string&apos;
@ snippet DCNL def topic _ publish _ messages ( client , to _ delete ) : DCNL &apos; Publish messages to a topic . &apos; 
def simulate _ head ( app , path , * * kwargs ) : DCNL &apos; Simulates a HEAD request to a WSGI application . DCNL Equivalent to : : DCNL simulate _ request ( app , \ &apos; HEAD \ &apos; , path , * * kwargs ) DCNL Args : DCNL app ( callable ) : The WSGI application to call DCNL path ( str ) : The URL path to request DCNL Keyword Args : DCNL params ( dict ) : A dictionary of query string parameters , DCNL where each key is a parameter name , and each value is DCNL either a ``str`` or something that can be converted DCNL into a ``str`` , or a list of such values . If a ``list`` , DCNL the value will be converted to a comma-delimited string DCNL of values ( e.g. , \ &apos; thing = 1,2,3 \ &apos; ) . DCNL params _ csv ( bool ) : Set to ``False`` to encode list values DCNL in query string params by specifying multiple instances DCNL of the parameter ( e.g. , \ &apos; thing = 1 &amp; thing = 2 &amp; thing = 3 \ &apos; ) . DCNL Otherwise , parameters will be encoded as comma-separated DCNL values ( e.g. , \ &apos; thing = 1,2,3 \ &apos; ) . Defaults to ``True`` . DCNL query _ string ( str ) : A raw query string to include in the DCNL request ( default : ``None`` ) . If specified , overrides DCNL `params` . DCNL headers ( dict ) : Additional headers to include in the request DCNL ( default : ``None`` ) &apos;
def extract _ lsq _ problems ( ) : DCNL &apos; Extract all least squares problems in this file for benchmarking . DCNL Returns DCNL OrderedDict , str - &gt; LSQBenchmarkProblem DCNL The key is a problem name . DCNL The value is an instance of LSQBenchmarkProblem . &apos; 
def test _ cons _ correct ( ) : DCNL &apos; Ensure cons gets compiled correctly&apos;
def remove _ file ( source ) : DCNL &apos; Remove file or directory . &apos; 
def is _ operator ( element ) : DCNL &apos; Test whether an object is a valid domain operator . &apos; 
def should _ use _ rendered ( doc , params , html = None ) : DCNL &apos; * The service isn \ &apos; t disabled with a timeout of 0 DCNL * The document isn \ &apos; t empty DCNL * The request has * not * asked for raw source DCNL ( eg . ? raw ) DCNL * The request has * not * asked for no macro evaluation DCNL ( eg . ? nomacros ) DCNL * The request * has * asked for macro evaluation DCNL ( eg . ? raw &amp; macros ) &apos;
@ pytest.mark.parametrize ( &apos; parallel &apos; , &#91; True , False &#93; ) DCNL def test _ not _ enough _ cols ( parallel , read _ csv ) : DCNL &apos; If a row does not have enough columns , the FastCsv reader should add empty DCNL fields while the FastBasic reader should raise an error . &apos; 
@ memoize ( maxsize = None ) DCNL def find ( name , namespace = u &apos;celery &apos; ) : DCNL &apos; Find setting by name . &apos; 
def expand _ dims ( a , axis ) : DCNL &apos; Expands given arrays . DCNL Args : DCNL a ( cupy.ndarray ) : Array to be expanded . DCNL axis ( int ) : Position where new axis is to be inserted . DCNL Returns : DCNL cupy.ndarray : The number of dimensions is one greater than that of DCNL the input array . DCNL .. seealso : : : func : `numpy.expand _ dims`&apos;
def delete _ volume ( target , stop = True ) : DCNL &apos; Deletes a gluster volume DCNL target DCNL Volume to delete DCNL stop DCNL Stop volume before delete if it is started , True by default&apos;
def simple _ seq ( seq ) : DCNL &apos; &gt; &gt; &gt; x = simple _ seq ( &quot; abc &quot; ) DCNL &gt; &gt; &gt; list ( x ) DCNL &#91; \ &apos; a \ &apos; , \ &apos; b \ &apos; , \ &apos; c \ &apos; &#93; &apos;
def tree ( node ) : DCNL &apos; Returns a tree representation of &quot; node &quot; as a string . DCNL It uses print _ node ( ) together with pprint _ nodes ( ) on node.args recursively . DCNL See also : print _ tree ( ) &apos;
def join ( ) : DCNL &apos; Pause until sigint&apos;
def RunInTransactionCustomRetries ( retries , function , * args , * * kwargs ) : DCNL &apos; Runs a function inside a datastore transaction . DCNL Runs the user-provided function inside transaction , with a specified DCNL number of retries . DCNL Args : DCNL retries : number of retries ( not counting the initial try ) DCNL function : a function to be run inside the transaction on all remaining DCNL arguments DCNL * args : positional arguments for function . DCNL * * kwargs : keyword arguments for function . DCNL Returns : DCNL the function \ &apos; s return value , if any DCNL Raises : DCNL TransactionFailedError , if the transaction could not be committed . &apos; 
def calculateNonce ( realm , algorithm = MD5 ) : DCNL &apos; This is an auxaliary function that calculates \ &apos; nonce \ &apos; value . It is used DCNL to handle sessions . &apos; 
def confirm ( question , error _ response = &apos; Valid DCSP options DCSP : DCSP yes DCSP or DCSP no &apos; ) : DCNL &apos; ask the user if they would like to perform the action DCNL Parameters : DCNL question - the question you would like to ask the user to confirm . DCNL error _ response - the message to display if an invalid option is given . &apos; 
def asStructuredText ( I , munge = 0 ) : DCNL &apos; Output structured text format . Note , this will whack any existing DCNL \ &apos; structured \ &apos; format of the text . &apos; 
def install _ packages _ from _ file ( packages _ to _ install ) : DCNL &apos; ( Force ) Installs packages from files , but does DCNL not update installed.lst files . DCNL caveat : not as tested as everything else . DCNL : param packages _ to _ install : list of files to install DCNL : raises : IOErrors&apos;
def restoreConfigZip ( archive , targetDir ) : DCNL &apos; Restores a Config ZIP file back in place DCNL : param archive : ZIP filename DCNL : param targetDir : Directory to restore to DCNL : return : True on success , False on failure&apos;
def load ( config _ string , default _ name = None ) : DCNL &apos; Given a module name and an object expected to be contained within , DCNL return said object . &apos; 
@ verbose DCNL def gamma _ map ( evoked , forward , noise _ cov , alpha , loose = 0.2 , depth = 0.8 , xyz _ same _ gamma = True , maxit = 10000 , tol = 1e-06 , update _ mode = 1 , gammas = None , pca = True , return _ residual = False , verbose = None ) : DCNL &apos; Hierarchical Bayes ( Gamma-MAP ) sparse source localization method . DCNL Models each source time course using a zero-mean Gaussian prior with an DCNL unknown variance ( gamma ) parameter . During estimation , most gammas are DCNL driven to zero , resulting in a sparse source estimate , as in DCNL &#91; 1 &#93; _ and &#91; 2 &#93; _ . DCNL For fixed-orientation forward operators , a separate gamma is used for each DCNL source time course , while for free-orientation forward operators , the same DCNL gamma is used for the three source time courses at each source space point DCNL ( separate gammas can be used in this case by using xyz _ same _ gamma = False ) . DCNL Parameters DCNL evoked : instance of Evoked DCNL Evoked data to invert . DCNL forward : dict DCNL Forward operator . DCNL noise _ cov : instance of Covariance DCNL Noise covariance to compute whitener . DCNL alpha : float DCNL Regularization parameter ( noise variance ) . DCNL loose : float in &#91; 0 , 1 &#93; DCNL Value that weights the source variances of the dipole components DCNL that are parallel ( tangential ) to the cortical surface . If loose DCNL is 0 or None then the solution is computed with fixed orientation . DCNL If loose is 1 , it corresponds to free orientations . DCNL depth : None &#124; float in &#91; 0 , 1 &#93; DCNL Depth weighting coefficients . If None , no depth weighting is performed . DCNL xyz _ same _ gamma : bool DCNL Use same gamma for xyz current components at each source space point . DCNL Recommended for free-orientation forward solutions . DCNL maxit : int DCNL Maximum number of iterations . DCNL tol : float DCNL Tolerance parameter for convergence . DCNL update _ mode : int DCNL Update mode , 1 : MacKay update ( default ) , 2 : Modified MacKay update . DCNL gammas : array , shape = ( n _ sources , ) DCNL Initial values for posterior variances ( gammas ) . If None , a DCNL variance of 1.0 is used . DCNL pca : bool DCNL If True the rank of the data is reduced to the true dimension . DCNL return _ residual : bool DCNL If True , the residual is returned as an Evoked instance . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL stc : instance of SourceEstimate DCNL Source time courses . DCNL residual : instance of Evoked DCNL The residual a.k.a. data not explained by the sources . DCNL Only returned if return _ residual is True . DCNL References DCNL .. &#91; 1 &#93; Wipf et al . Analysis of Empirical Bayesian Methods for DCNL Neuroelectromagnetic Source Localization , Advances in Neural DCNL Information Process . Systems ( 2007 ) DCNL .. &#91; 2 &#93; Wipf et al . A unified Bayesian framework for MEG / EEG source DCNL imaging , NeuroImage , vol . 44 , no . 3 , pp. 947-66 , Mar. 2009 . &apos; 
def set _ hostname ( hostname = None , commit _ change = True ) : DCNL &apos; To set the name of the device . DCNL Usage : DCNL .. code-block : : bash DCNL salt \ &apos; device _ name \ &apos; junos.set _ hostname hostname = salt-device DCNL Options : DCNL * hostname : The name to be set . DCNL * commit _ change : Whether to commit the changes . ( default = True ) &apos;
def with _ backing _ lock ( method ) : DCNL &apos; A decorator to perform a lock- * -unlock cycle . DCNL When applied to a method , this decorator will automatically wrap DCNL calls to the method in a backing file lock and before the call DCNL followed by a backing file unlock . &apos; 
def build _ function ( name , args = None , defaults = None , flag = 0 , doc = None ) : DCNL &apos; create and initialize a astroid Function node&apos;
def js _ escaped _ string ( string _ for _ js ) : DCNL &apos; Mako filter that escapes text for use in a JavaScript string . DCNL If None is provided , returns an empty string . DCNL Usage : DCNL Used as follows in a Mako template inside a &lt; SCRIPT &gt; tag : : DCNL var my _ string _ for _ js = &quot; $ { my _ string _ for _ js &#124; n , js _ escaped _ string } &quot; DCNL The surrounding quotes for the string must be included . DCNL Use the &quot; n &quot; Mako filter above . It is possible that the default filter DCNL may include html escaping in the future , and this ensures proper DCNL escaping . DCNL Mako \ &apos; s default filter decode.utf8 is applied here since this default DCNL filter is skipped in the Mako template with &quot; n &quot; . DCNL Arguments : DCNL string _ for _ js ( string ) : Text to be properly escaped for use in a DCNL JavaScript string . DCNL Returns : DCNL ( string ) Text properly escaped for use in a JavaScript string as DCNL unicode . Returns empty string if argument is None . &apos; 
def reset _ extensions _ translations _ locales ( apps , schema _ editor ) : DCNL &apos; Reset the locale field for all translations on existing Extensions . This DCNL is done to fix bug 1215094 : some translations were created with the wrong DCNL language - the one from the request , instead of the one from the DCNL default _ language field . &apos; 
def listen ( description , factory , default = None ) : DCNL &apos; Listen on a port corresponding to a description DCNL @ type description : C { str } DCNL @ type factory : L { twisted.internet.interfaces.IProtocolFactory } DCNL @ type default : C { str } or C { None } DCNL @ rtype : C { twisted.internet.interfaces.IListeningPort } DCNL @ return : the port corresponding to a description of a reliable DCNL virtual circuit server . DCNL See the documentation of the C { parse } function for description DCNL of the semantics of the arguments . &apos; 
def test _ ros _ fit _ sample ( ) : DCNL &apos; Test the fit sample routine&apos;
def _ check _ storage _ models ( current _ release ) : DCNL &apos; Check if files in core / storage have changed and returns them . DCNL Args : DCNL current _ release : The current release version DCNL Returns : DCNL ( list ) : The changed files ( if any ) &apos;
def get _ help ( ) : DCNL &apos; Provides our --help usage information . DCNL : returns : * * str * * with our usage information&apos;
def metric _ to _ Christoffel _ 2nd ( expr ) : DCNL &apos; Return the nested list of Christoffel symbols for the given metric . DCNL This returns the Christoffel symbol of second kind that represents the DCNL Levi-Civita connection for the given metric . DCNL Examples DCNL &gt; &gt; &gt; from sympy.diffgeom.rn import R2 DCNL &gt; &gt; &gt; from sympy.diffgeom import metric _ to _ Christoffel _ 2nd , TensorProduct DCNL &gt; &gt; &gt; TP = TensorProduct DCNL &gt; &gt; &gt; metric _ to _ Christoffel _ 2nd ( TP ( R2.dx , R2.dx ) + TP ( R2.dy , R2.dy ) ) DCNL &#91; &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; , &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; &#93; DCNL &gt; &gt; &gt; metric _ to _ Christoffel _ 2nd ( R2.x * TP ( R2.dx , R2.dx ) + TP ( R2.dy , R2.dy ) ) DCNL &#91; &#91; &#91; 1 / ( 2 * x ) , 0 &#93; , &#91; 0 , 0 &#93; &#93; , &#91; &#91; 0 , 0 &#93; , &#91; 0 , 0 &#93; &#93; &#93; &apos;
def _ generic _ factor _ list ( expr , gens , args , method ) : DCNL &apos; Helper function for : func : `sqf _ list` and : func : `factor _ list` . &apos; 
@ register ( u &apos;accept-line &apos; ) DCNL def accept _ line ( event ) : DCNL &apos; Accept the line regardless of where the cursor is . &apos; 
def log _ loss ( y _ true , y _ prob ) : DCNL &apos; Compute Logistic loss for classification . DCNL Parameters DCNL y _ true : array-like or label indicator matrix DCNL Ground truth ( correct ) labels . DCNL y _ prob : array-like of float , shape = ( n _ samples , n _ classes ) DCNL Predicted probabilities , as returned by a classifier \ &apos; s DCNL predict _ proba method . DCNL Returns DCNL loss : float DCNL The degree to which the samples are correctly predicted . &apos; 
def start ( hass , server _ config ) : DCNL &apos; Initialize MQTT Server . &apos; 
def export _ to _ zip _ file ( exploration _ id , version = None ) : DCNL &apos; Returns a ZIP archive of the exploration . &apos; 
def convolution _ nd ( x , W , b = None , stride = 1 , pad = 0 , use _ cudnn = True , cover _ all = False ) : DCNL &apos; N-dimensional convolution function . DCNL This is an implementation of N-dimensional convolution which is generalized DCNL two-dimensional convolution in ConvNets . It takes three variables : the DCNL input ``x`` , the filter weight ``W`` and the bias vector ``b`` . DCNL Notation : here is a notation for dimensionalities . DCNL - : math : `N` is the number of spatial dimensions . DCNL - : math : `n` is the batch size . DCNL - : math : `c _ I` and : math : `c _ O` are the number of the input and output DCNL channels , respectively . DCNL - : math : `d _ 1 , d _ 2 , ... , d _ N` are the size of each axis of the input \ &apos; s DCNL spatial dimensions , respectively . DCNL - : math : `k _ 1 , k _ 2 , ... , k _ N` are the size of each axis of the filters , DCNL respectively . DCNL Args : DCNL x ( ~ chainer.Variable ) : Input variable of shape DCNL : math : ` ( n , c _ I , d _ 1 , d _ 2 , ... , d _ N ) ` . DCNL W ( ~ chainer.Variable ) : Weight variable of shape DCNL : math : ` ( c _ O , c _ I , k _ 1 , k _ 2 , ... , k _ N ) ` . DCNL b ( ~ chainer.Variable ) : One-dimensional bias variable with length DCNL : math : `c _ O` ( optional ) . DCNL stride ( int or tuple of ints ) : Stride of filter applications DCNL : math : ` ( s _ 1 , s _ 2 , ... , s _ N ) ` . ``stride = s`` is equivalent to DCNL `` ( s , s , ... , s ) `` . DCNL pad ( int or tuple of ints ) : Spatial padding width for input arrays DCNL : math : ` ( p _ 1 , p _ 2 , ... , p _ N ) ` . ``pad = p`` is equivalent to DCNL `` ( p , p , ... , p ) `` . DCNL use _ cudnn ( bool ) : If ``True`` , then this function uses cuDNN if DCNL available . See below for the excact conditions . DCNL cover _ all ( bool ) : If ``True`` , all spatial locations are convoluted DCNL into some output pixels . It may make the output size larger . DCNL `cover _ all` needs to be ``False`` if you want to use cuDNN . DCNL Returns : DCNL ~ chainer.Variable : Output variable . DCNL This function uses cuDNN implementation for its forward and backward DCNL computation if ALL of the following conditions are satisfied : DCNL - ``cuda.cudnn _ enabled`` is ``True`` DCNL - ``use _ cudnn`` is ``True`` DCNL - The number of spatial dimensions is more than one . DCNL - ``cover _ all`` is ``False`` DCNL - The input \ &apos; s ``dtype`` is equal to the filter weight \ &apos; s . DCNL - The ``dtype`` is FP32 , FP64 or FP16 ( cuDNN version is equal to or greater DCNL than v3 ) DCNL .. seealso : : : class : ` ~ chainer.links.ConvolutionND` , : func : `convolution _ 2d`&apos;
def normpath ( path ) : DCNL &apos; Normalize path , eliminating double slashes , etc . &apos; 
def select ( start , end ) : DCNL &apos; Select the span in Select mode . &apos; 
def log _ mean _ exp ( a ) : DCNL &apos; .. todo : : DCNL WRITEME&apos;
def fullmatch ( pattern , string , flags = 0 ) : DCNL &apos; Try to apply the pattern to all of the string , returning DCNL a match object , or None if no match was found . &apos; 
def _ variable _ with _ weight _ decay ( name , shape , stddev , wd ) : DCNL &apos; Helper to create an initialized Variable with weight decay . DCNL Note that the Variable is initialized with a truncated normal distribution . DCNL A weight decay is added only if one is specified . DCNL Args : DCNL name : name of the variable DCNL shape : list of ints DCNL stddev : standard deviation of a truncated Gaussian DCNL wd : add L2Loss weight decay multiplied by this float . If None , weight DCNL decay is not added for this Variable . DCNL Returns : DCNL Variable Tensor&apos;
def lookupNamingAuthorityPointer ( name , timeout = None ) : DCNL &apos; NAPTR lookup . DCNL @ type name : C { str } DCNL @ param name : DNS name to resolve . DCNL @ type timeout : Sequence of C { int } DCNL @ param timeout : Number of seconds after which to reissue the query . DCNL When the last timeout expires , the query is considered failed . DCNL @ rtype : C { Deferred } &apos;
def db _ exists ( name , * * client _ args ) : DCNL &apos; Checks if a database exists in InfluxDB . DCNL name DCNL Name of the database to check . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; influxdb.db _ exists &lt; name &gt; &apos;
def build _ auxiliary _ edge _ connectivity ( G ) : DCNL &apos; Auxiliary digraph for computing flow based edge connectivity DCNL If the input graph is undirected , we replace each edge ( `u` , `v` ) with DCNL two reciprocal arcs ( `u` , `v` ) and ( `v` , `u` ) and then we set the attribute DCNL \ &apos; capacity \ &apos; for each arc to 1 . If the input graph is directed we simply DCNL add the \ &apos; capacity \ &apos; attribute . Part of algorithm 1 in &#91; 1 &#93; _ . DCNL References DCNL .. &#91; 1 &#93; Abdol-Hossein Esfahanian . Connectivity Algorithms . ( this is a DCNL chapter , look for the reference of the book ) . DCNL http : / / www.cse.msu.edu / ~ cse835 / Papers / Graph _ connectivity _ revised.pdf&apos;
def build _ graph ( git _ dir , roles _ dirs , aws _ play _ dirs , docker _ play _ dirs ) : DCNL &apos; Builds a dependency graph that shows relationships between roles and playbooks . DCNL An edge &#91; A , B &#93; , where A and B are roles , signifies that A depends on B. An edge DCNL &#91; C , D &#93; , where C is a playbook and D is a role , signifies that C uses D. DCNL Input : DCNL git _ dir : A path to the top-most directory in the local git repository tool is to be run in . DCNL roles _ dirs : A list of relative paths to directories in which Ansible roles reside . DCNL aws _ play _ dirs : A list of relative paths to directories in which AWS Ansible playbooks reside . DCNL docker _ play _ dirs : A list of relative paths to directories in which Docker Ansible playbooks reside . &apos; 
def change _ state ( api _ url , post _ data ) : DCNL &apos; Update a state using the Zoneminder API . &apos; 
def test _ factory ( support _ as _ data = True ) : DCNL &apos; A helper for returning a unittest TestCase for testing&apos;
def get _ error _ page ( status , * * kwargs ) : DCNL &apos; Return an HTML page , containing a pretty error response . DCNL status should be an int or a str . DCNL kwargs will be interpolated into the page template . &apos; 
def run _ convert _ to _ html ( output _ dir ) : DCNL &apos; Converts markdown files into their respective html files&apos;
def _ chunk _ write ( chunk , local _ file , progress ) : DCNL &apos; Write a chunk to file and update the progress bar&apos;
def get _ features ( ) : DCNL &apos; Get the value of FEATURES variable in the make.conf DCNL Return the value of the variable or None if the variable is DCNL not in the make.conf DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; makeconf.get _ features&apos;
def _ plot _ topomap _ multi _ cbar ( data , pos , ax , title = None , unit = None , vmin = None , vmax = None , cmap = None , outlines = &apos; head &apos; , colorbar = False , cbar _ fmt = &apos; % 3.3f &apos; ) : DCNL &apos; Plot topomap multi cbar . &apos; 
def rectangle ( width , height , dtype = np.uint8 ) : DCNL &apos; Generates a flat , rectangular-shaped structuring element . DCNL Every pixel in the rectangle generated for a given width and given height DCNL belongs to the neighborhood . DCNL Parameters DCNL width : int DCNL The width of the rectangle . DCNL height : int DCNL The height of the rectangle . DCNL Other Parameters DCNL dtype : data-type DCNL The data type of the structuring element . DCNL Returns DCNL selem : ndarray DCNL A structuring element consisting only of ones , i.e. every DCNL pixel belongs to the neighborhood . &apos; 
def tokenize _ annotated ( doc , annotation ) : DCNL &apos; Tokenize a document and add an annotation attribute to each token&apos;
def _ is _ hierarchical ( x ) : DCNL &apos; Checks if the first item of an array-like object is also array-like DCNL If so , we have a MultiIndex and returns True . Else returns False . &apos; 
def listen ( opts ) : DCNL &apos; Attach to the pub socket and grab messages&apos;
def column _ index _ from _ string ( column , fast = False ) : DCNL &apos; Convert a column letter into a column number ( e.g. B - &gt; 2 ) DCNL Excel only supports 1-3 letter column names from A - &gt; ZZZ , so we DCNL restrict our column names to 1-3 characters , each in the range A-Z . DCNL .. note : : DCNL Fast mode is faster but does not check that all letters are capitals between A and Z&apos;
def quietRun ( cmd , * * kwargs ) : DCNL &apos; Run a command and return merged stdout and stderr&apos;
def dup _ random ( n , a , b , K ) : DCNL &apos; Return a polynomial of degree ``n`` with coefficients in `` &#91; a , b &#93; `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.densebasic import dup _ random DCNL &gt; &gt; &gt; dup _ random ( 3 , -10 , 10 , ZZ ) # doctest : + SKIP DCNL &#91; -2 , -8 , 9 , -4 &#93; &apos;
def reconstruct _ interp _ matrix ( idx , proj ) : DCNL &apos; Reconstruct interpolation matrix from ID . DCNL The interpolation matrix can be reconstructed from the ID indices and DCNL coefficients `idx` and `proj` , respectively , as : : DCNL P = numpy.hstack ( &#91; numpy.eye ( proj.shape &#91; 0 &#93; ) , proj &#93; ) &#91; : , numpy.argsort ( idx ) &#93; DCNL The original matrix can then be reconstructed from its skeleton matrix `B` DCNL via : : DCNL numpy.dot ( B , P ) DCNL See also : func : `reconstruct _ matrix _ from _ id` and DCNL : func : `reconstruct _ skel _ matrix` . DCNL .. This function automatically detects the matrix data type and calls the DCNL appropriate backend . For details , see : func : `backend.idd _ reconint` and DCNL : func : `backend.idz _ reconint` . DCNL Parameters DCNL idx : : class : `numpy.ndarray` DCNL Column index array . DCNL proj : : class : `numpy.ndarray` DCNL Interpolation coefficients . DCNL Returns DCNL : class : `numpy.ndarray` DCNL Interpolation matrix . &apos; 
def no _ 4byte _ params ( f ) : DCNL &apos; Checks that no 4 byte unicode characters are allowed DCNL in dicts \ &apos; keys / values and string \ &apos; s parameters&apos;
def device _ exists _ with _ ips _ and _ mac ( device _ name , ip _ cidrs , mac , namespace = None ) : DCNL &apos; Return True if the device with the given IP addresses and MAC address DCNL exists in the namespace . &apos; 
def index _ alt ( ) : DCNL &apos; Module homepage for non-Admin users when no CMS content found&apos;
def get _ indices ( expr ) : DCNL &apos; Determine the outer indices of expression ``expr`` DCNL By * outer * we mean indices that are not summation indices . Returns a set DCNL and a dict . The set contains outer indices and the dict contains DCNL information about index symmetries . DCNL Examples DCNL &gt; &gt; &gt; from sympy.tensor.index _ methods import get _ indices DCNL &gt; &gt; &gt; from sympy import symbols DCNL &gt; &gt; &gt; from sympy.tensor import IndexedBase , Idx DCNL &gt; &gt; &gt; x , y , A = map ( IndexedBase , &#91; \ &apos; x \ &apos; , \ &apos; y \ &apos; , \ &apos; A \ &apos; &#93; ) DCNL &gt; &gt; &gt; i , j , a , z = symbols ( \ &apos; i j a z \ &apos; , integer = True ) DCNL The indices of the total expression is determined , Repeated indices imply a DCNL summation , for instance the trace of a matrix A : DCNL &gt; &gt; &gt; get _ indices ( A &#91; i , i &#93; ) DCNL ( set ( ) , { } ) DCNL In the case of many terms , the terms are required to have identical DCNL outer indices . Else an IndexConformanceException is raised . DCNL &gt; &gt; &gt; get _ indices ( x &#91; i &#93; + A &#91; i , j &#93; * y &#91; j &#93; ) DCNL ( { i } , { } ) DCNL : Exceptions : DCNL An IndexConformanceException means that the terms ar not compatible , e.g. DCNL &gt; &gt; &gt; get _ indices ( x &#91; i &#93; + y &#91; j &#93; ) # doctest : + SKIP DCNL IndexConformanceException : Indices are not consistent : x ( i ) + y ( j ) DCNL .. warning : : DCNL The concept of * outer * indices applies recursively , starting on the deepest DCNL level . This implies that dummies inside parenthesis are assumed to be DCNL summed first , so that the following expression is handled gracefully : DCNL &gt; &gt; &gt; get _ indices ( ( x &#91; i &#93; + A &#91; i , j &#93; * y &#91; j &#93; ) * x &#91; j &#93; ) DCNL ( { i , j } , { } ) DCNL This is correct and may appear convenient , but you need to be careful DCNL with this as SymPy will happily .expand ( ) the product , if requested . The DCNL resulting expression would mix the outer ``j`` with the dummies inside DCNL the parenthesis , which makes it a different expression . To be on the DCNL safe side , it is best to avoid such ambiguities by using unique indices DCNL for all contractions that should be held separate . &apos; 
def WriteXmlIfChanged ( content , path , encoding = &apos; utf-8 &apos; , pretty = False , win32 = False ) : DCNL &apos; Writes the XML content to disk , touching the file only if it has changed . DCNL Args : DCNL content : The structured content to be written . DCNL path : Location of the file . DCNL encoding : The encoding to report on the first line of the XML file . DCNL pretty : True if we want pretty printing with indents and new lines . &apos; 
def ansible _ dict _ to _ boto3 _ filter _ list ( filters _ dict ) : DCNL &apos; Convert an Ansible dict of filters to list of dicts that boto3 can use DCNL Args : DCNL filters _ dict ( dict ) : Dict of AWS filters . DCNL Basic Usage : DCNL &gt; &gt; &gt; filters = { \ &apos; some-aws-id \ &apos; , \ &apos; i-01234567 \ &apos; } DCNL &gt; &gt; &gt; ansible _ dict _ to _ boto3 _ filter _ list ( filters ) DCNL \ &apos; some-aws-id \ &apos; : \ &apos; i-01234567 \ &apos; DCNL Returns : DCNL List : List of AWS filters and their values DCNL \ &apos; Name \ &apos; : \ &apos; some-aws-id \ &apos; , DCNL \ &apos; Values \ &apos; : &#91; DCNL \ &apos; i-01234567 \ &apos; , &apos;
def _ hide _ frame ( ax ) : DCNL &apos; Helper to hide axis frame for topomaps . &apos; 
def _ auth _ from _ available ( le _ client , config , domains = None , certname = None , lineage = None ) : DCNL &apos; Authenticate and enroll certificate . DCNL This method finds the relevant lineage , figures out what to do with it , DCNL then performs that action . Includes calls to hooks , various reports , DCNL checks , and requests for user input . DCNL : returns : Tuple of ( str action , cert _ or _ None ) as per _ find _ lineage _ for _ domains _ and _ certname DCNL action can be : &quot; newcert &quot; &#124; &quot; renew &quot; &#124; &quot; reinstall &quot; &apos;
def renyientropy ( px , alpha = 1 , logbase = 2 , measure = &apos; R &apos; ) : DCNL &apos; Renyi \ &apos; s generalized entropy DCNL Parameters DCNL px : array-like DCNL Discrete probability distribution of random variable X. Note that DCNL px is assumed to be a proper probability distribution . DCNL logbase : int or np.e , optional DCNL Default is 2 ( bits ) DCNL alpha : float or inf DCNL The order of the entropy . The default is 1 , which in the limit DCNL is just Shannon \ &apos; s entropy . 2 is Renyi ( Collision ) entropy . If DCNL the string &quot; inf &quot; or numpy.inf is specified the min-entropy is returned . DCNL measure : str , optional DCNL The type of entropy measure desired . \ &apos; R \ &apos; returns Renyi entropy DCNL measure . \ &apos; T \ &apos; returns the Tsallis entropy measure . DCNL Returns DCNL 1 / ( 1-alpha ) * log ( sum ( px * * alpha ) ) DCNL In the limit as alpha - &gt; 1 , Shannon \ &apos; s entropy is returned . DCNL In the limit as alpha - &gt; inf , min-entropy is returned . &apos; 
@ pytest.mark.parametrize ( ( u &apos;expr &apos; , u &apos;result &apos; ) , &#91; ( ( lambda x , y : ( x + y ) ) , &#91; 5.0 , 5.0 &#93; ) , ( ( lambda x , y : ( x - y ) ) , &#91; ( -1.0 ) , ( -1.0 ) &#93; ) , ( ( lambda x , y : ( x * y ) ) , &#91; 6.0 , 6.0 &#93; ) , ( ( lambda x , y : ( x / y ) ) , &#91; ( 2.0 / 3.0 ) , ( 2.0 / 3.0 ) &#93; ) , ( ( lambda x , y : ( x * * y ) ) , &#91; 8.0 , 8.0 &#93; ) &#93; ) DCNL def test _ model _ set _ raises _ value _ error ( expr , result ) : DCNL &apos; Check that creating model sets with components whose _ n _ models are DCNL different raise a value error&apos;
def websettings ( ) : DCNL &apos; Generate websettings&apos;
def check _ chain ( table = &apos; filter &apos; , chain = None , family = &apos; ipv4 &apos; ) : DCNL &apos; .. versionadded : : 2014.7.0 DCNL Check for the existence of a chain in the table DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nftables.check _ chain filter input DCNL IPv6 : DCNL salt \ &apos; * \ &apos; nftables.check _ chain filter input family = ipv6&apos;
def parse _ format _ method _ string ( format _ string ) : DCNL &apos; Parses a PEP 3101 format string , returning a tuple of DCNL ( keys , num _ args , manual _ pos _ arg ) , DCNL where keys is the set of mapping keys in the format string , num _ args DCNL is the number of arguments required by the format string and DCNL manual _ pos _ arg is the number of arguments passed with the position . &apos; 
def internalerror ( ) : DCNL &apos; Returns a `500 Internal Server` error . &apos; 
def GetFlavor ( params ) : DCNL &apos; Returns &#124; params.flavor &#124; if it \ &apos; s set , the system \ &apos; s default flavor else . &apos; 
def proportions _ chisquare _ pairscontrol ( count , nobs , value = None , multitest _ method = &apos; hs &apos; , alternative = &apos; two-sided &apos; ) : DCNL &apos; chisquare test of proportions for pairs of k samples compared to control DCNL Performs a chisquare test for proportions for pairwise comparisons with a DCNL control ( Dunnet \ &apos; s test ) . The control is assumed to be the first element DCNL of ``count`` and ``nobs`` . The alternative is two-sided , larger or DCNL smaller . DCNL Parameters DCNL count : integer or array _ like DCNL the number of successes in nobs trials . DCNL nobs : integer DCNL the number of trials or observations . DCNL prop : float , optional DCNL The probability of success under the null hypothesis , DCNL `0 &lt; = prop &lt; = 1` . The default value is `prop = 0.5` DCNL multitest _ method : string DCNL This chooses the method for the multiple testing p-value correction , DCNL that is used as default in the results . DCNL It can be any method that is available in ``multipletesting`` . DCNL The default is Holm-Sidak \ &apos; hs \ &apos; . DCNL alternative : string in &#91; \ &apos; two-sided \ &apos; , \ &apos; smaller \ &apos; , \ &apos; larger \ &apos; &#93; DCNL alternative hypothesis , which can be two-sided or either one of the DCNL one-sided tests . DCNL Returns DCNL result : AllPairsResults instance DCNL The returned results instance has several statistics , such as p-values , DCNL attached , and additional methods for using a non-default DCNL ``multitest _ method`` . DCNL Notes DCNL Yates continuity correction is not available . DCNL ``value`` and ``alternative`` options are not yet implemented . &apos; 
def regions ( ) : DCNL &apos; Get all available regions for the AWS Cloudtrail service . DCNL : rtype : list DCNL : return : A list of : class : `boto.regioninfo.RegionInfo`&apos;
def upsample _ 2d ( incoming , kernel _ size , name = &apos; UpSample2D &apos; ) : DCNL &apos; UpSample 2D . DCNL Input : DCNL 4-D Tensor &#91; batch , height , width , in _ channels &#93; . DCNL Output : DCNL 4-D Tensor &#91; batch , pooled height , pooled width , in _ channels &#93; . DCNL Arguments : DCNL incoming : `Tensor` . Incoming 4-D Layer to upsample . DCNL kernel _ size : \ &apos; int` or `list of int` . Upsampling kernel size . DCNL name : A name for this layer ( optional ) . Default : \ &apos; UpSample2D \ &apos; . DCNL Attributes : DCNL scope : `Scope` . This layer scope . &apos; 
def getAllDirectoriesWithFile ( path , filename , excludeDirs ) : DCNL &apos; Returns a list of directories in the &lt; path &gt; with a given &lt; filename &gt; , excluding DCNL &lt; excludeDirs &gt; &apos;
def plot _ scatter ( fig , x , y , x2 , y2 , binnum ) : DCNL &apos; docstring for plot _ test&apos;
def getTestOutput ( ) : DCNL &apos; Returns stdout and stderr output for a console test . &apos; 
@ hook.command ( &apos; feed &apos; , &apos; rss &apos; , &apos; news &apos; ) DCNL def rss ( text ) : DCNL &apos; &lt; feed &gt; -- Gets the first three items from the RSS / ATOM feed &lt; feed &gt;  . &apos; 
@ require _ role ( &apos; admin &apos; ) DCNL def group _ list ( request ) : DCNL &apos; list asset group&apos;
def load _ plain _ keyfile ( filename ) : DCNL &apos; A &quot; plain &quot; keyfile is a file containing only the key . DCNL Any other file ( JPEG , MP3 , ... ) can also be used as keyfile . &apos; 
def create _ subnet _ group ( name , description , subnet _ ids = None , subnet _ names = None , tags = None , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Create an ElastiCache subnet group DCNL CLI example to create an ElastiCache subnet group : : DCNL salt myminion boto _ elasticache.create _ subnet _ group my-subnet-group &quot; group description &quot; subnet _ ids = \ &apos; &#91; subnet-12345678 , subnet-87654321 &#93; \ &apos; region = us-east-1&apos;
def update ( kernel = False ) : DCNL &apos; Upgrade all packages , skip obsoletes if ``obsoletes = 0`` in ``yum.conf``. DCNL Exclude * kernel * upgrades by default . &apos; 
def default _ locale ( category = None , aliases = LOCALE _ ALIASES ) : DCNL &apos; Returns the system default locale for a given category , based on DCNL environment variables . DCNL &gt; &gt; &gt; for name in &#91; \ &apos; LANGUAGE \ &apos; , \ &apos; LC _ ALL \ &apos; , \ &apos; LC _ CTYPE \ &apos; &#93; : DCNL ... os.environ &#91; name &#93; = \ &apos; \ &apos; DCNL &gt; &gt; &gt; os.environ &#91; \ &apos; LANG \ &apos; &#93; = \ &apos; fr _ FR.UTF-8 \ &apos; DCNL &gt; &gt; &gt; default _ locale ( \ &apos; LC _ MESSAGES \ &apos; ) DCNL \ &apos; fr _ FR \ &apos; DCNL The &quot; C &quot; or &quot; POSIX &quot; pseudo-locales are treated as aliases for the DCNL &quot; en _ US _ POSIX &quot; locale : DCNL &gt; &gt; &gt; os.environ &#91; \ &apos; LC _ MESSAGES \ &apos; &#93; = \ &apos; POSIX \ &apos; DCNL &gt; &gt; &gt; default _ locale ( \ &apos; LC _ MESSAGES \ &apos; ) DCNL \ &apos; en _ US _ POSIX \ &apos; DCNL The following fallbacks to the variable are always considered : DCNL - ``LANGUAGE`` DCNL - ``LC _ ALL`` DCNL - ``LC _ CTYPE`` DCNL - ``LANG`` DCNL : param category : one of the ``LC _ XXX`` environment variable names DCNL : param aliases : a dictionary of aliases for locale identifiers&apos;
def get _ sequential _ open _ distrib ( course _ id ) : DCNL &apos; Returns the number of students that opened each subsection / sequential of the course DCNL `course _ id` the course ID for the course interested in DCNL Outputs a dict mapping the \ &apos; module _ id \ &apos; to the number of students that have opened that subsection / sequential . &apos; 
def highlight ( code , lexer , formatter , outfile = None ) : DCNL &apos; Lex ``code`` with ``lexer`` and format it with the formatter ``formatter`` . DCNL If ``outfile`` is given and a valid file object ( an object DCNL with a ``write`` method ) , the result will be written to it , otherwise DCNL it is returned as a string . &apos; 
def write _ rels ( worksheet , comments _ id = None , vba _ controls _ id = None ) : DCNL &apos; Write relationships for the worksheet to xml . &apos; 
def test _ ecliptic _ heliobary ( ) : DCNL &apos; Check that the ecliptic transformations for heliocentric and barycentric DCNL at least more or less make sense&apos;
def plot _ img _ and _ hist ( img , axes , bins = 256 ) : DCNL &apos; Plot an image along with its histogram and cumulative histogram . &apos; 
def load _ overrides ( file _ path , loaded _ config = config ) : DCNL &apos; Convenience function for overriding default configuration . DCNL file _ path : &lt; string &gt; the full path to a file containing valid DCNL JSON for configuration overrides&apos;
@ intercept _ errors ( UserAPIInternalError , ignore _ errors = &#91; UserAPIRequestError &#93; ) DCNL def set _ user _ preference ( requesting _ user , preference _ key , preference _ value , username = None ) : DCNL &apos; Update a user preference for the given username . DCNL Note : DCNL It is up to the caller of this method to enforce the contract that this method is only called DCNL with the user who made the request . DCNL Arguments : DCNL requesting _ user ( User ) : The user requesting to modify account information . Only the user with username DCNL \ &apos; username \ &apos; has permissions to modify account information . DCNL preference _ key ( str ) : The key for the user preference . DCNL preference _ value ( str ) : The value to be stored . Non-string values will be converted to strings . DCNL username ( str ) : Optional username specifying which account should be updated . If not specified , DCNL `requesting _ user.username` is assumed . DCNL Raises : DCNL UserNotFound : no user with username `username` exists ( or `requesting _ user.username` if DCNL `username` is not specified ) DCNL UserNotAuthorized : the requesting _ user does not have access to change the account DCNL associated with `username` DCNL PreferenceValidationError : the update was not attempted because validation errors were found DCNL PreferenceUpdateError : the operation failed when performing the update . DCNL UserAPIInternalError : the operation failed due to an unexpected error . &apos; 
def _ process _ node ( node , aliases , duplicates ) : DCNL &apos; Takes a node from the tree and searchs for any previously processed DCNL duplicates . DCNL If not a duplicate , returns a stage based from that node . DCNL If a duplicate , the node is replaced with an alias to the dup stage . DCNL In both cases the tree is removed below this node ( and the alias remains )  . &apos; 
@ register.filter ( is _ safe = False ) DCNL def yesno ( value , arg = None ) : DCNL &apos; Given a string mapping values for true , false and ( optionally ) None , DCNL returns one of those strings according to the value : DCNL Value Argument Outputs DCNL ``True`` `` &quot; yeah , no , maybe &quot; `` ``yeah`` DCNL ``False`` `` &quot; yeah , no , maybe &quot; `` ``no`` DCNL ``None`` `` &quot; yeah , no , maybe &quot; `` ``maybe`` DCNL ``None`` `` &quot; yeah , no &quot; `` `` &quot; no &quot; `` ( converts None to False DCNL if no mapping for None is given . &apos; 
def get _ res _ pool _ ref ( session , cluster ) : DCNL &apos; Get the resource pool . &apos; 
def verify ( user , password ) : DCNL &apos; Returns a simple verification callback that simply verifies that the users and password match that provided&apos;
def basic _ auth ( realm , users , encrypt = None , debug = False ) : DCNL &apos; If auth fails , raise 401 with a basic authentication header . DCNL realm : a string containing the authentication realm . DCNL users : a dict of the form : { username : password } or a callable returning a dict . DCNL encrypt : callable used to encrypt the password returned from the user-agent . DCNL if None it defaults to a md5 encryption . &apos; 
def url _ replace _ param ( url , name , value ) : DCNL &apos; Replace a GET parameter in an URL&apos;
def _ contains ( exp , cls ) : DCNL &apos; Does `node` contain a sub node of type `cls`&apos;
def libvlc _ hex _ version ( ) : DCNL &apos; Return the libvlc version in hex or 0 if unavailable . &apos; 
def index _ alt ( ) : DCNL &apos; Module homepage for non-Admin users when no CMS content found&apos;
def render _ openid _ request ( request , openid _ request , return _ to , trust _ root = None ) : DCNL &apos; Render an OpenID authentication request . &apos; 
def _ unwrap _ stream ( uri , timeout , scanner , requests _ session ) : DCNL &apos; Get a stream URI from a playlist URI , ``uri`` . DCNL Unwraps nested playlists until something that \ &apos; s not a playlist is found or DCNL the ``timeout`` is reached . &apos; 
def _ read _ ch _ info _ struct ( fid , tag , shape , rlims ) : DCNL &apos; Read channel info struct tag . &apos; 
@ require _ POST DCNL def request _ permissions ( request ) : DCNL &apos; Request permission to download a resource . &apos; 
def _ load _ editor ( caller ) : DCNL &apos; Called when the editor loads contents&apos;
def get _ redirects ( redirects _ filename ) : DCNL &apos; Parse the redirections and build a transitively closed map out of it&apos;
def looks _ like _ a _ tool ( path , invalid _ names = &#91; &#93; , enable _ beta _ formats = False ) : DCNL &apos; Quick check to see if a file looks like it may be a tool file . DCNL Whether true in a strict sense or not , lets say the intention and DCNL purpose of this procedure is to serve as a filter - all valid tools must DCNL &quot; looks _ like _ a _ tool &quot; but not everything that looks like a tool is actually DCNL a valid tool . DCNL invalid _ names may be supplied in the context of the tool shed to quickly DCNL rule common tool shed XML files . &apos; 
def bin _ constructor ( func ) : DCNL &apos; Generates a prototype for binary construction ( HEX , WKB ) GEOS routines . &apos; 
@ commands ( u &apos;title &apos; ) DCNL @ example ( u &apos; .title DCSP http : / / google.com &apos; , u &apos; &#91; DCSP Google DCSP &#93; DCSP - DCSP google.com &apos; ) DCNL def title _ command ( bot , trigger ) : DCNL &apos; Show the title or URL information for the given URL , or the last URL seen DCNL in this channel . &apos; 
def find _ playlist _ changes ( orig _ tracks , modified _ tracks ) : DCNL &apos; Finds the changes between two playlists . DCNL Returns a tuple of ( deletions , additions , staying ) . DCNL Deletions and additions are both Counters of ( sid , eid ) tuples ; DCNL staying is a set of ( sid , eid ) tuples . DCNL : param old : the original playlist . DCNL : param modified : the modified playlist . &apos; 
def _ find _ vpcs ( vpc _ id = None , vpc _ name = None , cidr = None , tags = None , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Given VPC properties , find and return matching VPC ids . &apos; 
def is _ threshold _ sequence ( degree _ sequence ) : DCNL &apos; Returns True if the sequence is a threshold degree seqeunce . DCNL Uses the property that a threshold graph must be constructed by DCNL adding either dominating or isolated nodes . Thus , it can be DCNL deconstructed iteratively by removing a node of degree zero or a DCNL node that connects to the remaining nodes . If this deconstruction DCNL failes then the sequence is not a threshold sequence . &apos; 
def inception _ v3 ( inputs , num _ classes = 1000 , is _ training = True , dropout _ keep _ prob = 0.8 , min _ depth = 16 , depth _ multiplier = 1.0 , prediction _ fn = slim.softmax , spatial _ squeeze = True , reuse = None , scope = &apos; InceptionV3 &apos; ) : DCNL &apos; Inception model from http : / / arxiv.org / abs / 1512.00567 . DCNL &quot; Rethinking the Inception Architecture for Computer Vision &quot; DCNL Christian Szegedy , Vincent Vanhoucke , Sergey Ioffe , Jonathon Shlens , DCNL Zbigniew Wojna . DCNL With the default arguments this method constructs the exact model defined in DCNL the paper . However , one can experiment with variations of the inception _ v3 DCNL network by changing arguments dropout _ keep _ prob , min _ depth and DCNL depth _ multiplier . DCNL The default image size used to train this network is 299x299 . DCNL Args : DCNL inputs : a tensor of size &#91; batch _ size , height , width , channels &#93; . DCNL num _ classes : number of predicted classes . DCNL is _ training : whether is training or not . DCNL dropout _ keep _ prob : the percentage of activation values that are retained . DCNL min _ depth : Minimum depth value ( number of channels ) for all convolution ops . DCNL Enforced when depth _ multiplier &lt; 1 , and not an active constraint when DCNL depth _ multiplier &gt; = 1 . DCNL depth _ multiplier : Float multiplier for the depth ( number of channels ) DCNL for all convolution ops . The value must be greater than zero . Typical DCNL usage will be to set this value in ( 0 , 1 ) to reduce the number of DCNL parameters or computation cost of the model . DCNL prediction _ fn : a function to get predictions out of logits . DCNL spatial _ squeeze : if True , logits is of shape is &#91; B , C &#93; , if false logits is DCNL of shape &#91; B , 1 , 1 , C &#93; , where B is batch _ size and C is number of classes . DCNL reuse : whether or not the network and its variables should be reused . To be DCNL able to reuse \ &apos; scope \ &apos; must be given . DCNL scope : Optional variable _ scope . DCNL Returns : DCNL logits : the pre-softmax activations , a tensor of size DCNL &#91; batch _ size , num _ classes &#93; DCNL end _ points : a dictionary from components of the network to the corresponding DCNL activation . DCNL Raises : DCNL ValueError : if \ &apos; depth _ multiplier \ &apos; is less than or equal to zero . &apos; 
def cmServiceAccept ( ) : DCNL &apos; CM SERVICE ACCEPT Section 9.2.5&apos;
def get _ resampler _ for _ grouping ( groupby , rule , how = None , fill _ method = None , limit = None , kind = None , * * kwargs ) : DCNL &apos; return our appropriate resampler when grouping as well&apos;
@ celery.task ( name = &apos; redash.tasks.refresh _ schemas &apos; , base = BaseTask ) DCNL def refresh _ schemas ( ) : DCNL &apos; Refreshes the data sources schemas . &apos; 
def load _ config ( config _ file ) : DCNL &apos; Validates the given file for use as the settings file for BGPSpeaker DCNL and loads the configuration from the given file as a module instance . &apos; 
def path _ tail ( apath , bpath ) : DCNL &apos; Given two paths ( B is longer than A ) , find the part in B not in A&apos;
def _ url _ replace _ regex ( prefix ) : DCNL &apos; Match static urls in quotes that don \ &apos; t end in \ &apos; ? raw \ &apos; . DCNL To anyone contemplating making this more complicated : DCNL http : / / xkcd.com / 1171 / &apos;
def _ check _ user ( user , group ) : DCNL &apos; Checks if the named user and group are present on the minion&apos;
def rmtree ( path , ignore _ errors = False , onerror = auto _ chmod ) : DCNL &apos; Recursively delete a directory tree . DCNL This code is taken from the Python 2.4 version of \ &apos; shutil \ &apos; , because DCNL the 2.3 version doesn \ &apos; t really work right . &apos; 
def debug ( * args , * * kwargs ) : DCNL &apos; Helper function for local debugging . &apos; 
def frame _ msg ( body , header = None , raw _ body = False ) : DCNL &apos; Frame the given message with our wire protocol&apos;
def _ update _ secret ( namespace , name , data , apiserver _ url ) : DCNL &apos; Replace secrets data by a new one&apos;
def all _ argmax ( x ) : DCNL &apos; Return the indices of all values that are equal to the maximum : no breaking ties . &apos; 
def course ( ) : DCNL &apos; Courses Controller&apos;
def friedmanchisquare ( * args ) : DCNL &apos; Friedman Chi-Square is a non-parametric , one-way within-subjects ANOVA . DCNL This function calculates the Friedman Chi-square test for repeated measures DCNL and returns the result , along with the associated probability value . DCNL Each input is considered a given group . Ideally , the number of treatments DCNL among each group should be equal . If this is not the case , only the first DCNL n treatments are taken into account , where n is the number of treatments DCNL of the smallest group . DCNL If a group has some missing values , the corresponding treatments are masked DCNL in the other groups . DCNL The test statistic is corrected for ties . DCNL Masked values in one group are propagated to the other groups . DCNL Returns DCNL statistic : float DCNL the test statistic . DCNL pvalue : float DCNL the associated p-value . &apos; 
def list _ catalogs ( results = 30 , start = 0 ) : DCNL &apos; Returns list of all catalogs created on this API key DCNL Args : DCNL Kwargs : DCNL results ( int ) : An integer number of results to return DCNL start ( int ) : An integer starting value for the result set DCNL Returns : DCNL A list of catalog objects DCNL Example : DCNL &gt; &gt; &gt; catalog.list _ catalogs ( ) DCNL &#91; &lt; catalog - test _ artist _ catalog &gt; , &lt; catalog - test _ song _ catalog &gt; , &lt; catalog - my _ songs &gt; &#93; &apos;
def render ( hjson _ data , saltenv = &apos; base &apos; , sls = &apos; &apos; , * * kws ) : DCNL &apos; Accepts HJSON as a string or as a file object and runs it through the HJSON DCNL parser . DCNL : rtype : A Python data structure&apos;
def version ( contact _ points = None , port = None , cql _ user = None , cql _ pass = None ) : DCNL &apos; Show the Cassandra version . DCNL : param contact _ points : The Cassandra cluster addresses , can either be a string or a list of IPs . DCNL : type contact _ points : str &#124; list &#91; str &#93; DCNL : param cql _ user : The Cassandra user if authentication is turned on . DCNL : type cql _ user : str DCNL : param cql _ pass : The Cassandra user password if authentication is turned on . DCNL : type cql _ pass : str DCNL : param port : The Cassandra cluster port , defaults to None . DCNL : type port : int DCNL : return : The version for this Cassandra cluster . DCNL : rtype : str DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; minion1 \ &apos; cassandra _ cql.version DCNL salt \ &apos; minion1 \ &apos; cassandra _ cql.version contact _ points = minion1&apos;
def tick2period ( code , period , start , end ) : DCNL &apos; get tick data from tushare and resample to certain period data DCNL selected by input : period&apos;
def test _ simple _ create ( ) : DCNL &apos; Check _ _ init _ _  . &apos; 
def make _ routine ( name , expr , argument _ sequence = None , global _ vars = None , language = &apos; F95 &apos; ) : DCNL &apos; A factory that makes an appropriate Routine from an expression . DCNL Parameters DCNL name : string DCNL The name of this routine in the generated code . DCNL expr : expression or list / tuple of expressions DCNL A SymPy expression that the Routine instance will represent . If DCNL given a list or tuple of expressions , the routine will be DCNL considered to have multiple return values and / or output arguments . DCNL argument _ sequence : list or tuple , optional DCNL List arguments for the routine in a preferred order . If omitted , DCNL the results are language dependent , for example , alphabetical order DCNL or in the same order as the given expressions . DCNL global _ vars : iterable , optional DCNL Sequence of global variables used by the routine . Variables DCNL listed here will not show up as function arguments . DCNL language : string , optional DCNL Specify a target language . The Routine itself should be DCNL language-agnostic but the precise way one is created , error DCNL checking , etc depend on the language . &#91; default : &quot; F95 &quot; &#93; . DCNL A decision about whether to use output arguments or return values is made DCNL depending on both the language and the particular mathematical expressions . DCNL For an expression of type Equality , the left hand side is typically made DCNL into an OutputArgument ( or perhaps an InOutArgument if appropriate ) . DCNL Otherwise , typically , the calculated expression is made a return values of DCNL the routine . DCNL Examples DCNL &gt; &gt; &gt; from sympy.utilities.codegen import make _ routine DCNL &gt; &gt; &gt; from sympy.abc import x , y , f , g DCNL &gt; &gt; &gt; from sympy import Eq DCNL &gt; &gt; &gt; r = make _ routine ( \ &apos; test \ &apos; , &#91; Eq ( f , 2 * x ) , Eq ( g , x + y ) &#93; ) DCNL &gt; &gt; &gt; &#91; arg.result _ var for arg in r.results &#93; DCNL &gt; &gt; &gt; &#91; arg.name for arg in r.arguments &#93; DCNL &#91; x , y , f , g &#93; DCNL &gt; &gt; &gt; &#91; arg.name for arg in r.result _ variables &#93; DCNL &#91; f , g &#93; DCNL &gt; &gt; &gt; r.local _ vars DCNL set ( ) DCNL Another more complicated example with a mixture of specified and DCNL automatically-assigned names . Also has Matrix output . DCNL &gt; &gt; &gt; from sympy import Matrix DCNL &gt; &gt; &gt; r = make _ routine ( \ &apos; fcn \ &apos; , &#91; x * y , Eq ( f , 1 ) , Eq ( g , x + g ) , Matrix ( &#91; &#91; x , 2 &#93; &#93; ) &#93; ) DCNL &gt; &gt; &gt; &#91; arg.result _ var for arg in r.results &#93; # doctest : + SKIP DCNL &#91; result _ 5397460570204848505 &#93; DCNL &gt; &gt; &gt; &#91; arg.expr for arg in r.results &#93; DCNL &#91; x * y &#93; DCNL &gt; &gt; &gt; &#91; arg.name for arg in r.arguments &#93; # doctest : + SKIP DCNL &#91; x , y , f , g , out _ 8598435338387848786 &#93; DCNL We can examine the various arguments more closely : DCNL &gt; &gt; &gt; from sympy.utilities.codegen import ( InputArgument , OutputArgument , DCNL ... InOutArgument ) DCNL &gt; &gt; &gt; &#91; a.name for a in r.arguments if isinstance ( a , InputArgument ) &#93; DCNL &#91; x , y &#93; DCNL &gt; &gt; &gt; &#91; a.name for a in r.arguments if isinstance ( a , OutputArgument ) &#93; # doctest : + SKIP DCNL &#91; f , out _ 8598435338387848786 &#93; DCNL &gt; &gt; &gt; &#91; a.expr for a in r.arguments if isinstance ( a , OutputArgument ) &#93; DCNL &#91; 1 , Matrix ( &#91; &#91; x , 2 &#93; &#93; ) &#93; DCNL &gt; &gt; &gt; &#91; a.name for a in r.arguments if isinstance ( a , InOutArgument ) &#93; DCNL &#91; g &#93; DCNL &gt; &gt; &gt; &#91; a.expr for a in r.arguments if isinstance ( a , InOutArgument ) &#93; DCNL &#91; g + x &#93; &apos;
@ contextmanager DCNL def temporary _ folder ( ) : DCNL &apos; creates a temporary folder , return it and delete it afterwards . DCNL This allows to do something like this in tests : DCNL &gt; &gt; &gt; with temporary _ folder ( ) as d : DCNL # do whatever you want&apos;
def _ _ determine _ before _ str ( options ) : DCNL &apos; Determine the date string for the newest timestamp to filter by . &apos; 
def get _ next _ page _ of _ all _ feedback _ messages ( page _ size = feconf.FEEDBACK _ TAB _ PAGE _ SIZE , urlsafe _ start _ cursor = None ) : DCNL &apos; Fetches a single page from the list of all feedback messages that have DCNL been posted to any exploration on the site . DCNL Args : DCNL page _ size : int . The number of feedback messages to display per page . DCNL Defaults to feconf.FEEDBACK _ TAB _ PAGE _ SIZE . DCNL urlsafe _ start _ cursor : str or None . The cursor which represents the DCNL current position to begin the fetch from . If None , the fetch is DCNL started from the beginning of the list of all messages . DCNL Returns : DCNL tuple of ( messages , new _ urlsafe _ start _ cursor , more ) , where DCNL messages : list of FeedbackMessage . Contains all the messages we DCNL want . DCNL new _ urlsafe _ start _ cursor : str . The new cursor . DCNL more : bool . Whether there are more messages available to fetch after DCNL this batch . &apos; 
def footnotes ( document ) : DCNL &apos; Find footnotes in the given document , move them to the end of the body , and DCNL generate links to them . DCNL A footnote is any node with a C { class } attribute set to C { footnote } . DCNL Footnote links are generated as superscript . Footnotes are collected in a DCNL C { ol } node at the end of the document . DCNL @ type document : A DOM Node or Document DCNL @ param document : The input document which contains all of the content to be DCNL presented . DCNL @ return : C { None } &apos;
def main ( argv = None ) : DCNL &apos; Main Entry&apos;
def group _ remove ( groupname , user = None , host = None , port = None , maintenance _ db = None , password = None , runas = None ) : DCNL &apos; Removes a group from the Postgres server . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; postgres.group _ remove \ &apos; groupname \ &apos; &apos;
def sem ( a , axis = 0 , ddof = 1 , nan _ policy = &apos; propagate &apos; ) : DCNL &apos; Calculates the standard error of the mean ( or standard error of DCNL measurement ) of the values in the input array . DCNL Parameters DCNL a : array _ like DCNL An array containing the values for which the standard error is DCNL returned . DCNL axis : int or None , optional DCNL Axis along which to operate . Default is 0 . If None , compute over DCNL the whole array `a` . DCNL ddof : int , optional DCNL Delta degrees-of-freedom . How many degrees of freedom to adjust DCNL for bias in limited samples relative to the population estimate DCNL of variance . Defaults to 1 . DCNL nan _ policy : { \ &apos; propagate \ &apos; , \ &apos; raise \ &apos; , \ &apos; omit \ &apos; } , optional DCNL Defines how to handle when input contains nan . \ &apos; propagate \ &apos; returns nan , DCNL \ &apos; raise \ &apos; throws an error , \ &apos; omit \ &apos; performs the calculations ignoring nan DCNL values . Default is \ &apos; propagate \ &apos; . DCNL Returns DCNL s : ndarray or float DCNL The standard error of the mean in the sample ( s ) , along the input axis . DCNL Notes DCNL The default value for `ddof` is different to the default ( 0 ) used by other DCNL ddof containing routines , such as np.std and np.nanstd. DCNL Examples DCNL Find standard error along the first axis : DCNL &gt; &gt; &gt; from scipy import stats DCNL &gt; &gt; &gt; a = np.arange ( 20 ) .reshape ( 5,4 ) DCNL &gt; &gt; &gt; stats.sem ( a ) DCNL array ( &#91; 2.8284 , 2.8284 , 2.8284 , 2.8284 &#93; ) DCNL Find standard error across the whole array , using n degrees of freedom : DCNL &gt; &gt; &gt; stats.sem ( a , axis = None , ddof = 0 ) DCNL 1.2893796958227628&apos;
def safe _ open _ w ( path ) : DCNL &apos; Open &quot; path &quot; for writing , creating any parent directories as needed . &apos; 
def _ get _ data _ volumes ( vm _ ) : DCNL &apos; Construct a list of optional data volumes from the cloud profile&apos;
def encode _ notifications ( tokens , notifications ) : DCNL &apos; Returns the encoded bytes of tokens and notifications DCNL tokens a list of tokens or a string of only one token DCNL notifications a list of notifications or a dictionary of only one&apos;
def _ upgrade _ from _ setuptools ( python _ cmd , use _ sudo ) : DCNL &apos; Upgrading from setuptools 0.6 to 0.7 + is supported&apos;
def fnames _ presuffix ( fnames , prefix = u &apos; &apos; , suffix = u &apos; &apos; , newpath = None , use _ ext = True ) : DCNL &apos; Calls fname _ presuffix for a list of files . &apos; 
@ ensure _ csrf _ cookie DCNL @ cache _ control ( no _ cache = True , no _ store = True , must _ revalidate = True ) DCNL @ coach _ dashboard DCNL def dashboard ( request , course , ccx = None ) : DCNL &apos; Display the CCX Coach Dashboard . &apos; 
def publish _ progress ( * args , * * kwargs ) : DCNL &apos; Show the user progress for a long request DCNL : param percent : Percent progress DCNL : param title : Title DCNL : param doctype : Optional , for DocType DCNL : param name : Optional , for Document name&apos;
def _ url _ as _ string ( url ) : DCNL &apos; Returns the URL string from a URL value that is either a string or DCNL urllib2.Request .. DCNL @ param url : URL DCNL @ type url : basestring or urllib2.Request DCNL @ return : URL string DCNL @ rtype : basestring&apos;
def remove _ elasticbeanstalk ( ) : DCNL &apos; Removes elastic beanstalk components&apos;
def _ poll _ for ( fd , readable , writable , error , timeout ) : DCNL &apos; Poll polling backend . DCNL @ param fd : File descriptor DCNL @ type fd : int DCNL @ param readable : Whether to wait for readability DCNL @ type readable : bool DCNL @ param writable : Whether to wait for writability DCNL @ type writable : bool DCNL @ param timeout : Deadline timeout ( expiration time , in seconds ) DCNL @ type timeout : float DCNL @ return True on success , False on timeout&apos;
def use _ resources ( num _ threads , num _ gb ) : DCNL &apos; Function to execute multiple use _ gb _ ram functions in parallel&apos;
@ requires _ good _ network DCNL def test _ megsim ( ) : DCNL &apos; Test MEGSIM URL handling&apos;
def get _ async _ pillar ( opts , grains , minion _ id , saltenv = None , ext = None , funcs = None , pillar = None , pillarenv = None ) : DCNL &apos; Return the correct pillar driver based on the file _ client option&apos;
def _ _ virtual _ _ ( ) : DCNL &apos; Only work on Mac OS and Windows&apos;
def generate _ jmx _ configs ( agentConfig , hostname , checknames = None ) : DCNL &apos; Similar logic to load _ check _ directory for JMX checks&apos;
def parse _ propspec ( propspec ) : DCNL &apos; Parses property specifications . Returns sequence of 2-tuples , each DCNL containing a managed object type and a list of properties applicable DCNL to that type DCNL : type propspec : collections.Sequence DCNL : rtype : collections.Sequence&apos;
def NormalizeString ( value ) : DCNL &apos; Lowers case , removes punctuation and collapses whitespace . &apos; 
def create _ index ( ) : DCNL &apos; create index for books _ fs.book _ detail&apos;
def geoserver _ pre _ delete ( instance , sender , * * kwargs ) : DCNL &apos; Removes the layer from GeoServer&apos;
def read _ valuation ( s , encoding = None ) : DCNL &apos; Convert a valuation string into a valuation . DCNL : param s : a valuation string DCNL : type s : str DCNL : param encoding : the encoding of the input string , if it is binary DCNL : type encoding : str DCNL : return : a ``nltk.sem`` valuation DCNL : rtype : Valuation&apos;
def _ context _ dict _ to _ string ( context ) : DCNL &apos; Converts an SELinux file context from a dict to a string . &apos; 
def addElementToPixelList ( element , pixelDictionary , x , y ) : DCNL &apos; Add an element to the pixel list . &apos; 
def _ get _ address _ binary ( address ) : DCNL &apos; Provides the binary value for an IPv4 or IPv6 address . DCNL : returns : * * str * * with the binary representation of this address DCNL : raises : * * ValueError * * if address is neither an IPv4 nor IPv6 address&apos;
def is _ enabled ( iface ) : DCNL &apos; Returns ``True`` if interface is enabled , otherwise ``False`` DCNL CLI Example : DCNL .. code-block : : bash DCNL salt -G \ &apos; os _ family : Windows \ &apos; ip.is _ enabled \ &apos; Local Area Connection # 2 \ &apos; &apos;
def adjacency _ data ( G , attrs = _ attrs ) : DCNL &apos; Return data in adjacency format that is suitable for JSON serialization DCNL and use in Javascript documents . DCNL Parameters DCNL G : NetworkX graph DCNL attrs : dict DCNL A dictionary that contains two keys \ &apos; id \ &apos; and \ &apos; key \ &apos; . The corresponding DCNL values provide the attribute names for storing NetworkX-internal graph DCNL data . The values should be unique . Default value : DCNL : samp : `dict ( id = \ &apos; id \ &apos; , key = \ &apos; key \ &apos; ) ` . DCNL If some user-defined graph data use these attribute names as data keys , DCNL they may be silently dropped . DCNL Returns DCNL data : dict DCNL A dictionary with adjacency formatted data . DCNL Raises DCNL NetworkXError DCNL If values in attrs are not unique . DCNL Examples DCNL &gt; &gt; &gt; from networkx.readwrite import json _ graph DCNL &gt; &gt; &gt; G = nx.Graph ( &#91; ( 1,2 ) &#93; ) DCNL &gt; &gt; &gt; data = json _ graph.adjacency _ data ( G ) DCNL To serialize with json DCNL &gt; &gt; &gt; import json DCNL &gt; &gt; &gt; s = json.dumps ( data ) DCNL Notes DCNL Graph , node , and link attributes will be written when using this format DCNL but attribute keys must be strings if you want to serialize the resulting DCNL data with JSON . DCNL The default value of attrs will be changed in a future release of NetworkX . DCNL See Also DCNL adjacency _ graph , node _ link _ data , tree _ data&apos;
def network _ delete _ safe ( context , network _ id ) : DCNL &apos; Delete network with key network _ id . DCNL This method assumes that the network is not associated with any project&apos;
def _ check _ cron ( user , path , mask , cmd ) : DCNL &apos; Return the changes&apos;
def frozen ( * args ) : DCNL &apos; Dummy method for raising errors when trying to modify frozen graphs&apos;
@ permission _ required ( &#91; ( &apos; Apps &apos; , &apos; ReadAbuse &apos; ) &#93; ) DCNL def queue _ abuse ( request ) : DCNL &apos; Queue for reviewing abuse reports for apps . &apos; 
def api _ get _ manageable _ volumes ( * args , * * kwargs ) : DCNL &apos; Replacement for cinder.volume.api.API.get _ manageable _ volumes . &apos; 
def numpy _ cupy _ array _ less ( err _ msg = &apos; &apos; , verbose = True , name = &apos; xp &apos; , type _ check = True , accept _ error = False ) : DCNL &apos; Decorator that checks the CuPy result is less than NumPy result . DCNL Args : DCNL err _ msg ( str ) : The error message to be printed in case of failure . DCNL verbose ( bool ) : If ``True`` , the conflicting values are DCNL appended to the error message . DCNL name ( str ) : Argument name whose value is either DCNL ``numpy`` or ``cupy`` module . DCNL type _ check ( bool ) : If ``True`` , consistency of dtype is also checked . DCNL accept _ error ( bool , Exception or tuple of Exception ) : Sepcify DCNL acceptable errors . When both NumPy test and CuPy test raises the DCNL same type of errors , and the type of the errors is specified with DCNL this argument , the errors are ignored and not raised . DCNL If it is ``True`` all error types are acceptable . DCNL If it is ``False`` no error is acceptable . DCNL Decorated test fixture is required to return the smaller array DCNL when ``xp`` is ``cupy`` than the one when ``xp`` is ``numpy`` . DCNL .. seealso : : : func : `cupy.testing.assert _ array _ less`&apos;
def custom _ verify _ access _ cookie ( zmirror _ verify _ cookie , flask _ request ) : DCNL &apos; verify user \ &apos; s access cookie. return True for access granted , False for denied DCNL See option `enable _ custom _ access _ cookie _ generate _ and _ verify` DCNL : param zmirror _ verify _ cookie : cookie string DCNL : param flask _ request : the flask request object DCNL : type zmirror _ verify _ cookie : str DCNL : return : bool&apos;
def releaseMsToNet ( Cause _ presence = 0 , Cause _ presence1 = 0 , Facility _ presence = 0 , UserUser _ presence = 0 , SsVersionIndicator _ presence = 0 ) : DCNL &apos; RELEASE Section 9.3.18.2&apos;
def printExc ( msg = &apos; &apos; , indent = 4 , prefix = &apos; &#124; &apos; ) : DCNL &apos; Print an error message followed by an indented exception backtrace DCNL ( This function is intended to be called within except : blocks ) &apos;
def makeMissingCustomDataframe ( nrows , ncols , density = 0.9 , random _ state = None , c _ idx _ names = True , r _ idx _ names = True , c _ idx _ nlevels = 1 , r _ idx _ nlevels = 1 , data _ gen _ f = None , c _ ndupe _ l = None , r _ ndupe _ l = None , dtype = None , c _ idx _ type = None , r _ idx _ type = None ) : DCNL &apos; Parameters DCNL Density : float , optional DCNL Float in ( 0 , 1 ) that gives the percentage of non-missing numbers in DCNL the DataFrame . DCNL random _ state : { np.random.RandomState , int } , optional DCNL Random number generator or random seed . DCNL See makeCustomDataframe for descriptions of the rest of the parameters . &apos; 
def get _ review _ type ( file _ ) : DCNL &apos; Return \ &apos; full \ &apos; or None depending on the file / addon status . &apos; 
def postreleaser _ middle ( data ) : DCNL &apos; postreleaser.middle hook to update the setup.py with the new version . See DCNL prereleaser _ middle for more details . &apos; 
def idle ( priority = 0 ) : DCNL &apos; Cause the calling greenlet to wait until the event loop is idle . DCNL Idle is defined as having no other events of the same or higher DCNL * priority * pending . That is , as long as sockets , timeouts or even DCNL signals of the same or higher priority are being processed , the loop DCNL is not idle . DCNL .. seealso : : : func : `sleep`&apos;
def test _ run _ srs ( * sr _ names ) : DCNL &apos; Inject Subreddits by name into the index&apos;
def document _ custom _ method ( section , method _ name , method ) : DCNL &apos; Documents a non-data driven method DCNL : param section : The section to write the documentation to . DCNL : param method _ name : The name of the method DCNL : param method : The handle to the method being documented&apos;
def make _ rng ( rng _ or _ seed = None , default _ seed = None , which _ method = None , constructor = None ) : DCNL &apos; Returns a RNG object . DCNL Parameters DCNL rng _ or _ seed : RNG object or integer or list of integers DCNL A random number generator or a valid seed . DCNL default _ seed : integer or list of integers DCNL Seed used if rng _ or _ seed is None DCNL which _ method : string or list of strings DCNL One or more methods that must be defined by the RNG object . DCNL If one or more specified methods are not defined by it , a DCNL new one will be constructed with the given constructor . DCNL constructor : function or class DCNL Must return a RNG object . DCNL constructor is called with rng _ or _ seed , default _ seed or 42 DCNL as argument . DCNL Notes DCNL The RNG object is generated using the first of these cases that produces a DCNL valid result and doesn \ &apos; t use an argument with the value of None : DCNL 1 ) rng _ or _ seed itself DCNL 2 ) constructor ( rng _ or _ seed ) DCNL 3 ) constructor ( default _ seed ) DCNL 4 ) constructor ( 42 ) &apos;
def invert ( d ) : DCNL &apos; Invert a dictionary into a dictionary of sets . DCNL &gt; &gt; &gt; invert ( { \ &apos; a \ &apos; : 1 , \ &apos; b \ &apos; : 2 , \ &apos; c \ &apos; : 1 } ) # doctest : + SKIP DCNL { 1 : { \ &apos; a \ &apos; , \ &apos; c \ &apos; } , 2 : { \ &apos; b \ &apos; } } &apos;
@ yield _ once DCNL def _ iter _ choices ( pattern ) : DCNL &apos; Iterate through each choice of an alternative . Splits pattern on \ &apos; &#124; \ &apos; s if DCNL they are not bracketed . DCNL : param pattern : String of choices separated by \ &apos; &#124; \ &apos; s DCNL : return : Iterator that yields parts of string separated by DCNL non-bracketed \ &apos; &#124; \ &apos; s&apos;
def tags _ for ( cls , model , instance = None , * * extra _ filters ) : DCNL &apos; Sadly copied from taggit to work around the issue of not being DCNL able to use the TaggedItemBase class that has tag field already DCNL defined . &apos; 
def register _ babel ( app ) : DCNL &apos; Configure Babel for internationality . &apos; 
def _ extend _ mode _ to _ code ( mode ) : DCNL &apos; Convert an extension mode to the corresponding integer code . &apos; 
def make _ nditer _ cls ( nditerty ) : DCNL &apos; Return the Structure representation of the given * nditerty * ( an DCNL instance of types.NumpyNdIterType )  . &apos; 
def null _ javascript _ catalog ( request , domain = None , packages = None ) : DCNL &apos; Returns &quot; identity &quot; versions of the JavaScript i18n functions -- i.e. , DCNL versions that don \ &apos; t actually do anything . &apos; 
@ lru _ cache ( 1000 ) DCNL def traversal _ path _ info ( path ) : DCNL &apos; Given``path`` , return a tuple representing that path which can be DCNL used to traverse a resource tree . ``path`` is assumed to be an DCNL already-URL-decoded ``str`` type as if it had come to us from an upstream DCNL WSGI server as the ``PATH _ INFO`` environ variable . DCNL The ``path`` is first decoded to from its WSGI representation to Unicode ; DCNL it is decoded differently depending on platform : DCNL - On Python 2 , ``path`` is decoded to Unicode from bytes using the UTF-8 DCNL decoding directly ; a : exc : `pyramid.exc.URLDecodeError` is raised if a the DCNL URL cannot be decoded . DCNL - On Python 3 , as per the PEP 3333 spec , ``path`` is first encoded to DCNL bytes using the Latin-1 encoding ; the resulting set of bytes is DCNL subsequently decoded to text using the UTF-8 encoding ; a DCNL : exc : `pyramid.exc.URLDecodeError` is raised if a the URL cannot be DCNL decoded . DCNL The ``path`` is split on slashes , creating a list of segments . If a DCNL segment name is empty or if it is ``.`` , it is ignored . If a segment DCNL name is `` .. `` , the previous segment is deleted , and the `` .. `` is DCNL ignored . DCNL Examples : DCNL `` / foo / bar / baz`` DCNL ( u \ &apos; foo \ &apos; , u \ &apos; bar \ &apos; , u \ &apos; baz \ &apos; ) DCNL ``foo / bar / baz`` DCNL ( u \ &apos; foo \ &apos; , u \ &apos; bar \ &apos; , u \ &apos; baz \ &apos; ) DCNL `` / foo / bar / baz / `` DCNL ( u \ &apos; foo \ &apos; , u \ &apos; bar \ &apos; , u \ &apos; baz \ &apos; ) DCNL `` / foo / / bar / / baz / `` DCNL ( u \ &apos; foo \ &apos; , u \ &apos; bar \ &apos; , u \ &apos; baz \ &apos; ) DCNL `` / foo / bar / baz / .. `` DCNL ( u \ &apos; foo \ &apos; , u \ &apos; bar \ &apos; ) DCNL `` / my % 20archives / hello`` DCNL ( u \ &apos; my archives \ &apos; , u \ &apos; hello \ &apos; ) DCNL `` / archives / La % 20Pe % C3 % B1a`` DCNL ( u \ &apos; archives \ &apos; , u \ &apos; &lt; unprintable unicode &gt; \ &apos; ) DCNL .. note : : DCNL This function does not generate the same type of tuples that DCNL : func : `pyramid.traversal.resource _ path _ tuple` does . In particular , the DCNL leading empty string is not present in the tuple it returns , unlike tuples DCNL returned by : func : `pyramid.traversal.resource _ path _ tuple` . As a result , DCNL tuples generated by ``traversal _ path`` are not resolveable by the DCNL : func : `pyramid.traversal.find _ resource` API . ``traversal _ path`` is a DCNL function mostly used by the internals of : app : `Pyramid` and by people DCNL writing their own traversal machinery , as opposed to users writing DCNL applications in : app : `Pyramid` . &apos; 
def test _ ada _ wrong _ nn _ obj ( ) : DCNL &apos; Test either if an error is raised while passing a wrong NN object&apos;
@ utils.arg ( &apos; monitor _ id &apos; , metavar = &apos; &lt; monitor-id &gt; &apos; , help = &apos; ID DCSP of DCSP the DCSP monitor DCSP to DCSP snapshot &apos; ) DCNL @ utils.arg ( &apos; --force &apos; , metavar = &apos; &lt; True &#124; False &gt; &apos; , help = &quot; Optional DCSP flag DCSP to DCSP indicate DCSP whether DCSP to DCSP snapshot DCSP a DCSP monitor DCSP even DCSP if DCSP it &apos;s DCSP attached DCSP to DCSP an DCSP instance . DCSP ( Default = False ) &quot; , default = False ) DCNL @ utils.arg ( &apos; --display-name &apos; , metavar = &apos; &lt; display-name &gt; &apos; , default = None , help = &apos; Optional DCSP snapshot DCSP name . DCSP ( Default = None ) &apos; ) DCNL @ utils.arg ( &apos; --display _ name &apos; , help = argparse.SUPPRESS ) DCNL @ utils.arg ( &apos; --display-description &apos; , metavar = &apos; &lt; display-description &gt; &apos; , default = None , help = &apos; Optional DCSP snapshot DCSP description . DCSP ( Default = None ) &apos; ) DCNL @ utils.arg ( &apos; --display _ description &apos; , help = argparse.SUPPRESS ) DCNL @ utils.service _ type ( &apos; monitor &apos; ) DCNL def do _ snapshot _ create ( cs , args ) : DCNL &apos; Add a new snapshot . &apos; 
def get ( key , default = &apos; &apos; , delimiter = DEFAULT _ TARGET _ DELIM , ordered = True ) : DCNL &apos; Attempt to retrieve the named value from grains , if the named value is not DCNL available return the passed default . The default return is an empty string . DCNL The value can also represent a value in a nested dict using a &quot; : &quot; delimiter DCNL for the dict . This means that if a dict in grains looks like this : : DCNL { \ &apos; pkg \ &apos; : { \ &apos; apache \ &apos; : \ &apos; httpd \ &apos; } } DCNL To retrieve the value associated with the apache key in the pkg dict this DCNL key can be passed : : DCNL pkg : apache DCNL : param delimiter : DCNL Specify an alternate delimiter to use when traversing a nested dict DCNL .. versionadded : : 2014.7.0 DCNL : param ordered : DCNL Outputs an ordered dict if applicable ( default : True ) DCNL .. versionadded : : 2016.11.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; grains.get pkg : apache&apos;
def breakfast ( ) : DCNL &apos; Serves a Pythonic breakfast&apos;
@ register.tag DCNL def comment ( parser , token ) : DCNL &apos; Ignores everything between `` { % comment % } `` and `` { % endcomment % } `` . &apos; 
def get _ field ( data , param , linestart = &apos; &apos; , sep = &apos; DCSP &apos; ) : DCNL &apos; Parse data from string . DCNL : param data : Data to parse . DCNL example : DCNL data : DCNL cpu 324 345 34 5 345 DCNL cpu0 34 11 34 34 33 DCNL start of line DCNL params 0 1 2 3 4 DCNL : param param : Position of parameter after linestart marker . DCNL : param linestart : String to which start line with parameters . DCNL : param sep : Separator between parameters regular expression . &apos; 
def GetVersionObject ( ) : DCNL &apos; Gets the version of the SDK by parsing the VERSION file . DCNL Returns : DCNL A Yaml object or None if the VERSION file does not exist . &apos; 
def configure _ sc _ logging ( use _ syslog = False ) : DCNL &apos; Configure logging for StarCluster * application * code DCNL By default StarCluster \ &apos; s logger has no formatters and a NullHandler so that DCNL other developers using StarCluster as a library can configure logging as DCNL they see fit . This method is used in StarCluster \ &apos; s application code ( i.e. DCNL the \ &apos; starcluster \ &apos; command ) to toggle StarCluster \ &apos; s application specific DCNL formatters / handlers DCNL use _ syslog - enable logging all messages to syslog. currently only works if DCNL / dev / log exists on the system ( standard for most Linux distros ) &apos;
def validate _ color ( s ) : DCNL &apos; return a valid color arg&apos;
def dict _ error _ formatting ( errors , index = None ) : DCNL &apos; Formats all dictionary error messages for both single and bulk requests&apos;
def main ( args = None ) : DCNL &apos; Run the main command-line interface for beets . Includes top-level DCNL exception handlers that print friendly error messages . &apos; 
def make _ zipfile ( zip _ filename , base _ dir , verbose = 0 , dry _ run = 0 , compress = None , mode = &apos; w &apos; ) : DCNL &apos; Create a zip file from all the files under \ &apos; base _ dir \ &apos; . The output DCNL zip file will be named \ &apos; base _ dir \ &apos; + &quot; .zip &quot; . Uses either the &quot; zipfile &quot; DCNL Python module ( if available ) or the InfoZIP &quot; zip &quot; utility ( if installed DCNL and found on the default search path ) . If neither tool is available , DCNL raises DistutilsExecError . Returns the name of the output zip file . &apos; 
def timeBoundExecution ( algo , maxtime ) : DCNL &apos; wrap the algo , to stop execution after it has used all its allocated time&apos;
def update _ hash _ dict ( filehash , filename ) : DCNL &apos; Opens the pickled hash dictionary , adds an entry , and dumps it back . &apos; 
def _ manageRoles ( mo ) : DCNL &apos; Perform some transformation on the html , so that roleIDs can DCNL be easily retrieved . &apos; 
@ deprecated ( u &apos; 1.0 &apos; , message = DEPRECATION _ MESSAGE ) DCNL def join ( left , right , keys = None , join _ type = u &apos;inner &apos; , uniq _ col _ name = u &apos; { col _ name } _ { table _ name } &apos; , table _ names = &#91; u &apos; 1 &apos; , u &apos; 2 &apos; &#93; , col _ name _ map = None ) : DCNL &apos; Perform a join of the left and right numpy structured array on specified keys . DCNL Parameters DCNL left : structured array DCNL Left side table in the join DCNL right : structured array DCNL Right side table in the join DCNL keys : str or list of str DCNL Name ( s ) of column ( s ) used to match rows of left and right tables . DCNL Default is to use all columns which are common to both tables . DCNL join _ type : str DCNL Join type ( \ &apos; inner \ &apos; &#124; \ &apos; outer \ &apos; &#124; \ &apos; left \ &apos; &#124; \ &apos; right \ &apos; ) , default is \ &apos; inner \ &apos; DCNL uniq _ col _ name : str or None DCNL String generate a unique output column name in case of a conflict . DCNL The default is \ &apos; { col _ name } _ { table _ name } \ &apos; . DCNL table _ names : list of str or None DCNL Two-element list of table names used when generating unique output DCNL column names . The default is &#91; \ &apos; 1 \ &apos; , \ &apos; 2 \ &apos; &#93; . DCNL col _ name _ map : empty dict or None DCNL If passed as a dict then it will be updated in-place with the DCNL mapping of output to input column names . &apos; 
@ gof.local _ optimizer ( &#91; AdvancedIncSubtensor1 &#93; , inplace = True ) DCNL def local _ inplace _ incsubtensor1 ( node ) : DCNL &apos; Also work for GpuAdvancedIncSubtensor1 . &apos; 
def scan ( entry , max _ depth = 3 , scan _ filter = None , depth = 0 ) : DCNL &apos; Scan a path for videos and subtitles DCNL : param string entry : path DCNL : param int max _ depth : maximum folder depth DCNL : param function scan _ filter : filter function that takes a path as argument and returns a boolean indicating whether it has to be filtered out ( ``True`` ) or not ( ``False`` ) DCNL : param int depth : starting depth DCNL : return : found videos and subtitles DCNL : rtype : list of ( : class : `Video` , &#91; : class : ` ~ subliminal.subtitles.Subtitle` &#93; ) &apos;
def resnet _ v2 _ 101 ( inputs , num _ classes = None , is _ training = True , global _ pool = True , output _ stride = None , reuse = None , scope = &apos; resnet _ v2 _ 101 &apos; ) : DCNL &apos; ResNet-101 model of &#91; 1 &#93; . See resnet _ v2 ( ) for arg and return description . &apos; 
def list _ option ( option , opt , value , parser ) : DCNL &apos; Callback for `make _ option` for `ogrinspect` keywords that require DCNL a string list . If the string is \ &apos; True \ &apos; / \ &apos; true \ &apos; then the option DCNL value will be a boolean instead . &apos; 
def is _ primary _ language ( language = None ) : DCNL &apos; Returns true if current or passed language is the primary language for this DCNL site . ( The primary language is defined as the first language in DCNL settings.LANGUAGES. ) &apos;
def make _ filter ( name , op , values ) : DCNL &apos; Constructs a FilterPredicate from the given name , op and values . DCNL Args : DCNL name : A non-empty string , the name of the property to filter . DCNL op : One of PropertyFilter . _ OPERATORS.keys ( ) , the operator to use . DCNL values : A supported value , the value to compare against . DCNL Returns : DCNL if values is a list , a CompositeFilter that uses AND to combine all DCNL values , otherwise a PropertyFilter for the single value . DCNL Raises : DCNL datastore _ errors.BadPropertyError : if the property name is invalid . DCNL datastore _ errors.BadValueError : if the property did not validate correctly DCNL or the value was an empty list . DCNL Other exception types ( like OverflowError ) : if the property value does not DCNL meet type-specific criteria . &apos; 
def effective _ request _ host ( request ) : DCNL &apos; Return the effective request-host , as defined by RFC 2965 . &apos; 
def enabled ( name = &apos; allprofiles &apos; ) : DCNL &apos; Enable all the firewall profiles ( Windows only ) &apos;
@ step ( u &apos; { word : w } DCSP step DCSP fails DCSP with DCSP &quot; { message } &quot; &apos; ) DCNL def step _ fails _ with _ message ( context , word , message ) : DCNL &apos; Step that always fails , mostly needed in examples . &apos; 
def deploy _ application ( war _ file , webapp _ path = None ) : DCNL &apos; Deploy an application into the webapp path for a Tomcat installation . &apos; 
def except _ keyword ( source , start , keyword ) : DCNL &apos; Returns position after keyword if found else None DCNL Note : skips white space&apos;
def _ resolve ( name ) : DCNL &apos; Resolve a dotted name to a global object . &apos; 
def graphsize _ args _ report ( unique _ kmers , fp _ rate ) : DCNL &apos; Assemble output string for optimal arg sandbox scripts . DCNL - unique _ kmers : number of uniqe k-mers DCNL - fp _ rate : desired false positive rate&apos;
def _ euclidean _ algorithm ( f , g , minpoly , p ) : DCNL &apos; Compute the monic GCD of two univariate polynomials in DCNL ` \ mathbb { Z } _ p &#91; z &#93; / ( \ check m _ { \ alpha } ( z ) ) &#91; x &#93; ` with the Euclidean DCNL Algorithm . DCNL In general , ` \ check m _ { \ alpha } ( z ) ` is not irreducible , so it is possible DCNL that some leading coefficient is not invertible modulo DCNL ` \ check m _ { \ alpha } ( z ) ` . In that case ``None`` is returned . DCNL Parameters DCNL f , g : PolyElement DCNL polynomials in ` \ mathbb Z &#91; x , z &#93; ` DCNL minpoly : PolyElement DCNL polynomial in ` \ mathbb Z &#91; z &#93; ` , not necessarily irreducible DCNL p : Integer DCNL prime number , modulus of ` \ mathbb Z _ p` DCNL Returns DCNL h : PolyElement DCNL GCD of `f` and `g` in ` \ mathbb Z &#91; z , x &#93; ` or ``None`` , coefficients DCNL are in ` \ left &#91; - \ frac { p-1 } 2 , \ frac { p-1 } 2 \ right &#93; `&apos;
def log ( txt ) : DCNL &apos; Logs fatal errors to a log file if WSGI _ LOG env var is defined&apos;
def _ draw _ epochs _ axes ( epoch _ idx , good _ ch _ idx , bad _ ch _ idx , data , times , axes , title _ str , axes _ handler ) : DCNL &apos; Handle drawing epochs axes . &apos; 
def check _ cuda ( feature _ name = &apos; You DCSP are DCSP using DCSP code DCSP that DCSP relies DCSP on DCSP cuda-convnet . DCSP Cuda-convnet &apos; , check _ enabled = True ) : DCNL &apos; Call this function before sections of code that depend on the cuda _ convnet module . DCNL It will raise a RuntimeError if the GPU is not available . DCNL feature _ name : The name of the feature the user should be told is unavailable . &apos; 
def install ( packages , update = False , options = None ) : DCNL &apos; Install one or more packages . DCNL If * update * is ``True`` , the package definitions will be updated DCNL first , using : py : func : ` ~ fabtools.opkg.update _ index` . DCNL Extra * options * may be passed to ``opkg`` if necessary . DCNL Example : : DCNL import fabtools DCNL # Update index , then install a single package DCNL fabtools.opkg.install ( \ &apos; build-essential \ &apos; , update = True ) DCNL # Install multiple packages DCNL fabtools.opkg.install ( &#91; DCNL \ &apos; mc \ &apos; , DCNL \ &apos; htop \ &apos; , &apos;
def token _ get ( profile = None , * * connection _ args ) : DCNL &apos; Return the configured tokens ( keystone token-get ) DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; keystone.token _ get c965f79c4f864eaaa9c3b41904e67082&apos;
def patch _ vary _ headers ( response , newheaders ) : DCNL &apos; Adds ( or updates ) the &quot; Vary &quot; header in the given HttpResponse object . DCNL newheaders is a list of header names that should be in &quot; Vary &quot; . Existing DCNL headers in &quot; Vary &quot; aren \ &apos; t removed . &apos; 
def vertical _ flip ( image _ data , output _ encoding = PNG , quality = None , correct _ orientation = UNCHANGED _ ORIENTATION , rpc = None , transparent _ substitution _ rgb = None ) : DCNL &apos; Flip the image vertically . DCNL Args : DCNL image _ data : str , source image data . DCNL output _ encoding : a value from OUTPUT _ ENCODING _ TYPES . DCNL quality : A value between 1 and 100 to specify the quality of the DCNL encoding . This value is only used for JPEG quality control . DCNL correct _ orientation : one of ORIENTATION _ CORRECTION _ TYPE , to indicate if DCNL orientation correction should be performed during the transformation . DCNL rpc : An Optional UserRPC object DCNL transparent _ substition _ rgb : When transparent pixels are not support in the DCNL destination image format then transparent pixels will be substituted DCNL for the specified color , which must be 32 bit rgb format . DCNL Raises : DCNL Error when something went wrong with the call . See Image.ExecuteTransforms DCNL for more details . &apos; 
@ receiver ( post _ save , sender = settings.AUTH _ USER _ MODEL ) DCNL def user _ post _ save ( sender , * * kwargs ) : DCNL &apos; After User.save is called we check to see if it was a created user . If so , DCNL we check if the User object wants account creation . If all passes we DCNL create an Account object . DCNL We only run on user creation to avoid having to check for existence on DCNL each call to User.save . &apos; 
def compare _ code _ with _ srcfile ( pyc _ filename , src _ filename ) : DCNL &apos; Compare a .pyc with a source code file . &apos; 
def _ plot _ option _ logic ( plot _ options _ from _ call _ signature ) : DCNL &apos; Given some plot _ options as part of a plot call , decide on final options . DCNL Precedence : DCNL 1 - Start with DEFAULT _ PLOT _ OPTIONS DCNL 2 - Update each key with ~ / .plotly / .config options ( tls.get _ config ) DCNL 3 - Update each key with session plot options ( set by py.sign _ in ) DCNL 4 - Update each key with plot , iplot call signature options&apos;
def _ parse _ tdim ( tdim ) : DCNL &apos; Parse the ``TDIM`` value into a tuple ( may return an empty tuple if DCNL the value ``TDIM`` value is empty or invalid )  . &apos; 
@ atomic DCNL def create _ version _ for _ upload ( addon , upload , channel ) : DCNL &apos; Note this function is only used for API uploads . &apos; 
def _ list _ removed ( old , new ) : DCNL &apos; List the packages which have been removed between the two package objects&apos;
@ requires _ segment _ info DCNL def workspace ( pl , segment _ info , workspace = None , strip = False ) : DCNL &apos; Return the specified workspace name DCNL : param str workspace : DCNL Specifies which workspace to show . If unspecified , may be set by the DCNL ``list _ workspaces`` lister if used , otherwise falls back to DCNL currently focused workspace . DCNL : param bool strip : DCNL Specifies whether workspace numbers ( in the ``1 : name`` format ) should DCNL be stripped from workspace names before being displayed . Defaults to false . DCNL Highlight groups used : ``workspace`` or ``w _ visible`` , ``workspace`` or ``w _ focused`` , ``workspace`` or ``w _ urgent`` . &apos; 
def write _ feed ( file _ obj ) : DCNL &apos; Writes feed contents info provided file object&apos;
def nextprime ( n , ith = 1 ) : DCNL &apos; Return the ith prime greater than n . DCNL i must be an integer . DCNL Notes DCNL Potential primes are located at 6 * j + / - 1 . This DCNL property is used during searching . DCNL &gt; &gt; &gt; from sympy import nextprime DCNL &gt; &gt; &gt; &#91; ( i , nextprime ( i ) ) for i in range ( 10 , 15 ) &#93; DCNL &#91; ( 10 , 11 ) , ( 11 , 13 ) , ( 12 , 13 ) , ( 13 , 17 ) , ( 14 , 17 ) &#93; DCNL &gt; &gt; &gt; nextprime ( 2 , ith = 2 ) # the 2nd prime after 2 DCNL 5 DCNL See Also DCNL prevprime : Return the largest prime smaller than n DCNL primerange : Generate all primes in a given range&apos;
def process _ files _ and _ demultiplex _ sequences ( mapping _ file , fasta _ files , qual _ files , output _ dir = &apos; . / &apos; , keep _ barcode = False , barcode _ type = &apos; golay _ 12 &apos; , max _ bc _ errors = 0.5 , start _ index = 1 , write _ unassigned _ reads = False , disable _ bc _ correction = False , added _ demultiplex _ field = None , save _ barcode _ frequencies = False ) : DCNL &apos; Handles file IO , calls main demultiplexing function DCNL mapping _ file : filepath to metadata mapping file . DCNL fasta _ files : list of fasta filepaths DCNL qual _ files : list of qual filepaths DCNL output _ dir : output directory to write all output files . DCNL keep _ barcode : If True , will not remove barcode from output files . DCNL barcode _ type : Specified barcode , can be golay _ 12 , hamming _ 8 , DCNL variable _ length , or an integer specifying length . DCNL max _ bc _ errors : Number of changes allowed for error correcting barcodes , DCNL for generic barcodes , specifies the number of mismatches allowed . DCNL start _ index : Specifies the first number used to enumerate output sequences . DCNL write _ unassigned _ reads : If True , will write sequences that could not be DCNL demultiplexed into a separate output file . DCNL disable _ bc _ correction : Only tests for exact matches to barcodes . DCNL added _ demultiplex _ field : Uses data supplied in metadata mapping field DCNL and demultiplexes according to data in fasta labels . DCNL save _ barcode _ frequencies : Saves the frequencies of barcode sequences in DCNL a separate output file . &apos; 
def prompt _ for _ password ( args ) : DCNL &apos; if no password is specified on the command line , prompt for it&apos;
def make _ ip _ network ( port , network ) : DCNL &apos; Make an IPNetwork object from port and network . DCNL Function returns IPNetwork object containing fixed IP address from port DCNL dictionary with prefixlen from network object . DCNL : param port : Port dictionary returned by Neutron API DCNL : param network : IPNetwork object in which the port \ &apos; s IP will be assigned . &apos; 
def makeUnicode ( text ) : DCNL &apos; Convert text to printable Unicode string . For byte string ( type \ &apos; str \ &apos; ) , DCNL use charset ISO-8859-1 for the conversion to Unicode DCNL &gt; &gt; &gt; makeUnicode ( u \ &apos; abc \ 0d \ &apos; ) DCNL u \ &apos; abc \ \ 0d \ &apos; DCNL &gt; &gt; &gt; makeUnicode ( \ &apos; a \ xe9 \ &apos; ) DCNL u \ &apos; a \ xe9 \ &apos; &apos;
def beacon ( config ) : DCNL &apos; Check if current number of sessions of a server for a specific haproxy backend DCNL is over a defined threshold . DCNL .. code-block : : yaml DCNL beacons : DCNL haproxy : DCNL - www-backend : DCNL threshold : 45 DCNL servers : DCNL - web1 DCNL - web2 DCNL - interval : 120&apos;
@ cli.command ( ) DCNL @ click.argument ( &apos; url &apos; ) DCNL def locate ( url ) : DCNL &apos; Opens a file or URL In the default application . &apos; 
def wait _ for _ login ( client , host , port , username , password , prompt , linesep = &apos; \ n &apos; , log _ filename = None , timeout = 240 , internal _ timeout = 10 , interface = None ) : DCNL &apos; Make multiple attempts to log into a remote host ( guest ) until one succeeds DCNL or timeout expires . DCNL : param timeout : Total time duration to wait for a successful login DCNL : param internal _ timeout : The maximal time duration ( in seconds ) to wait for DCNL each step of the login procedure ( e.g. the &quot; Are you sure &quot; prompt DCNL or the password prompt ) DCNL : interface : The interface the neighbours attach to ( only use when using ipv6 DCNL linklocal address . ) DCNL : see : : remote _ login ( ) DCNL : raise : Whatever remote _ login ( ) raises DCNL : return : A ShellSession object . &apos; 
@ cli.command ( ) DCNL @ click.argument ( &apos; result-file &apos; , type = click.Path ( exists = True ) , required = True ) DCNL def plot ( result _ file ) : DCNL &apos; draw result DataFrame&apos;
def get _ service ( hass , config , discovery _ info = None ) : DCNL &apos; Get the mail notification service . &apos; 
def package _ data ( pkg , root _ list ) : DCNL &apos; Generic function to find package _ data for `pkg` under `root` . &apos; 
def copyfileobj ( fsrc , fdst , length = ( 64 * 1024 ) ) : DCNL &apos; copy data from file-like object fsrc to file-like object fdst&apos;
def training ( ) : DCNL &apos; Training Controller - used for Searching for Participants&apos;
def map _ download ( request , mapid , template = &apos; maps / map _ download.html &apos; ) : DCNL &apos; Download all the layers of a map as a batch DCNL XXX To do , remove layer status once progress id done DCNL This should be fix because&apos;
def run _ cmd ( cmd ) : DCNL &apos; Run a command DCNL @ param str cmd command DCNL @ return str output DCNL @ raise Exception if return code is not 0&apos;
def test _ issue595 ( ) : DCNL &apos; Test lemmatization of base forms&apos;
def fetch _ from _ url _ to _ file ( url , config , output _ file , data = None , handlers = None ) : DCNL &apos; Writes data retrieved from a URL to a file . DCNL @ param url : URL to attempt to open DCNL @ type url : basestring DCNL @ param config : SSL context configuration DCNL @ type config : Configuration DCNL @ param output _ file : output file DCNL @ type output _ file : basestring DCNL @ return : tuple ( DCNL returned HTTP status code or 0 if an error occurred DCNL returned message DCNL boolean indicating whether access was successful ) &apos;
def flag _ calls ( func ) : DCNL &apos; Wrap a function to detect and flag when it gets called . DCNL This is a decorator which takes a function and wraps it in a function with DCNL a \ &apos; called \ &apos; attribute. wrapper.called is initialized to False . DCNL The wrapper.called attribute is set to False right before each call to the DCNL wrapped function , so if the call fails it remains False . After the call DCNL completes , wrapper.called is set to True and the output is returned . DCNL Testing for truth in wrapper.called allows you to determine if a call to DCNL func ( ) was attempted and succeeded . &apos; 
def softmax ( X , copy = True ) : DCNL &apos; Calculate the softmax function . DCNL The softmax function is calculated by DCNL np.exp ( X ) / np.sum ( np.exp ( X ) , axis = 1 ) DCNL This will cause overflow when large values are exponentiated . DCNL Hence the largest value in each row is subtracted from each data DCNL point to prevent this . DCNL Parameters DCNL X : array-like , shape ( M , N ) DCNL Argument to the logistic function DCNL copy : bool , optional DCNL Copy X or not . DCNL Returns DCNL out : array , shape ( M , N ) DCNL Softmax function evaluated at every point in x&apos;
def new _ scratch _ buffer ( text ) : DCNL &apos; Create a new scratch buffer with the text given . &apos; 
def AD ( barDs , count ) : DCNL &apos; Chaikin A / D Line&apos;
def iso8601 _ from _ timestamp ( timestamp , microsecond = False ) : DCNL &apos; Returns an iso8601 formatted date from timestamp . &apos; 
def diff ( * args , * * kwargs ) : DCNL &apos; Return the DIFFERENCE of the result sets returned by each matching minion DCNL pool DCNL .. versionadded : : 2014.7.0 DCNL These pools are determined from the aggregated and sorted results of DCNL a salt command . DCNL This command displays the &quot; diffs &quot; as a series of 2-way differences -- DCNL namely the difference between the FIRST displayed minion pool DCNL ( according to sort order ) and EACH SUBSEQUENT minion pool result set . DCNL Differences are displayed according to the Python ``difflib.unified _ diff ( ) `` DCNL as in the case of the salt execution module ``file.get _ diff`` . DCNL This command is submitted via a salt runner using the general form : : DCNL salt-run survey.diff &#91; survey _ sort = up / down &#93; &lt; target &gt; DCNL &lt; salt-execution-module &gt; &lt; salt-execution-module parameters &gt; DCNL Optionally accept a ``survey _ sort = `` parameter . Default : DCNL ``survey _ sort = down`` DCNL CLI Example # 1 : ( Example to display the &quot; differences of files &quot; ) DCNL .. code-block : : bash DCNL salt-run survey.diff survey _ sort = up &quot; * &quot; cp.get _ file _ str file : / / / etc / hosts&apos;
def filter _ interdiff _ opcodes ( opcodes , filediff _ data , interfilediff _ data ) : DCNL &apos; Filters the opcodes for an interdiff to remove unnecessary lines . DCNL An interdiff may contain lines of code that have changed as the result of DCNL updates to the tree between the time that the first and second diff were DCNL created . This leads to some annoyances when reviewing . DCNL This function will filter the opcodes to remove as much of this as DCNL possible . It will only output non- &quot; equal &quot; opcodes if it falls into the DCNL ranges of lines dictated in the uploaded diff files . &apos; 
def wol ( mac , bcast = &apos; 255.255.255.255 &apos; , destport = 9 ) : DCNL &apos; Send Wake On Lan packet to a host DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; network.wol 08-00-27-13-69-77 DCNL salt \ &apos; * \ &apos; network.wol 080027136977 255.255.255.255 7 DCNL salt \ &apos; * \ &apos; network.wol 08 : 00 : 27 : 13 : 69 : 77 255.255.255.255 7&apos;
def _ _ escape _ command ( command ) : DCNL &apos; This function escapes the command so that can be passed in the command line to JBoss CLI . DCNL Escaping commands passed to jboss is extremely confusing . DCNL If you want to save a binding that contains a single backslash character read the following explanation . DCNL A sample value , let \ &apos; s say &quot; a &quot; ( with single backslash ) , that is saved in the config.xml file : DCNL &lt; bindings &gt; DCNL &lt; simple name = &quot; java : / app / binding1 &quot; value = &quot; a &quot; / &gt; DCNL &lt; / bindings &gt; DCNL Eventhough it is just a single &quot; &quot; if you want to read it from command line you will get : DCNL / opt / jboss / jboss-eap-6.0.1 / bin / jboss-cli.sh --connect --controller = ip _ addr : 9999 --user = user --password = pass --command = &quot; / subsystem = naming / binding = &quot; java : / app / binding1 &quot; : read-resource &quot; DCNL &quot; outcome &quot; = &gt; &quot; success &quot; , DCNL &quot; result &quot; = &gt; { DCNL &quot; binding-type &quot; = &gt; &quot; simple &quot; , DCNL &quot; value &quot; = &gt; &quot; a \ b &quot; DCNL So , now you have two backslashes in the output , even though in the configuration file you have one . DCNL Now , if you want to update this property , the easiest thing to do is to create a file with appropriate command : DCNL / tmp / update-binding.cli : DCNL / subsystem = naming / binding = &quot; java : / app / binding1 &quot; : write-attribute ( name = value , value = &quot; a \ \ b &quot; ) DCNL And run cli command : DCNL $ { JBOSS _ HOME } / bin / jboss-cli.sh --connect --controller = ip _ addr : 9999 --user = user --password = pass --file = &quot; / tmp / update-binding.cli &quot; DCNL As you can see , here you need 4 backslashes to save it as one to the configuration file . Run it and go to the configuration file to check . DCNL ( You may need to reload jboss afterwards : $ { JBOSS _ HOME } / bin / jboss-cli.sh --connect --controller = ip _ addr : 9999 --user = user --password = pass --command = &quot; : reload &quot; ) DCNL But if you want to run the same update operation directly from command line , prepare yourself for more escaping : DCNL $ { JBOSS _ HOME } / bin / jboss-cli.sh --connect --controller = ip _ addr : 9999 --user = user --password = pass --command = &quot; / subsystem = naming / binding = &quot; java : / app / binding1 &quot; : write-attribute ( name = value , value = &quot; a \ \ \ \ b &quot; ) &quot; DCNL So , here you need 8 backslashes to force JBoss to save it as one . DCNL To sum up this behavior : DCNL ( 1 ) 1 backslash in configuration file DCNL ( 2 ) 2 backslashes when reading DCNL ( 3 ) 4 backslashes when writing from file DCNL ( 4 ) 8 backslashes when writing from command line DCNL ... are all the same thing : ) DCNL Remember that the command that comes in is already ( 3 ) format . Now we need to escape it further to be able to pass it to command line . &apos; 
def _ int _ arg ( s ) : DCNL &apos; Convert a string argument to an integer for use in a template DCNL function . May raise a ValueError . &apos; 
def build ( spec , distpath , workpath , clean _ build ) : DCNL &apos; Build the executable according to the created SPEC file . &apos; 
def get _ vsphere _ location ( context , image _ id ) : DCNL &apos; Get image location in vsphere or None . &apos; 
@ testing.requires _ testing _ data DCNL def test _ source _ psd ( ) : DCNL &apos; Test source PSD computation in label . &apos; 
def generate _ track _ info ( track _ id = &apos; track DCSP info &apos; , values = { } ) : DCNL &apos; Return `TrackInfo` populated with mock data . DCNL The `track _ id` field is set to the corresponding argument . All other DCNL string fields are set to &quot; track info &quot;  . &apos; 
def dmp _ swap ( f , i , j , u , K ) : DCNL &apos; Transform ``K &#91; .. x _ i .. x _ j .. &#93; `` to ``K &#91; .. x _ j .. x _ i .. &#93; `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.densebasic import dmp _ swap DCNL &gt; &gt; &gt; f = ZZ.map ( &#91; &#91; &#91; 2 &#93; , &#91; 1 , 0 &#93; &#93; , &#91; &#93; &#93; ) DCNL &gt; &gt; &gt; dmp _ swap ( f , 0 , 1 , 2 , ZZ ) DCNL &#91; &#91; &#91; 2 &#93; , &#91; &#93; &#93; , &#91; &#91; 1 , 0 &#93; , &#91; &#93; &#93; &#93; DCNL &gt; &gt; &gt; dmp _ swap ( f , 1 , 2 , 2 , ZZ ) DCNL &#91; &#91; &#91; 1 &#93; , &#91; 2 , 0 &#93; &#93; , &#91; &#91; &#93; &#93; &#93; DCNL &gt; &gt; &gt; dmp _ swap ( f , 0 , 2 , 2 , ZZ ) DCNL &#91; &#91; &#91; 1 , 0 &#93; &#93; , &#91; &#91; 2 , 0 &#93; , &#91; &#93; &#93; &#93; &apos;
def _ generateScalar ( filename = &apos; simple.csv &apos; , numSequences = 2 , elementsPerSeq = 1 , numRepeats = 10 , stepSize = 0.1 , includeRandom = False ) : DCNL &apos; Generate a simple dataset . This contains a bunch of non-overlapping DCNL sequences of scalar values . DCNL Parameters : DCNL filename : name of the file to produce , including extension . It will DCNL be created in a \ &apos; datasets \ &apos; sub-directory within the DCNL directory containing this script . DCNL numSequences : how many sequences to generate DCNL elementsPerSeq : length of each sequence DCNL numRepeats : how many times to repeat each sequence in the output DCNL stepSize : how far apart each scalar is DCNL includeRandom : if true , include another random field&apos;
def get _ version ( package ) : DCNL &apos; Return package version as listed in ` _ _ version _ _ ` in `init.py` . &apos; 
def connect _ to _ region ( region _ name , * * kw _ params ) : DCNL &apos; Given a valid region name , return a DCNL : class : `boto.sns.connection.SNSConnection`. DCNL : type : str DCNL : param region _ name : The name of the region to connect to . DCNL : rtype : : class : `boto.sns.connection.SNSConnection` or ``None`` DCNL : return : A connection to the given region , or None if an invalid region DCNL name is given&apos;
def varying _ between ( table , idvarlist ) : DCNL &apos; Return a list of all variables with non constant values between DCNL groups defined by `idvarlist` . &apos; 
def create _ resource ( prefix , creation _ func , * args , * * kwargs ) : DCNL &apos; Create a new resource that does not already exist . DCNL If prefix isn \ &apos; t \ &apos; max _ length \ &apos; in size , a random suffix is concatenated to DCNL ensure it is random . Otherwise , \ &apos; prefix \ &apos; is used as is . DCNL : param prefix : The prefix for a randomly generated name DCNL : param creation _ func : A function taking the name of the resource DCNL to be created as it \ &apos; s first argument . An error is assumed DCNL to indicate a name collision . DCNL : param * args * kwargs : These will be passed to the create function . &apos; 
@ requires _ pandas DCNL def test _ to _ data _ frame ( ) : DCNL &apos; Test raw Pandas exporter . &apos; 
def images ( ) : DCNL &apos; Iterate over all ( image , label ) pairs DCNL This function will return&apos;
def ceil _ shift ( n , b ) : DCNL &apos; Return ceil ( n / 2 * * b ) without performing any floating-point or division operations . DCNL This is done by right-shifting n by b bits and incrementing the result by 1 DCNL if any \ &apos; 1 \ &apos; bits were shifted out . &apos; 
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL def service _ edit ( request , service _ id , response _ format = &apos; html &apos; ) : DCNL &apos; Service edit&apos;
def _ enqueue _ feedback _ thread _ status _ change _ email _ task ( user _ id , reference , old _ status , new _ status ) : DCNL &apos; Adds a task for sending email when a feedback thread status is changed . DCNL Args : DCNL user _ id : str . The user to be notified . DCNL reference : FeedbackMessageReference . DCNL old _ status : str , one of STATUS _ CHOICES . DCNL new _ status : str , one of STATUS _ CHOICES . &apos; 
def test _ close _ connections ( ) : DCNL &apos; A test that exposes the problem where connections are returned to the DCNL connection pool ( and closed ) before the caller reads the response . DCNL I couldn \ &apos; t think of a way to test it without greenlets , so this test DCNL doesn \ &apos; t run as part of the standard test suite . That way , no more DCNL dependencies are added to the test suite . &apos; 
def _ CheckExpression ( expression ) : DCNL &apos; Checks whether the expression is a string . &apos; 
def gethostbyname ( hostname ) : DCNL &apos; gethostbyname ( host ) - &gt; address DCNL Return the IP address ( a string of the form \ &apos; 255.255.255.255 \ &apos; ) for a host . DCNL .. seealso : : : doc : `dns`&apos;
def yield _ address ( space , start , length = None , reverse = False ) : DCNL &apos; A function to read a series of values starting at a certain address . DCNL @ param space : address space DCNL @ param start : starting address DCNL @ param length : the size of the values to read DCNL @ param reverse : option to read in the other direction DCNL @ return : an iterator&apos;
def ensure _ relative ( path ) : DCNL &apos; Take the full path \ &apos; path \ &apos; , and make it a relative path so DCNL it can be the second argument to os.path.join ( )  . &apos; 
def addXIntersectionsFromLoopsForTable ( loops , xIntersectionsTable , width ) : DCNL &apos; Add the x intersections for a loop into a table . &apos; 
def get _ cache _ duration ( cache _ key ) : DCNL &apos; Determine a cache duration for the given cache key . DCNL : param cache _ key : Cache key string DCNL : type cache _ key : str DCNL : return : Timeout seconds DCNL : rtype : int&apos;
def eagerload ( * args , * * kwargs ) : DCNL &apos; A synonym for : func : `joinedload ( ) ` . &apos; 
def list _ env ( saltenv = &apos; base &apos; ) : DCNL &apos; Return all of the file paths found in an environment&apos;
def read _ reflog ( f ) : DCNL &apos; Read reflog . DCNL : param f : File-like object DCNL : returns : Iterator over Entry objects&apos;
@ flake8ext DCNL def check _ python3 _ no _ iteritems ( logical _ line ) : DCNL &apos; N327 - Use six.iteritems ( ) &apos;
def list2cmdline ( seq ) : DCNL &apos; Translate a sequence of arguments into a command line DCNL string , using the same rules as the MS C runtime : DCNL 1 ) Arguments are delimited by white space , which is either a DCNL space or a tab . DCNL 2 ) A string surrounded by double quotation marks is DCNL interpreted as a single argument , regardless of white space DCNL or pipe characters contained within . A quoted string can be DCNL embedded in an argument . DCNL 3 ) A double quotation mark preceded by a backslash is DCNL interpreted as a literal double quotation mark . DCNL 4 ) Backslashes are interpreted literally , unless they DCNL immediately precede a double quotation mark . DCNL 5 ) If backslashes immediately precede a double quotation mark , DCNL every pair of backslashes is interpreted as a literal DCNL backslash . If the number of backslashes is odd , the last DCNL backslash escapes the next double quotation mark as DCNL described in rule 3 . &apos; 
def add _ stderr _ logger ( level = logging.DEBUG ) : DCNL &apos; Helper for quickly adding a StreamHandler to the logger . Useful for DCNL debugging . DCNL Returns the handler after adding it . &apos; 
def same _ origin ( url1 , url2 ) : DCNL &apos; Checks if two URLs are \ &apos; same-origin \ &apos; &apos;
@ requires _ version ( &apos; scipy &apos; , &apos; 0.16 &apos; ) DCNL @ slow _ test DCNL def test _ filters ( ) : DCNL &apos; Test low- , band- , high-pass , and band-stop filters plus resampling . &apos; 
def register _ plugin ( impl , name = None ) : DCNL &apos; Add a new plugin implementation to the registry . DCNL : param class impl : The plugin class . DCNL The implementation class must provide a : attr : ` ~ BasePlugin.name` DCNL value that will be used as a short name for enabling and disabling DCNL the plugin . The name should be based on the specification used by DCNL the plugin . For example , a plugin implementing XEP-0030 would be DCNL named ` \ &apos; xep _ 0030 \ &apos; ` . &apos; 
@ with _ setup ( prepare _ stdout ) DCNL def test _ background _ without _ header ( ) : DCNL &apos; Running background without header&apos;
def bad _ filename2 ( filename ) : DCNL &apos; &apos;
def getoutput ( cmd ) : DCNL &apos; getoutput ( cmd ) should work in a cli environment on Mac OSX , Linux , DCNL and Windows&apos;
def test _ json _ view _ normal _ response ( ) : DCNL &apos; Normal responses get passed through . &apos; 
def run ( name , * * kwargs ) : DCNL &apos; Run a single module function DCNL ``name`` DCNL The module function to execute DCNL ``returner`` DCNL Specify the returner to send the return of the module execution to DCNL ``kwargs`` DCNL Pass any arguments needed to execute the function&apos;
def kegg _ get ( dbentries , option = None ) : DCNL &apos; KEGG get - Data retrieval . DCNL dbentries - Identifiers ( single string , or list of strings ) , see below . DCNL option - One of &quot; aaseq &quot; , &quot; ntseq &quot; , &quot; mol &quot; , &quot; kcf &quot; , &quot; image &quot; , &quot; kgml &quot; ( string ) DCNL The input is limited up to 10 entries . DCNL The input is limited to one pathway entry with the image or kgml option . DCNL The input is limited to one compound / glycan / drug entry with the image option . DCNL Returns a handle . &apos; 
def b64d ( s ) : DCNL &apos; b64d ( s ) - &gt; str DCNL Base64 decodes a string DCNL Example : DCNL &gt; &gt; &gt; b64d ( \ &apos; dGVzdA = = \ &apos; ) DCNL \ &apos; test \ &apos; &apos;
def _ get _ col _ o2o ( parent , subname , subcls , fk _ col _ name , deferrable = None , initially = None , ondelete = None , onupdate = None ) : DCNL &apos; Gets key and child type and returns a column that points to the primary DCNL key of the child . &apos; 
def Cdf ( cdf , complement = False , transform = None , * * options ) : DCNL &apos; Plots a CDF as a line . DCNL Args : DCNL cdf : Cdf object DCNL complement : boolean , whether to plot the complementary CDF DCNL transform : string , one of \ &apos; exponential \ &apos; , \ &apos; pareto \ &apos; , \ &apos; weibull \ &apos; , \ &apos; gumbel \ &apos; DCNL options : keyword args passed to pyplot.plot DCNL Returns : DCNL dictionary with the scale options that should be passed to DCNL Config , Show or Save . &apos; 
def fix _ iteration _ tables ( ) : DCNL &apos; Since iteration tables don \ &apos; t have any real primary key , we &quot; fake &quot; one in the DCNL Django models . So fix up the generated schema to match the real schema . &apos; 
def parse _ qs ( qs , keep _ blank _ values = 0 , strict _ parsing = 0 , unquote = unquote ) : DCNL &apos; like cgi.parse _ qs , only with custom unquote function&apos;
@ app.route ( &apos; / &apos; , methods = &#91; &apos; GET &apos; , &apos; POST &apos; , &apos; OPTIONS &apos; , &apos; PUT &apos; , &apos; DELETE &apos; , &apos; HEAD &apos; , &apos; PATCH &apos; &#93; ) DCNL @ app.route ( &apos; / &lt; path : input _ path &gt; &apos; , methods = &#91; &apos; GET &apos; , &apos; POST &apos; , &apos; OPTIONS &apos; , &apos; PUT &apos; , &apos; DELETE &apos; , &apos; HEAD &apos; , &apos; PATCH &apos; &#93; ) DCNL def zmirror _ enter ( input _ path = &apos; / &apos; ) : DCNL &apos; 入口函数的壳 , 只是包了一层异常处理 , 实际是 main _ function ( ) &apos;
def check _ seqs ( fasta _ out , fasta _ files , starting _ ix , valid _ map , qual _ mappings , filters , barcode _ len , keep _ primer , keep _ barcode , barcode _ type , max _ bc _ errors , retain _ unassigned _ reads , attempt _ bc _ correction , primer _ seqs _ lens , all _ primers , max _ primer _ mm , disable _ primer _ check , reverse _ primers , rev _ primers , qual _ out , qual _ score _ window = 0 , discard _ bad _ windows = False , min _ qual _ score = 25 , min _ seq _ len = 200 , median _ length _ filtering = None , added _ demultiplex _ field = None , reverse _ primer _ mismatches = 0 , truncate _ ambi _ bases = False ) : DCNL &apos; Checks fasta-format sequences and qual files for validity . &apos; 
def test _ synchronize _ join _ node ( tmpdir ) : DCNL &apos; Test join on an input node which has the ``synchronize`` flag set to True . &apos; 
def unique ( list _ , key = ( lambda x : x ) ) : DCNL &apos; efficient function to uniquify a list preserving item order&apos;
@ login _ check DCNL def machines _ show _ all ( request ) : DCNL &apos; 忽略用户 ， 显示所有的machine&apos;
@ contextmanager DCNL def mocked _ context ( * args , * * kwargs ) : DCNL &apos; To be directly patched into an ssh.tunnel invocation to prevent DCNL any real SSH attempt&apos;
def main ( ) : DCNL &apos; Use the django ORM to generate a config file . We \ &apos; ll build the DCNL config file as a series of lines , and once that is done write it DCNL out in one go&apos;
def walk _ modules ( path ) : DCNL &apos; Loads a module and all its submodules from the given module path and DCNL returns them . If * any * module throws an exception while importing , that DCNL exception is thrown back . DCNL For example : walk _ modules ( \ &apos; scrapy.utils \ &apos; ) &apos;
def daily _ return ( prices ) : DCNL &apos; an array of daily returns from price array&apos;
def traverse _ tree ( course ) : DCNL &apos; Load every descriptor in course . Return bool success value . &apos; 
def green ( text , attrib = None ) : DCNL &apos; Wrapper for colorize ( text , \ &apos; green \ &apos; ) &apos;
def topic _ detail ( request , slug , topic _ id , template _ name = &apos; groups / topics / topic _ detail.html &apos; ) : DCNL &apos; Returns a group topic detail page . DCNL Templates : ``groups / topics / topic _ detail.html`` DCNL Context : DCNL topic DCNL GroupTopic object DCNL group DCNL Group object&apos;
@ task ( name = &apos; clean-all &apos; , aliases = ( &apos; distclean &apos; , ) ) DCNL def clean _ all ( ctx , dry _ run = False ) : DCNL &apos; Clean up everything , even the precious stuff . DCNL NOTE : clean task is executed first . &apos; 
def retrieve _ cors _ header ( response , key ) : DCNL &apos; Method to retrieve a CORS header value from a HTTP response . DCNL : param response : A HTTPResponse object . DCNL : param key : A key representing the desired header value to retrieve . DCNL : return : The header value or None if the header do not exists . &apos; 
def file _ upload _ filename _ case _ view ( request ) : DCNL &apos; Check adding the file to the database will preserve the filename case . &apos; 
def test _ identify _ plugin ( name , tests , modify _ plugin = ( lambda plugin : None ) , fail _ missing _ meta = True ) : DCNL &apos; : param name : Plugin name DCNL : param tests : List of 2-tuples . Each two tuple is of the form ( args , DCNL test _ funcs ) . args is a dict of keyword arguments to pass to DCNL the identify method. test _ funcs are callables that accept a DCNL Metadata object and return True iff the object passes the DCNL test . &apos; 
def InstallerNotifyServer ( ) : DCNL &apos; An emergency function Invoked when the client installation failed . &apos; 
def compile _ function ( name , code , globs ) : DCNL &apos; Given a * code * string , compile it with globals * globs * and return DCNL the function named * name *  . &apos; 
def line2d _ seg _ dist ( p1 , p2 , p0 ) : DCNL &apos; distance ( s ) from line defined by p1 - p2 to point ( s ) p0 DCNL p0 &#91; 0 &#93; = x ( s ) DCNL p0 &#91; 1 &#93; = y ( s ) DCNL intersection point p = p1 + u * ( p2-p1 ) DCNL and intersection point lies within segment if u is between 0 and 1&apos;
def get _ scanner ( hass , config ) : DCNL &apos; Validate the configuration and return an ASUS-WRT scanner . &apos; 
def _ conf ( family = &apos; ip &apos; ) : DCNL &apos; Use the same file for rules for now . &apos; 
@ _ noconds _ ( True ) DCNL def _ fourier _ transform ( f , x , k , a , b , name , simplify = True ) : DCNL &apos; Compute a general Fourier-type transform DCNL F ( k ) = a int _ -oo ^ oo exp ( b * I * x * k ) f ( x ) dx . DCNL For suitable choice of a and b , this reduces to the standard Fourier DCNL and inverse Fourier transforms . &apos; 
def _ generateEncoderChoicesV1 ( fieldInfo ) : DCNL &apos; Return a list of possible encoder parameter combinations for the given DCNL field and the default aggregation function to use . Each parameter combination DCNL is a dict defining the parameters for the encoder . Here is an example DCNL return value for the encoderChoicesList : DCNL None , DCNL { \ &apos; fieldname \ &apos; : \ &apos; timestamp \ &apos; , DCNL \ &apos; name \ &apos; : \ &apos; timestamp _ timeOfDay \ &apos; , DCNL \ &apos; type \ &apos; : \ &apos; DateEncoder \ &apos; DCNL \ &apos; dayOfWeek \ &apos; : ( 7,1 ) DCNL { \ &apos; fieldname \ &apos; : \ &apos; timestamp \ &apos; , DCNL \ &apos; name \ &apos; : \ &apos; timestamp _ timeOfDay \ &apos; , DCNL \ &apos; type \ &apos; : \ &apos; DateEncoder \ &apos; DCNL \ &apos; dayOfWeek \ &apos; : ( 7,3 ) DCNL Parameters : DCNL fieldInfo : item from the \ &apos; includedFields \ &apos; section of the DCNL description JSON object DCNL retval : ( encoderChoicesList , aggFunction ) DCNL encoderChoicesList : a list of encoder choice lists for this field . DCNL Most fields will generate just 1 encoder choice list . DCNL DateTime fields can generate 2 or more encoder choice lists , DCNL one for dayOfWeek , one for timeOfDay , etc . DCNL aggFunction : name of aggregation function to use for this DCNL field type&apos;
def addif ( br = None , iface = None ) : DCNL &apos; Adds an interface to a bridge DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; bridge.addif br0 eth0&apos;
def get _ embeddings ( options , word _ idict , f _ emb , use _ norm = False ) : DCNL &apos; Extract the RNN embeddings from the model&apos;
def convert _ to _ bcd ( decimal ) : DCNL &apos; Converts a decimal value to a bcd value DCNL : param value : The decimal value to to pack into bcd DCNL : returns : The number in bcd form&apos;
def _ syscall _ wrapper ( func , recalc _ timeout , * args , * * kwargs ) : DCNL &apos; Wrapper function for syscalls that could fail due to EINTR . DCNL All functions should be retried if there is time left in the timeout DCNL in accordance with PEP 475 . &apos; 
def NDP _ Attack _ NS _ Spoofing ( src _ lladdr = None , src = None , target = &apos; 2001 : db8 : : 1 &apos; , dst = None , src _ mac = None , dst _ mac = None , loop = True , inter = 1 , iface = None ) : DCNL &apos; The main purpose of this function is to send fake Neighbor Solicitations DCNL messages to a victim , in order to either create a new entry in its neighbor DCNL cache or update an existing one . In section 7.2.3 of RFC 4861 , it is stated DCNL that a node SHOULD create the entry or update an existing one ( if it is not DCNL currently performing DAD for the target of the NS ) . The entry \ &apos; s reachability DCNL state is set to STALE . DCNL The two main parameters of the function are the source link-layer address DCNL ( carried by the Source Link-Layer Address option in the NS ) and the DCNL source address of the packet . DCNL Unlike some other NDP _ Attack _ * function , this one is not based on a DCNL stimulus / response model . When called , it sends the same NS packet in loop DCNL every second ( the default ) DCNL Following arguments can be used to change the format of the packets : DCNL src _ lladdr : the MAC address used in the Source Link-Layer Address option DCNL included in the NS packet . This is the address that the peer should DCNL associate in its neighbor cache with the IPv6 source address of the DCNL packet . If None is provided , the mac address of the interface is DCNL used . DCNL src : the IPv6 address used as source of the packet . If None is provided , DCNL an address associated with the emitting interface will be used DCNL ( based on the destination address of the packet ) . DCNL target : the target address of the NS packet . If no value is provided , DCNL a dummy address ( 2001 : db8 : : 1 ) is used . The value of the target DCNL has a direct impact on the destination address of the packet if it DCNL is not overridden . By default , the solicited-node multicast address DCNL associated with the target is used as destination address of the DCNL packet . Consider specifying a specific destination address if you DCNL intend to use a target address different than the one of the victim . DCNL dst : The destination address of the NS . By default , the solicited node DCNL multicast address associated with the target address ( see previous DCNL parameter ) is used if no specific value is provided . The victim DCNL is not expected to check the destination address of the packet , DCNL so using a multicast address like ff02 : : 1 should work if you want DCNL the attack to target all hosts on the link . On the contrary , if DCNL you want to be more stealth , you should provide the target address DCNL for this parameter in order for the packet to be sent only to the DCNL victim . DCNL src _ mac : the MAC address used as source of the packet . By default , this DCNL is the address of the interface . If you want to be more stealth , DCNL feel free to use something else . Note that this address is not the DCNL that the victim will use to populate its neighbor cache . DCNL dst _ mac : The MAC address used as destination address of the packet . If DCNL the IPv6 destination address is multicast ( all-nodes , solicited DCNL node , ... ) , it will be computed . If the destination address is DCNL unicast , a neighbor solicitation will be performed to get the DCNL associated address . If you want the attack to be stealth , you DCNL can provide the MAC address using this parameter . DCNL loop : By default , this parameter is True , indicating that NS packets DCNL will be sent in loop , separated by \ &apos; inter \ &apos; seconds ( see below ) . DCNL When set to False , a single packet is sent . DCNL inter : When loop parameter is True ( the default ) , this parameter provides DCNL the interval in seconds used for sending NS packets . DCNL iface : to force the sending interface . &apos; 
def TR13 ( rv ) : DCNL &apos; Change products of ``tan`` or ``cot`` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.simplify.fu import TR13 DCNL &gt; &gt; &gt; from sympy import tan , cot , cos DCNL &gt; &gt; &gt; TR13 ( tan ( 3 ) * tan ( 2 ) ) DCNL -tan ( 2 ) / tan ( 5 ) - tan ( 3 ) / tan ( 5 ) + 1 DCNL &gt; &gt; &gt; TR13 ( cot ( 3 ) * cot ( 2 ) ) DCNL cot ( 2 ) * cot ( 5 ) + 1 + cot ( 3 ) * cot ( 5 ) &apos;
def apply _ label ( node ) : DCNL &apos; Return label of apply node . &apos; 
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL def category _ add ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Add new knowledge category&apos;
@ hook.command ( &apos; litecoin &apos; , &apos; ltc &apos; , autohelp = False ) DCNL def litecoin ( ) : DCNL &apos; -- Returns current litecoin value&apos;
def from _ any ( size , fraction _ ref = None ) : DCNL &apos; Creates Fixed unit when the first argument is a float , or a DCNL Fraction unit if that is a string that ends with % . The second DCNL argument is only meaningful when Fraction unit is created . : : DCNL &gt; &gt; &gt; a = Size.from _ any ( 1.2 ) # = &gt; Size.Fixed ( 1.2 ) DCNL &gt; &gt; &gt; Size.from _ any ( &quot; 50 % &quot; , a ) # = &gt; Size.Fraction ( 0.5 , a ) &apos;
def derive _ aggregation ( dim _ cols , agg _ col , agg ) : DCNL &apos; Produces consistent aggregation spec from optional column specification . DCNL This utility provides some consistency to the flexible inputs that can be provided DCNL to charts , such as not specifying dimensions to aggregate on , not specifying an DCNL aggregation , and / or not specifying a column to aggregate on . &apos; 
def evaluate ( x , y , expr , x _ value , y _ value ) : DCNL &apos; x : A theano variable DCNL y : A theano variable DCNL expr : A theano expression involving x and y DCNL x _ value : A numpy value DCNL y _ value : A numpy value DCNL Returns the value of expr when x _ value is substituted for x DCNL and y _ value is substituted for y&apos;
def _ item _ to _ sub _ for _ client ( iterator , sub _ pb , topics ) : DCNL &apos; Convert a subscription protobuf to the native object . DCNL .. note : : DCNL This method does not have the correct signature to be used as DCNL the ``item _ to _ value`` argument to DCNL : class : ` ~ google.cloud.iterator.Iterator`. It is intended to be DCNL patched with a mutable topics argument that can be updated DCNL on subsequent calls . For an example , see how the method is DCNL used above in : meth : ` _ SubscriberAPI.list _ subscriptions` . DCNL : type iterator : : class : ` ~ google.cloud.iterator.Iterator` DCNL : param iterator : The iterator that is currently in use . DCNL : type sub _ pb : : class : `.pubsub _ pb2.Subscription` DCNL : param sub _ pb : A subscription returned from the API . DCNL : type topics : dict DCNL : param topics : A dictionary of topics to be used ( and modified ) DCNL as new subscriptions are created bound to topics . DCNL : rtype : : class : ` ~ google.cloud.pubsub.subscription.Subscription` DCNL : returns : The next subscription in the page . &apos; 
def export _ loop ( cls , instance _ or _ dict , field _ converter = None , role = None , raise _ error _ on _ role = True , export _ level = None , app _ data = None , context = None ) : DCNL &apos; The export _ loop function is intended to be a general loop definition that DCNL can be used for any form of data shaping , such as application of roles or DCNL how a field is transformed . DCNL : param cls : DCNL The model definition . DCNL : param instance _ or _ dict : DCNL The structure where fields from cls are mapped to values . The only DCNL expectionation for this structure is that it implements a ``dict`` DCNL interface . DCNL : param field _ converter : DCNL This function is applied to every field found in ``instance _ or _ dict`` . DCNL : param role : DCNL The role used to determine if fields should be left out of the DCNL transformation . DCNL : param raise _ error _ on _ role : DCNL This parameter enforces strict behavior which requires substructures DCNL to have the same role definition as their parent structures . DCNL : param app _ data : DCNL An arbitrary container for application-specific data that needs to DCNL be available during the conversion . DCNL : param context : DCNL A ``Context`` object that encapsulates configuration options and ``app _ data`` . DCNL The context object is created upon the initial invocation of ``import _ loop`` DCNL and is then propagated through the entire process . &apos; 
def test _ score _ 2 ( ) : DCNL &apos; Assert that the TPOTClassifier score function outputs a known score for a fixed pipeline&apos;
@ gof.local _ optimizer ( &#91; T.Elemwise &#93; ) DCNL def local _ fill _ sink ( node ) : DCNL &apos; f ( fill ( a , b ) , fill ( c , d ) , e ) - &gt; fill ( c , fill ( a , f ( b , d , e ) ) ) DCNL f need to be an elemwise that isn \ &apos; t a fill . &apos; 
def _ password _ validators _ help _ text _ html ( password _ validators = None ) : DCNL &apos; Return an HTML string with all help texts of all configured validators DCNL in an &lt; ul &gt;  . &apos; 
def test _ forum _ is _ unread ( guest , user , forum , topic , forumsread ) : DCNL &apos; Test the forum is unread function . &apos; 
@ utils.arg ( &apos; --flavor &apos; , metavar = &apos; &lt; flavor &gt; &apos; , help = _ ( &apos; Filter DCSP results DCSP by DCSP flavor DCSP name DCSP or DCSP ID . &apos; ) ) DCNL @ utils.arg ( &apos; --tenant &apos; , metavar = &apos; &lt; tenant _ id &gt; &apos; , help = _ ( &apos; Filter DCSP results DCSP by DCSP tenant DCSP ID . &apos; ) , action = shell.DeprecatedAction , real _ action = &apos; nothing &apos; , use = _ ( &apos; this DCSP option DCSP is DCSP not DCSP supported , DCSP and DCSP will DCSP be DCSP removed DCSP in DCSP version DCSP 5.0.0 . &apos; ) ) DCNL def do _ flavor _ access _ list ( cs , args ) : DCNL &apos; Print access information about the given flavor . &apos; 
def md5 _ shard ( word ) : DCNL &apos; Assign data to servers using a public hash algorithm . &apos; 
def attribute _ assortativity _ coefficient ( G , attribute , nodes = None ) : DCNL &apos; Compute assortativity for node attributes . DCNL Assortativity measures the similarity of connections DCNL in the graph with respect to the given attribute . DCNL Parameters DCNL G : NetworkX graph DCNL attribute : string DCNL Node attribute key DCNL nodes : list or iterable ( optional ) DCNL Compute attribute assortativity for nodes in container . DCNL The default is all nodes . DCNL Returns DCNL r : float DCNL Assortativity of graph for given attribute DCNL Examples DCNL &gt; &gt; &gt; G = nx.Graph ( ) DCNL &gt; &gt; &gt; G.add _ nodes _ from ( &#91; 0,1 &#93; , color = \ &apos; red \ &apos; ) DCNL &gt; &gt; &gt; G.add _ nodes _ from ( &#91; 2,3 &#93; , color = \ &apos; blue \ &apos; ) DCNL &gt; &gt; &gt; G.add _ edges _ from ( &#91; ( 0,1 ) , ( 2,3 ) &#93; ) DCNL &gt; &gt; &gt; print ( nx.attribute _ assortativity _ coefficient ( G , \ &apos; color \ &apos; ) ) DCNL 1.0 DCNL Notes DCNL This computes Eq . ( 2 ) in Ref . &#91; 1 &#93; _ , trace ( M ) -sum ( M ) ) / ( 1-sum ( M ) , DCNL where M is the joint probability distribution ( mixing matrix ) DCNL of the specified attribute . DCNL References DCNL .. &#91; 1 &#93; M. E. J. Newman , Mixing patterns in networks , DCNL Physical Review E , 67 026126 , 2003&apos;
def headers _ cb ( ) : DCNL &apos; Callback method for providing headers per request DCNL add _ headers _ cb is another callback providing headers ( as a dict ) to update the DCNL defaults in this method . This method can be set by adding a dcos _ auth _ python package DCNL with a get _ auth _ headers method&apos;
def walk ( top , func , arg ) : DCNL &apos; Directory tree walk with callback function . DCNL For each directory in the directory tree rooted at top ( including top DCNL itself , but excluding \ &apos; . \ &apos; and \ &apos; .. \ &apos; ) , call func ( arg , dirname , fnames ) . DCNL dirname is the name of the directory , and fnames a list of the names of DCNL the files and subdirectories in dirname ( excluding \ &apos; . \ &apos; and \ &apos; .. \ &apos; ) . func DCNL may modify the fnames list in-place ( e.g. via del or slice assignment ) , DCNL and walk will only recurse into the subdirectories whose names remain in DCNL fnames ; this can be used to implement a filter , or to impose a specific DCNL order of visiting . No semantics are defined for , or required of , arg , DCNL beyond that arg is always passed to func . It can be used , e.g. , to pass DCNL a filename pattern , or a mutable object designed to accumulate DCNL statistics . Passing None for arg is common . &apos; 
def test _ table _ deletion ( ) : DCNL &apos; Regression test for the reference cycle discussed in DCNL https : / / github.com / astropy / astropy / issues / 2877&apos;
def is _ special _ key ( keystr ) : DCNL &apos; True if keystr is a \ &apos; special \ &apos; keystring ( e.g. &lt; ctrl-x &gt; or &lt; space &gt; )  . &apos; 
def nonterminals ( symbols ) : DCNL &apos; Given a string containing a list of symbol names , return a list of DCNL ``Nonterminals`` constructed from those symbols . DCNL : param symbols : The symbol name string . This string can be DCNL delimited by either spaces or commas . DCNL : type symbols : str DCNL : return : A list of ``Nonterminals`` constructed from the symbol DCNL names given in ``symbols`` . The ``Nonterminals`` are sorted DCNL in the same order as the symbols names . DCNL : rtype : list ( Nonterminal ) &apos;
def jsmin _ for _ posers ( script , keep _ bang _ comments = False ) : DCNL &apos; Minify javascript based on `jsmin.c by Douglas Crockford` _ \ . DCNL Instead of parsing the stream char by char , it uses a regular DCNL expression approach which minifies the whole script with one big DCNL substitution regex . DCNL .. _ jsmin.c by Douglas Crockford : DCNL http : / / www.crockford.com / javascript / jsmin.c DCNL : Warning : This function is the digest of a _ make _ jsmin ( ) call . It just DCNL utilizes the resulting regexes . It \ &apos; s here for fun and may DCNL vanish any time . Use the `jsmin` function instead . DCNL : Parameters : DCNL `script` : ``str`` DCNL Script to minify DCNL `keep _ bang _ comments` : ``bool`` DCNL Keep comments starting with an exclamation mark ? ( `` / * ! ... * / `` ) DCNL : Return : Minified script DCNL : Rtype : ``str``&apos;
def missing _ dependencies ( ) : DCNL &apos; Return the status of missing dependencies ( if any ) &apos;
def createNetwork ( dataSource ) : DCNL &apos; Create the Network instance . DCNL The network has a sensor region reading data from `dataSource` and passing DCNL the encoded representation to an SPRegion . The SPRegion output is passed to DCNL a TPRegion . DCNL : param dataSource : a RecordStream instance to get data from DCNL : returns : a Network instance ready to run&apos;
def unparse _ multistring ( values ) : DCNL &apos; Converts a `values` multistring object or a list of strings back to the DCNL in-DB multistring representation . &apos; 
def reload _ ( name ) : DCNL &apos; Wrapper for term ( ) DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; daemontools.reload &lt; service name &gt; &apos;
def submit _ jobs ( filenames , verbose = False ) : DCNL &apos; Submit jobs in filenames . DCNL filenames : list of prepared qsub job scripts , ready to be submitted DCNL verbose : a binary verbose flag&apos;
def pr _ contacts ( r , * * attr ) : DCNL &apos; Custom Method to provide the details for the Person \ &apos; s Contacts Tab : DCNL - provides a single view on : DCNL Addresses ( pr _ address ) DCNL Contacts ( pr _ contact ) DCNL Emergency Contacts DCNL @ todo : deprecated , replaced by pr _ Contacts , retained as reference DCNL ( until address-support re-implemented in pr _ Contacts ) &apos;
def conv1d _ md ( input , filters , image _ shape , filter _ shape , border _ mode = &apos; valid &apos; , subsample = ( 1 , ) , filter _ flip = True ) : DCNL &apos; using multiple dot products&apos;
def addsitepackages ( known _ paths ) : DCNL &apos; Add site-packages ( and possibly site-python ) to sys.path&apos;
def deploy _ rheader ( r , tabs = &#91; &#93; , profile = False ) : DCNL &apos; Deployment Resource Headers&apos;
def CountErrors ( ocr _ text , truth _ text ) : DCNL &apos; Counts the drops and adds between 2 bags of iterables . DCNL Simple bag of objects count returns the number of dropped and added DCNL elements , regardless of order , from anything that is iterable , eg DCNL a pair of strings gives character errors , and a pair of word lists give DCNL word errors . DCNL Args : DCNL ocr _ text : OCR text iterable ( eg string for chars , word list for words ) . DCNL truth _ text : Truth text iterable . DCNL Returns : DCNL ErrorCounts named tuple . &apos; 
def _ to _ byte _ string ( value , num _ bits ) : DCNL &apos; Convert an integer to a big-endian string of bytes with padding . DCNL Padding is added at the end ( i.e. after the least-significant bit ) if DCNL required . &apos; 
def script ( name , source , saltenv = &apos; base &apos; , args = None , template = None , exec _ driver = None , stdin = None , python _ shell = True , output _ loglevel = &apos; debug &apos; , ignore _ retcode = False , use _ vt = False , keep _ env = None ) : DCNL &apos; Run : py : func : `cmd.script &lt; salt.modules.cmdmod.script &gt; ` within a container DCNL .. note : : DCNL While the command is run within the container , it is initiated from the DCNL host . Therefore , the PID in the return dict is from the host , not from DCNL the container . DCNL name DCNL Container name or ID DCNL source DCNL Path to the script . Can be a local path on the Minion or a remote file DCNL from the Salt fileserver . DCNL args DCNL A string containing additional command-line options to pass to the DCNL script . DCNL template : None DCNL Templating engine to use on the script before running . DCNL exec _ driver : None DCNL If not passed , the execution driver will be detected as described DCNL : ref : `above &lt; docker-execution-driver &gt; ` . DCNL stdin : None DCNL Standard input to be used for the script DCNL output _ loglevel : debug DCNL Level at which to log the output from the script . Set to ``quiet`` to DCNL suppress logging . DCNL use _ vt : False DCNL Use SaltStack \ &apos; s utils.vt to stream output to console . DCNL keep _ env : None DCNL If not passed , only a sane default PATH environment variable will be DCNL set . If ``True`` , all environment variables from the container \ &apos; s host DCNL will be kept . Otherwise , a comma-separated list ( or Python list ) of DCNL environment variable names can be passed , and those environment DCNL variables will be kept . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion dockerng.script mycontainer salt : / / docker _ script.py DCNL salt myminion dockerng.script mycontainer salt : / / scripts / runme.sh \ &apos; arg1 arg2 &quot; arg 3 &quot; \ &apos; DCNL salt myminion dockerng.script mycontainer salt : / / scripts / runme.sh stdin = \ &apos; one \ ntwo \ nthree \ nfour \ nfive \ n \ &apos; output _ loglevel = quiet&apos;
@ contextmanager DCNL def temporary _ file ( suffix = &apos; &apos; ) : DCNL &apos; Yield a writeable temporary filename that is deleted on context exit . DCNL Parameters DCNL suffix : string , optional DCNL The suffix for the file . DCNL Examples DCNL &gt; &gt; &gt; import numpy as np DCNL &gt; &gt; &gt; from skimage import io DCNL &gt; &gt; &gt; with temporary _ file ( \ &apos; .tif \ &apos; ) as tempfile : DCNL ... im = np.zeros ( ( 5 , 5 ) , np.uint8 ) DCNL ... io.imsave ( tempfile , im ) DCNL ... assert np.all ( io.imread ( tempfile ) = = im ) &apos;
def query _ yes _ no ( question , default = &apos; yes &apos; ) : DCNL &apos; Ask a yes / no question via raw _ input ( ) and return their answer . DCNL &quot; question &quot; is a string that is presented to the user . DCNL &quot; default &quot; is the presumed answer if the user just hits &lt; Enter &gt; . DCNL It must be &quot; yes &quot; ( the default ) , &quot; no &quot; or None ( meaning DCNL an answer is required of the user ) . DCNL The &quot; answer &quot; return value is one of &quot; yes &quot; or &quot; no &quot;  . &apos; 
def test _ replace _ string _ type ( ) : DCNL &apos; Test replacing python string&apos;
def param _ init _ fflayer ( options , params , prefix = &apos; ff &apos; , nin = None , nout = None , ortho = True ) : DCNL &apos; Affine transformation + point-wise nonlinearity&apos;
def new ( key , randfunc = None ) : DCNL &apos; Return a cipher object `PKCS115 _ Cipher` that can be used to perform PKCS # 1 v1.5 encryption or decryption . DCNL : Parameters : DCNL key : RSA key object DCNL The key to use to encrypt or decrypt the message . This is a `Cryptodome.PublicKey.RSA` object . DCNL Decryption is only possible if * key * is a private RSA key . DCNL randfunc : callable DCNL Function that return random bytes . DCNL The default is `Cryptodome.Random.get _ random _ bytes` . &apos; 
def urlparse _ cached ( request _ or _ response ) : DCNL &apos; Return urlparse.urlparse caching the result , where the argument can be a DCNL Request or Response object&apos;
def kernel ( d1 , d2 , r = None , weights = None ) : DCNL &apos; general product kernel DCNL hardcoded split for the example : DCNL cat1 is continuous ( time ) , other categories are discrete DCNL weights is e.g. Bartlett for cat1 DCNL r is ( 0,1 ) indicator vector for boolean weights 1 { d1 _ i = = d2 _ i } DCNL returns boolean if no continuous weights are used&apos;
def _ wns _ authenticate ( scope = &apos; notify.windows.com &apos; ) : DCNL &apos; Requests an Access token for WNS communication . DCNL : return : dict : { \ &apos; access _ token \ &apos; : &lt; str &gt; , \ &apos; expires _ in \ &apos; : &lt; int &gt; , \ &apos; token _ type \ &apos; : \ &apos; bearer \ &apos; } &apos;
def version ( ) : DCNL &apos; Return a string with various version informations . &apos; 
def expected _ text ( * args ) : DCNL &apos; Helper to format text we expect the KeyHintView to generate . DCNL Args : DCNL args : One tuple for each row in the expected output . DCNL Tuples are of the form : ( prefix , color , suffix , command )  . &apos; 
def reset _ output ( ) : DCNL &apos; &gt; &gt; reset _ output DCNL Reset twill output to go to the screen . &apos; 
def restore _ version ( ) : DCNL &apos; If we touch the version in _ _ init _ _ .py discard changes after install . &apos; 
def test _ reset _ out ( ) : DCNL &apos; Test \ &apos; % reset out \ &apos; magic&apos;
def check ( actions , request , target = None ) : DCNL &apos; Wrapper of the configurable policy method . &apos; 
def marker _ comparator _ predicate ( match ) : DCNL &apos; Match predicate used in comparator&apos;
def _ get _ bus _ number _ for _ scsi _ controller ( devices ) : DCNL &apos; Return usable bus number when create new SCSI controller . &apos; 
def lab2rgb ( lab , illuminant = &apos; D65 &apos; , observer = &apos; 2&apos; ) : DCNL &apos; Lab to RGB color space conversion . DCNL Parameters DCNL lab : array _ like DCNL The image in Lab format , in a 3-D array of shape `` ( .. , .. , 3 ) `` . DCNL illuminant : { &quot; A &quot; , &quot; D50 &quot; , &quot; D55 &quot; , &quot; D65 &quot; , &quot; D75 &quot; , &quot; E &quot; } , optional DCNL The name of the illuminant ( the function is NOT case sensitive ) . DCNL observer : { &quot; 2 &quot; , &quot; 10 &quot; } , optional DCNL The aperture angle of the observer . DCNL Returns DCNL out : ndarray DCNL The image in RGB format , in a 3-D array of shape `` ( .. , .. , 3 ) `` . DCNL Raises DCNL ValueError DCNL If `lab` is not a 3-D array of shape `` ( .. , .. , 3 ) `` . DCNL References DCNL .. &#91; 1 &#93; https : / / en.wikipedia.org / wiki / Standard _ illuminant DCNL Notes DCNL This function uses lab2xyz and xyz2rgb . DCNL By default Observer = 2A , Illuminant = D65 . CIE XYZ tristimulus values DCNL x _ ref = 95.047 , y _ ref = 100 . , z _ ref = 108.883 . See function `get _ xyz _ coords` for DCNL a list of supported illuminants . &apos; 
def minkowski ( u , v , p ) : DCNL &apos; Computes the Minkowski distance between two 1-D arrays . DCNL The Minkowski distance between 1-D arrays `u` and `v` , DCNL is defined as DCNL .. math : : DCNL { &#124; &#124; u-v &#124; &#124; } _ p = ( \ sum { &#124; u _ i - v _ i &#124; ^ p } ) ^ { 1 / p } . DCNL Parameters DCNL u : ( N , ) array _ like DCNL Input array . DCNL v : ( N , ) array _ like DCNL Input array . DCNL p : int DCNL The order of the norm of the difference : math : ` { &#124; &#124; u-v &#124; &#124; } _ p` . DCNL Returns DCNL d : double DCNL The Minkowski distance between vectors `u` and `v` . &apos; 
def keepvol _ on _ destroy ( name , kwargs = None , call = None ) : DCNL &apos; Do not delete all / specified EBS volumes upon instance termination DCNL CLI Example : DCNL .. code-block : : bash DCNL salt-cloud -a keepvol _ on _ destroy mymachine&apos;
def produce _ test ( parent , child , direction ) : DCNL &apos; produce a testcase for A- &gt; B- &gt; C inheritance with a self-referential DCNL relationship between two of the classes , using either one-to-many or DCNL many-to-one . DCNL the old &quot; no discriminator column &quot; pattern is used . &apos; 
def normalizePath ( filepath ) : DCNL &apos; Returns normalized string representation of a given filepath DCNL &gt; &gt; &gt; normalizePath ( \ &apos; / / var / / / log / apache.log \ &apos; ) DCNL \ &apos; / / var / log / apache.log \ &apos; &apos;
def splitQuoted ( s ) : DCNL &apos; Split a string into whitespace delimited tokens DCNL Tokens that would otherwise be separated but are surrounded by &quot; DCNL remain as a single token . Any token that is not quoted and is DCNL equal to &quot; NIL &quot; is tokenized as L { None } . DCNL @ type s : L { bytes } DCNL @ param s : The string to be split DCNL @ rtype : L { list } of L { bytes } DCNL @ return : A list of the resulting tokens DCNL @ raise MismatchedQuoting : Raised if an odd number of quotes are present&apos;
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL @ _ process _ mass _ form DCNL def index _ unread ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Messaging unread page&apos;
def convert _ IMProperty ( model , prop , kwargs ) : DCNL &apos; Returns a form field for a ``db.IMProperty`` . &apos; 
def decode _ cookie ( value ) : DCNL &apos; Safely decodes a cookie value to unicode . DCNL Tries us-ascii , utf-8 and io8859 encodings , in that order . DCNL &gt; &gt; &gt; decode _ cookie ( \ &apos; \ &apos; ) DCNL u \ &apos; \ &apos; DCNL &gt; &gt; &gt; decode _ cookie ( \ &apos; asdf \ &apos; ) DCNL u \ &apos; asdf \ &apos; DCNL &gt; &gt; &gt; decode _ cookie ( \ &apos; foo \ xC3 \ xA9 bar \ &apos; ) DCNL u \ &apos; foo \ xe9 bar \ &apos; DCNL &gt; &gt; &gt; decode _ cookie ( \ &apos; foo \ xE9 bar \ &apos; ) DCNL u \ &apos; foo \ xe9 bar \ &apos; &apos;
def server _ list _ detailed ( profile = None ) : DCNL &apos; Return detailed list of active servers DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; nova.server _ list _ detailed&apos;
def _ align _ method _ FRAME ( left , right , axis ) : DCNL &apos; convert rhs to meet lhs dims if input is list , tuple or np.ndarray&apos;
def shard _ df _ on _ index ( df , divisions ) : DCNL &apos; Shard a DataFrame by ranges on its index DCNL Examples DCNL &gt; &gt; &gt; df = pd.DataFrame ( { \ &apos; a \ &apos; : &#91; 0 , 10 , 20 , 30 , 40 &#93; , \ &apos; b \ &apos; : &#91; 5 , 4 , 3 , 2 , 1 &#93; } ) DCNL &gt; &gt; &gt; df DCNL a b DCNL 0 0 5 DCNL 1 10 4 DCNL 2 20 3 DCNL 3 30 2 DCNL 4 40 1 DCNL &gt; &gt; &gt; shards = list ( shard _ df _ on _ index ( df , &#91; 2 , 4 &#93; ) ) DCNL &gt; &gt; &gt; shards &#91; 0 &#93; DCNL a b DCNL 0 0 5 DCNL 1 10 4 DCNL &gt; &gt; &gt; shards &#91; 1 &#93; DCNL a b DCNL 2 20 3 DCNL 3 30 2 DCNL &gt; &gt; &gt; shards &#91; 2 &#93; DCNL a b DCNL 4 40 1 DCNL &gt; &gt; &gt; list ( shard _ df _ on _ index ( df , &#91; &#93; ) ) &#91; 0 &#93; # empty case DCNL a b DCNL 0 0 5 DCNL 1 10 4 DCNL 2 20 3 DCNL 3 30 2 DCNL 4 40 1&apos;
def keys _ to _ string ( data ) : DCNL &apos; Function to convert all the unicode keys in string keys&apos;
def test _ threading _ import ( tmpdir ) : DCNL &apos; On Python 3.3 + , PyInstaller doesn \ &apos; t acquire a lock when performing an DCNL import . Therefore , two thread could both be reading the .pyz archive at the DCNL same time . At the core , the ArchiveFile class performs these reads . This DCNL test verifies that multi-threaded reads work . DCNL For more information , see https : / / github.com / pyinstaller / pyinstaller / pull / 2010 . &apos; 
def _ git _ diff _ name _ status ( left , right , diff _ filter = &apos; &apos; ) : DCNL &apos; Compare two branches / commits etc with git . DCNL Parameter : DCNL left : the lefthand comperator DCNL right : the righthand comperator DCNL diff _ filter : arguments given to --diff-filter ( ACMRTD ... ) DCNL Returns : DCNL List of FileDiffs ( tuple with name / status ) DCNL Raises : DCNL ValueError if git command fails&apos;
def generate _ file ( fname , ns _ func , dest _ dir = &apos; .&apos; ) : DCNL &apos; generate a constants file from its template&apos;
def send ( ) : DCNL &apos; RESTful CRUD controller&apos;
def mainloop ( n = 0 ) : DCNL &apos; Run the main loop of Tcl . &apos; 
def urlize ( text , trim _ url _ limit = None , nofollow = False , autoescape = False ) : DCNL &apos; Converts any URLs in text into clickable links . DCNL Works on http : / / , https : / / , www. links , and also on links ending in one of DCNL the original seven gTLDs ( .com , .edu , .gov , .int , .mil , .net , and .org ) . DCNL Links can have trailing punctuation ( periods , commas , close-parens ) and DCNL leading punctuation ( opening parens ) and it \ &apos; ll still do the right thing . DCNL If trim _ url _ limit is not None , the URLs in link text longer than this limit DCNL will truncated to trim _ url _ limit-3 characters and appended with an elipsis . DCNL If nofollow is True , the URLs in link text will get a rel = &quot; nofollow &quot; DCNL attribute . DCNL If autoescape is True , the link text and URLs will get autoescaped . &apos; 
def docstring _ summary ( docstring ) : DCNL &apos; Return summary of docstring . &apos; 
def bool _ from _ string ( subject ) : DCNL &apos; Interpret a string as a boolean-like value . &apos; 
def delete _ policy ( name , policy _ name , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Delete an ELB policy . DCNL .. versionadded : : 2016.3.0 DCNL CLI example : DCNL .. code-block : : bash DCNL salt myminion boto _ elb.delete _ policy myelb mypolicy&apos;
def _ find _ home ( ) : DCNL &apos; Locates and return the home directory ( or best approximation ) on this DCNL system . DCNL Raises DCNL OSError DCNL If the home directory cannot be located - usually means you are running DCNL Astropy on some obscure platform that doesn \ &apos; t have standard home DCNL directories . &apos; 
def CheckForIncludeWhatYouUse ( filename , clean _ lines , include _ state , error , io = codecs ) : DCNL &apos; Reports for missing stl includes . DCNL This function will output warnings to make sure you are including the headers DCNL necessary for the stl containers and functions that you use . We only give one DCNL reason to include a header . For example , if you use both equal _ to &lt; &gt; and DCNL less &lt; &gt; in a .h file , only one ( the latter in the file ) of these will be DCNL reported as a reason to include the &lt; functional &gt; . DCNL Args : DCNL filename : The name of the current file . DCNL clean _ lines : A CleansedLines instance containing the file . DCNL include _ state : An _ IncludeState instance . DCNL error : The function to call with any errors found . DCNL io : The IO factory to use to read the header file . Provided for unittest DCNL injection . &apos; 
def _ convert _ to _ standard _ attr ( attr ) : DCNL &apos; Helper function for _ process _ info _ installed _ output ( ) DCNL Converts an opkg attribute name to a standard attribute DCNL name which is used across \ &apos; pkg \ &apos; modules . &apos; 
def strtobool ( term , table = { u &apos;false &apos; : False , u &apos;no &apos; : False , u &apos; 0 &apos; : False , u &apos;true &apos; : True , u &apos;yes &apos; : True , u &apos; 1 &apos; : True , u &apos;on &apos; : True , u &apos;off &apos; : False } ) : DCNL &apos; Convert common terms for true / false to bool . DCNL Examples ( true / false / yes / no / on / off / 1 / 0 )  . &apos; 
@ contextlib.contextmanager DCNL def kill _ on _ error ( proc ) : DCNL &apos; Context manager killing the subprocess if a Python exception is raised . &apos; 
def add _ neigh _ entry ( ip _ address , mac _ address , device , namespace = None , * * kwargs ) : DCNL &apos; Add a neighbour entry . DCNL : param ip _ address : IP address of entry to add DCNL : param mac _ address : MAC address of entry to add DCNL : param device : Device name to use in adding entry DCNL : param namespace : The name of the namespace in which to add the entry&apos;
def _ sanitize ( migrate _ engine , table ) : DCNL &apos; Avoid possible integrity error by removing deleted rows DCNL to accommdate less restrictive uniqueness constraint&apos;
def dynamic _ activity _ data ( request ) : DCNL &apos; Large database acitivity widget helper . DCNL This method serves as a helper for the activity widget , it \ &apos; s used with for DCNL AJAX requests based on date ranges passed to it . &apos; 
def getLiftedOutput ( derivation , geometryOutput ) : DCNL &apos; Get extrude output for a rack . &apos; 
def permalink ( func ) : DCNL &apos; Decorator that calls urlresolvers.reverse ( ) to return a URL using DCNL parameters returned by the decorated function &quot; func &quot; . DCNL &quot; func &quot; should be a function that returns a tuple in one of the DCNL following formats : DCNL ( viewname , viewargs ) DCNL ( viewname , viewargs , viewkwargs ) &apos;
def get _ service ( hass , config , discovery _ info = None ) : DCNL &apos; Return push service . &apos; 
def validatePort ( switch , intf ) : DCNL &apos; Validate intf \ &apos; s OF port number&apos;
@ docfiller DCNL def convolve ( input , weights , output = None , mode = &apos; reflect &apos; , cval = 0.0 , origin = 0 ) : DCNL &apos; Multidimensional convolution . DCNL The array is convolved with the given kernel . DCNL Parameters DCNL input : array _ like DCNL Input array to filter . DCNL weights : array _ like DCNL Array of weights , same number of dimensions as input DCNL output : ndarray , optional DCNL The `output` parameter passes an array in which to store the DCNL filter output . Output array should have different name as DCNL compared to input array to avoid aliasing errors . DCNL mode : { \ &apos; reflect \ &apos; , \ &apos; constant \ &apos; , \ &apos; nearest \ &apos; , \ &apos; mirror \ &apos; , \ &apos; wrap \ &apos; } , optional DCNL the `mode` parameter determines how the array borders are DCNL handled . For \ &apos; constant \ &apos; mode , values beyond borders are set to be DCNL `cval` . Default is \ &apos; reflect \ &apos; . DCNL cval : scalar , optional DCNL Value to fill past edges of input if `mode` is \ &apos; constant \ &apos; . Default DCNL is 0.0 DCNL origin : array _ like , optional DCNL The `origin` parameter controls the placement of the filter , DCNL relative to the centre of the current element of the input . DCNL Default of 0 is equivalent to `` ( 0 , ) * input.ndim``. DCNL Returns DCNL result : ndarray DCNL The result of convolution of `input` with `weights` . DCNL See Also DCNL correlate : Correlate an image with a kernel . DCNL Notes DCNL Each value in result is : math : `C _ i = \ sum _ j { I _ { i + k-j } W _ j } ` , where DCNL W is the `weights` kernel , DCNL j is the n-D spatial index over : math : `W` , DCNL I is the `input` and k is the coordinate of the center of DCNL W , specified by `origin` in the input parameters . DCNL Examples DCNL Perhaps the simplest case to understand is ``mode = \ &apos; constant \ &apos; , cval = 0.0`` , DCNL because in this case borders ( i.e. where the `weights` kernel , centered DCNL on any one value , extends beyond an edge of `input` . DCNL &gt; &gt; &gt; a = np.array ( &#91; &#91; 1 , 2 , 0 , 0 &#93; , DCNL ... &#91; 5 , 3 , 0 , 4 &#93; , DCNL ... &#91; 0 , 0 , 0 , 7 &#93; , DCNL ... &#91; 9 , 3 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; k = np.array ( &#91; &#91; 1,1,1 &#93; , &#91; 1,1,0 &#93; , &#91; 1,0,0 &#93; &#93; ) DCNL &gt; &gt; &gt; from scipy import ndimage DCNL &gt; &gt; &gt; ndimage.convolve ( a , k , mode = \ &apos; constant \ &apos; , cval = 0.0 ) DCNL array ( &#91; &#91; 11 , 10 , 7 , 4 &#93; , DCNL &#91; 10 , 3 , 11 , 11 &#93; , DCNL &#91; 15 , 12 , 14 , 7 &#93; , DCNL &#91; 12 , 3 , 7 , 0 &#93; &#93; ) DCNL Setting ``cval = 1.0`` is equivalent to padding the outer edge of `input` DCNL with 1.0 \ &apos; s ( and then extracting only the original region of the result ) . DCNL &gt; &gt; &gt; ndimage.convolve ( a , k , mode = \ &apos; constant \ &apos; , cval = 1.0 ) DCNL array ( &#91; &#91; 13 , 11 , 8 , 7 &#93; , DCNL &#91; 11 , 3 , 11 , 14 &#93; , DCNL &#91; 16 , 12 , 14 , 10 &#93; , DCNL &#91; 15 , 6 , 10 , 5 &#93; &#93; ) DCNL With ``mode = \ &apos; reflect \ &apos; `` ( the default ) , outer values are reflected at the DCNL edge of `input` to fill in missing values . DCNL &gt; &gt; &gt; b = np.array ( &#91; &#91; 2 , 0 , 0 &#93; , DCNL ... &#91; 1 , 0 , 0 &#93; , DCNL ... &#91; 0 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; k = np.array ( &#91; &#91; 0,1,0 &#93; , &#91; 0,1,0 &#93; , &#91; 0,1,0 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.convolve ( b , k , mode = \ &apos; reflect \ &apos; ) DCNL array ( &#91; &#91; 5 , 0 , 0 &#93; , DCNL &#91; 3 , 0 , 0 &#93; , DCNL &#91; 1 , 0 , 0 &#93; &#93; ) DCNL This includes diagonally at the corners . DCNL &gt; &gt; &gt; k = np.array ( &#91; &#91; 1,0,0 &#93; , &#91; 0,1,0 &#93; , &#91; 0,0,1 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.convolve ( b , k ) DCNL array ( &#91; &#91; 4 , 2 , 0 &#93; , DCNL &#91; 3 , 2 , 0 &#93; , DCNL &#91; 1 , 1 , 0 &#93; &#93; ) DCNL With ``mode = \ &apos; nearest \ &apos; `` , the single nearest value in to an edge in DCNL `input` is repeated as many times as needed to match the overlapping DCNL `weights` . DCNL &gt; &gt; &gt; c = np.array ( &#91; &#91; 2 , 0 , 1 &#93; , DCNL ... &#91; 1 , 0 , 0 &#93; , DCNL ... &#91; 0 , 0 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; k = np.array ( &#91; &#91; 0 , 1 , 0 &#93; , DCNL ... &#91; 0 , 1 , 0 &#93; , DCNL ... &#91; 0 , 1 , 0 &#93; , DCNL ... &#91; 0 , 1 , 0 &#93; , DCNL ... &#91; 0 , 1 , 0 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.convolve ( c , k , mode = \ &apos; nearest \ &apos; ) DCNL array ( &#91; &#91; 7 , 0 , 3 &#93; , DCNL &#91; 5 , 0 , 2 &#93; , DCNL &#91; 3 , 0 , 1 &#93; &#93; ) &apos;
def endtags ( html ) : DCNL &apos; close all open html tags at the end of the string&apos;
def sineModelAnal ( x , fs , w , N , H , t , maxnSines = 100 , minSineDur = 0.01 , freqDevOffset = 20 , freqDevSlope = 0.01 ) : DCNL &apos; Analysis of a sound using the sinusoidal model with sine tracking DCNL x : input array sound , w : analysis window , N : size of complex spectrum , H : hop-size , t : threshold in negative dB DCNL maxnSines : maximum number of sines per frame , minSineDur : minimum duration of sines in seconds DCNL freqDevOffset : minimum frequency deviation at 0Hz , freqDevSlope : slope increase of minimum frequency deviation DCNL returns xtfreq , xtmag , xtphase : frequencies , magnitudes and phases of sinusoidal tracks&apos;
def create _ geq ( lh _ op , rh _ op = None , constr _ id = None ) : DCNL &apos; Creates an internal greater than or equal constraint . DCNL Parameters DCNL lh _ term : LinOp DCNL The left-hand operator in the &gt; = constraint . DCNL rh _ term : LinOp DCNL The right-hand operator in the &gt; = constraint . DCNL constr _ id : int DCNL The id of the CVXPY equality constraint creating the constraint . DCNL Returns DCNL LinLeqConstr&apos;
def get _ current _ module _ name ( ) : DCNL &apos; Returns the module name of the current instance . DCNL If this is version &quot; v1 &quot; of module &quot; module5 &quot; for app &quot; my-app &quot; , this function DCNL will return &quot; module5 &quot;  . &apos; 
def copyfile ( src , dst ) : DCNL &apos; Copy data from src to dst&apos;
def scale _ timings ( timelist , input _ units , output _ units , time _ repetition ) : DCNL &apos; Scales timings given input and output units ( scans / secs ) DCNL Parameters DCNL timelist : list of times to scale DCNL input _ units : \ &apos; secs \ &apos; or \ &apos; scans \ &apos; DCNL output _ units : Ibid . DCNL time _ repetition : float in seconds&apos;
def _ fit _ edge ( x , window _ start , window _ stop , interp _ start , interp _ stop , axis , polyorder , deriv , delta , y ) : DCNL &apos; Given an n-d array `x` and the specification of a slice of `x` from DCNL `window _ start` to `window _ stop` along `axis` , create an interpolating DCNL polynomial of each 1-d slice , and evaluate that polynomial in the slice DCNL from `interp _ start` to `interp _ stop` . Put the result into the DCNL corresponding slice of `y` . &apos; 
def get _ datetime _ format ( format = &apos; medium &apos; , locale = LC _ TIME ) : DCNL &apos; Return the datetime formatting patterns used by the locale for the DCNL specified format . DCNL &gt; &gt; &gt; get _ datetime _ format ( locale = \ &apos; en _ US \ &apos; ) DCNL u \ &apos; { 1 } , { 0 } \ &apos; DCNL : param format : the format to use , one of &quot; full &quot; , &quot; long &quot; , &quot; medium &quot; , or DCNL &quot; short &quot; DCNL : param locale : the `Locale` object , or a locale string&apos;
def encrypt _ and _ encode ( data , key ) : DCNL &apos; Encrypts and endcodes `data` using `key \ &apos; &apos;
def offset _ func ( func , offset , * args ) : DCNL &apos; Offsets inputs by offset DCNL &gt; &gt; &gt; double = lambda x : x * 2 DCNL &gt; &gt; &gt; f = offset _ func ( double , ( 10 , ) ) DCNL &gt; &gt; &gt; f ( 1 ) DCNL 22 DCNL &gt; &gt; &gt; f ( 300 ) DCNL 620&apos;
def findMajorityElement ( lst ) : DCNL &apos; lst : list of entries to find a majority element from DCNL return : majority element DCNL &quot; Majority element &quot; here refers to an element of a list that occurs the &quot; majority &quot; of the time ( i.e. more than DCNL half of the elements are identical to the majority element ) . DCNL If no majority element is found , the function returns None . &apos; 
def _ update _ args ( args , key , value ) : DCNL &apos; Add a new `` ( key , value ) `` pair to arguments ``dict`` . &apos; 
def exampleCustomTags ( ) : DCNL &apos; Simple example that exercises VLANStarTopo&apos;
def downgrade ( migrate _ engine ) : DCNL &apos; Remove source volume id column to volumes . &apos; 
def unique _ everseen ( iterable , key = None ) : DCNL &apos; List unique elements , preserving order . Remember all elements ever seen . &apos; 
def describe _ data ( data ) : DCNL &apos; Return an : obj : `OrderedDict` describing the data DCNL Description contains keys &quot; Data instances &quot; ( with the number of instances ) DCNL and &quot; Features &quot; , &quot; Meta attributes &quot; and &quot; Targets &quot; with the corresponding DCNL clipped lists of names . If the domain contains no meta attributes or DCNL targets , the value is `False` , which prevents it from being rendered . DCNL : param data : data DCNL : type data : Orange.data.Table DCNL : rtype : OrderedDict&apos;
def samples _ from _ file ( file _ in , start = 0 , stop = ( -1 ) ) : DCNL &apos; Read data from files , returns tuple ( rate , np.array ( .float64 ) ) &apos;
def contrast _ all _ one ( nm ) : DCNL &apos; contrast or restriction matrix for all against first comparison DCNL Parameters DCNL nm : int DCNL Returns DCNL contr : ndarray , 2d , ( nm-1 , nm ) DCNL contrast matrix for all against first comparisons&apos;
def _ write _ js ( output _ root , classes ) : DCNL &apos; Write the javascript fragments from all XModules in `classes` DCNL into `output _ root` as individual files , hashed by the contents to remove DCNL duplicates&apos;
@ pytest.mark.parametrize ( &apos; initial _ text , DCSP edited _ text &apos; , &#91; ( &apos; &apos; , &apos; Hello &apos; ) , ( &apos; Hello &apos; , &apos; World &apos; ) , ( &apos; H \ xc3 \ xa4ll \ xc3 \ xb6 DCSP W \ xc3 \ xb6rld &apos; , &apos; \ xc3 \ x9cberpr \ xc3 \ xbcfung &apos; ) , ( &apos; \ \ u2603 &apos; , &apos; \ \ u2601 &apos; ) &#93; ) DCNL def test _ modify ( editor , initial _ text , edited _ text ) : DCNL &apos; Test if inputs get modified correctly . &apos; 
def set _ register _ stylesheet ( obj ) : DCNL &apos; Set the stylesheet for an object based on it \ &apos; s STYLESHEET attribute . DCNL Also , register an update when the config is changed . DCNL Args : DCNL obj : The object to set the stylesheet for and register . DCNL Must have a STYLESHEET attribute . &apos; 
@ dec.skip _ win32 DCNL def test _ arg _ split ( ) : DCNL &apos; Ensure that argument lines are correctly split like in a shell . &apos; 
def order _ blocks ( start _ block , exit _ block ) : DCNL &apos; Order blocks so that they are emitted in the right order&apos;
@ contextlib.contextmanager DCNL def register _ dispatcher ( disp ) : DCNL &apos; Register a Dispatcher for inference while it is not yet stored DCNL as global or closure variable ( e.g. during execution of the @ jit ( ) DCNL call ) . This allows resolution of recursive calls with eager DCNL compilation . &apos; 
def hash _ rename ( filename , hashvalue ) : DCNL &apos; renames a file given original filename and hash DCNL and sets path to output _ directory&apos;
def _ check _ set ( ch , projs , ch _ type ) : DCNL &apos; Helper to make sure type change is compatible with projectors . &apos; 
def test _ step _ description ( ) : DCNL &apos; Step description takes a line and filename , and keeps the relative path for filename&apos;
def get _ horizontal _ shift _ value ( label ) : DCNL &apos; Returns the value corresponding to a horizontal shift label int . DCNL The value is the int itself . This just sanity-checks the label for range DCNL errors . DCNL Parameters DCNL label : int DCNL Horizontal shift label . &apos; 
def find _ diff ( file1 , file2 ) : DCNL &apos; Find the differences between the two configuraiton files&apos;
@ logic.auth _ audit _ exempt DCNL def send _ email _ notifications ( context , data _ dict ) : DCNL &apos; Send any pending activity stream notification emails to users . DCNL You must provide a sysadmin \ &apos; s API key in the Authorization header of the DCNL request , or call this action from the command-line via a `paster post ... ` DCNL command . &apos; 
def grey _ closing ( input , size = None , footprint = None , structure = None , output = None , mode = &apos; reflect &apos; , cval = 0.0 , origin = 0 ) : DCNL &apos; Multi-dimensional greyscale closing . DCNL A greyscale closing consists in the succession of a greyscale dilation , DCNL and a greyscale erosion . DCNL Parameters DCNL input : array _ like DCNL Array over which the grayscale closing is to be computed . DCNL size : tuple of ints DCNL Shape of a flat and full structuring element used for the grayscale DCNL closing . Optional if `footprint` or `structure` is provided . DCNL footprint : array of ints , optional DCNL Positions of non-infinite elements of a flat structuring element DCNL used for the grayscale closing . DCNL structure : array of ints , optional DCNL Structuring element used for the grayscale closing . `structure` DCNL may be a non-flat structuring element . DCNL output : array , optional DCNL An array used for storing the ouput of the closing may be provided . DCNL mode : { \ &apos; reflect \ &apos; , \ &apos; constant \ &apos; , \ &apos; nearest \ &apos; , \ &apos; mirror \ &apos; , \ &apos; wrap \ &apos; } , optional DCNL The `mode` parameter determines how the array borders are DCNL handled , where `cval` is the value when mode is equal to DCNL \ &apos; constant \ &apos; . Default is \ &apos; reflect \ &apos; DCNL cval : scalar , optional DCNL Value to fill past edges of input if `mode` is \ &apos; constant \ &apos; . Default DCNL is 0.0 . DCNL origin : scalar , optional DCNL The `origin` parameter controls the placement of the filter . DCNL Default 0 DCNL Returns DCNL grey _ closing : ndarray DCNL Result of the grayscale closing of `input` with `structure` . DCNL See also DCNL binary _ closing , grey _ dilation , grey _ erosion , grey _ opening , DCNL generate _ binary _ structure DCNL Notes DCNL The action of a grayscale closing with a flat structuring element amounts DCNL to smoothen deep local minima , whereas binary closing fills small holes . DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Mathematical _ morphology DCNL Examples DCNL &gt; &gt; &gt; from scipy import ndimage DCNL &gt; &gt; &gt; a = np.arange ( 36 ) .reshape ( ( 6,6 ) ) DCNL &gt; &gt; &gt; a &#91; 3,3 &#93; = 0 DCNL &gt; &gt; &gt; a DCNL array ( &#91; &#91; 0 , 1 , 2 , 3 , 4 , 5 &#93; , DCNL &#91; 6 , 7 , 8 , 9 , 10 , 11 &#93; , DCNL &#91; 12 , 13 , 14 , 15 , 16 , 17 &#93; , DCNL &#91; 18 , 19 , 20 , 0 , 22 , 23 &#93; , DCNL &#91; 24 , 25 , 26 , 27 , 28 , 29 &#93; , DCNL &#91; 30 , 31 , 32 , 33 , 34 , 35 &#93; &#93; ) DCNL &gt; &gt; &gt; ndimage.grey _ closing ( a , size = ( 3,3 ) ) DCNL array ( &#91; &#91; 7 , 7 , 8 , 9 , 10 , 11 &#93; , DCNL &#91; 7 , 7 , 8 , 9 , 10 , 11 &#93; , DCNL &#91; 13 , 13 , 14 , 15 , 16 , 17 &#93; , DCNL &#91; 19 , 19 , 20 , 20 , 22 , 23 &#93; , DCNL &#91; 25 , 25 , 26 , 27 , 28 , 29 &#93; , DCNL &#91; 31 , 31 , 32 , 33 , 34 , 35 &#93; &#93; ) DCNL &gt; &gt; &gt; # Note that the local minimum a &#91; 3,3 &#93; has disappeared&apos;
def get _ module ( module _ name ) : DCNL &apos; Loads a module and returns a specific object . DCNL module _ name should \ &apos; module.file.object \ &apos; . DCNL Returns object or raises EAException on error . &apos; 
def wait _ for _ server ( server , port ) : DCNL &apos; Wait for a server to respond with status 200&apos;
def create _ resource ( ) : DCNL &apos; Image Members resource factory method&apos;
def get _ all _ security _ groups ( groupnames = None , group _ ids = None , filters = None , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Return a list of all Security Groups matching the given criteria and filters . DCNL Note that the \ &apos; groupnames \ &apos; argument only functions correctly for EC2 Classic DCNL and default VPC Security Groups . To find groups by name in other VPCs you \ &apos; ll DCNL want to use the \ &apos; group-name \ &apos; filter instead . DCNL Valid keys for the filters argument are : DCNL description - The description of the security group . DCNL egress.ip-permission.prefix-list-id - The ID ( prefix ) of the AWS service to which the security group allows access . DCNL group-id - The ID of the security group . DCNL group-name - The name of the security group . DCNL ip-permission.cidr - A CIDR range that has been granted permission . DCNL ip-permission.from-port - The start of port range for the TCP and UDP protocols , or an ICMP type number . DCNL ip-permission.group-id - The ID of a security group that has been granted permission . DCNL ip-permission.group-name - The name of a security group that has been granted permission . DCNL ip-permission.protocol - The IP protocol for the permission ( tcp &#124; udp &#124; icmp or a protocol number ) . DCNL ip-permission.to-port - The end of port range for the TCP and UDP protocols , or an ICMP code . DCNL ip-permission.user-id - The ID of an AWS account that has been granted permission . DCNL owner-id - The AWS account ID of the owner of the security group . DCNL tag-key - The key of a tag assigned to the security group . DCNL tag-value - The value of a tag assigned to the security group . DCNL vpc-id - The ID of the VPC specified when the security group was created . DCNL CLI example : : DCNL salt myminion boto _ secgroup.get _ all _ security _ groups filters = \ &apos; { group-name : mygroup } \ &apos; &apos;
def periodic _ task ( * args , * * options ) : DCNL &apos; Decorator to create a task class out of any callable . DCNL .. admonition : : Examples DCNL .. code-block : : python DCNL @ task DCNL def refresh _ feed ( url ) : DCNL return Feed.objects.get ( url = url ) .refresh ( ) DCNL With setting extra options and using retry . DCNL .. code-block : : python DCNL @ task ( exchange = &quot; feeds &quot; ) DCNL def refresh _ feed ( url , * * kwargs ) : DCNL try : DCNL return Feed.objects.get ( url = url ) .refresh ( ) DCNL except socket.error , exc : DCNL refresh _ feed.retry ( args = &#91; url &#93; , kwargs = kwargs , exc = exc ) DCNL Calling the resulting task : DCNL &gt; &gt; &gt; refresh _ feed ( &quot; http : / / example.com / rss &quot; ) # Regular DCNL &lt; Feed : http : / / example.com / rss &gt; DCNL &gt; &gt; &gt; refresh _ feed.delay ( &quot; http : / / example.com / rss &quot; ) # Async DCNL &lt; AsyncResult : 8998d0f4-da0b-4669-ba03-d5ab5ac6ad5d &gt; &apos;
def stem ( word , cached = True , history = 10000 , * * kwargs ) : DCNL &apos; Returns the stem of the given word : ponies = &gt; poni . DCNL Note : it is often taken to be a crude error DCNL that a stemming algorithm does not leave a real word after removing the stem . DCNL But the purpose of stemming is to bring variant forms of a word together , DCNL not to map a word onto its &quot; paradigm &quot; form . &apos; 
def setup _ proxy ( element , config ) : DCNL &apos; Configure a GStreamer element with proxy settings . DCNL : param element : element to setup proxy in . DCNL : type element : : class : `Gst.GstElement` DCNL : param config : proxy settings to use . DCNL : type config : : class : `dict`&apos;
@ staff _ member _ required DCNL def security ( request , template _ name = u &apos;admin / security.html &apos; ) : DCNL &apos; Run security checks and report the results . &apos; 
def opts _ to _ pp ( repair , unpack , delete ) : DCNL &apos; Convert ( repair , unpack , delete ) to numeric process options&apos;
def python _ 3000 _ not _ equal ( logical _ line ) : DCNL &apos; New code should always use ! = instead of &lt; &gt; . DCNL The older syntax is removed in Python 3 . DCNL Okay : if a ! = \ &apos; no \ &apos; : DCNL W603 : if a &lt; &gt; \ &apos; no \ &apos; : &apos;
def get _ context _ iter ( data , payload ) : DCNL &apos; : param data : The HTML where the payload might be in DCNL : param payload : The payload as sent to the web application DCNL : return : A context iterator DCNL : see : https : / / github.com / andresriancho / w3af / issues / 37&apos;
def _ get _ item _ key ( item , key ) : DCNL &apos; Allow for lookups in nested dictionaries using \ &apos; . \ &apos; s within a key . &apos; 
def _ TO _ DATESTRING ( obj ) : DCNL &apos; Creates datestring hash . DCNL Args : DCNL obj ( Object ) : Database object . DCNL Returns : DCNL datestring ( str ) : A datestring hash . &apos; 
def test ( HandlerClass = BaseHTTPRequestHandler , ServerClass = HTTPServer , protocol = &apos; HTTP / 1.0 &apos; , port = 8000 , bind = &apos; &apos; ) : DCNL &apos; Test the HTTP request handler class . DCNL This runs an HTTP server on port 8000 ( or the first command line DCNL argument )  . &apos; 
def _ dhtm ( mag ) : DCNL &apos; Compute the modified 1D discrete Hilbert transform DCNL Parameters DCNL mag : ndarray DCNL The magnitude spectrum . Should be 1D with an even length , and DCNL preferably a fast length for FFT / IFFT . &apos; 
def handler ( req ) : DCNL &apos; Execute the gluon app&apos;
def channel _ shift _ multi ( x , intensity , channel _ index = 2 ) : DCNL &apos; Shift the channels of images with the same arguments , randomly or non-randomly , see `numpy.rollaxis &lt; https : / / docs.scipy.org / doc / numpy / reference / generated / numpy.rollaxis.html &gt; ` _ . DCNL Usually be used for image segmentation which x = &#91; X , Y &#93; , X and Y should be matched . DCNL Parameters DCNL x : list of numpy array DCNL List of images with dimension of &#91; n _ images , row , col , channel &#93; ( default ) . DCNL others : see ``channel _ shift`` . &apos; 
@ requires _ application ( ) DCNL def test _ regular _ polygon _ draw1 ( ) : DCNL &apos; Test drawing regular polygons without transforms using RegularPolygonVisual&apos;
def _ rfc3339 _ to _ datetime ( dt _ str ) : DCNL &apos; Convert a microsecond-precision timetamp to a native datetime . DCNL : type dt _ str : str DCNL : param dt _ str : The string to convert . DCNL : rtype : : class : `datetime.datetime` DCNL : returns : The datetime object created from the string . &apos; 
def assign _ regions ( resource ) : DCNL &apos; Assign up to 5 regions to resource&apos;
def load _ path ( path , target ) : DCNL &apos; Load dictionary implied by YAML file into target dictionary . DCNL Args : DCNL path : &#91; string &#93; Path to file containing YAML document text . DCNL target : &#91; dict &#93; To update from YAML . &apos; 
def test _ smote _ wrong _ kind ( ) : DCNL &apos; Test either if an error is raised when the wrong kind of SMOTE is DCNL given . &apos; 
@ utils.arg ( &apos; server &apos; , metavar = &apos; &lt; server &gt; &apos; , help = _ ( &apos; Name DCSP or DCSP ID DCSP of DCSP server . &apos; ) ) DCNL def do _ unrescue ( cs , args ) : DCNL &apos; Restart the server from normal boot disk again . &apos; 
def _ diop _ linear ( var , coeff , param ) : DCNL &apos; Solves diophantine equations of the form : DCNL a _ 0 * x _ 0 + a _ 1 * x _ 1 + ... + a _ n * x _ n = = c DCNL Note that no solution exists if gcd ( a _ 0 , ... , a _ n ) doesn \ &apos; t divide c . &apos; 
def force _ link ( src , dest ) : DCNL &apos; Link src to dest , overwriting it if it exists&apos;
def test _ rgb _ to _ hsl _ part _ 2 ( ) : DCNL &apos; Test rgb to hsl color function&apos;
def LocalService ( name ) : DCNL &apos; The odoo.netsvc.LocalService ( ) function is deprecated . It still works DCNL in two cases : workflows and reports . For workflows , instead of using DCNL LocalService ( \ &apos; workflow \ &apos; ) , odoo.workflow should be used ( better yet , DCNL methods on odoo.osv.orm.Model should be used ) . For reports , DCNL odoo.report.render _ report ( ) should be used ( methods on the Model should DCNL be provided too in the future )  . &apos; 
@ public DCNL def monic ( f , * gens , * * args ) : DCNL &apos; Divide all coefficients of ``f`` by ``LC ( f ) `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy import monic DCNL &gt; &gt; &gt; from sympy.abc import x DCNL &gt; &gt; &gt; monic ( 3 * x * * 2 + 4 * x + 2 ) DCNL x * * 2 + 4 * x / 3 + 2 / 3&apos;
def truncated ( f ) : DCNL &apos; Ensure list truncation is detected in Driver list entity methods . DCNL This is designed to wrap Driver list _ { entity } methods in order to DCNL calculate if the resultant list has been truncated . Provided a limit dict DCNL is found in the hints list , we increment the limit by one so as to ask the DCNL wrapped function for one more entity than the limit , and then once the list DCNL has been generated , we check to see if the original limit has been DCNL exceeded , in which case we truncate back to that limit and set the DCNL \ &apos; truncated \ &apos; boolean to \ &apos; true \ &apos; in the hints limit dict . &apos; 
def qtapi _ version ( ) : DCNL &apos; Return which QString API has been set , if any DCNL Returns DCNL The QString API version ( 1 or 2 ) , or None if not set&apos;
def get _ docstring ( node , clean = True ) : DCNL &apos; Return the docstring for the given node or None if no docstring can DCNL be found . If the node provided does not have docstrings a TypeError DCNL will be raised . &apos; 
@ contextmanager DCNL def setup _ default _ app ( app , use _ trap = False ) : DCNL &apos; Setup default app for testing . DCNL Ensures state is clean after the test returns . &apos; 
def unquote _ to _ bytes ( string ) : DCNL &apos; unquote _ to _ bytes ( \ &apos; abc % 20def \ &apos; ) - &gt; b \ &apos; abc def \ &apos;  . &apos; 
def iprand _ all ( ) : DCNL &apos; Some ipython tests with fully random output . DCNL # all-random DCNL In &#91; 7 &#93; : 1 DCNL Out &#91; 7 &#93; : 99 DCNL In &#91; 8 &#93; : print ( \ &apos; hello \ &apos; ) DCNL world DCNL In &#91; 9 &#93; : iprand _ all ( ) DCNL Out &#91; 9 &#93; : \ &apos; junk \ &apos; &apos;
def getManipulatedPaths ( close , elementNode , loop , prefix , sideLength ) : DCNL &apos; Get inset path . &apos; 
def section _ problem _ grade _ distrib ( request , course _ id , section ) : DCNL &apos; Creates a json with the grade distribution for the problems in the specified section . DCNL `request` django request DCNL `course _ id` the course ID for the course interested in DCNL `section` The zero-based index of the section for the course DCNL Returns the format in dashboard _ data.get _ d3 _ section _ grade _ distrib DCNL If this is requested multiple times quickly for the same course , it is better to call all _ problem _ grade _ distribution DCNL and pick out the sections of interest . &apos; 
def get _ sql _ sequence _ reset ( app ) : DCNL &apos; Returns a list of the SQL statements to reset PostgreSQL sequences for the given app . &apos; 
def get _ makefile _ filename ( ) : DCNL &apos; Return full pathname of installed Makefile from the Python build . &apos; 
def get _ technical _ lengths ( input _ map , debug = False ) : DCNL &apos; Returns per-sample info on technical lengths . DCNL Note : KEY _ SEQ , BARCODE and PRIMER fields are required . The LINKER DCNL field is optional . &apos; 
def fixup _ simple _ stmt ( parent , i , stmt _ node ) : DCNL &apos; if there is a semi-colon all the parts count as part of the same DCNL simple _ stmt . We just want the _ _ metaclass _ _ part so we move DCNL everything efter the semi-colon into its own simple _ stmt node&apos;
def parse ( handle , format , alphabet = None ) : DCNL &apos; Turns a sequence file into an iterator returning SeqRecords . DCNL - handle - handle to the file , or the filename as a string DCNL ( note older versions of Biopython only took a handle ) . DCNL - format - lower case string describing the file format . DCNL - alphabet - optional Alphabet object , useful when the sequence type DCNL cannot be automatically inferred from the file itself DCNL ( e.g. format = &quot; fasta &quot; or &quot; tab &quot; ) DCNL Typical usage , opening a file to read in , and looping over the record ( s ) : DCNL &gt; &gt; &gt; from Bio import SeqIO DCNL &gt; &gt; &gt; filename = &quot; Fasta / sweetpea.nu &quot; DCNL &gt; &gt; &gt; for record in SeqIO.parse ( filename , &quot; fasta &quot; ) : DCNL ... print ( &quot; ID % s &quot; % record.id ) DCNL ... print ( &quot; Sequence length % i &quot; % len ( record ) ) DCNL ... print ( &quot; Sequence alphabet % s &quot; % record.seq.alphabet ) DCNL ID gi &#124; 3176602 &#124; gb &#124; U78617.1 &#124; LOU78617 DCNL Sequence length 309 DCNL Sequence alphabet SingleLetterAlphabet ( ) DCNL For file formats like FASTA where the alphabet cannot be determined , it DCNL may be useful to specify the alphabet explicitly : DCNL &gt; &gt; &gt; from Bio import SeqIO DCNL &gt; &gt; &gt; from Bio.Alphabet import generic _ dna DCNL &gt; &gt; &gt; filename = &quot; Fasta / sweetpea.nu &quot; DCNL &gt; &gt; &gt; for record in SeqIO.parse ( filename , &quot; fasta &quot; , generic _ dna ) : DCNL ... print ( &quot; ID % s &quot; % record.id ) DCNL ... print ( &quot; Sequence length % i &quot; % len ( record ) ) DCNL ... print ( &quot; Sequence alphabet % s &quot; % record.seq.alphabet ) DCNL ID gi &#124; 3176602 &#124; gb &#124; U78617.1 &#124; LOU78617 DCNL Sequence length 309 DCNL Sequence alphabet DNAAlphabet ( ) DCNL If you have a string \ &apos; data \ &apos; containing the file contents , you must DCNL first turn this into a handle in order to parse it : DCNL &gt; &gt; &gt; data = &quot; &gt; Alpha \ nACCGGATGTA \ n &gt; Beta \ nAGGCTCGGTTA \ n &quot; DCNL &gt; &gt; &gt; from Bio import SeqIO DCNL &gt; &gt; &gt; try : DCNL ... from StringIO import StringIO # Python 2 DCNL ... except ImportError : DCNL ... from io import StringIO # Python 3 DCNL &gt; &gt; &gt; for record in SeqIO.parse ( StringIO ( data ) , &quot; fasta &quot; ) : DCNL ... print ( &quot; % s % s &quot; % ( record.id , record.seq ) ) DCNL Alpha ACCGGATGTA DCNL Beta AGGCTCGGTTA DCNL Use the Bio.SeqIO.read ( ... ) function when you expect a single record DCNL only . &apos; 
def _ send _ message ( room _ id , message , from _ name , api _ key = None , api _ version = None , api _ url = None , color = None , notify = False ) : DCNL &apos; Send a message to a HipChat room . DCNL : param room _ id : The room id or room name , either will work . DCNL : param message : The message to send to the HipChat room . DCNL : param from _ name : Specify who the message is from . DCNL : param api _ url : The HipChat API URL , if not specified in the configuration . DCNL : param api _ key : The HipChat api key , if not specified in the configuration . DCNL : param api _ version : The HipChat api version , if not specified in the configuration . DCNL : param color : The color for the message , default : yellow . DCNL : param notify : Whether to notify the room , default : False . DCNL : return : Boolean if message was sent successfully . &apos; 
def get _ language _ from _ request ( request ) : DCNL &apos; Analyzes the request to find what language the user wants the system to DCNL show . Only languages listed in settings.LANGUAGES are taken into account . DCNL If the user requests a sublanguage where we have a main language , we send DCNL out the main language . &apos; 
def create ( context , entity _ id , traversal _ id , is _ update , stack _ id ) : DCNL &apos; Creates a sync point entry in DB . &apos; 
def freqs _ zpk ( z , p , k , worN = None ) : DCNL &apos; Compute frequency response of analog filter . DCNL Given the zeros `z` , poles `p` , and gain `k` of a filter , compute its DCNL frequency response : : DCNL ( jw-z &#91; 0 &#93; ) * ( jw-z &#91; 1 &#93; ) * ... * ( jw-z &#91; -1 &#93; ) DCNL H ( w ) = k * ---------------------------------------- DCNL ( jw-p &#91; 0 &#93; ) * ( jw-p &#91; 1 &#93; ) * ... * ( jw-p &#91; -1 &#93; ) DCNL Parameters DCNL z : array _ like DCNL Zeroes of a linear filter DCNL p : array _ like DCNL Poles of a linear filter DCNL k : scalar DCNL Gain of a linear filter DCNL worN : { None , int , array _ like } , optional DCNL If None , then compute at 200 frequencies around the interesting parts DCNL of the response curve ( determined by pole-zero locations ) . If a single DCNL integer , then compute at that many frequencies . Otherwise , compute the DCNL response at the angular frequencies ( e.g. rad / s ) given in `worN` . DCNL Returns DCNL w : ndarray DCNL The angular frequencies at which `h` was computed . DCNL h : ndarray DCNL The frequency response . DCNL See Also DCNL freqs : Compute the frequency response of an analog filter in TF form DCNL freqd : Compute the frequency response of a digital filter in TF form DCNL freqd _ zpk : Compute the frequency response of a digital filter in ZPK form DCNL Notes DCNL .. versionadded : 0.19.0 DCNL Examples DCNL &gt; &gt; &gt; from scipy.signal import freqs _ zpk , iirfilter DCNL &gt; &gt; &gt; z , p , k = iirfilter ( 4 , &#91; 1 , 10 &#93; , 1 , 60 , analog = True , ftype = \ &apos; cheby1 \ &apos; , DCNL ... output = \ &apos; zpk \ &apos; ) DCNL &gt; &gt; &gt; w , h = freqs _ zpk ( z , p , k , worN = np.logspace ( -1 , 2 , 1000 ) ) DCNL &gt; &gt; &gt; import matplotlib.pyplot as plt DCNL &gt; &gt; &gt; plt.semilogx ( w , 20 * np.log10 ( abs ( h ) ) ) DCNL &gt; &gt; &gt; plt.xlabel ( \ &apos; Frequency \ &apos; ) DCNL &gt; &gt; &gt; plt.ylabel ( \ &apos; Amplitude response &#91; dB &#93; \ &apos; ) DCNL &gt; &gt; &gt; plt.grid ( ) DCNL &gt; &gt; &gt; plt.show ( ) &apos;
def validate _ title ( value ) : DCNL &apos; Validator for Node # title . Makes sure that the value exists and is not DCNL above 200 characters . &apos; 
def search _ explorations ( query , limit , sort = None , cursor = None ) : DCNL &apos; Searches through the available explorations . DCNL args : DCNL - query _ string : the query string to search for . DCNL - sort : a string indicating how to sort results . This should be a string DCNL of space separated values . Each value should start with a \ &apos; + \ &apos; or a DCNL \ &apos; - \ &apos; character indicating whether to sort in ascending or descending DCNL order respectively . This character should be followed by a field name DCNL to sort on . When this is None , results are based on \ &apos; rank \ &apos; . See DCNL get _ search _ rank to see how rank is determined . DCNL - limit : the maximum number of results to return . DCNL - cursor : A cursor , used to get the next page of results . DCNL If there are more documents that match the query than \ &apos; limit \ &apos; , this DCNL function will return a cursor to get the next page . DCNL returns : a 2-tuple consisting of : DCNL - a list of exploration ids that match the query . DCNL - a cursor if there are more matching explorations to fetch , None DCNL otherwise . If a cursor is returned , it will be a web-safe string that DCNL can be used in URLs . &apos; 
def captured _ stdout ( ) : DCNL &apos; Capture the output of sys.stdout : DCNL with captured _ stdout ( ) as stdout : DCNL print ( &quot; hello &quot; ) DCNL self.assertEqual ( stdout.getvalue ( ) , &quot; hello&apos;
def register _ mimetype _ handler ( handler ) : DCNL &apos; Register a MimetypeHandler class . DCNL This will register a Mimetype Handler used by Review Board to render DCNL thumbnails for the file attachements across different mimetypes . DCNL Only MimetypeHandler subclasses are supported . &apos; 
def purge _ deleted _ rows ( context , age _ in _ days , max _ rows , session = None ) : DCNL &apos; Purges soft deleted rows DCNL Deletes rows of table images , table tasks and all dependent tables DCNL according to given age for relevant models . &apos; 
def test _ bti2fiff ( ) : DCNL &apos; Test mne bti2fiff . &apos; 
def reloaded ( manager , containers , count , name ) : DCNL &apos; Ensure that exactly `count` matching containers exist and are DCNL running . If any associated settings have been changed ( volumes , DCNL ports or so on ) , restart those containers . &apos; 
def build _ pool ( test _ case ) : DCNL &apos; Create a ``StoragePool`` . DCNL : param TestCase test _ case : The test in which this pool will exist . DCNL : return : A new ``StoragePool`` . &apos; 
def _ fire _ score _ changed _ for _ block ( course _ id , student , block , module _ state _ key ) : DCNL &apos; Fires a PROBLEM _ RAW _ SCORE _ CHANGED event for the given module . DCNL The earned points are always zero . We must retrieve the possible points DCNL from the XModule , as noted below . The effective time is now ( )  . &apos; 
@ login _ required DCNL @ ensure _ valid _ course _ key DCNL def submission _ history ( request , course _ id , student _ username , location ) : DCNL &apos; Render an HTML fragment ( meant for inclusion elsewhere ) that renders a DCNL history of all state changes made by this user for this problem location . DCNL Right now this only works for problems because that \ &apos; s all DCNL StudentModuleHistory records . &apos; 
def _ readmailcapfile ( fp , lineno ) : DCNL &apos; Read a mailcap file and return a dictionary keyed by MIME type . DCNL Each MIME type is mapped to an entry consisting of a list of DCNL dictionaries ; the list will contain more than one such dictionary DCNL if a given MIME type appears more than once in the mailcap file . DCNL Each dictionary contains key-value pairs for that MIME type , where DCNL the viewing command is stored with the key &quot; view &quot;  . &apos; 
def timeuntil ( d , now = None ) : DCNL &apos; Like timesince , but returns a string measuring the time until DCNL the given time . &apos; 
def run _ job ( tasks ) : DCNL &apos; Add the execution to the queue and waits until it is finished&apos;
@ contextmanager DCNL def assuming ( * assumptions ) : DCNL &apos; Context manager for assumptions DCNL Examples DCNL &gt; &gt; &gt; from sympy.assumptions import assuming , Q , ask DCNL &gt; &gt; &gt; from sympy.abc import x , y DCNL &gt; &gt; &gt; print ( ask ( Q.integer ( x + y ) ) ) DCNL None DCNL &gt; &gt; &gt; with assuming ( Q.integer ( x ) , Q.integer ( y ) ) : DCNL ... print ( ask ( Q.integer ( x + y ) ) ) DCNL True&apos;
def double _ redirect _ view ( request ) : DCNL &apos; A view that redirects all requests to a redirection view&apos;
@ hooks.register ( u &apos;before _ serve _ page &apos; ) DCNL def check _ view _ restrictions ( page , request , serve _ args , serve _ kwargs ) : DCNL &apos; Check whether there are any view restrictions on this page which are DCNL not fulfilled by the given request object . If there are , return an DCNL HttpResponse that will notify the user of that restriction ( and possibly DCNL include a password / login form that will allow them to proceed ) . If DCNL there are no such restrictions , return None&apos;
def close _ all _ open _ files ( exclude = set ( ) ) : DCNL &apos; Close all open file descriptors . DCNL Closes every file descriptor ( if open ) of this process . If DCNL specified , `exclude` is a set of file descriptors to * not * DCNL close . &apos; 
def getstatementrange _ old ( lineno , source , assertion = False ) : DCNL &apos; return ( start , end ) tuple which spans the minimal DCNL statement region which containing the given lineno . DCNL raise an IndexError if no such statementrange can be found . &apos; 
def get _ engine ( hass , config ) : DCNL &apos; Setup Demo speech component . &apos; 
def replaceInFile ( filename , oldToNew ) : DCNL &apos; I replace the text `oldstr \ &apos; with `newstr \ &apos; in `filename \ &apos; using science . &apos; 
def oversample ( images , crop _ dims ) : DCNL &apos; Crop an image into center , corners , and mirror images . &apos; 
@ context.quietfunc DCNL @ with _ device DCNL def exists ( path ) : DCNL &apos; Return : const : `True` if ``path`` exists on the target device . DCNL Examples : DCNL &gt; &gt; &gt; adb.exists ( \ &apos; / \ &apos; ) DCNL True DCNL &gt; &gt; &gt; adb.exists ( \ &apos; / init \ &apos; ) DCNL True DCNL &gt; &gt; &gt; adb.exists ( \ &apos; / does / not / exist \ &apos; ) DCNL False&apos;
def decode _ wanted ( parts ) : DCNL &apos; Parse missing _ check line parts to determine which parts of local DCNL diskfile were wanted by the receiver . DCNL The encoder for parts is DCNL : py : func : ` ~ swift.obj.ssync _ receiver.encode _ wanted`&apos;
def random _ all ( ) : DCNL &apos; A function where we ignore the output of ALL examples . DCNL Examples : DCNL # all-random DCNL This mark tells the testing machinery that all subsequent examples should DCNL be treated as random ( ignoring their output ) . They are still executed , DCNL so if a they raise an error , it will be detected as such , but their DCNL output is completely ignored . DCNL &gt; &gt; &gt; 1 + 3 DCNL junk goes here ... DCNL &gt; &gt; &gt; 1 + 3 DCNL klasdfj ; DCNL &gt; &gt; &gt; 1 + 2 DCNL again , anything goes DCNL blah ... &apos;
def read _ headers ( rfile , hdict = None ) : DCNL &apos; Read headers from the given stream into the given header dict . DCNL If hdict is None , a new header dict is created . Returns the populated DCNL header dict . DCNL Headers which are repeated are folded together using a comma if their DCNL specification so dictates . DCNL This function raises ValueError when the read bytes violate the HTTP spec . DCNL You should probably return &quot; 400 Bad Request &quot; if this happens . &apos; 
def get _ service ( hass , config , discovery _ info = None ) : DCNL &apos; Return the notify service . &apos; 
def linkage ( y , method = &apos; single &apos; , metric = &apos; euclidean &apos; ) : DCNL &apos; Performs hierarchical / agglomerative clustering . DCNL The input y may be either a 1d compressed distance matrix DCNL or a 2d array of observation vectors . DCNL If y is a 1d compressed distance matrix , DCNL then y must be a : math : ` { n \ choose 2 } ` sized DCNL vector where n is the number of original observations paired DCNL in the distance matrix . The behavior of this function is very DCNL similar to the MATLAB linkage function . DCNL A : math : ` ( n-1 ) ` by 4 matrix ``Z`` is returned . At the DCNL : math : `i`-th iteration , clusters with indices ``Z &#91; i , 0 &#93; `` and DCNL ``Z &#91; i , 1 &#93; `` are combined to form cluster : math : `n + i` . A DCNL cluster with an index less than : math : `n` corresponds to one of DCNL the : math : `n` original observations . The distance between DCNL clusters ``Z &#91; i , 0 &#93; `` and ``Z &#91; i , 1 &#93; `` is given by ``Z &#91; i , 2 &#93; `` . The DCNL fourth value ``Z &#91; i , 3 &#93; `` represents the number of original DCNL observations in the newly formed cluster . DCNL The following linkage methods are used to compute the distance DCNL : math : `d ( s , t ) ` between two clusters : math : `s` and DCNL : math : `t` . The algorithm begins with a forest of clusters that DCNL have yet to be used in the hierarchy being formed . When two DCNL clusters : math : `s` and : math : `t` from this forest are combined DCNL into a single cluster : math : `u` , : math : `s` and : math : `t` are DCNL removed from the forest , and : math : `u` is added to the DCNL forest . When only one cluster remains in the forest , the algorithm DCNL stops , and this cluster becomes the root . DCNL A distance matrix is maintained at each iteration . The ``d &#91; i , j &#93; `` DCNL entry corresponds to the distance between cluster : math : `i` and DCNL : math : `j` in the original forest . DCNL At each iteration , the algorithm must update the distance matrix DCNL to reflect the distance of the newly formed cluster u with the DCNL remaining clusters in the forest . DCNL Suppose there are : math : ` &#124; u &#124; ` original observations DCNL : math : `u &#91; 0 &#93; , \ ldots , u &#91; &#124; u &#124; -1 &#93; ` in cluster : math : `u` and DCNL : math : ` &#124; v &#124; ` original objects : math : `v &#91; 0 &#93; , \ ldots , v &#91; &#124; v &#124; -1 &#93; ` in DCNL cluster : math : `v` . Recall : math : `s` and : math : `t` are DCNL combined to form cluster : math : `u` . Let : math : `v` be any DCNL remaining cluster in the forest that is not : math : `u` . DCNL The following are methods for calculating the distance between the DCNL newly formed cluster : math : `u` and each : math : `v` . DCNL * method = \ &apos; single \ &apos; assigns DCNL .. math : : DCNL d ( u , v ) = \ min ( dist ( u &#91; i &#93; , v &#91; j &#93; ) ) DCNL for all points : math : `i` in cluster : math : `u` and DCNL : math : `j` in cluster : math : `v` . This is also known as the DCNL Nearest Point Algorithm . DCNL * method = \ &apos; complete \ &apos; assigns DCNL .. math : : DCNL d ( u , v ) = \ max ( dist ( u &#91; i &#93; , v &#91; j &#93; ) ) DCNL for all points : math : `i` in cluster u and : math : `j` in DCNL cluster : math : `v` . This is also known by the Farthest Point DCNL Algorithm or Voor Hees Algorithm . DCNL * method = \ &apos; average \ &apos; assigns DCNL .. math : : DCNL d ( u , v ) = \ sum _ { ij } \ frac { d ( u &#91; i &#93; , v &#91; j &#93; ) } DCNL { ( &#124; u &#124; * &#124; v &#124; ) } DCNL for all points : math : `i` and : math : `j` where : math : ` &#124; u &#124; ` DCNL and : math : ` &#124; v &#124; ` are the cardinalities of clusters : math : `u` DCNL and : math : `v` , respectively . This is also called the UPGMA DCNL algorithm . DCNL * method = \ &apos; weighted \ &apos; assigns DCNL .. math : : DCNL d ( u , v ) = ( dist ( s , v ) + dist ( t , v ) ) / 2 DCNL where cluster u was formed with cluster s and t and v DCNL is a remaining cluster in the forest . ( also called WPGMA ) DCNL * method = \ &apos; centroid \ &apos; assigns DCNL .. math : : DCNL dist ( s , t ) = &#124; &#124; c _ s-c _ t &#124; &#124; _ 2 DCNL where : math : `c _ s` and : math : `c _ t` are the centroids of DCNL clusters : math : `s` and : math : `t` , respectively . When two DCNL clusters : math : `s` and : math : `t` are combined into a new DCNL cluster : math : `u` , the new centroid is computed over all the DCNL original objects in clusters : math : `s` and : math : `t` . The DCNL distance then becomes the Euclidean distance between the DCNL centroid of : math : `u` and the centroid of a remaining cluster DCNL : math : `v` in the forest . This is also known as the UPGMC DCNL algorithm . DCNL * method = \ &apos; median \ &apos; assigns : math : `d ( s , t ) ` like the ``centroid`` DCNL method . When two clusters : math : `s` and : math : `t` are combined DCNL into a new cluster : math : `u` , the average of centroids s and t DCNL give the new centroid : math : `u` . This is also known as the DCNL WPGMC algorithm . DCNL * method = \ &apos; ward \ &apos; uses the Ward variance minimization algorithm . DCNL The new entry : math : `d ( u , v ) ` is computed as follows , DCNL .. math : : DCNL d ( u , v ) = \ sqrt { \ frac { &#124; v &#124; + &#124; s &#124; } DCNL { T } d ( v , s ) ^ 2 DCNL + \ frac { &#124; v &#124; + &#124; t &#124; } DCNL { T } d ( v , t ) ^ 2 DCNL - \ frac { &#124; v &#124; } DCNL { T } d ( s , t ) ^ 2 } DCNL where : math : `u` is the newly joined cluster consisting of DCNL clusters : math : `s` and : math : `t` , : math : `v` is an unused DCNL cluster in the forest , : math : `T = &#124; v &#124; + &#124; s &#124; + &#124; t &#124; ` , and DCNL : math : ` &#124; * &#124; ` is the cardinality of its argument . This is also DCNL known as the incremental algorithm . DCNL Warning : When the minimum distance pair in the forest is chosen , there DCNL may be two or more pairs with the same minimum distance . This DCNL implementation may chose a different minimum than the MATLAB DCNL version . DCNL Parameters DCNL y : ndarray DCNL A condensed distance matrix . A condensed distance matrix DCNL is a flat array containing the upper triangular of the distance matrix . DCNL This is the form that ``pdist`` returns . Alternatively , a collection of DCNL : math : `m` observation vectors in : math : `n` dimensions may be passed as an DCNL : math : `m` by : math : `n` array . All elements of the condensed distance matrix DCNL must be finite , i.e. no NaNs or infs . DCNL method : str , optional DCNL The linkage algorithm to use . See the ``Linkage Methods`` section below DCNL for full descriptions . DCNL metric : str or function , optional DCNL The distance metric to use in the case that y is a collection of DCNL observation vectors ; ignored otherwise . See the ``pdist`` DCNL function for a list of valid distance metrics . A custom distance DCNL function can also be used . DCNL Returns DCNL Z : ndarray DCNL The hierarchical clustering encoded as a linkage matrix . DCNL Notes DCNL 1 . For method \ &apos; single \ &apos; an optimized algorithm based on minimum spanning DCNL tree is implemented . It has time complexity : math : `O ( n ^ 2 ) ` . DCNL For methods \ &apos; complete \ &apos; , \ &apos; average \ &apos; , \ &apos; weighted \ &apos; and \ &apos; ward \ &apos; an algorithm DCNL called nearest-neighbors chain is implemented . It also has time DCNL complexity : math : `O ( n ^ 2 ) ` . DCNL For other methods a naive algorithm is implemented with : math : `O ( n ^ 3 ) ` DCNL time complexity . DCNL All algorithms use : math : `O ( n ^ 2 ) ` memory . DCNL Refer to &#91; 1 &#93; _ for details about the algorithms . DCNL 2 . Methods \ &apos; centroid \ &apos; , \ &apos; median \ &apos; and \ &apos; ward \ &apos; are correctly defined only if DCNL Euclidean pairwise metric is used . If `y` is passed as precomputed DCNL pairwise distances , then it is a user responsibility to assure that DCNL these distances are in fact Euclidean , otherwise the produced result DCNL will be incorrect . DCNL See Also DCNL scipy.spatial.distance.pdist : pairwise distance metrics DCNL References DCNL .. &#91; 1 &#93; Daniel Mullner , &quot; Modern hierarchical , agglomerative clustering DCNL algorithms &quot; , : arXiv : `1109.2378v1` . &apos; 
@ handle _ response _ format DCNL @ treeio _ login _ required DCNL def account _ edit ( request , response _ format = &apos; html &apos; ) : DCNL &apos; Account edit&apos;
def people _ type ( ) : DCNL &apos; REST Controller&apos;
def captured _ stdout ( ) : DCNL &apos; Capture the output of sys.stdout : DCNL with captured _ stdout ( ) as stdout : DCNL print ( \ &apos; hello \ &apos; ) DCNL self.assertEqual ( stdout.getvalue ( ) , \ &apos; hello DCNL Taken from Lib / support / _ _ init _ _ .py in the CPython repo . &apos; 
@ Profiler.profile DCNL def test _ flush _ pk _ given ( n ) : DCNL &apos; Batched INSERT statements via the ORM , PKs already defined&apos;
@ api _ wrapper DCNL def get _ export ( module , filesystem , system ) : DCNL &apos; Retrun export if found . When not found return None&apos;
@ login _ required DCNL @ permission _ required ( &apos; flagit.can _ moderate &apos; ) DCNL def queue ( request , content _ type = None ) : DCNL &apos; The moderation queue . &apos; 
@ ensure _ csrf _ cookie DCNL @ cache _ control ( no _ cache = True , no _ store = True , must _ revalidate = True ) DCNL @ require _ level ( &apos; staff &apos; ) DCNL def get _ anon _ ids ( request , course _ id ) : DCNL &apos; Respond with 2-column CSV output of user-id , anonymized-user-id&apos;
def rte _ classifier ( trainer , features = rte _ features ) : DCNL &apos; Classify RTEPairs&apos;
def main ( sys _ argv ) : DCNL &apos; Run all tests in the project . DCNL Arguments : DCNL sys _ argv : a reference to sys.argv . &apos; 
def config ( settings ) : DCNL &apos; Template settings for Save the Children Philippines&apos;
def urlquote ( val ) : DCNL &apos; Quotes a string for use in a URL . DCNL &gt; &gt; &gt; urlquote ( \ &apos; : / / ? f = 1 &amp; j = 1 \ &apos; ) DCNL \ &apos; % 3A / / % 3Ff % 3D1 % 26j % 3D1 \ &apos; DCNL &gt; &gt; &gt; urlquote ( None ) DCNL &gt; &gt; &gt; urlquote ( u \ &apos; \ u203d \ &apos; ) DCNL \ &apos; % E2 % 80 % BD \ &apos; &apos;
def disk _ usage ( path ) : DCNL &apos; Return disk usage associated with path . DCNL Note : UNIX usually reserves 5 % disk space which is not accessible DCNL by user . In this function &quot; total &quot; and &quot; used &quot; values reflect the DCNL total and used disk space whereas &quot; free &quot; and &quot; percent &quot; represent DCNL the &quot; free &quot; and &quot; used percent &quot; user disk space . &apos; 
def sql _ demo ( ) : DCNL &apos; Print out every row from the \ &apos; city.db \ &apos; database . &apos; 
def get _ unmounted _ partition _ list ( root _ part , job = None , min _ blocks = 0 , filter _ func = None , exclude _ swap = True , open _ func = open ) : DCNL &apos; Return a list of partition objects that are not mounted . DCNL : param root _ part : The root device name ( without the \ &apos; / dev / \ &apos; prefix , example DCNL \ &apos; hda2 \ &apos; ) that will be filtered from the partition list . DCNL Reasoning : in Linux / proc / mounts will never directly mention the DCNL root partition as being mounted on / instead it will say that DCNL / dev / root is mounted on / . Thus require this argument to filter out DCNL the root _ part from the ones checked to be mounted . DCNL : param job , min _ blocks , filter _ func , exclude _ swap , open _ func : Forwarded DCNL to get _ partition _ list ( ) . DCNL : return : List of L { partition } objects that are not mounted . &apos; 
def get _ slug ( ) : DCNL &apos; Get slug&apos;
@ task ( base = BaseInstructorTask , routing _ key = settings.GRADES _ DOWNLOAD _ ROUTING _ KEY ) DCNL def calculate _ grades _ csv ( entry _ id , xmodule _ instance _ args ) : DCNL &apos; Grade a course and push the results to an S3 bucket for download . &apos; 
def do _ vcs _ install ( manifest _ in , versionfile _ source , ipy ) : DCNL &apos; Git-specific installation logic for Versioneer . DCNL For Git , this means creating / changing .gitattributes to mark _ version.py DCNL for export-time keyword substitution . &apos; 
def getGeometryOutputByManipulation ( geometryOutput , xmlElement ) : DCNL &apos; Get geometryOutput manipulated by the plugins in the manipulation shapes &amp; solids folders . &apos; 
def get _ patch _ verts ( patch ) : DCNL &apos; Return a list of vertices for the path of a patch . &apos; 
def kegg _ find ( database , query , option = None ) : DCNL &apos; KEGG find - Data search . DCNL Finds entries with matching query keywords or other query data in DCNL a given database . DCNL db - database or organism ( string ) DCNL query - search terms ( string ) DCNL option - search option ( string ) , see below . DCNL For the compound and drug database , set option to the string \ &apos; formula \ &apos; , DCNL \ &apos; exact _ mass \ &apos; or \ &apos; mol _ weight \ &apos; to search on that field only . The DCNL chemical formula search is a partial match irrespective of the order DCNL of atoms given . The exact mass ( or molecular weight ) is checked by DCNL rounding off to the same decimal place as the query data . A range of DCNL values may also be specified with the minus ( - ) sign . &apos; 
def CheckInstalledVersion ( name , desired , explicit ) : DCNL &apos; Check that the installed version of a package is acceptable . DCNL Args : DCNL name : Name of package . DCNL desired : Desired version string . DCNL explicit : Explicitly requested by the user or implicitly because of a DCNL dependency . DCNL Raises : DCNL UnacceptableVersionError if the installed version of a package is DCNL unacceptable . &apos; 
@ register.inclusion _ tag ( u &apos;admin / feincms / content _ type _ selection _ widget.html &apos; , takes _ context = True ) DCNL def show _ content _ type _ selection _ widget ( context , region ) : DCNL &apos; { % show _ content _ type _ selection _ widget region % } &apos;
def restrict ( permission ) : DCNL &apos; Marks a decorated function as requiring ``permission`` . DCNL If the invoking user doesn \ &apos; t have one , : class : `SecurityError` is raised . &apos; 
def post ( ) : DCNL &apos; RESTful CRUD controller&apos;
def logsafe ( val ) : DCNL &apos; Coerce a potentially &quot; problematic &quot; value so it can be formatted DCNL in a Unicode log string . DCNL This works around a number of pitfalls when logging objects in DCNL Python 2 : DCNL - Logging path names , which must be byte strings , requires DCNL conversion for output . DCNL - Some objects , including some exceptions , will crash when you call DCNL `unicode ( v ) ` while `str ( v ) ` works fine . CalledProcessError is an DCNL example . &apos; 
def cleanRequestURL ( url ) : DCNL &apos; Clean a URL from a Request line . &apos; 
def test _ cc _ fit _ single _ class ( ) : DCNL &apos; Test either if an error when there is a single class&apos;
def _ cluster _ to _ basic _ summary ( cluster , now = None ) : DCNL &apos; Extract fields such as creation time , owner , etc. from the cluster , DCNL so we can safely reference them without using : py : func : `getattr` . DCNL : param cluster : a : py : class : `boto.emr.EmrObject` DCNL : param now : the current UTC time , as a : py : class : `datetime.datetime`. DCNL Defaults to the current time . DCNL Returns a dictionary with the following keys . These will be ``None`` if the DCNL corresponding field in the cluster is unavailable . DCNL * * created * : UTC `datetime.datetime` that the cluster was created , DCNL or ``None`` DCNL * * end * : UTC `datetime.datetime` that the cluster finished , or ``None`` DCNL * * id * : cluster ID , or ``None`` ( this should never happen ) DCNL * * label * : The label for the cluster ( usually the module name of the DCNL : py : class : ` ~ mrjob.job.MRJob` script that started it ) , or DCNL ``None`` for non- : py : mod : `mrjob` clusters . DCNL * * name * : cluster name , or ``None`` ( this should never happen ) DCNL * * nih * : number of normalized instance hours used by the cluster . DCNL * * num _ steps * : Number of steps in the cluster . DCNL * * owner * : The owner for the cluster ( usually the user that started it ) , DCNL or ``None`` for non- : py : mod : `mrjob` clusters . DCNL * * pool * : pool name ( e.g. `` \ &apos; default \ &apos; `` ) if the cluster is pooled , DCNL otherwise ``None`` . DCNL * * ran * : How long the cluster ran , or has been running , as a DCNL : py : class : `datetime.timedelta`. This will be ``timedelta ( 0 ) `` if DCNL the cluster hasn \ &apos; t started . DCNL * * ready * : UTC `datetime.datetime` that the cluster finished DCNL bootstrapping , or ``None`` DCNL * * state * : The cluster \ &apos; s state as a string ( e.g. `` \ &apos; RUNNING \ &apos; `` ) &apos;
def _ auc ( y _ true , y _ score ) : DCNL &apos; Alternative implementation to check for correctness of DCNL `roc _ auc _ score` . &apos; 
def is _ interactive ( ) : DCNL &apos; General API for a script specifying that it is being run in an DCNL interactive environment . Many libraries may wish to change their DCNL behavior based on being interactive ( e.g. disabling signal DCNL handlers on Ctrl-C ) . DCNL @ return : True if interactive flag has been set DCNL @ rtype : bool&apos;
def get _ dataset _ toy ( ) : DCNL &apos; The toy dataset is only meant to used for testing pipelines . DCNL Do not try to visualize weights on it . It is not picture and DCNL has no color channel info to support visualization&apos;
def _ create _ image _ html ( figure , area _ data , plot _ info ) : DCNL &apos; Given the figure and drilldown data , construct the HTML that will render the DCNL graph as a PNG image , and attach the image map to that image . DCNL figure : figure containing the drawn plot ( s ) DCNL area _ data : list of parameters for each area of the image map . See the DCNL definition of the template string \ &apos; _ AREA _ TEMPLATE \ &apos; DCNL plot _ info : a MetricsPlot or QualHistogram&apos;
def save _ gamestate _ to _ sgf ( gamestate , path , filename , black _ player _ name = &apos; Unknown &apos; , white _ player _ name = &apos; Unknown &apos; , size = 19 , komi = 7.5 ) : DCNL &apos; Creates a simplified sgf for viewing playouts or positions&apos;
@ must _ have _ permission ( ADMIN ) DCNL @ must _ be _ valid _ project DCNL def new _ draft _ registration ( auth , node , * args , * * kwargs ) : DCNL &apos; Create a new draft registration for the node DCNL : return : Redirect to the new draft \ &apos; s edit page DCNL : rtype : flask.redirect DCNL : raises : HTTPError&apos;
def tree _ item _ iterator ( items , ancestors = False ) : DCNL &apos; Given a list of tree items , iterates over the list , generating DCNL two-tuples of the current tree item and a ``dict`` containing DCNL information about the tree structure around the item , with the DCNL following keys : DCNL `` \ &apos; new _ level \ &apos; `` DCNL ``True`` if the current item is the start of a new level in DCNL the tree , ``False`` otherwise . DCNL `` \ &apos; closed _ levels \ &apos; `` DCNL A list of levels which end after the current item . This will DCNL be an empty list if the next item is at the same level as the DCNL current item . DCNL If ``ancestors`` is ``True`` , the following key will also be DCNL available : DCNL `` \ &apos; ancestors \ &apos; `` DCNL A list of unicode representations of the ancestors of the DCNL current node , in descending order ( root node first , immediate DCNL parent last ) . DCNL For example : given the sample tree below , the contents of the DCNL list which would be available under the `` \ &apos; ancestors \ &apos; `` key DCNL are given on the right : : DCNL Books - &gt; &#91; &#93; DCNL Sci-fi - &gt; &#91; u \ &apos; Books \ &apos; &#93; DCNL Dystopian Futures - &gt; &#91; u \ &apos; Books \ &apos; , u \ &apos; Sci-fi \ &apos; &#93; &apos;
def ensure _ treasury _ data ( bm _ symbol , first _ date , last _ date , now ) : DCNL &apos; Ensure we have treasury data from treasury module associated with DCNL `bm _ symbol` . DCNL Parameters DCNL bm _ symbol : str DCNL Benchmark symbol for which we \ &apos; re loading associated treasury curves . DCNL first _ date : pd.Timestamp DCNL First date required to be in the cache . DCNL last _ date : pd.Timestamp DCNL Last date required to be in the cache . DCNL now : pd.Timestamp DCNL The current time . This is used to prevent repeated attempts to DCNL re-download data that isn \ &apos; t available due to scheduling quirks or other DCNL failures . DCNL We attempt to download data unless we already have data stored in the cache DCNL for `module _ name` whose first entry is before or on `first _ date` and whose DCNL last entry is on or after `last _ date` . DCNL If we perform a download and the cache criteria are not satisfied , we wait DCNL at least one hour before attempting a redownload . This is determined by DCNL comparing the current time to the result of os.path.getmtime on the cache DCNL path . &apos; 
def _ make _ compatible _ taxa _ summaries ( ts1 , ts2 , sample _ id _ map = None ) : DCNL &apos; Returns two taxa summaries that are ready for direct comparison . DCNL The returned taxa summaries will have their samples ordered such that DCNL direct comparisons may be made between each of the corresponding samples in DCNL the two summaries . For example , if ts1 has samples \ &apos; S1 \ &apos; and \ &apos; S2 \ &apos; and ts2 DCNL has samples \ &apos; S2 \ &apos; and \ &apos; S3 \ &apos; ( and no sample ID map is provided ) , the resulting DCNL taxa summaries will only have the sample \ &apos; S2 \ &apos; . DCNL As another example , assume ts1 has samples \ &apos; S1 \ &apos; and \ &apos; S2 \ &apos; and ts2 has DCNL samples \ &apos; T1 \ &apos; and \ &apos; T2 \ &apos; . A sample ID map may be provided that maps \ &apos; S1 \ &apos; to DCNL \ &apos; T1 \ &apos; and \ &apos; S2 \ &apos; to \ &apos; T2 \ &apos; . The first resulting compatible taxa summary DCNL will have the samples \ &apos; S1 \ &apos; and \ &apos; S2 \ &apos; and the second resulting compatible DCNL taxa summary will have samples \ &apos; T1 \ &apos; and \ &apos; T2 \ &apos; . Thus , these resulting taxa DCNL summaries can be directly compared because each sample lines up to the one DCNL it needs to be compared to . DCNL The input taxa summaries do not need to be already sorted and filled , but DCNL it is okay if they are . The taxonomic information is not altered by this DCNL function , only the order and presence / absence of samples ( i.e. columns in DCNL the table ) . It is a good idea to sort and filter the taxa summaries ( either DCNL before or after ) before computing the correlation coefficients between DCNL samples . DCNL Arguments : DCNL ts1 - the first taxa summary DCNL ts2 - the second taxa summary DCNL sample _ id _ map - a dictionary describing which samples in the first taxa DCNL summary should be compared to which samples in the second taxa DCNL summary . If not provided , only samples whose sample IDs directly DCNL match will be compared&apos;
def setSliceElementZ ( decimalPlacesCarried , sliceElement , sliceElementIndex , z ) : DCNL &apos; Set the slice element z . &apos; 
def format _ decimal ( number , format = None , locale = LC _ NUMERIC ) : DCNL &apos; Return the given decimal number formatted for a specific locale . DCNL &gt; &gt; &gt; format _ decimal ( 1.2345 , locale = \ &apos; en _ US \ &apos; ) DCNL u \ &apos; 1.234 \ &apos; DCNL &gt; &gt; &gt; format _ decimal ( 1.2346 , locale = \ &apos; en _ US \ &apos; ) DCNL u \ &apos; 1.235 \ &apos; DCNL &gt; &gt; &gt; format _ decimal ( -1.2346 , locale = \ &apos; en _ US \ &apos; ) DCNL u \ &apos; -1.235 \ &apos; DCNL &gt; &gt; &gt; format _ decimal ( 1.2345 , locale = \ &apos; sv _ SE \ &apos; ) DCNL u \ &apos; 1,234 \ &apos; DCNL &gt; &gt; &gt; format _ decimal ( 12345 , locale = \ &apos; de \ &apos; ) DCNL u \ &apos; 12.345 \ &apos; DCNL The appropriate thousands grouping and the decimal separator are used for DCNL each locale : DCNL &gt; &gt; &gt; format _ decimal ( 12345.5 , locale = \ &apos; en _ US \ &apos; ) DCNL u \ &apos; 12,345.5 \ &apos; DCNL : param number : the number to format DCNL : param format : DCNL : param locale : the `Locale` object or locale identifier DCNL : return : the formatted decimal number DCNL : rtype : `unicode`&apos;
def _ count1Bits ( num ) : DCNL &apos; Find the highest bit set to 1 in an integer . &apos; 
def compute _ node _ utilization _ set ( context , host , free _ ram _ mb = None , free _ disk _ gb = None , work = None , vms = None ) : DCNL &apos; Like compute _ node _ utilization _ update ( ) modify a specific host DCNL entry . But this function will set the metrics absolutely DCNL ( vs. a delta update )  . &apos; 
def _ set _ contour _ locator ( vmin , vmax , contours ) : DCNL &apos; Function for setting correct contour levels . &apos; 
def get _ instance _ type _ access _ by _ flavor _ id ( flavorid , ctxt = None ) : DCNL &apos; Retrieve instance type access list by flavor id . &apos; 
def holdReject ( ) : DCNL &apos; HOLD REJECT Section 9.3.12&apos;
def customize _ config _ vars ( _ config _ vars ) : DCNL &apos; Customize Python build configuration variables . DCNL Called internally from sysconfig with a mutable mapping DCNL containing name / value pairs parsed from the configured DCNL makefile used to build this interpreter . Returns DCNL the mapping updated as needed to reflect the environment DCNL in which the interpreter is running ; in the case of DCNL a Python from a binary installer , the installed DCNL environment may be very different from the build DCNL environment , i.e. different OS levels , different DCNL built tools , different available CPU architectures . DCNL This customization is performed whenever DCNL distutils.sysconfig.get _ config _ vars ( ) is first DCNL called . It may be used in environments where no DCNL compilers are present , i.e. when installing pure DCNL Python dists . Customization of compiler paths DCNL and detection of unavailable archs is deferred DCNL until the first extension module build is DCNL requested ( in distutils.sysconfig.customize _ compiler ) . DCNL Currently called from distutils.sysconfig&apos;
def test _ tanimoto _ distances ( ) : DCNL &apos; Check that the pairwise Tanimoto distances computation&apos;
def rmtree ( path ) : DCNL &apos; Remove the given recursively . DCNL : note : we use shutil rmtree but adjust its behaviour to see whether files that DCNL couldn \ &apos; t be deleted are read-only . Windows will not remove them in that case&apos;
def cc _ benchmark ( name , deps = &#91; &#93; , * * kwargs ) : DCNL &apos; cc _ benchmark target . &apos; 
def getcfs ( key , filename , filter = None ) : DCNL &apos; Caches the * filtered * file `filename` with `key` until the file is DCNL modified . DCNL Args : DCNL key ( str ) : the cache key DCNL filename : the file to cache DCNL filter : is the function used for filtering . Normally `filename` is a DCNL .py file and `filter` is a function that bytecode compiles the file . DCNL In this way the bytecode compiled file is cached . ( Default = None ) DCNL This is used on Google App Engine since pyc files cannot be saved . &apos; 
def read _ dot ( path ) : DCNL &apos; Return a NetworkX graph from a dot file on path . DCNL Parameters DCNL path : file or string DCNL File name or file handle to read . &apos; 
def EvalBinomialPmf ( k , n , p ) : DCNL &apos; Evaluates the binomial PMF . DCNL Returns the probabily of k successes in n trials with probability p . &apos; 
def dict _ to _ str ( args , sep = u &apos; &amp; &apos; ) : DCNL &apos; Converts a dictionary to URL&apos;
def unbare _ repo ( func ) : DCNL &apos; Methods with this decorator raise InvalidGitRepositoryError if they DCNL encounter a bare repository&apos;
def calc _ dihedral ( v1 , v2 , v3 , v4 ) : DCNL &apos; Calculate the dihedral angle between 4 vectors DCNL representing 4 connected points . The angle is in DCNL &#93; -pi , pi &#93; . DCNL @ param v1 , v2 , v3 , v4 : the four points that define the dihedral angle DCNL @ type v1 , v2 , v3 , v4 : L { Vector } &apos;
def _ _ virtual _ _ ( ) : DCNL &apos; By default , this will be available on all platforms ; but not all distros DCNL will necessarily be supported&apos;
def search _ by _ name ( service , name , * * kwargs ) : DCNL &apos; Search for the entity by its name . Nested entities don \ &apos; t support search DCNL via REST , so in case using search for nested entity we return all entities DCNL and filter them by name . DCNL : param service : service of the entity DCNL : param name : name of the entity DCNL : return : Entity object returned by Python SDK&apos;
def blank _ lines ( logical _ line , blank _ lines , indent _ level , line _ number , previous _ logical , previous _ indent _ level ) : DCNL &apos; Separate top-level function and class definitions with two blank lines . DCNL Method definitions inside a class are separated by a single blank line . DCNL Extra blank lines may be used ( sparingly ) to separate groups of related DCNL functions . Blank lines may be omitted between a bunch of related DCNL one-liners ( e.g. a set of dummy implementations ) . DCNL Use blank lines in functions , sparingly , to indicate logical sections . DCNL Okay : def a ( ) : \ n pass \ n \ n \ ndef b ( ) : \ n pass DCNL Okay : def a ( ) : \ n pass \ n \ n \ n # Foo \ n # Bar \ n \ ndef b ( ) : \ n pass DCNL E301 : class Foo : \ n b = 0 \ n def bar ( ) : \ n pass DCNL E302 : def a ( ) : \ n pass \ n \ ndef b ( n ) : \ n pass DCNL E303 : def a ( ) : \ n pass \ n \ n \ n \ ndef b ( n ) : \ n pass DCNL E303 : def a ( ) : \ n \ n \ n \ n pass DCNL E304 : @ decorator \ n \ ndef a ( ) : \ n pass&apos;
def _ deferGenerator ( g , deferred ) : DCNL &apos; See L { deferredGenerator }  . &apos; 
@ gen.coroutine DCNL def QueryViewpoints ( client , obj _ store , user _ id , device _ id , request ) : DCNL &apos; Queries viewpoint metadata , as well as associated followers and episodes . &apos; 
def service _ mapping ( services , registry _ path = DEFAULT _ REGISTRY _ PATH ) : DCNL &apos; Create a services mapping for use with webapp . DCNL Creates basic default configuration and registration for ProtoRPC services . DCNL Each service listed in the service mapping has a standard service handler DCNL factory created for it . DCNL The list of mappings can either be an explicit path to service mapping or DCNL just services . If mappings are just services , they will automatically DCNL be mapped to their default name . For exampel : DCNL package = \ &apos; my _ package \ &apos; DCNL class MyService ( remote.Service ) : DCNL server _ mapping ( &#91; ( \ &apos; / my _ path \ &apos; , MyService ) , # Maps to / my _ path DCNL MyService , # Maps to / my _ package / MyService DCNL Specifying a service mapping : DCNL Normally services are mapped to URL paths by specifying a tuple DCNL ( path , service ) : DCNL path : The path the service resides on . DCNL service : The service class or service factory for creating new instances DCNL of the service . For more information about service factories , please DCNL see remote.Service.new _ factory . DCNL If no tuple is provided , and therefore no path specified , a default path DCNL is calculated by using the fully qualified service name using a URL path DCNL separator for each of its components instead of a \ &apos; . \ &apos; . DCNL Args : DCNL services : Can be service type , service factory or string definition name of DCNL service being mapped or list of tuples ( path , service ) : DCNL path : Path on server to map service to . DCNL service : Service type , service factory or string definition name of DCNL service being mapped . DCNL Can also be a dict . If so , the keys are treated as the path and values as DCNL the service . DCNL registry _ path : Path to give to registry service . Use None to disable DCNL registry service . DCNL Returns : DCNL List of tuples defining a mapping of request handlers compatible with a DCNL webapp application . DCNL Raises : DCNL ServiceConfigurationError when duplicate paths are provided . &apos; 
@ register.filter ( name = &apos; user _ which _ groups &apos; ) DCNL def user _ which _ group ( user , member ) : DCNL &apos; instance is a user object , DCNL use to get the group of the user DCNL : param instance : DCNL : param member : DCNL : return : &apos;
def failure _ code ( sub ) : DCNL &apos; Code contained in sub &#91; \ &apos; fail \ &apos; &#93; , usually substituted for % ( fail ) s . DCNL It sets information about current error , then goto the code DCNL actually handling the failure , which is defined in struct _ gen ( )  . &apos; 
def generate _ change ( branch , old _ revno = None , old _ revid = None , new _ revno = None , new _ revid = None , blame _ merge _ author = False ) : DCNL &apos; Return a dict of information about a change to the branch . DCNL Dict has keys of &quot; files &quot; , &quot; who &quot; , &quot; comments &quot; , and &quot; revision &quot; , as used by DCNL the buildbot Change ( and the PBChangeSource ) . DCNL If only the branch is given , the most recent change is returned . DCNL If only the new _ revno is given , the comparison is expected to be between DCNL it and the previous revno ( new _ revno -1 ) in the branch . DCNL Passing old _ revid and new _ revid is only an optimization , included because DCNL bzr hooks usually provide this information . DCNL blame _ merge _ author means that the author of the merged branch is DCNL identified as the &quot; who &quot; , not the person who committed the branch itself . DCNL This is typically used for PQM . &apos; 
def _ simplify _ variable _ coeff ( sol , syms , func , funcarg ) : DCNL &apos; Helper function to replace constants by functions in 1st _ linear _ variable _ coeff&apos;
def ex ( e ) : DCNL &apos; Returns a unicode string from the exception text if it exists . &apos; 
def _ compile _ from _ parse _ tree ( root _ node , * a , * * kw ) : DCNL &apos; Compile grammar ( given as parse tree ) , returning a `CompiledGrammar` DCNL instance . &apos; 
def deb _ packages ( attrs = None , where = None ) : DCNL &apos; Return deb _ packages information from osquery DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; osquery.deb _ packages&apos;
def setvcpus ( vm _ , vcpus , config = False ) : DCNL &apos; Changes the amount of vcpus allocated to VM . The VM must be shutdown DCNL for this to work . DCNL vcpus is an int representing the number to be assigned DCNL If config is True then we ask libvirt to modify the config as well DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; virt.setvcpus &lt; domain &gt; &lt; amount &gt; DCNL salt \ &apos; * \ &apos; virt.setvcpus my _ domain 4&apos;
def cmd ( name , fun = None , arg = ( ) , * * kwargs ) : DCNL &apos; Execute a runner async : DCNL USAGE : DCNL .. code-block : : yaml DCNL run _ cloud : DCNL runner.cmd : DCNL - fun : cloud.create DCNL - arg : DCNL - my-ec2-config DCNL - myinstance DCNL run _ cloud : DCNL runner.cmd : DCNL - fun : cloud.create DCNL - kwargs : DCNL provider : my-ec2-config DCNL instances : myinstance&apos;
def pluralize ( word , pos = NOUN , custom = { } , classical = True ) : DCNL &apos; Returns the plural of a given word , e.g. , child = &gt; children . DCNL Handles nouns and adjectives , using classical inflection by default DCNL ( i.e. , where &quot; matrix &quot; pluralizes to &quot; matrices &quot; and not &quot; matrixes &quot; ) . DCNL The custom dictionary is for user-defined replacements . &apos; 
def descrFromDoc ( obj ) : DCNL &apos; Generate an appropriate description from docstring of the given object&apos;
def _ parse _ circ _ entry ( entry ) : DCNL &apos; Parses a single relay \ &apos; s \ &apos; LongName \ &apos; or \ &apos; ServerID \ &apos; . See the DCNL : func : ` ~ stem.control. _ parse _ circ _ path` function for more information . DCNL : param str entry : relay information to be parsed DCNL : returns : * * ( fingerprint , nickname ) * * tuple DCNL : raises : : class : `stem.ProtocolError` if the entry is malformed&apos;
def get _ interface ( iface ) : DCNL &apos; Return the contents of an interface script DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; ip.get _ interface eth0&apos;
def test _ diagonal _ gaussian _ conditional _ expectation ( ) : DCNL &apos; DiagonalGaussian.conditional _ expectation doesn \ &apos; t crash&apos;
def libvlc _ media _ set _ user _ data ( p _ md , p _ new _ user _ data ) : DCNL &apos; Sets media descriptor \ &apos; s user _ data. user _ data is specialized data DCNL accessed by the host application , VLC.framework uses it as a pointer to DCNL an native object that references a L { Media } pointer . DCNL @ param p _ md : media descriptor object . DCNL @ param p _ new _ user _ data : pointer to user data . &apos; 
@ requires _ pyopengl ( ) DCNL def test _ import _ vispy _ pyopengl ( ) : DCNL &apos; Importing vispy.gloo.gl.pyopengl2 should import PyOpenGL . &apos; 
def ComputeErrorRate ( error _ count , truth _ count ) : DCNL &apos; Returns a sanitized percent error rate from the raw counts . DCNL Prevents div by 0 and clips return to 100 % . DCNL Args : DCNL error _ count : Number of errors . DCNL truth _ count : Number to divide by . DCNL Returns : DCNL 100.0 * error _ count / truth _ count clipped to 100 . &apos; 
def save _ translations ( key ) : DCNL &apos; For a given key , save all the translations . The key is used to ensure that DCNL we only save the translations for the given object ( and not all of them ) . DCNL Once saved , they will be deleted . &apos; 
def find _ program _ variables ( code ) : DCNL &apos; Return a dict describing program variables : : DCNL { \ &apos; var _ name \ &apos; : ( \ &apos; uniform &#124; attribute &#124; varying \ &apos; , type ) , ... } &apos;
@ not _ implemented _ for ( &apos; directed &apos; ) DCNL def biconnected _ component _ edges ( G ) : DCNL &apos; Return a generator of lists of edges , one list for each biconnected DCNL component of the input graph . DCNL Biconnected components are maximal subgraphs such that the removal of a DCNL node ( and all edges incident on that node ) will not disconnect the DCNL subgraph . Note that nodes may be part of more than one biconnected DCNL component . Those nodes are articulation points , or cut vertices . DCNL However , each edge belongs to one , and only one , biconnected component . DCNL Notice that by convention a dyad is considered a biconnected component . DCNL Parameters DCNL G : NetworkX Graph DCNL An undirected graph . DCNL Returns DCNL edges : generator of lists DCNL Generator of lists of edges , one list for each bicomponent . DCNL Raises DCNL NetworkXNotImplemented : DCNL If the input graph is not undirected . DCNL Examples DCNL &gt; &gt; &gt; G = nx.barbell _ graph ( 4 , 2 ) DCNL &gt; &gt; &gt; print ( nx.is _ biconnected ( G ) ) DCNL False DCNL &gt; &gt; &gt; bicomponents _ edges = list ( nx.biconnected _ component _ edges ( G ) ) DCNL &gt; &gt; &gt; len ( bicomponents _ edges ) DCNL 5 DCNL &gt; &gt; &gt; G.add _ edge ( 2 , 8 ) DCNL &gt; &gt; &gt; print ( nx.is _ biconnected ( G ) ) DCNL True DCNL &gt; &gt; &gt; bicomponents _ edges = list ( nx.biconnected _ component _ edges ( G ) ) DCNL &gt; &gt; &gt; len ( bicomponents _ edges ) DCNL 1 DCNL See Also DCNL is _ biconnected , DCNL biconnected _ components , DCNL articulation _ points , DCNL biconnected _ component _ subgraphs DCNL Notes DCNL The algorithm to find articulation points and biconnected DCNL components is implemented using a non-recursive depth-first-search DCNL ( DFS ) that keeps track of the highest level that back edges reach DCNL in the DFS tree . A node `n` is an articulation point if , and only DCNL if , there exists a subtree rooted at `n` such that there is no DCNL back edge from any successor of `n` that links to a predecessor of DCNL `n` in the DFS tree . By keeping track of all the edges traversed DCNL by the DFS we can obtain the biconnected components because all DCNL edges of a bicomponent will be traversed consecutively between DCNL articulation points . DCNL References DCNL .. &#91; 1 &#93; Hopcroft , J. ; Tarjan , R. ( 1973 ) . DCNL &quot; Efficient algorithms for graph manipulation &quot; . DCNL Communications of the ACM 16 : 372 – 378. doi : 10.1145 / 362248.362272&apos;
def yule _ walker ( X , order = 1 , method = &apos; unbiased &apos; , df = None , inv = False , demean = True ) : DCNL &apos; Estimate AR ( p ) parameters from a sequence X using Yule-Walker equation . DCNL Unbiased or maximum-likelihood estimator ( mle ) DCNL See , for example : DCNL http : / / en.wikipedia.org / wiki / Autoregressive _ moving _ average _ model DCNL Parameters DCNL X : array-like DCNL 1d array DCNL order : integer , optional DCNL The order of the autoregressive process . Default is 1 . DCNL method : string , optional DCNL Method can be &quot; unbiased &quot; or &quot; mle &quot; and this determines denominator in DCNL estimate of autocorrelation function ( ACF ) at lag k . If &quot; mle &quot; , the DCNL denominator is n = X.shape &#91; 0 &#93; , if &quot; unbiased &quot; the denominator is n-k . DCNL The default is unbiased . DCNL df : integer , optional DCNL Specifies the degrees of freedom . If `df` is supplied , then it is assumed DCNL the X has `df` degrees of freedom rather than `n` . Default is None . DCNL inv : bool DCNL If inv is True the inverse of R is also returned . Default is False . DCNL demean : bool DCNL True , the mean is subtracted from `X` before estimation . DCNL Returns DCNL rho DCNL The autoregressive coefficients DCNL sigma DCNL TODO DCNL Examples DCNL &gt; &gt; &gt; import statsmodels.api as sm DCNL &gt; &gt; &gt; from statsmodels.datasets.sunspots import load DCNL &gt; &gt; &gt; data = load ( ) DCNL &gt; &gt; &gt; rho , sigma = sm.regression.yule _ walker ( data.endog , DCNL order = 4 , method = &quot; mle &quot; ) DCNL &gt; &gt; &gt; rho DCNL array ( &#91; 1.28310031 , -0.45240924 , -0.20770299 , 0.04794365 &#93; ) DCNL &gt; &gt; &gt; sigma DCNL 16.808022730464351&apos;
def set _ logging ( log _ level , myfilename = None ) : DCNL &apos; This function sets the threshold for the logging system and , if desired , DCNL directs the messages to a logfile . Level options : DCNL \ &apos; DEBUG \ &apos; or 1 DCNL \ &apos; INFO \ &apos; or 2 DCNL \ &apos; WARNING \ &apos; or 3 DCNL \ &apos; ERROR \ &apos; or 4 DCNL \ &apos; CRITICAL \ &apos; or 5 DCNL If the user is on the interactive shell and wants to log to file , a custom DCNL excepthook is set . By default , if logging to file is not enabled , the way DCNL errors are displayed on the interactive shell is not changed . &apos; 
def class _ result ( classname ) : DCNL &apos; Errcheck function . Returns a function that creates the specified class . &apos; 
def create _ private _ key ( path = None , text = False , bits = 2048 , passphrase = None , cipher = &apos; aes _ 128 _ cbc &apos; , verbose = True ) : DCNL &apos; Creates a private key in PEM format . DCNL path : DCNL The path to write the file to , either ``path`` or ``text`` DCNL are required . DCNL text : DCNL If ``True`` , return the PEM text without writing to a file . DCNL Default ``False`` . DCNL bits : DCNL Length of the private key in bits . Default 2048 DCNL passphrase : DCNL Passphrase for encryting the private key DCNL cipher : DCNL Cipher for encrypting the private key . Has no effect if passhprase is None . DCNL verbose : DCNL Provide visual feedback on stdout . Default True DCNL .. versionadded : : 2016.11.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; x509.create _ private _ key path = / etc / pki / mykey.key&apos;
def tokenize ( * args , * * kwargs ) : DCNL &apos; Deterministic token DCNL &gt; &gt; &gt; tokenize ( &#91; 1 , 2 , \ &apos; 3 \ &apos; &#93; ) DCNL \ &apos; 7d6a880cd9ec03506eee6973ff551339 \ &apos; DCNL &gt; &gt; &gt; tokenize ( \ &apos; Hello \ &apos; ) = = tokenize ( \ &apos; Hello \ &apos; ) DCNL True&apos;
def compute _ node _ get ( context , compute _ id ) : DCNL &apos; Get a computeNode . &apos; 
def _ makeGetterFactory ( url , factoryFactory , contextFactory = None , * args , * * kwargs ) : DCNL &apos; Create and connect an HTTP page getting factory . DCNL Any additional positional or keyword arguments are used when calling DCNL C { factoryFactory } . DCNL @ param factoryFactory : Factory factory that is called with C { url } , C { args } DCNL and C { kwargs } to produce the getter DCNL @ param contextFactory : Context factory to use when creating a secure DCNL connection , defaulting to L { None } DCNL @ return : The factory created by C { factoryFactory } &apos;
def import _ site _ function ( path , module , funcname , dummy , modulefile = None ) : DCNL &apos; Try to import site specific function from site specific file if it exists DCNL Args : DCNL path : full filename of the source file calling this ( ie _ _ file _ _ ) DCNL module : full module name DCNL funcname : function name to be imported from site file DCNL dummy : dummy function to return in case there is no function to import DCNL modulefile : module filename DCNL Returns : site specific function object or dummy DCNL Raises : ImportError if the site file exists but imports fails&apos;
def get _ route ( ip ) : DCNL &apos; Return routing information for given destination ip DCNL .. versionadded : : 2015.5.3 DCNL .. versionchanged : : 2015.8.0 DCNL Added support for SunOS ( Solaris 10 , Illumos , SmartOS ) DCNL Added support for OpenBSD DCNL CLI Example : : DCNL salt \ &apos; * \ &apos; network.get _ route 10.10.10.10&apos;
def mkstemp ( suffix = None , prefix = None , dir = None , text = False ) : DCNL &apos; User-callable function to create and return a unique temporary DCNL file . The return value is a pair ( fd , name ) where fd is the DCNL file descriptor returned by os.open , and name is the filename . DCNL If \ &apos; suffix \ &apos; is not None , the file name will end with that suffix , DCNL otherwise there will be no suffix . DCNL If \ &apos; prefix \ &apos; is not None , the file name will begin with that prefix , DCNL otherwise a default prefix is used . DCNL If \ &apos; dir \ &apos; is not None , the file will be created in that directory , DCNL otherwise a default directory is used . DCNL If \ &apos; text \ &apos; is specified and true , the file is opened in text DCNL mode . Else ( the default ) the file is opened in binary mode . On DCNL some operating systems , this makes no difference . DCNL If any of \ &apos; suffix \ &apos; , \ &apos; prefix \ &apos; and \ &apos; dir \ &apos; are not None , they must be the DCNL same type . If they are bytes , the returned name will be bytes ; str DCNL otherwise . DCNL The file is readable and writable only by the creating user ID . DCNL If the operating system uses permission bits to indicate whether a DCNL file is executable , the file is executable by no one . The file DCNL descriptor is not inherited by children of this process . DCNL Caller is responsible for deleting the file when done with it . &apos; 
def define _ rate ( name , description , unit _ seconds = 1 , manager = counters ) : DCNL &apos; Creates a performance counter which tracks some rate at which a value accumulates DCNL over the course of the program . The counter has an optional \ &apos; unit _ seconds \ &apos; parameter DCNL which determines the time unit associated with the value - the default is one second . DCNL The counter can be incremented using one of several increment methods : DCNL # Define a new rate counter in the module . DCNL rate _ counter = counters.rate ( \ &apos; module.counters.rate \ &apos; , \ &apos; Accumulation per minute \ &apos; , unit _ seconds = 60 ) DCNL rate _ counter.increment ( ) # Increment by 1 DCNL rate _ counter.increment ( 20 ) DCNL rate _ counter.decrement ( ) # Decrement by 1 DCNL rate _ counter.decrement ( 20 ) DCNL When sampled using a Meter , this counter returns the average rate of change in the underlying value DCNL per the given unit of time , taken over the time span since the previous sample of the Meter . &apos; 
def mail _ new _ user ( user ) : DCNL &apos; Send an e-mail to administrators for newly registered users . DCNL Args : DCNL user ( django.contrib.auth.models.User ) : DCNL The user to send an e-mail about . &apos; 
def review _ request _ closed _ cb ( sender , user , review _ request , type , * * kwargs ) : DCNL &apos; Send e-mail when a review request is closed . DCNL Listens to the DCNL : py : data : ` ~ reviewboard.reviews.signals.review _ request _ closed` signal and DCNL sends an e-mail if this type of notification is enabled ( through the DCNL ``mail _ send _ review _ close _ mail`` site configuration setting )  . &apos; 
def load _ list _ of _ roles ( ds , play , current _ role _ path = None , variable _ manager = None , loader = None ) : DCNL &apos; Loads and returns a list of RoleInclude objects from the datastructure DCNL list of role definitions&apos;
def test _ seed _ diff ( ) : DCNL &apos; Verifies that two MNDs initialized with different DCNL seeds produce samples that differ at least somewhat DCNL ( theoretically the samples could match even under DCNL valid behavior but this is extremely unlikely ) &apos;
def find _ gwt _ dir ( ) : DCNL &apos; See if GWT is installed in site-packages or in the system , DCNL site-packages is favored over a system install . &apos; 
def filter _ sff _ file ( flowgrams , header , filter _ list , out _ fh ) : DCNL &apos; Filters all flowgrams in handle with filter . DCNL flowgrams : a list of flowgrams ( or something similar ) DCNL header : the header for the flowgrams DCNL filter _ list : list of filters to be applied on sff.txt file DCNL out _ fh : output file handle DCNL returns : number of flowgrams in filtered out file&apos;
def _ get _ resource _ id ( resource , name , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Get an AWS id for a VPC resource by type and name . &apos; 
def apply _ policy ( policy , r , name , sub ) : DCNL &apos; Apply the list of policies to name.r , sub DCNL Parameters DCNL policy DCNL List of functions that map a L { Variable } to a string , DCNL or a single such function . DCNL r : L { Variable } DCNL Returns DCNL object DCNL C { policy &#91; 0 &#93; ( r ) + policy &#91; 1 &#93; ( r ) + ... }  . &apos; 
def FastaM10Iterator ( handle , alphabet = single _ letter _ alphabet ) : DCNL &apos; Alignment iterator for the FASTA tool \ &apos; s pairwise alignment output . DCNL This is for reading the pairwise alignments output by Bill Pearson \ &apos; s DCNL FASTA program when called with the -m 10 command line option for machine DCNL readable output . For more details about the FASTA tools , see the website DCNL http : / / fasta.bioch.virginia.edu / and the paper : DCNL W.R. Pearson &amp; D.J. Lipman PNAS ( 1988 ) 85 : 2444-2448 DCNL This class is intended to be used via the Bio.AlignIO.parse ( ) function DCNL by specifying the format as &quot; fasta-m10 &quot; as shown in the following code : : DCNL from Bio import AlignIO DCNL handle = ... DCNL for a in AlignIO.parse ( handle , &quot; fasta-m10 &quot; ) : DCNL assert len ( a ) = = 2 , &quot; Should be pairwise ! &quot; DCNL print ( &quot; Alignment length % i &quot; % a.get _ alignment _ length ( ) ) DCNL for record in a : DCNL print ( &quot; % s % s % s &quot; % ( record.seq , record.name , record.id ) ) DCNL Note that this is not a full blown parser for all the information DCNL in the FASTA output - for example , most of the header and all of the DCNL footer is ignored . Also , the alignments are not batched according to DCNL the input queries . DCNL Also note that there can be up to about 30 letters of flanking region DCNL included in the raw FASTA output as contextual information . This is NOT DCNL part of the alignment itself , and is not included in the resulting DCNL MultipleSeqAlignment objects returned . &apos; 
def determine _ format ( request , serializer , default _ format = u &apos;application / json &apos; ) : DCNL &apos; Tries to &quot; smartly &quot; determine which output format is desired . DCNL First attempts to find a ``format`` override from the request and supplies DCNL that if found . DCNL If no request format was demanded , it falls back to ``mimeparse`` and the DCNL ``Accepts`` header , allowing specification that way . DCNL If still no format is found , returns the ``default _ format`` ( which defaults DCNL to ``application / json`` if not provided ) . DCNL NOTE : callers * must * be prepared to handle BadRequest exceptions due to DCNL malformed HTTP request headers ! &apos;
def _ indent ( s , indent = 4 ) : DCNL &apos; Add the given number of space characters to the beginning of DCNL every non-blank line in `s` , and return the result . DCNL If the string `s` is Unicode , it is encoded using the stdout DCNL encoding and the `backslashreplace` error handler . &apos; 
def _ StrictParseLogEntry ( entry , clean _ message = True ) : DCNL &apos; Parses a single log entry emitted by app _ logging.AppLogsHandler. DCNL Parses a log entry of the form LOG &lt; level &gt; &lt; timestamp &gt; &lt; message &gt; where the DCNL level is in the range &#91; 0 , 4 &#93; . If the entry is not of that form , ValueError is DCNL raised . DCNL Args : DCNL entry : The log entry to parse . DCNL clean _ message : should the message be cleaned ( i.e. - &gt; DCNL Returns : DCNL A ( timestamp , level , message , source _ location ) tuple , where source _ location DCNL is None . DCNL Raises : DCNL ValueError : if the entry failed to be parsed . &apos; 
def remove _ arrays ( code , count = 1 ) : DCNL &apos; removes arrays and replaces them with ARRAY _ LVALS DCNL returns new code and replacement dict DCNL * NOTE * has to be called AFTER remove objects&apos;
def _ toCSSname ( DOMname ) : DCNL &apos; Return CSSname for given DOMname e.g. for DOMname \ &apos; fontStyle \ &apos; returns DCNL \ &apos; font-style \ &apos;  . &apos; 
def plot _ decision ( features , labels ) : DCNL &apos; Plots decision boundary for KNN DCNL Parameters DCNL features : ndarray DCNL labels : sequence DCNL Returns DCNL fig : Matplotlib Figure DCNL ax : Matplotlib Axes&apos;
def run ( * commands , * * kwargs ) : DCNL &apos; Run one or more commands DCNL If more than one command is given , then this is equivalent to DCNL chaining them together with `` &amp; &amp; `` ; if all commands succeed , then DCNL `` ( status , out , err ) `` will represent the last successful command . DCNL If one command failed , then `` ( status , out , err ) `` will represent DCNL the failed command . DCNL : returns : `` ( status , out , err ) ``&apos;
def _ FormatFirstToken ( first _ token , indent _ depth , prev _ uwline , final _ lines ) : DCNL &apos; Format the first token in the unwrapped line . DCNL Add a newline and the required indent before the first token of the unwrapped DCNL line . DCNL Arguments : DCNL first _ token : ( format _ token.FormatToken ) The first token in the unwrapped DCNL line . DCNL indent _ depth : ( int ) The line \ &apos; s indentation depth . DCNL prev _ uwline : ( list of unwrapped _ line.UnwrappedLine ) The unwrapped line DCNL previous to this line . DCNL final _ lines : ( list of unwrapped _ line.UnwrappedLine ) The unwrapped lines DCNL that have already been processed . &apos; 
def fragment6 ( pkt , fragSize ) : DCNL &apos; Performs fragmentation of an IPv6 packet . Provided packet ( \ &apos; pkt \ &apos; ) must already DCNL contain an IPv6ExtHdrFragment ( ) class . \ &apos; fragSize \ &apos; argument is the expected DCNL maximum size of fragments ( MTU ) . The list of packets is returned . DCNL If packet does not contain an IPv6ExtHdrFragment class , it is returned in DCNL result list . &apos; 
def to _ seconds ( time _ string ) : DCNL &apos; Converts a string in M + : SS.SS format to S + .SS&apos;
def split _ string ( text , chars _ per _ string ) : DCNL &apos; Splits one string into multiple strings , with a maximum amount of `chars _ per _ string` characters per string . DCNL This is very useful for splitting one giant message into multiples . DCNL : param text : The text to split DCNL : param chars _ per _ string : The number of characters per line the text is split into . DCNL : return : The splitted text as a list of strings . &apos; 
def getTempMarkdownPreviewPath ( view ) : DCNL &apos; return a permanent full path of the temp markdown preview file&apos;
def timestampUUID60 ( value ) : DCNL &apos; Convert UUID 60-bit timestamp to string . The timestamp format is DCNL a 60-bit number which represents number of 100ns since the DCNL the 15 October 1582 at 00 : 00 . Result is an unicode string . DCNL &gt; &gt; &gt; timestampUUID60 ( 0 ) DCNL datetime.datetime ( 1582 , 10 , 15 , 0 , 0 ) DCNL &gt; &gt; &gt; timestampUUID60 ( 130435676263032368 ) DCNL datetime.datetime ( 1996 , 2 , 14 , 5 , 13 , 46 , 303236 ) &apos;
def svm _ read _ problem ( data _ file _ name ) : DCNL &apos; svm _ read _ problem ( data _ file _ name ) - &gt; &#91; y , x &#93; DCNL Read LIBSVM-format data from data _ file _ name and return labels y DCNL and data instances x . &apos; 
def boto _ supports _ associate _ public _ ip _ address ( ec2 ) : DCNL &apos; Check if Boto library has associate _ public _ ip _ address in the NetworkInterfaceSpecification DCNL class . Added in Boto 2.13.0 DCNL ec2 : authenticated ec2 connection object DCNL Returns : DCNL True if Boto library accepts associate _ public _ ip _ address argument , else false&apos;
def read _ config _ file ( option , opt , value , parser ) : DCNL &apos; Read a configuration file during option processing . ( Option callback . ) &apos;
def get _ suffixes ( ) : DCNL &apos; * * DEPRECATED * * &apos;
@ register.filter DCNL def xssafe ( value ) : DCNL &apos; Like &#124; safe but for strings with interpolation . DCNL By using &#124; xssafe you assert that you have written tests proving an DCNL XSS can \ &apos; t happen here . &apos; 
def get _ configured _ provider ( ) : DCNL &apos; Return the first configured instance . &apos; 
def delete _ instance _ profile ( name , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Delete an instance profile . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ iam.delete _ instance _ profile myiprofile&apos;
def version ( raises = True ) : DCNL &apos; Return the current cuDNN version we link with . DCNL This also does a check that the header version matches the runtime version . DCNL : raises : If True , raise an exception if cuDNN is not present or badly installed . DCNL Otherwise , return -1 . &apos; 
def get _ pymodule _ path ( modulename , * joins ) : DCNL &apos; Return path of given Python module name . DCNL : param modulename : Python module name . DCNL : param * joins : Join additional path elements using `os.path.join` . &apos; 
def iter _ first ( sequence ) : DCNL &apos; Get the first element from an iterable or raise a ValueError if DCNL the iterator generates no values . &apos; 
def _ CalculateNumberOfNewlines ( first _ token , indent _ depth , prev _ uwline , final _ lines ) : DCNL &apos; Calculate the number of newlines we need to add . DCNL Arguments : DCNL first _ token : ( format _ token.FormatToken ) The first token in the unwrapped DCNL line . DCNL indent _ depth : ( int ) The line \ &apos; s indentation depth . DCNL prev _ uwline : ( list of unwrapped _ line.UnwrappedLine ) The unwrapped line DCNL previous to this line . DCNL final _ lines : ( list of unwrapped _ line.UnwrappedLine ) The unwrapped lines DCNL that have already been processed . DCNL Returns : DCNL The number of newlines needed before the first token . &apos; 
def _ salt ( fun , * args , * * kw ) : DCNL &apos; Execute a salt function on a specific minion DCNL Special kwargs : DCNL salt _ target DCNL target to exec things on DCNL salt _ timeout DCNL timeout for jobs DCNL salt _ job _ poll DCNL poll interval to wait for job finish result&apos;
def get _ configured _ hadoop _ version ( ) : DCNL &apos; CDH4 ( hadoop 2 + ) has a slightly different syntax for interacting with hdfs DCNL via the command line . DCNL The default version is CDH4 , but one can override DCNL this setting with &quot; cdh3 &quot; or &quot; apache1 &quot; in the hadoop section of the config DCNL in order to use the old syntax . &apos; 
def _ replace _ conditional ( match , string ) : DCNL &apos; Replaces a conditional match in a transformation . &apos; 
def find _ sr _ by _ uuid ( session , sr _ uuid ) : DCNL &apos; Return the storage repository given a uuid . &apos; 
def read _ xml _ config ( xml _ config _ file , svc _ params , optional _ params ) : DCNL &apos; Read Hitachi driver specific xml config file . DCNL : param xml _ config _ file : string filename containing XML configuration DCNL : param svc _ params : parameters to configure the services DCNL &#91; \ &apos; volume _ type \ &apos; , \ &apos; hdp \ &apos; , \ &apos; iscsi _ ip \ &apos; &#93; DCNL : param optional _ params : parameters to configure that are not mandatory DCNL &#91; \ &apos; ssc _ cmd \ &apos; , \ &apos; cluster _ admin _ ip0 \ &apos; , \ &apos; chap _ enabled \ &apos; &#93; &apos;
def colorize ( text = &apos; &apos; , opts = ( ) , * * kwargs ) : DCNL &apos; Returns your text , enclosed in ANSI graphics codes . DCNL Depends on the keyword arguments \ &apos; fg \ &apos; and \ &apos; bg \ &apos; , and the contents of DCNL the opts tuple / list . DCNL Returns the RESET code if no parameters are given . DCNL Valid colors : DCNL \ &apos; black \ &apos; , \ &apos; red \ &apos; , \ &apos; green \ &apos; , \ &apos; yellow \ &apos; , \ &apos; blue \ &apos; , \ &apos; magenta \ &apos; , \ &apos; cyan \ &apos; , \ &apos; white \ &apos; DCNL Valid options : DCNL \ &apos; bold \ &apos; DCNL \ &apos; underscore \ &apos; DCNL \ &apos; blink \ &apos; DCNL \ &apos; reverse \ &apos; DCNL \ &apos; conceal \ &apos; DCNL \ &apos; noreset \ &apos; - string will not be auto-terminated with the RESET code DCNL Examples : DCNL colorize ( \ &apos; hello \ &apos; , fg = \ &apos; red \ &apos; , bg = \ &apos; blue \ &apos; , opts = ( \ &apos; blink \ &apos; , ) ) DCNL colorize ( ) DCNL colorize ( \ &apos; goodbye \ &apos; , opts = ( \ &apos; underscore \ &apos; , ) ) DCNL print colorize ( \ &apos; first line \ &apos; , fg = \ &apos; red \ &apos; , opts = ( \ &apos; noreset \ &apos; , ) ) DCNL print \ &apos; this should be red too \ &apos; DCNL print colorize ( \ &apos; and so should this \ &apos; ) DCNL print \ &apos; this should not be red \ &apos; &apos;
def is _ image _ visible ( context , image , status = None ) : DCNL &apos; Return True if the image is visible in this context . &apos; 
def assert _ similar _ pages ( first , second , ratio = 0.9 , msg = None ) : DCNL &apos; Asserts that most of the lines ( 90 % by default ) in the two pages are identical , DCNL ignoring leading / trailing spaces . &apos; 
@ library.filter DCNL def remove ( list _ , item ) : DCNL &apos; Removes an item from a list . &apos; 
def run _ param ( registry , xml _ parent , data ) : DCNL &apos; yaml : run DCNL A run parameter . DCNL : arg str name : the name of the parameter DCNL : arg str project-name : the name of job from which the user can pick runs DCNL : arg str description : a description of the parameter ( optional ) DCNL Example : DCNL .. literalinclude : : / .. / .. / tests / parameters / fixtures / run-param001.yaml DCNL : language : yaml&apos;
def create _ request ( url = None , method = None , body = None ) : DCNL &apos; Creates a tornado.httpclient.HTTPRequest with the given parameters . DCNL Args : DCNL url : A str , the URL to call . DCNL method : A str , one of GET , POST . DCNL body : A JSON object , the encoded dictionary that will be posted as payload . DCNL Returns : DCNL A tornado.httpclient.HTTPRequest object . DCNL Raises : DCNL MissingRequestArgs exception if one or more of the arguments is not set . &apos; 
def run _ cmd ( pl , cmd , stdin = None , strip = True ) : DCNL &apos; Run command and return its stdout , stripped DCNL If running command fails returns None and logs failure to ``pl`` argument . DCNL : param PowerlineLogger pl : DCNL Logger used to log failures . DCNL : param list cmd : DCNL Command which will be run . DCNL : param str stdin : DCNL String passed to command . May be None . DCNL : param bool strip : DCNL True if the result should be stripped . &apos; 
def check _ key _ expired ( key , node , url ) : DCNL &apos; check if key expired if is return url with args so it will push status message DCNL else return url DCNL : param str key : the private link key passed in DCNL : param Node node : the node object wants to access DCNL : param str url : the url redirect to DCNL : return : url with pushed message added if key expired else just url&apos;
def search _ lxc _ bridge ( ) : DCNL &apos; Search the first bridge which is potentially available as LXC bridge DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; lxc.search _ lxc _ bridge&apos;
def is _ docstring ( physical _ line , previous _ logical ) : DCNL &apos; Return True if found docstring DCNL \ &apos; A docstring is a string literal that occurs as the first statement in a DCNL module , function , class , \ &apos; DCNL http : / / www.python.org / dev / peps / pep-0257 / # what-is-a-docstring&apos;
def isPackageDirectory ( dirname ) : DCNL &apos; Is the directory at path \ &apos; dirname \ &apos; a Python package directory ? DCNL Returns the name of the _ _ init _ _ file ( it may have a weird extension ) DCNL if dirname is a package directory . Otherwise , returns False&apos;
def _ generate _ cache _ key ( request , headerlist , key _ prefix ) : DCNL &apos; Returns a cache key from the headers given in the header list . &apos; 
def already _ backported ( branch , since _ tag = None ) : DCNL &apos; return set of PRs that have been backported already&apos;
def get _ location ( http _ info ) : DCNL &apos; Extract the redirect URL from a pysaml2 http _ info object&apos;
def lie _ heuristic _ linear ( match , comp = False ) : DCNL &apos; This heuristic assumes DCNL 1 . ` \ xi = ax + by + c` and DCNL 2 . ` \ eta = fx + gy + h` DCNL After substituting the following assumptions in the determining PDE , it DCNL reduces to DCNL .. math : : f + ( g - a ) h - bh ^ { 2 } - ( ax + by + c ) \ frac { \ partial h } { \ partial x } DCNL - ( fx + gy + c ) \ frac { \ partial h } { \ partial y } DCNL Solving the reduced PDE obtained , using the method of characteristics , becomes DCNL impractical . The method followed is grouping similar terms and solving the system DCNL of linear equations obtained . The difference between the bivariate heuristic is that DCNL `h` need not be a rational function in this case . DCNL References DCNL - E.S. Cheb-Terrab , A.D. Roche , Symmetries and First Order DCNL ODE Patterns , pp. 10 - pp. 12&apos;
def _ generate _ indices ( f , values = False ) : DCNL &apos; generate the indicies DCNL if values is True , use the axis values DCNL is False , use the range&apos;
def read _ file _ as _ root ( file _ path ) : DCNL &apos; Secure helper to read file as root . &apos; 
def demo ( ) : DCNL &apos; Demo decoding a list of tagged reads from several samples&apos;
def splev ( x , tck , der = 0 , ext = 0 ) : DCNL &apos; Evaluate a B-spline or its derivatives . DCNL Given the knots and coefficients of a B-spline representation , evaluate DCNL the value of the smoothing polynomial and its derivatives . This is a DCNL wrapper around the FORTRAN routines splev and splder of FITPACK . DCNL Parameters DCNL x : array _ like DCNL An array of points at which to return the value of the smoothed DCNL spline or its derivatives . If `tck` was returned from `splprep` , DCNL then the parameter values , u should be given . DCNL tck : tuple DCNL A sequence of length 3 returned by `splrep` or `splprep` containing DCNL the knots , coefficients , and degree of the spline . DCNL der : int , optional DCNL The order of derivative of the spline to compute ( must be less than DCNL or equal to k ) . DCNL ext : int , optional DCNL Controls the value returned for elements of ``x`` not in the DCNL interval defined by the knot sequence . DCNL * if ext = 0 , return the extrapolated value . DCNL * if ext = 1 , return 0 DCNL * if ext = 2 , raise a ValueError DCNL * if ext = 3 , return the boundary value . DCNL The default value is 0 . DCNL Returns DCNL y : ndarray or list of ndarrays DCNL An array of values representing the spline function evaluated at DCNL the points in ``x`` . If `tck` was returned from `splprep` , then this DCNL is a list of arrays representing the curve in N-dimensional space . DCNL See Also DCNL splprep , splrep , sproot , spalde , splint DCNL bisplrep , bisplev DCNL References DCNL .. &#91; 1 &#93; C. de Boor , &quot; On calculating with b-splines &quot; , J. Approximation DCNL Theory , 6 , p.50-62 , 1972 . DCNL .. &#91; 2 &#93; M.G. Cox , &quot; The numerical evaluation of b-splines &quot; , J. Inst . Maths DCNL Applics , 10 , p.134-149 , 1972 . DCNL .. &#91; 3 &#93; P. Dierckx , &quot; Curve and surface fitting with splines &quot; , Monographs DCNL on Numerical Analysis , Oxford University Press , 1993 . &apos; 
def fetch _ streams _ infinite ( plugin , interval ) : DCNL &apos; Attempts to fetch streams until some are returned . &apos; 
def GetDefaultConcurrentLinks ( ) : DCNL &apos; Returns a best-guess for a number of concurrent links . &apos; 
def locale _ list ( request ) : DCNL &apos; List the support KB locales . &apos; 
def patch _ vary _ headers ( response , newheaders ) : DCNL &apos; Adds ( or updates ) the &quot; Vary &quot; header in the given HttpResponse object . DCNL newheaders is a list of header names that should be in &quot; Vary &quot; . Existing DCNL headers in &quot; Vary &quot; aren \ &apos; t removed . &apos; 
def fix _ ampersands ( value ) : DCNL &apos; Returns the given HTML with all unencoded ampersands encoded correctly . &apos; 
def set _ priority _ js ( ) : DCNL &apos; Output json for priority field&apos;
def _ replace _ locals ( tok ) : DCNL &apos; Replace local variables with a syntactically valid name . DCNL Parameters DCNL tok : tuple of int , str DCNL ints correspond to the all caps constants in the tokenize module DCNL Returns DCNL t : tuple of int , str DCNL Either the input or token or the replacement values DCNL Notes DCNL This is somewhat of a hack in that we rewrite a string such as `` \ &apos; @ a \ &apos; `` as DCNL `` \ &apos; _ _ pd _ eval _ local _ a \ &apos; `` by telling the tokenizer that `` _ _ pd _ eval _ local _ `` DCNL is a ``tokenize.OP`` and to replace the `` \ &apos; @ \ &apos; `` symbol with it . &apos; 
def localhost ( ) : DCNL &apos; Return the IP address of the magic hostname \ &apos; localhost \ &apos;  . &apos; 
def sqllist ( lst ) : DCNL &apos; Converts the arguments for use in something like a WHERE clause . DCNL &gt; &gt; &gt; sqllist ( &#91; \ &apos; a \ &apos; , \ &apos; b \ &apos; &#93; ) DCNL \ &apos; a , b \ &apos; DCNL &gt; &gt; &gt; sqllist ( \ &apos; a \ &apos; ) DCNL \ &apos; a \ &apos; &apos;
def groupby ( key , seq ) : DCNL &apos; Group a collection by a key function DCNL &gt; &gt; &gt; names = &#91; \ &apos; Alice \ &apos; , \ &apos; Bob \ &apos; , \ &apos; Charlie \ &apos; , \ &apos; Dan \ &apos; , \ &apos; Edith \ &apos; , \ &apos; Frank \ &apos; &#93; DCNL &gt; &gt; &gt; groupby ( len , names ) # doctest : + SKIP DCNL { 3 : &#91; \ &apos; Bob \ &apos; , \ &apos; Dan \ &apos; &#93; , 5 : &#91; \ &apos; Alice \ &apos; , \ &apos; Edith \ &apos; , \ &apos; Frank \ &apos; &#93; , 7 : &#91; \ &apos; Charlie \ &apos; &#93; } DCNL &gt; &gt; &gt; iseven = lambda x : x % 2 = = 0 DCNL &gt; &gt; &gt; groupby ( iseven , &#91; 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 &#93; ) # doctest : + SKIP DCNL { False : &#91; 1 , 3 , 5 , 7 &#93; , True : &#91; 2 , 4 , 6 , 8 &#93; } DCNL Non-callable keys imply grouping on a member . DCNL &gt; &gt; &gt; groupby ( \ &apos; gender \ &apos; , &#91; { \ &apos; name \ &apos; : \ &apos; Alice \ &apos; , \ &apos; gender \ &apos; : \ &apos; F \ &apos; } , DCNL ... { \ &apos; name \ &apos; : \ &apos; Bob \ &apos; , \ &apos; gender \ &apos; : \ &apos; M \ &apos; } , DCNL ... { \ &apos; name \ &apos; : \ &apos; Charlie \ &apos; , \ &apos; gender \ &apos; : \ &apos; M \ &apos; } &#93; ) # doctest : + SKIP DCNL { \ &apos; F \ &apos; : &#91; { \ &apos; gender \ &apos; : \ &apos; F \ &apos; , \ &apos; name \ &apos; : \ &apos; Alice \ &apos; } &#93; , DCNL \ &apos; M \ &apos; : &#91; { \ &apos; gender \ &apos; : \ &apos; M \ &apos; , \ &apos; name \ &apos; : \ &apos; Bob \ &apos; } , DCNL { \ &apos; gender \ &apos; : \ &apos; M \ &apos; , \ &apos; name \ &apos; : \ &apos; Charlie \ &apos; } &#93; } DCNL See Also : DCNL countby&apos;
def create ( name , profile = &apos; splunk &apos; , * * kwargs ) : DCNL &apos; Create a splunk search DCNL CLI Example : DCNL splunk _ search.create \ &apos; my search name \ &apos; search = \ &apos; error msg \ &apos; &apos;
def filter _ re _ search ( val , pattern ) : DCNL &apos; Perform a search for given regexp pattern , return the matching portion of the text . &apos; 
def test _ continuous _ regression _ with _ overlap ( ) : DCNL &apos; Test regression with overlap correction . &apos; 
@ register.simple _ tag ( ) DCNL def product _ first _ image ( product , size , method = &apos; crop &apos; ) : DCNL &apos; Returns main product image&apos;
def conlltags2tree ( sentence , chunk _ types = ( u &apos;NP &apos; , u &apos;PP &apos; , u &apos;VP &apos; ) , root _ label = u &apos;S &apos; , strict = False ) : DCNL &apos; Convert the CoNLL IOB format to a tree . &apos; 
def http _ connect _ raw ( ipaddr , port , method , path , headers = None , query _ string = None , ssl = False ) : DCNL &apos; Helper function to create an HTTPConnection object . If ssl is set True , DCNL HTTPSConnection will be used . However , if ssl = False , BufferedHTTPConnection DCNL will be used , which is buffered for backend Swift services . DCNL : param ipaddr : IPv4 address to connect to DCNL : param port : port to connect to DCNL : param method : HTTP method to request ( \ &apos; GET \ &apos; , \ &apos; PUT \ &apos; , \ &apos; POST \ &apos; , etc . ) DCNL : param path : request path DCNL : param headers : dictionary of headers DCNL : param query _ string : request query string DCNL : param ssl : set True if SSL should be used ( default : False ) DCNL : returns : HTTPConnection object&apos;
def random _ game ( nums _ actions , random _ state = None ) : DCNL &apos; Return a random NormalFormGame instance where the payoffs are drawn DCNL independently from the uniform distribution on &#91; 0 , 1 ) . DCNL Parameters DCNL nums _ actions : tuple ( int ) DCNL Tuple of the numbers of actions , one for each player . DCNL random _ state : scalar ( int ) or np.random.RandomState , DCNL optional ( default = None ) DCNL Random seed ( integer ) or np.random.RandomState instance to set DCNL the initial state of the random number generator for DCNL reproducibility . If None , a randomly initialized RandomState is DCNL used . DCNL Returns DCNL g : NormalFormGame&apos;
def vlan _ in _ use ( segmentation _ id , namespace = None ) : DCNL &apos; Return True if VLAN ID is in use by an interface , else False . &apos; 
def after _ all ( context ) : DCNL &apos; Unset env parameters . &apos; 
def xml _ format ( a ) : DCNL &apos; Returns the given attribute ( string , int , float , bool , None ) as a quoted unicode string . &apos; 
def process _ all _ packages ( pkgmgr , client _ dir , remove = False ) : DCNL &apos; Process a full upload of packages as a directory upload . &apos; 
def nn _ words ( table , wordvecs , query , k = 10 ) : DCNL &apos; Get the nearest neighbour words&apos;
def check _ forhash ( filename ) : DCNL &apos; checks if file has a hash in its filename&apos;
def is _ namespace _ property _ mutable ( context , namespace _ property ) : DCNL &apos; Return True if the object is mutable in this context . &apos; 
def daemonize ( no _ close = False , pidfile = None ) : DCNL &apos; Convert the calling process into a daemon . To make the current Python DCNL process into a daemon process , you need two lines of code : DCNL .. python : : DCNL from grizzled.os import daemonize DCNL daemonize.daemonize ( ) DCNL If ``daemonize ( ) `` fails for any reason , it throws a ``DaemonError`` , DCNL which is a subclass of the standard ``OSError`` exception. also logs debug DCNL messages , using the standard Python ``logging`` package , to channel DCNL &quot; grizzled.os.daemon &quot; . DCNL * * Adapted from : * * http : / / software.clapper.org / daemonize / DCNL * * See Also : * * DCNL - Stevens , W. Richard . * Unix Network Programming * ( Addison-Wesley , 1990 ) . DCNL : Parameters : DCNL no _ close : bool DCNL If ``True`` , don \ &apos; t close the file descriptors . Useful if the DCNL calling process has already redirected file descriptors to an DCNL output file . * * Warning * * : Only set this parameter to ``True`` if DCNL you \ &apos; re * sure * there are no open file descriptors to the calling DCNL terminal . Otherwise , you \ &apos; ll risk having the daemon re-acquire a DCNL control terminal , which can cause it to be killed if someone logs DCNL off that terminal . DCNL pidfile : str DCNL Path to file to which to write daemon \ &apos; s process ID . The string may DCNL contain a `` $ { pid } `` token , which is replaced with the process ID DCNL of the daemon. e.g. : `` / var / run / myserver- $ { pid } `` DCNL : raise DaemonError : Error during daemonizing&apos;
@ protocol.commands.add ( u &apos;listfiles &apos; ) DCNL def listfiles ( context , uri = None ) : DCNL &apos; * musicpd.org , music database section : * DCNL ``listfiles &#91; URI &#93; `` DCNL Lists the contents of the directory URI , including files are not DCNL recognized by MPD . URI can be a path relative to the music directory or DCNL an URI understood by one of the storage plugins . The response contains DCNL at least one line for each directory entry with the prefix &quot; file : &quot; or DCNL &quot; directory : &quot; , and may be followed by file attributes such as DCNL &quot; Last-Modified &quot; and &quot; size &quot; . DCNL For example , &quot; smb : / / SERVER &quot; returns a list of all shares on the given DCNL SMB / CIFS server ; &quot; nfs : / / servername / path &quot; obtains a directory listing DCNL from the NFS server . DCNL .. versionadded : : 0.19 DCNL New in MPD protocol version 0.19&apos;
def _ spg _ optim ( func , grad , start , project , maxiter = 10000.0 , M = 10 , ctol = 0.001 , maxiter _ nmls = 200 , lam _ min = 1e-30 , lam _ max = 1e + 30 , sig1 = 0.1 , sig2 = 0.9 , gam = 0.0001 ) : DCNL &apos; Implements the spectral projected gradient method for minimizing a DCNL differentiable function on a convex domain . DCNL Parameters DCNL func : real valued function DCNL The objective function to be minimized . DCNL grad : real array-valued function DCNL The gradient of the objective function DCNL start : array _ like DCNL The starting point DCNL project : function DCNL In-place projection of the argument to the domain DCNL of func . DCNL ... See notes regarding additional arguments DCNL Returns DCNL rslt : Bunch DCNL rslt.params is the final iterate , other fields describe DCNL convergence status . DCNL Notes DCNL This can be an effective heuristic algorithm for problems where no DCNL gauranteed algorithm for computing a global minimizer is known . DCNL There are a number of tuning parameters , but these generally DCNL should not be changed except for `maxiter` ( positive integer ) and DCNL `ctol` ( small positive real ) . See the Birgin et al reference for DCNL more information about the tuning parameters . DCNL Reference DCNL E. Birgin , J.M. Martinez , and M. Raydan . Spectral projected DCNL gradient methods : Review and perspectives . Journal of Statistical DCNL Software ( preprint ) . Available at : DCNL http : / / www.ime.usp.br / ~ egbirgin / publications / bmr5.pdf&apos;
def get _ global _ options ( ) : DCNL &apos; Returns the global options used as defaults for web server execution . &apos; 
def extents _ may _ overlap ( context , builder , a _ start , a _ end , b _ start , b _ end ) : DCNL &apos; Whether two memory extents &#91; a _ start , a _ end ) and &#91; b _ start , b _ end ) DCNL may overlap . &apos; 
def check _ installed ( name , path ) : DCNL &apos; Check if the current highest-priority match for a given alternatives link DCNL is set to the desired path DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; alternatives.check _ installed name path&apos;
def unregister _ models ( engine ) : DCNL &apos; Drop database tables for all models with the given engine . &apos; 
@ contextlib.contextmanager DCNL def import _ state ( * * kwargs ) : DCNL &apos; Context manager to manage the various importers and stored state in the DCNL sys module . DCNL The \ &apos; modules \ &apos; attribute is not supported as the interpreter state stores a DCNL pointer to the dict that the interpreter uses internally ; DCNL reassigning to sys.modules does not have the desired effect . &apos; 
def find _ undeclared _ variables ( ast ) : DCNL &apos; Returns a set of all variables in the AST that will be looked up from DCNL the context at runtime . Because at compile time it \ &apos; s not known which DCNL variables will be used depending on the path the execution takes at DCNL runtime , all variables are returned . DCNL &gt; &gt; &gt; from jinja2 import Environment , meta DCNL &gt; &gt; &gt; env = Environment ( ) DCNL &gt; &gt; &gt; ast = env.parse ( \ &apos; { % set foo = 42 % } { { bar + foo } } \ &apos; ) DCNL &gt; &gt; &gt; meta.find _ undeclared _ variables ( ast ) = = set ( &#91; \ &apos; bar \ &apos; &#93; ) DCNL True DCNL .. admonition : : Implementation DCNL Internally the code generator is used for finding undeclared variables . DCNL This is good to know because the code generator might raise a DCNL : exc : `TemplateAssertionError` during compilation and as a matter of DCNL fact this function can currently raise that exception as well . &apos; 
@ none _ if _ empty DCNL def blobproperty _ from _ base64 ( value ) : DCNL &apos; Return a datastore blob property containing the base64 decoded value . &apos; 
def _ mbcs _ to _ unicode ( instr ) : DCNL &apos; Converts from current users character encoding to unicode . DCNL When instr has a value of None , the return value of the function DCNL will also be None . &apos; 
def get _ order _ args ( ) : DCNL &apos; Get order arguments , return a dictionary DCNL { &lt; VIEW _ NAME &gt; : ( ORDER _ COL , ORDER _ DIRECTION ) } DCNL Arguments are passed like : _ oc _ &lt; VIEW _ NAME &gt; = &lt; COL _ NAME &gt; &amp; _ od _ &lt; VIEW _ NAME &gt; = \ &apos; asc \ &apos; &#124; \ &apos; desc \ &apos; &apos;
def human _ resource ( ) : DCNL &apos; RESTful CRUD controller for options.s3json lookups DCNL - needed for templates , like DRMP , where HRM fields are embedded inside DCNL pr _ person form&apos;
def service _ get ( context , service _ id = None , backend _ match _ level = None , * * filters ) : DCNL &apos; Get a service that matches the criteria . DCNL A possible filter is is _ up = True and it will filter nodes that are down . DCNL : param service _ id : Id of the service . DCNL : param filters : Filters for the query in the form of key / value . DCNL : param backend _ match _ level : \ &apos; pool \ &apos; , \ &apos; backend \ &apos; , or \ &apos; host \ &apos; for host and DCNL cluster filters ( as defined in _ filter _ host DCNL method ) DCNL : raise ServiceNotFound : If service doesn \ &apos; t exist . &apos; 
def _ control _ segment _ path ( name ) : DCNL &apos; Get the pathname of the named control segment file . &apos; 
def save _ to _ store ( content , name , mime _ type , location ) : DCNL &apos; Save named content to store by location . DCNL Returns location of saved content . &apos; 
def dbg ( * args , * * kwds ) : DCNL &apos; Create a console window and begin watching for exceptions . DCNL All arguments are passed to : func : `ConsoleWidget . _ _ init _ _ ( ) &lt; pyqtgraph.console.ConsoleWidget. _ _ init _ _ &gt; ` . &apos; 
def autodiscover ( ) : DCNL &apos; Include tasks for all applications in ``INSTALLED _ APPS`` . &apos; 
@ ffi.callback ( &apos; int ( void * DCSP handle , DCSP int DCSP revents ) &apos; ) DCNL def _ python _ callback ( handle , revents ) : DCNL &apos; Returns an integer having one of three values : DCNL - -1 DCNL An exception occurred during the callback and you must call DCNL : func : ` _ python _ handle _ error` to deal with it . The Python watcher DCNL object will have the exception tuple saved in `` _ exc _ info`` . DCNL - 0 DCNL Everything went according to plan . You should check to see if the libev DCNL watcher is still active , and call : func : ` _ python _ stop` if so . This will DCNL clean up the memory . DCNL - 1 DCNL Everything went according to plan , but the watcher has already DCNL been stopped . Its memory may no longer be valid . &apos; 
def write _ backreferences ( seen _ backrefs , gallery _ conf , target _ dir , fname , snippet ) : DCNL &apos; Writes down back reference files , which include a thumbnail list DCNL of examples using a certain module&apos;
def unescape _ html ( text ) : DCNL &apos; Created by Fredrik Lundh ( http : / / effbot.org / zone / re-sub.htm # unescape-html ) &apos;
def is _ frozen ( ) : DCNL &apos; Return whether we are running in a frozen environment&apos;
def get _ keywords ( lexer ) : DCNL &apos; Get the keywords for a given lexer . &apos; 
def factorialk ( n , k , exact = True ) : DCNL &apos; Multifactorial of n of order k , n ( ! ! ... ! ) . DCNL This is the multifactorial of n skipping k values . For example , DCNL factorialk ( 17 , 4 ) = 17 ! ! ! ! = 17 * 13 * 9 * 5 * 1 DCNL In particular , for any integer ``n`` , we have DCNL factorialk ( n , 1 ) = factorial ( n ) DCNL factorialk ( n , 2 ) = factorial2 ( n ) DCNL Parameters DCNL n : int DCNL Calculate multifactorial . If `n` &lt; 0 , the return value is 0 . DCNL k : int DCNL Order of multifactorial . DCNL exact : bool , optional DCNL If exact is set to True , calculate the answer exactly using DCNL integer arithmetic . DCNL Returns DCNL val : int DCNL Multifactorial of `n` . DCNL Raises DCNL NotImplementedError DCNL Raises when exact is False DCNL Examples DCNL &gt; &gt; &gt; from scipy.special import factorialk DCNL &gt; &gt; &gt; factorialk ( 5 , 1 , exact = True ) DCNL 120L DCNL &gt; &gt; &gt; factorialk ( 5 , 3 , exact = True ) DCNL 10L&apos;
def resolve _ model _ string ( model _ string , default _ app = None ) : DCNL &apos; Resolve an \ &apos; app _ label.model _ name \ &apos; string into an actual model class . DCNL If a model class is passed in , just return that . DCNL Raises a LookupError if a model can not be found , or ValueError if passed DCNL something that is neither a model or a string . &apos; 
def restart ( name ) : DCNL &apos; Restart the named service . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; service.restart &lt; service name &gt; &apos;
@ pytest.yield _ fixture ( ) DCNL def use _ vcr ( request , monkeypatch ) : DCNL &apos; This fixture is applied automatically to any test using the `online` mark . It will record and playback network DCNL sessions using VCR . DCNL The record mode of VCR can be set using the VCR _ RECORD _ MODE environment variable when running tests . &apos; 
def getManipulatedPaths ( close , elementNode , loop , prefix , sideLength ) : DCNL &apos; Get flipped paths . &apos; 
def depends ( * * dependencies ) : DCNL &apos; Decorates a method where dependencies are passed as keyword DCNL parameters . Dependencies are specified as keywords with an DCNL optional accessor function or None if required . Dependencies can DCNL be injected or passed directly as keyword parameters . Example : : DCNL class HttpServer ( object ) : DCNL @ depends ( http _ port = const ( 80 ) ) DCNL def listen ( http _ port = None ) : DCNL print &quot; Listening on &quot; , http _ port DCNL server = HttpServer ( ) DCNL server.listen ( ) DCNL server.listen ( http _ port = 8000 ) DCNL with inject ( http _ port = const ( 8000 ) ) .everywhere ( ) : DCNL server.listen ( ) DCNL Produces the output : : DCNL Listening on port 80 DCNL Listening on port 8000 DCNL Listening on port 8000&apos;
def python ( registry , xml _ parent , data ) : DCNL &apos; yaml : python DCNL Execute a python command . Requires the Jenkins : jenkins-wiki : `Python plugin DCNL &lt; Python + Plugin &gt; ` . DCNL : arg str parameter : the python command to execute DCNL Example : DCNL .. literalinclude : : / .. / .. / tests / builders / fixtures / python.yaml DCNL : language : yaml&apos;
def read _ config ( options , args , arglist , parser ) : DCNL &apos; Read and parse configurations . DCNL If a config file is specified on the command line with the &quot; --config &quot; DCNL option , then only it is used for configuration . DCNL Otherwise , the user configuration ( ~ / .config / pep8 ) and any local DCNL configurations in the current directory or above will be merged together DCNL ( in that order ) using the read method of ConfigParser . &apos; 
def isAquaTk ( ) : DCNL &apos; Returns True if IDLE is using a native OS X Tk ( Cocoa or Carbon )  . &apos; 
def _ operation _ complete ( result ) : DCNL &apos; Return operation result . &apos; 
def _ uninstall _ flocker _ ubuntu1604 ( ) : DCNL &apos; Return an ``Effect`` for uninstalling the Flocker package from an Ubuntu DCNL machine . &apos; 
def get _ resource _ and _ action ( action ) : DCNL &apos; Extract resource and action ( write , read ) from api operation&apos;
def freeze ( bin _ env = None , user = None , cwd = None , use _ vt = False ) : DCNL &apos; Return a list of installed packages either globally or in the specified DCNL virtualenv DCNL bin _ env DCNL path to pip bin or path to virtualenv . If doing an uninstall from DCNL the system python and want to use a specific pip bin ( pip-2.7 , DCNL pip-2.6 , etc .. ) just specify the pip bin you want . DCNL If uninstalling from a virtualenv , just use the path to the virtualenv DCNL ( / home / code / path / to / virtualenv / ) DCNL user DCNL The user under which to run pip DCNL cwd DCNL Current working directory to run pip from DCNL .. note : : DCNL If the version of pip available is older than 8.0.3 , the list will not DCNL include the packages pip , wheel , setuptools , or distribute even if they DCNL are installed . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pip.freeze / home / code / path / to / virtualenv / DCNL .. versionchanged : : 2016.11.2 DCNL The packages pip , wheel , setuptools , and distribute are included if the DCNL installed pip is new enough . &apos; 
def parse _ query _ part ( part , query _ classes = { } , prefixes = { } , default _ class = query.SubstringQuery ) : DCNL &apos; Parse a single * query part * , which is a chunk of a complete query DCNL string representing a single criterion . DCNL A query part is a string consisting of : DCNL - A * pattern * : the value to look for . DCNL - Optionally , a * field name * preceding the pattern , separated by a DCNL colon . So in `foo : bar` , `foo` is the field name and `bar` is the DCNL pattern . DCNL - Optionally , a * query prefix * just before the pattern ( and after the DCNL optional colon ) indicating the type of query that should be used . For DCNL example , in ` ~ foo` , ` ~ ` might be a prefix . ( The set of prefixes to DCNL look for is given in the `prefixes` parameter . ) DCNL - Optionally , a negation indicator , `-` or ` ^ ` , at the very beginning . DCNL Both prefixes and the separating ` : ` character may be escaped with a DCNL backslash to avoid their normal meaning . DCNL The function returns a tuple consisting of : DCNL - The field name : a string or None if it \ &apos; s not present . DCNL - The pattern , a string . DCNL - The query class to use , which inherits from the base DCNL : class : `Query` type . DCNL - A negation flag , a bool . DCNL The three optional parameters determine which query class is used ( i.e. , DCNL the third return value ) . They are : DCNL - `query _ classes` , which maps field names to query classes . These DCNL are used when no explicit prefix is present . DCNL - `prefixes` , which maps prefix strings to query classes . DCNL - `default _ class` , the fallback when neither the field nor a prefix DCNL indicates a query class . DCNL So the precedence for determining which query class to return is : DCNL prefix , followed by field , and finally the default . DCNL For example , assuming the ` : ` prefix is used for `RegexpQuery` : DCNL - ` \ &apos; stapler \ &apos; ` - &gt; ` ( None , \ &apos; stapler \ &apos; , SubstringQuery , False ) ` DCNL - ` \ &apos; color : red \ &apos; ` - &gt; ` ( \ &apos; color \ &apos; , \ &apos; red \ &apos; , SubstringQuery , False ) ` DCNL - ` \ &apos; : ^ Quiet \ &apos; ` - &gt; ` ( None , \ &apos; ^ Quiet \ &apos; , RegexpQuery , False ) ` , because DCNL the ` ^ ` follows the ` : ` DCNL - ` \ &apos; color : : b .. e \ &apos; ` - &gt; ` ( \ &apos; color \ &apos; , \ &apos; b .. e \ &apos; , RegexpQuery , False ) ` DCNL - ` \ &apos; -color : red \ &apos; ` - &gt; ` ( \ &apos; color \ &apos; , \ &apos; red \ &apos; , SubstringQuery , True ) `&apos;
def setLoggerClass ( klass ) : DCNL &apos; Set the class to be used when instantiating a logger . The class should DCNL define _ _ init _ _ ( ) such that only a name argument is required , and the DCNL _ _ init _ _ ( ) should call Logger . _ _ init _ _ ( ) &apos;
@ utils.arg ( &apos; pool &apos; , metavar = &apos; &lt; floating-ip-pool &gt; &apos; , help = _ ( &apos; Name DCSP of DCSP Floating DCSP IP DCSP Pool . DCSP ( Optional ) &apos; ) , nargs = &apos; ? &apos; , default = None ) DCNL @ deprecated _ network DCNL def do _ floating _ ip _ create ( cs , args ) : DCNL &apos; Allocate a floating IP for the current tenant . &apos; 
@ snippet DCNL def client _ list _ datasets ( client , _ ) : DCNL &apos; List datasets for a project . &apos; 
def cppcheck ( registry , xml _ parent , data ) : DCNL &apos; yaml : cppcheck DCNL Cppcheck result publisher DCNL Requires the Jenkins : jenkins-wiki : `Cppcheck Plugin &lt; Cppcheck + Plugin &gt; ` . DCNL : arg str pattern : File pattern for cppcheck xml report ( required ) DCNL : arg bool ignoreblankfiles : Ignore blank files ( default false ) DCNL : arg bool allow-no-report : Do not fail the build if the Cppcheck report DCNL is not found ( default false ) DCNL : arg dict thresholds : DCNL : thresholds : Configure the build status and health . A build is DCNL considered as unstable or failure if the new or total number DCNL of issues exceeds the specified thresholds . The build health DCNL is also determined by thresholds . If the actual number of issues DCNL is between the provided thresholds , then the build health is DCNL interpolated . DCNL * * * unstable * * ( `str` ) : Total number unstable threshold ( default \ &apos; \ &apos; ) DCNL * * * new-unstable * * ( `str` ) : New number unstable threshold ( default \ &apos; \ &apos; ) DCNL * * * failure * * ( `str` ) : Total number failure threshold ( default \ &apos; \ &apos; ) DCNL * * * new-failure * * ( `str` ) : New number failure threshold ( default \ &apos; \ &apos; ) DCNL * * * healthy * * ( `str` ) : Healthy threshold ( default \ &apos; \ &apos; ) DCNL * * * unhealthy * * ( `str` ) : Unhealthy threshold ( default \ &apos; \ &apos; ) DCNL : arg dict severity : DCNL : severity : Determines which severity of issues should be considered DCNL when evaluating the build status and health , default all true DCNL * * * error * * ( `bool` ) : Severity error ( default true ) DCNL * * * warning * * ( `bool` ) : Severity warning ( default true ) DCNL * * * style * * ( `bool` ) : Severity style ( default true ) DCNL * * * performance * * ( `bool` ) : Severity performance ( default true ) DCNL * * * information * * ( `bool` ) : Severity information ( default true ) DCNL * * * nocategory * * ( `bool` ) : Severity nocategory ( default true ) DCNL * * * portability * * ( `bool` ) : Severity portability ( default true ) DCNL : arg dict graph : DCNL : graph : Graph configuration DCNL * * * xysize * * ( `array` ) : Chart width and height ( default &#91; 500 , 200 &#93; ) DCNL * * * num-builds-in-graph * * ( `int` ) : Builds number in graph ( default 0 ) DCNL : arg dict display DCNL : display : which errors to display , default only sum DCNL * * * sum * * ( `bool` ) : Display sum of all issues ( default true ) DCNL * * * error * * ( `bool` ) : Display errors ( default false ) DCNL * * * warning * * ( `bool` ) : Display warnings ( default false ) DCNL * * * style * * ( `bool` ) : Display style ( default false ) DCNL * * * performance * * ( `bool` ) : Display performance ( default false ) DCNL * * * information * * ( `bool` ) : Display information ( default false ) DCNL * * * nocategory * * ( `bool` ) : Display no category ( default false ) DCNL * * * portability * * ( `bool` ) : Display portability ( default false ) DCNL Minimal Example : DCNL .. literalinclude : : DCNL / .. / .. / tests / publishers / fixtures / cppcheck-minimal.yaml DCNL : language : yaml DCNL Full Example : DCNL .. literalinclude : : DCNL / .. / .. / tests / publishers / fixtures / cppcheck-complete.yaml DCNL : language : yaml&apos;
def _ get _ task _ statuses ( task _ ids ) : DCNL &apos; Retrieve task statuses from ECS API DCNL Returns list of { RUNNING &#124; PENDING &#124; STOPPED } for each id in task _ ids&apos;
def test _ special _ bindings ( keyhint , key _ config _ stub ) : DCNL &apos; Ensure a prefix of \ &apos; &lt; \ &apos; doesn \ &apos; t suggest special keys . &apos; 
def fnpickle ( object , fileorname , usecPickle = True , protocol = None , append = False ) : DCNL &apos; Pickle an object to a specified file . DCNL Parameters DCNL object DCNL The python object to pickle . DCNL fileorname : str or file-like DCNL The filename or file into which the `object` should be pickled . If a DCNL file object , it should have been opened in binary mode . DCNL usecPickle : bool DCNL If True ( default ) , the : mod : `cPickle` module is to be used in place of DCNL : mod : `pickle` ( cPickle is faster ) . This only applies for python 2.x. DCNL protocol : int or None DCNL Pickle protocol to use - see the : mod : `pickle` module for details on DCNL these options . If None , the most recent protocol will be used . DCNL append : bool DCNL If True , the object is appended to the end of the file , otherwise the DCNL file will be overwritten ( if a file object is given instead of a DCNL file name , this has no effect )  . &apos; 
def annotate _ webext _ incompatibilities ( results , file _ , addon , version _ string , channel ) : DCNL &apos; Check for WebExtension upgrades or downgrades . DCNL We avoid developers to downgrade their webextension to a XUL add-on DCNL at any cost and warn in case of an upgrade from XUL add-on to a DCNL WebExtension . DCNL Firefox doesn \ &apos; t support a downgrade . DCNL See https : / / github.com / mozilla / addons-server / issues / 3061 and DCNL https : / / github.com / mozilla / addons-server / issues / 3082 for more details . &apos; 
def monkeypatch ( klass , methodname = None ) : DCNL &apos; Decorator extending class with the decorated callable . This is basically DCNL a syntactic sugar vs class assignment . DCNL &gt; &gt; &gt; class A : DCNL ... pass DCNL &gt; &gt; &gt; @ monkeypatch ( A ) DCNL ... def meth ( self ) : DCNL ... return 12 DCNL &gt; &gt; &gt; a = A ( ) DCNL &gt; &gt; &gt; a.meth ( ) DCNL 12 DCNL &gt; &gt; &gt; @ monkeypatch ( A , \ &apos; foo \ &apos; ) DCNL ... def meth ( self ) : DCNL ... return 12 DCNL &gt; &gt; &gt; a.foo ( ) DCNL 12&apos;
@ pytest.mark.network DCNL def test _ download _ if _ requested ( script ) : DCNL &apos; It should download ( in the scratch path ) and not install if requested . &apos; 
def get _ cpu _ percentage ( function , * args , * * dargs ) : DCNL &apos; Returns a tuple containing the CPU % and return value from function call . DCNL This function calculates the usage time by taking the difference of DCNL the user and system times both before and after the function call . &apos; 
def test _ evoked _ arithmetic ( ) : DCNL &apos; Test arithmetic of evoked data . &apos; 
def _ parse _ check ( rule ) : DCNL &apos; Parse a single base check rule into an appropriate Check object . &apos; 
def check _ password ( environ , username , password ) : DCNL &apos; Authenticates against Django \ &apos; s auth database DCNL mod _ wsgi docs specify None , True , False as return value depending DCNL on whether the user exists and authenticates . &apos; 
def build _ parser ( ) : DCNL &apos; Return a parser for parsing requirement lines&apos;
def make _ dependence _ cmp ( ) : DCNL &apos; Create a comparator to represent the dependence of nodes in a graph . &apos; 
def iplayer _ from _ raw ( raw , linktype = 1 ) : DCNL &apos; Converts a raw packet to a dpkt packet regarding of link type . DCNL @ param raw : raw packet DCNL @ param linktype : integer describing link type as expected by dpkt&apos;
def measure _ mem _ leakage ( f , numsamples = ( 2 * * 7 ) , iterspersample = ( 2 * * 4 ) , * args , * * kwargs ) : DCNL &apos; This does the same thing as measure _ obj _ leakage ( ) but instead of using DCNL count _ all _ objects ( ) it uses get _ mem _ usage ( ) , which is currently DCNL implemented for Linux and barely implemented for Mac OS X. DCNL @ param numsamples : recommended : 2 * * 7 DCNL @ param iterspersample : how many times `f ( ) \ &apos; should be invoked per sample ; DCNL Basically , choose `iterspersample \ &apos; such that DCNL ( iterspersample * numsamples * DCNL how-long-it-takes-to-compute-`f ( ) \ &apos; ) is slightly DCNL less than how long you are willing to wait for DCNL this leak test . DCNL @ return : the slope of the best linear fit , which can be interpreted as DCNL \ &apos; the approximate number of system bytes allocated and not freed DCNL per invocation of f ( ) \ &apos; &apos;
def generate _ range ( start = None , end = None , periods = None , offset = BDay ( ) , time _ rule = None ) : DCNL &apos; Generates a sequence of dates corresponding to the specified time DCNL offset . Similar to dateutil.rrule except uses pandas DateOffset DCNL objects to represent time increments DCNL Parameters DCNL start : datetime ( default None ) DCNL end : datetime ( default None ) DCNL periods : int , optional DCNL time _ rule : ( legacy ) name of DateOffset object to be used , optional DCNL Corresponds with names expected by tseries.frequencies.get _ offset DCNL Notes DCNL * This method is faster for generating weekdays than dateutil.rrule DCNL * At least two of ( start , end , periods ) must be specified . DCNL * If both start and end are specified , the returned dates will DCNL satisfy start &lt; = date &lt; = end . DCNL * If both time _ rule and offset are specified , time _ rule supersedes offset . DCNL Returns DCNL dates : generator object&apos;
def render _ record ( response , record , file _ url = None , extra _ data = None ) : DCNL &apos; Render an appstats record in detail . DCNL This is a minor refactoring of DetailsHandler to support an offline DCNL tool for analyzing Appstats data and to allow that tool to call DCNL the original Appstats detailed record visualization . Since the offline DCNL tool may read Appstats records from other sources ( e.g. , a downloaded file ) , DCNL we are moving the logic of DetailsHandler related to processing and DCNL visualizing individual Appstats records to this function . This DCNL function may now be called from outside this file . DCNL Args : DCNL response : An instance of the webapp response class representing DCNL data to be sent in response to a web request . DCNL record : A RequestStatProto which contains detailed Appstats recording DCNL for an individual request . DCNL file _ url : Indicates the URL to be used to follow links to files in DCNL application source code . A default value of \ &apos; None \ &apos; indicates that DCNL links to files in source code will not be shown . DCNL extra _ data : Optional dict of additional parameters for template . &apos; 
def _ get _ proc _ create _ time ( proc ) : DCNL &apos; Returns the create _ time of a Process instance . DCNL It \ &apos; s backward compatible with &lt; 2.0 versions of psutil . &apos; 
@ context.quietfunc DCNL def packages ( ) : DCNL &apos; Returns a list of packages installed on the system&apos;
def get _ disk _ bus _ for _ device _ type ( virt _ type , image _ meta = None , device _ type = &apos; disk &apos; ) : DCNL &apos; Determine the best disk bus to use for a device type . DCNL Considering the currently configured virtualization DCNL type , return the optimal disk _ bus to use for a given DCNL device type . For example , for a disk on KVM it will DCNL return \ &apos; virtio \ &apos; , while for a CDROM it will return \ &apos; ide \ &apos; DCNL Returns the disk _ bus , or returns None if the device DCNL type is not supported for this virtualization&apos;
def version ( proxy ) : DCNL &apos; Returns the OS version . DCNL Example : 13.3R6.5 , 6.0.2 etc . DCNL CLI Example - select all network devices running JunOS 13.3R6.5 and return the model : DCNL .. code-block : : bash DCNL salt -G \ &apos; os : junos and version : 13.3R6.5 \ &apos; grains.get model DCNL Output : DCNL .. code-block : : yaml DCNL edge01.bjm01 : DCNL MX2000 DCNL edge01.sjc01 : DCNL MX960 DCNL edge01.mrs01 : DCNL MX480 DCNL edge01.muc01 : DCNL MX240&apos;
@ require _ context DCNL def virtual _ interface _ get _ by _ uuid ( context , vif _ uuid ) : DCNL &apos; Gets a virtual interface from the table . DCNL : param vif _ uuid : the uuid of the interface you \ &apos; re looking to get&apos;
def spawn ( coro ) : DCNL &apos; Event : add another coroutine to the scheduler . Both the parent DCNL and child coroutines run concurrently . &apos; 
def test _ raw _ unicode _ escape _ dashes ( ) : DCNL &apos; Make sure that either dashes or underscores work in raw encoding name&apos;
def implements ( obj , interface ) : DCNL &apos; Return true if the give object ( maybe an instance or class ) implements DCNL the interface . &apos; 
@ with _ setup ( prepare _ stdout ) DCNL def test _ output _ outlines _ success _ colorless ( ) : DCNL &apos; Language : ru - &gt; sucess outlines colorless&apos;
def test _ missing _ data _ pandas ( ) : DCNL &apos; Fixes GH : # 144&apos;
def URL ( a = None , c = None , f = None , r = None , args = None , vars = None , anchor = &apos; &apos; , extension = None , env = None , hmac _ key = None , hash _ vars = True , salt = None , user _ signature = None , scheme = None , host = None , port = None , encode _ embedded _ slash = False , url _ encode = True , language = None ) : DCNL &apos; generates a url \ &apos; / a / c / f \ &apos; corresponding to application a , controller c DCNL and function f . If r = request is passed , a , c , f are set , respectively , DCNL to r.application , r.controller , r.function. DCNL The more typical usage is : DCNL URL ( \ &apos; index \ &apos; ) DCNL that generates a url for the index function DCNL within the present application and controller . DCNL Args : DCNL a : application ( default to current if r is given ) DCNL c : controller ( default to current if r is given ) DCNL f : function ( default to current if r is given ) DCNL r : request ( optional ) DCNL args : any arguments ( optional ) . Additional &quot; path &quot; elements DCNL vars : any variables ( optional ) . Querystring elements DCNL anchor : anchorname , without # ( optional ) DCNL extension : force an extension DCNL hmac _ key : key to use when generating hmac signature ( optional ) DCNL hash _ vars : which of the vars to include in our hmac signature DCNL True ( default ) - hash all vars , False - hash none of the vars , DCNL iterable - hash only the included vars &#91; \ &apos; key1 \ &apos; , \ &apos; key2 \ &apos; &#93; DCNL salt : salt hashing with this string DCNL user _ signature : signs automatically the URL in such way that only the DCNL user can access the URL ( use with `URL.verify` or DCNL `auth.requires _ signature ( ) ` ) DCNL scheme : URI scheme ( True , \ &apos; http \ &apos; or \ &apos; https \ &apos; , etc ) ; forces absolute URL ( optional ) DCNL host : string to force absolute URL with host ( True means http _ host ) DCNL port : optional port number ( forces absolute URL ) DCNL encode _ embedded _ slash : encode slash characters included in args DCNL url _ encode : encode characters included in vars DCNL Raises : DCNL SyntaxError : when no application , controller or function is available DCNL or when a CRLF is found in the generated url DCNL Examples : DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; x \ &apos; , \ &apos; y \ &apos; , \ &apos; z \ &apos; &#93; , DCNL ... vars = { \ &apos; p \ &apos; : 1 , \ &apos; q \ &apos; : 2 } , anchor = \ &apos; 1 \ &apos; ) ) DCNL \ &apos; / a / c / f / x / y / z ? p = 1 &amp; q = 2 # 1 \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; x \ &apos; , \ &apos; y \ &apos; , \ &apos; z \ &apos; &#93; , DCNL ... vars = { \ &apos; p \ &apos; : ( 1,3 ) , \ &apos; q \ &apos; : 2 } , anchor = \ &apos; 1 \ &apos; ) ) DCNL \ &apos; / a / c / f / x / y / z ? p = 1 &amp; p = 3 &amp; q = 2 # 1 \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; x \ &apos; , \ &apos; y \ &apos; , \ &apos; z \ &apos; &#93; , DCNL ... vars = { \ &apos; p \ &apos; : ( 3,1 ) , \ &apos; q \ &apos; : 2 } , anchor = \ &apos; 1 \ &apos; ) ) DCNL \ &apos; / a / c / f / x / y / z ? p = 3 &amp; p = 1 &amp; q = 2 # 1 \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , anchor = \ &apos; 1 + 2 \ &apos; ) ) DCNL \ &apos; / a / c / f # 1 % 2B2 \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; x \ &apos; , \ &apos; y \ &apos; , \ &apos; z \ &apos; &#93; , DCNL ... vars = { \ &apos; p \ &apos; : ( 1,3 ) , \ &apos; q \ &apos; : 2 } , anchor = \ &apos; 1 \ &apos; , hmac _ key = \ &apos; key \ &apos; ) ) DCNL \ &apos; / a / c / f / x / y / z ? p = 1 &amp; p = 3 &amp; q = 2 &amp; _ signature = a32530f0d0caa80964bb92aad2bedf8a4486a31f # 1 \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; w / x \ &apos; , \ &apos; y / z \ &apos; &#93; ) ) DCNL \ &apos; / a / c / f / w / x / y / z \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; w / x \ &apos; , \ &apos; y / z \ &apos; &#93; , encode _ embedded _ slash = True ) ) DCNL \ &apos; / a / c / f / w % 2Fx / y % 2Fz \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; % ( id ) d \ &apos; &#93; , url _ encode = False ) ) DCNL \ &apos; / a / c / f / % ( id ) d \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , args = &#91; \ &apos; % ( id ) d \ &apos; &#93; , url _ encode = True ) ) DCNL \ &apos; / a / c / f / % 25 % 28id % 29d \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , vars = { \ &apos; id \ &apos; : \ &apos; % ( id ) d \ &apos; } , url _ encode = False ) ) DCNL \ &apos; / a / c / f ? id = % ( id ) d \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , vars = { \ &apos; id \ &apos; : \ &apos; % ( id ) d \ &apos; } , url _ encode = True ) ) DCNL \ &apos; / a / c / f ? id = % 25 % 28id % 29d \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , anchor = \ &apos; % ( id ) d \ &apos; , url _ encode = False ) ) DCNL \ &apos; / a / c / f # % ( id ) d \ &apos; DCNL &gt; &gt; &gt; str ( URL ( a = \ &apos; a \ &apos; , c = \ &apos; c \ &apos; , f = \ &apos; f \ &apos; , anchor = \ &apos; % ( id ) d \ &apos; , url _ encode = True ) ) DCNL \ &apos; / a / c / f # % 25 % 28id % 29d \ &apos; &apos;
@ core _ helper DCNL @ maintain.deprecated ( &apos; h.subnav _ named _ route DCSP is DCSP deprecated DCSP please DCSP use DCSP h.nav _ link \ nNOTE : DCSP you DCSP will DCSP need DCSP to DCSP pass DCSP the DCSP route _ name DCSP as DCSP a DCSP named DCSP parameter &apos; ) DCNL def subnav _ named _ route ( text , named _ route , * * kwargs ) : DCNL &apos; Generate a subnav element based on a named route DCNL Deprecated in ckan 2.0&apos;
def direct _ get _ object ( node , part , account , container , obj , conn _ timeout = 5 , response _ timeout = 15 , resp _ chunk _ size = None , headers = { } ) : DCNL &apos; Get object directly from the object server . DCNL : param node : node dictionary from the ring DCNL : param part : partition the container is on DCNL : param account : account name DCNL : param container : container name DCNL : param obj : object name DCNL : param conn _ timeout : timeout in seconds for establishing the connection DCNL : param response _ timeout : timeout in seconds for getting the response DCNL : param resp _ chunk _ size : if defined , chunk size of data to read . DCNL : param headers : dict to be passed into HTTPConnection headers DCNL : returns : a tuple of ( response headers , the object \ &apos; s contents ) The response DCNL headers will be a dict and all header names will be lowercase . &apos; 
def residue _ reduce _ to _ basic ( H , DE , z ) : DCNL &apos; Converts the tuple returned by residue _ reduce ( ) into a Basic expression . &apos; 
def get _ sid _ string ( principal ) : DCNL &apos; Converts a PySID object to a string SID . DCNL Args : DCNL principal ( str ) : The principal to lookup the sid . Must be a PySID object . DCNL Returns : DCNL str : A sid DCNL Usage : DCNL .. code-block : : python DCNL # Get a PySID object DCNL py _ sid = salt.utils.win _ dacl.get _ sid ( \ &apos; jsnuffy \ &apos; ) DCNL # Get the string version of the SID DCNL salt.utils.win _ dacl.get _ sid _ string ( py _ sid ) &apos;
def get _ bs _ object _ for _ view ( request , view , user , object = None ) : DCNL &apos; Help function to get BeautifulSoup object from the html rendered DCNL by the edit view . DCNL Also override ``service _ provider _ admin _ form`` here to enable DCNL ``PseudoPaymentProcessor``&apos;
def get _ ratio ( old , new ) : DCNL &apos; Return a &quot; similiarity ratio &quot; ( in percent ) representing the similarity DCNL between the two strings where 0 is equal and anything above less than equal . &apos; 
@ auth _ decorator DCNL def token _ authenticated ( self ) : DCNL &apos; decorator for a method authenticated only by the Authorization token header DCNL ( no cookies ) &apos;
def f3 ( ) : DCNL &apos; Testing unboxed values&apos;
def create _ account _ with _ params ( request , params ) : DCNL &apos; Given a request and a dict of parameters ( which may or may not have come DCNL from the request ) , create an account for the requesting user , including DCNL creating a comments service user object and sending an activation email . DCNL This also takes external / third-party auth into account , updates that as DCNL necessary , and authenticates the user for the request \ &apos; s session . DCNL Does not return anything . DCNL Raises AccountValidationError if an account with the username or email DCNL specified by params already exists , or ValidationError if any of the given DCNL parameters is invalid for any other reason . DCNL Issues with this code : DCNL * It is not transactional . If there is a failure part-way , an incomplete DCNL account will be created and left in the database . DCNL * Third-party auth passwords are not verified . There is a comment that DCNL they are unused , but it would be helpful to have a sanity check that DCNL they are sane . DCNL * It is over 300 lines long ( ! ) and includes disprate functionality , from DCNL registration e-mails to all sorts of other things . It should be broken DCNL up into semantically meaningful functions . DCNL * The user-facing text is rather unfriendly ( e.g. &quot; Username must be a DCNL minimum of two characters long &quot; rather than &quot; Please use a username of DCNL at least two characters &quot; )  . &apos; 
def compose ( * functions ) : DCNL &apos; Compose functions DCNL This is useful for combining decorators . &apos; 
@ require _ role ( &apos; admin &apos; ) DCNL def asset _ update ( request ) : DCNL &apos; Asset update host info via ansible view&apos;
def ode _ 1st _ homogeneous _ coeff _ subs _ dep _ div _ indep ( eq , func , order , match ) : DCNL &apos; Solves a 1st order differential equation with homogeneous coefficients DCNL using the substitution `u _ 1 = \ frac { \ text { &lt; dependent DCNL variable &gt; } } { \ text { &lt; independent variable &gt; } } ` . DCNL This is a differential equation DCNL .. math : : P ( x , y ) + Q ( x , y ) dy / dx = 0 DCNL such that `P` and `Q` are homogeneous and of the same order . A function DCNL `F ( x , y ) ` is homogeneous of order `n` if `F ( x t , y t ) = t ^ n F ( x , y ) ` . DCNL Equivalently , `F ( x , y ) ` can be rewritten as `G ( y / x ) ` or `H ( x / y ) ` . See DCNL also the docstring of : py : meth : ` ~ sympy.solvers.ode.homogeneous _ order` . DCNL If the coefficients `P` and `Q` in the differential equation above are DCNL homogeneous functions of the same order , then it can be shown that the DCNL substitution `y = u _ 1 x` ( i.e. `u _ 1 = y / x` ) will turn the differential DCNL equation into an equation separable in the variables `x` and `u` . If DCNL `h ( u _ 1 ) ` is the function that results from making the substitution `u _ 1 = DCNL f ( x ) / x` on `P ( x , f ( x ) ) ` and `g ( u _ 2 ) ` is the function that results from the DCNL substitution on `Q ( x , f ( x ) ) ` in the differential equation `P ( x , f ( x ) ) + DCNL Q ( x , f ( x ) ) f \ &apos; ( x ) = 0` , then the general solution is : : DCNL &gt; &gt; &gt; from sympy import Function , dsolve , pprint DCNL &gt; &gt; &gt; from sympy.abc import x DCNL &gt; &gt; &gt; f , g , h = map ( Function , &#91; \ &apos; f \ &apos; , \ &apos; g \ &apos; , \ &apos; h \ &apos; &#93; ) DCNL &gt; &gt; &gt; genform = g ( f ( x ) / x ) + h ( f ( x ) / x ) * f ( x ) .diff ( x ) DCNL &gt; &gt; &gt; pprint ( genform ) DCNL / f ( x ) \ / f ( x ) \ d DCNL g &#124; ---- &#124; + h &#124; ---- &#124; * -- ( f ( x ) ) DCNL \ x / \ x / dx DCNL &gt; &gt; &gt; pprint ( dsolve ( genform , f ( x ) , DCNL ... hint = \ &apos; 1st _ homogeneous _ coeff _ subs _ dep _ div _ indep _ Integral \ &apos; ) ) DCNL f ( x ) DCNL x DCNL &#124; -h ( u1 ) DCNL log ( x ) = C1 + &#124; ---------------- d ( u1 ) DCNL &#124; u1 * h ( u1 ) + g ( u1 ) DCNL Where `u _ 1 h ( u _ 1 ) + g ( u _ 1 ) \ ne 0` and `x \ ne 0` . DCNL See also the docstrings of DCNL : py : meth : ` ~ sympy.solvers.ode.ode _ 1st _ homogeneous _ coeff _ best` and DCNL : py : meth : ` ~ sympy.solvers.ode.ode _ 1st _ homogeneous _ coeff _ subs _ indep _ div _ dep` . DCNL Examples DCNL &gt; &gt; &gt; from sympy import Function , dsolve DCNL &gt; &gt; &gt; from sympy.abc import x DCNL &gt; &gt; &gt; f = Function ( \ &apos; f \ &apos; ) DCNL &gt; &gt; &gt; pprint ( dsolve ( 2 * x * f ( x ) + ( x * * 2 + f ( x ) * * 2 ) * f ( x ) .diff ( x ) , f ( x ) , DCNL ... hint = \ &apos; 1st _ homogeneous _ coeff _ subs _ dep _ div _ indep \ &apos; , simplify = False ) ) DCNL / 3 \ DCNL &#124; 3 * f ( x ) f ( x ) &#124; DCNL log &#124; ------ + ----- &#124; DCNL &#124; x 3 &#124; DCNL \ x / DCNL log ( x ) = log ( C1 ) - ------------------- DCNL 3 DCNL References DCNL - http : / / en.wikipedia.org / wiki / Homogeneous _ differential _ equation DCNL - M. Tenenbaum &amp; H. Pollard , &quot; Ordinary Differential Equations &quot; , DCNL Dover 1963 , pp. 59 DCNL # indirect doctest&apos;
@ register.inclusion _ tag ( &apos; inclusion.html &apos; ) DCNL def inclusion _ two _ params ( one , two ) : DCNL &apos; Expected inclusion _ two _ params _ _ doc _ _ &apos;
def call _ command ( name , * args , * * options ) : DCNL &apos; Calls the given command , with the given options and args / kwargs . DCNL This is the primary API you should use for calling specific commands . DCNL Some examples : DCNL call _ command ( \ &apos; syncdb \ &apos; ) DCNL call _ command ( \ &apos; shell \ &apos; , plain = True ) DCNL call _ command ( \ &apos; sqlall \ &apos; , \ &apos; myapp \ &apos; ) &apos;
def add _ prerequisite ( course _ key , prereq _ content _ key ) : DCNL &apos; Creates a new Milestone and CourseContentMilestone indicating that DCNL the given course content fulfills a prerequisite for gating DCNL Arguments : DCNL course _ key ( str &#124; CourseKey ) : The course key DCNL prereq _ content _ key ( str &#124; UsageKey ) : The prerequisite content usage key DCNL Returns : DCNL None&apos;
def HostAPI ( * args , * * kwargs ) : DCNL &apos; Returns the \ &apos; HostAPI \ &apos; class from the same module as the configured DCNL compute api&apos;
def run _ script _ with _ context ( script _ path , cwd , context ) : DCNL &apos; Execute a script after rendering it with Jinja . DCNL : param script _ path : Absolute path to the script to run . DCNL : param cwd : The directory to run the script from . DCNL : param context : Cookiecutter project template context . &apos; 
def _ filter _ ipv4 ( addresses ) : DCNL &apos; Select IPv4 addresses from the list of IP addresses . DCNL : param list addresses : The list of the addresses to filter . DCNL : return : The list of addresses that are IPv4 addresses . DCNL : rtype : list&apos;
def square ( x ) : DCNL &apos; Element-wise square . DCNL # Arguments DCNL x : input tensor . DCNL # Returns DCNL A tensor . &apos; 
def lag _ select ( data , max _ lags = 5 , ic = None ) : DCNL &apos; Select number of lags based on a variety of information criteria DCNL Parameters DCNL data : DataFrame-like DCNL max _ lags : int DCNL Maximum number of lags to evaluate DCNL ic : { None , \ &apos; aic \ &apos; , \ &apos; bic \ &apos; , ... } DCNL Choosing None will just display the results DCNL Returns DCNL None&apos;
def setup _ livestreamer ( ) : DCNL &apos; Creates the Livestreamer session . &apos; 
def _ _ virtual _ _ ( ) : DCNL &apos; Only load if boto libraries exist . &apos; 
def bokeh _ tree ( name , rawtext , text , lineno , inliner , options = None , content = None ) : DCNL &apos; Link to a URL in the Bokeh GitHub tree , pointing to appropriate tags DCNL for releases , or to master otherwise . DCNL The link text is simply the URL path supplied , so typical usage might DCNL look like : DCNL .. code-block : : none DCNL All of the examples are located in the : bokeh-tree : `examples` DCNL subdirectory of your Bokeh checkout . DCNL Returns 2 part tuple containing list of nodes to insert into the DCNL document and a list of system messages . Both are allowed to be DCNL empty . &apos; 
def toptexts ( query , texts , index , n = 10 ) : DCNL &apos; Debug fnc to help inspect the top `n` most similar documents ( according to a DCNL similarity index `index` ) , to see if they are actually related to the query . DCNL `texts` is any object that can return something insightful for each document DCNL via `texts &#91; docid &#93; ` , such as its fulltext or snippet . DCNL Return a list of 3-tuples ( docid , doc \ &apos; s similarity to the query , texts &#91; docid &#93; )  . &apos; 
@ register.tag ( &apos; cache &apos; ) DCNL def do _ cache ( parser , token ) : DCNL &apos; This will cache the contents of a template fragment for a given amount DCNL of time . DCNL Usage : : DCNL { % load cache % } DCNL { % cache &#91; expire _ time &#93; &#91; fragment _ name &#93; % } DCNL .. some expensive processing .. DCNL { % endcache % } DCNL This tag also supports varying by a list of arguments : : DCNL { % load cache % } DCNL { % cache &#91; expire _ time &#93; &#91; fragment _ name &#93; &#91; var1 &#93; &#91; var2 &#93; .. % } DCNL .. some expensive processing .. DCNL { % endcache % } DCNL Optionally the cache to use may be specified thus : : DCNL { % cache .... using = &quot; cachename &quot; % } DCNL Each unique set of arguments will result in a unique cache entry . &apos; 
def unlock ( hass , entity _ id = None , code = None ) : DCNL &apos; Unlock all or specified locks . &apos; 
def KernelVersion ( ) : DCNL &apos; Gets the kernel version as string , eg . &quot; 5.1.2600 &quot; . DCNL Returns : DCNL The kernel version , or &quot; unknown &quot; in the case of failure . &apos; 
@ tasklets.tasklet DCNL def fetch _ data _ async ( blob , start _ index , end _ index , * * options ) : DCNL &apos; Async version of fetch _ data ( )  . &apos; 
def csd ( x , y , fs = 1.0 , window = &apos; hann &apos; , nperseg = None , noverlap = None , nfft = None , detrend = &apos; constant &apos; , return _ onesided = True , scaling = &apos; density &apos; , axis = ( -1 ) ) : DCNL &apos; Estimate the cross power spectral density , Pxy , using Welch \ &apos; s method . DCNL Parameters DCNL x : array _ like DCNL Time series of measurement values DCNL y : array _ like DCNL Time series of measurement values DCNL fs : float , optional DCNL Sampling frequency of the `x` and `y` time series . Defaults to 1.0 . DCNL window : str or tuple or array _ like , optional DCNL Desired window to use . See `get _ window` for a list of windows and DCNL required parameters . If `window` is array _ like it will be used DCNL directly as the window and its length will be used for nperseg . DCNL Defaults to \ &apos; hann \ &apos; . DCNL nperseg : int , optional DCNL Length of each segment . Defaults to None , but if window is str or DCNL tuple , is set to 256 , and if window is array _ like , is set to the DCNL length of the window . DCNL noverlap : int , optional DCNL Number of points to overlap between segments . If None , DCNL ``noverlap = nperseg / / 2`` . Defaults to None . DCNL nfft : int , optional DCNL Length of the FFT used , if a zero padded FFT is desired . If None , DCNL the FFT length is `nperseg` . Defaults to None . DCNL detrend : str or function or False , optional DCNL Specifies how to detrend each segment . If `detrend` is a string , DCNL it is passed as the ``type`` argument to `detrend` . If it is a DCNL function , it takes a segment and returns a detrended segment . DCNL If `detrend` is False , no detrending is done . Defaults to \ &apos; constant \ &apos; . DCNL return _ onesided : bool , optional DCNL If True , return a one-sided spectrum for real data . If False return DCNL a two-sided spectrum . Note that for complex data , a two-sided DCNL spectrum is always returned . DCNL scaling : { \ &apos; density \ &apos; , \ &apos; spectrum \ &apos; } , optional DCNL Selects between computing the cross spectral density ( \ &apos; density \ &apos; ) DCNL where `Pxy` has units of V * * 2 / Hz and computing the cross spectrum DCNL ( \ &apos; spectrum \ &apos; ) where `Pxy` has units of V * * 2 , if `x` and `y` are DCNL measured in V and fs is measured in Hz . Defaults to \ &apos; density \ &apos; DCNL axis : int , optional DCNL Axis along which the CSD is computed for both inputs ; the default is DCNL over the last axis ( i.e. ``axis = -1`` ) . DCNL Returns DCNL f : ndarray DCNL Array of sample frequencies . DCNL Pxy : ndarray DCNL Cross spectral density or cross power spectrum of x , y . DCNL See Also DCNL periodogram : Simple , optionally modified periodogram DCNL lombscargle : Lomb-Scargle periodogram for unevenly sampled data DCNL welch : Power spectral density by Welch \ &apos; s method . &#91; Equivalent to csd ( x , x ) &#93; DCNL coherence : Magnitude squared coherence by Welch \ &apos; s method . DCNL Notes DCNL By convention , Pxy is computed with the conjugate FFT of X multiplied by DCNL the FFT of Y. DCNL If the input series differ in length , the shorter series will be DCNL zero-padded to match . DCNL An appropriate amount of overlap will depend on the choice of window DCNL and on your requirements . For the default \ &apos; hann \ &apos; window an DCNL overlap of 50 \ % is a reasonable trade off between accurately estimating DCNL the signal power , while not over counting any of the data . Narrower DCNL windows may require a larger overlap . DCNL .. versionadded : : 0.16.0 DCNL References DCNL .. &#91; 1 &#93; P. Welch , &quot; The use of the fast Fourier transform for the DCNL estimation of power spectra : A method based on time averaging DCNL over short , modified periodograms &quot; , IEEE Trans . Audio DCNL Electroacoust. vol . 15 , pp. 70-73 , 1967 . DCNL .. &#91; 2 &#93; Rabiner , Lawrence R. , and B. Gold . &quot; Theory and Application of DCNL Digital Signal Processing &quot; Prentice-Hall , pp. 414-419 , 1975 DCNL Examples DCNL &gt; &gt; &gt; from scipy import signal DCNL &gt; &gt; &gt; import matplotlib.pyplot as plt DCNL Generate two test signals with some common features . DCNL &gt; &gt; &gt; fs = 10e3 DCNL &gt; &gt; &gt; N = 1e5 DCNL &gt; &gt; &gt; amp = 20 DCNL &gt; &gt; &gt; freq = 1234.0 DCNL &gt; &gt; &gt; noise _ power = 0.001 * fs / 2 DCNL &gt; &gt; &gt; time = np.arange ( N ) / fs DCNL &gt; &gt; &gt; b , a = signal.butter ( 2 , 0.25 , \ &apos; low \ &apos; ) DCNL &gt; &gt; &gt; x = np.random.normal ( scale = np.sqrt ( noise _ power ) , size = time.shape ) DCNL &gt; &gt; &gt; y = signal.lfilter ( b , a , x ) DCNL &gt; &gt; &gt; x + = amp * np.sin ( 2 * np.pi * freq * time ) DCNL &gt; &gt; &gt; y + = np.random.normal ( scale = 0.1 * np.sqrt ( noise _ power ) , size = time.shape ) DCNL Compute and plot the magnitude of the cross spectral density . DCNL &gt; &gt; &gt; f , Pxy = signal.csd ( x , y , fs , nperseg = 1024 ) DCNL &gt; &gt; &gt; plt.semilogy ( f , np.abs ( Pxy ) ) DCNL &gt; &gt; &gt; plt.xlabel ( \ &apos; frequency &#91; Hz &#93; \ &apos; ) DCNL &gt; &gt; &gt; plt.ylabel ( \ &apos; CSD &#91; V * * 2 / Hz &#93; \ &apos; ) DCNL &gt; &gt; &gt; plt.show ( ) &apos;
def check _ output ( command , cwd = None , shell = False , env = None , stdin = _ _ sentinel _ _ , stderr = _ _ sentinel _ _ , preexec _ fn = None , use _ texpath = True , show _ window = False ) : DCNL &apos; Takes a command to be passed to subprocess.Popen. DCNL Returns the output if the command was successful . DCNL By default stderr is redirected to stdout , so this will return any output DCNL to either stream . This can be changed by calling execute _ command with DCNL stderr set to subprocess.PIPE or any other valid value . DCNL Raises CalledProcessError if the command returned a non-zero value DCNL Raises OSError if the executable is not found DCNL This is pretty much identical to subprocess.check _ output ( ) , but DCNL implemented here since it is unavailable in Python 2.6 \ &apos; s library . &apos; 
def run _ pyreverse ( ) : DCNL &apos; run pyreverse&apos;
def scroll _ page _ up ( event ) : DCNL &apos; Scroll page up . ( Prefer the cursor at the bottom of the page , after scrolling . ) &apos;
@ hook.command ( &apos; ghissue &apos; , &apos; issue &apos; ) DCNL def issue ( text ) : DCNL &apos; &lt; username &#124; repo &gt; &#91; number &#93; - gets issue &#91; number &#93; \ &apos; s summary , or the open issue count if no issue is specified&apos;
def skip _ unless _ lms ( func ) : DCNL &apos; Only run the decorated test in the LMS test suite&apos;
def getIndexedLoopFromIndexedGrid ( indexedGrid ) : DCNL &apos; Get indexed loop from around the indexed grid . &apos; 
def validate _ password ( user , password ) : DCNL &apos; Tie in password policy enforcement as an optional level of DCNL security protection DCNL Args : DCNL user : the user object whose password we \ &apos; re checking . DCNL password : the user \ &apos; s proposed new password . DCNL Returns : DCNL is _ valid _ password : a boolean indicating if the new password DCNL passes the validation . DCNL err _ msg : an error message if there \ &apos; s a violation of one of the password DCNL checks . Otherwise , `None` . &apos; 
def server _ handled _ successfully ( status _ int ) : DCNL &apos; True for successful responses * or * error codes that are not Swift \ &apos; s fault , DCNL False otherwise . For example , 500 is definitely the server \ &apos; s fault , but DCNL 412 is an error code ( 4xx are all errors ) that is due to a header the DCNL client sent . DCNL If one is tracking error rates to monitor server health , one would be DCNL advised to use a function like this one , lest a client cause a flurry of DCNL 404s or 416s and make a spurious spike in your errors graph . &apos; 
def get _ function _ object ( obj ) : DCNL &apos; Objects that wraps function should provide a &quot; _ _ numba _ _ &quot; magic attribute DCNL that contains a name of an attribute that contains the actual python DCNL function object . &apos; 
def get _ service ( hass , config , discovery _ info = None ) : DCNL &apos; Get the Slack notification service . &apos; 
def maybeDeferred ( f , * args , * * kw ) : DCNL &apos; Invoke a function that may or may not return a L { Deferred } . DCNL Call the given function with the given arguments . If the returned DCNL object is a L { Deferred } , return it . If the returned object is a L { Failure } , DCNL wrap it with L { fail } and return it . Otherwise , wrap it in L { succeed } and DCNL return it . If an exception is raised , convert it to a L { Failure } , wrap it DCNL in L { fail } , and then return it . DCNL @ type f : Any callable DCNL @ param f : The callable to invoke DCNL @ param args : The arguments to pass to C { f } DCNL @ param kw : The keyword arguments to pass to C { f } DCNL @ rtype : L { Deferred } DCNL @ return : The result of the function call , wrapped in a L { Deferred } if DCNL necessary . &apos; 
def addToMenu ( master , menu , repository , window ) : DCNL &apos; Add a tool plugin menu . &apos; 
def onlyPy26OrOlder ( test ) : DCNL &apos; Skips this test unless you are on Python2.6.x or earlier . &apos; 
def grain _ funcs ( opts , proxy = None ) : DCNL &apos; Returns the grain functions DCNL .. code-block : : python DCNL import salt.config DCNL import salt.loader DCNL _ _ opts _ _ = salt.config.minion _ config ( \ &apos; / etc / salt / minion \ &apos; ) DCNL grainfuncs = salt.loader.grain _ funcs ( _ _ opts _ _ ) &apos;
@ _ api _ version ( 1.21 ) DCNL @ _ client _ version ( &apos; 1.5.0 &apos; ) DCNL def connect _ container _ to _ network ( container , network _ id ) : DCNL &apos; Connect container to network . DCNL container DCNL Container name or ID DCNL network _ id DCNL ID of network DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion dockerng.connect _ container _ from _ network web-1 1f9d2454d0872b68dd9e8744c6e7a4c66b86f10abaccc21e14f7f014f729b2bc&apos;
def addListToListTable ( elementList , key , listTable ) : DCNL &apos; Add a list to the list table . &apos; 
def test _ isotonic _ regression _ ties _ secondary _ ( ) : DCNL &apos; Test isotonic regression fit , transform and fit _ transform DCNL against the &quot; secondary &quot; ties method and &quot; pituitary &quot; data from R DCNL &quot; isotone &quot; package , as detailed in : J. d . Leeuw , K. Hornik , P. Mair , DCNL Isotone Optimization in R : Pool-Adjacent-Violators Algorithm DCNL ( PAVA ) and Active Set Methods DCNL Set values based on pituitary example and DCNL the following R command detailed in the paper above : DCNL &gt; library ( &quot; isotone &quot; ) DCNL &gt; data ( &quot; pituitary &quot; ) DCNL &gt; res1 &lt; - gpava ( pituitary $ age , pituitary $ size , ties = &quot; secondary &quot; ) DCNL &gt; res1 $ x DCNL `isotone` version : 1.0-2 , 2014-09-07 DCNL R version : R version 3.1.1 ( 2014-07-10 ) &apos;
def publish _ badges ( request ) : DCNL &apos; Publish - Marketplace badges . &apos; 
def Run ( arg _ dict , oauth2 _ parameters = None ) : DCNL &apos; Sets up and runs the bulkloader , given the options as keyword arguments . DCNL Args : DCNL arg _ dict : Dictionary of bulkloader options DCNL oauth2 _ parameters : None , or the parameters for OAuth2 authentication . DCNL Returns : DCNL An exit code . &apos; 
def _ _ virtual _ _ ( ) : DCNL &apos; Only load if boto is available . &apos; 
def fitness _ and _ quality _ parsed ( mime _ type , parsed _ ranges ) : DCNL &apos; Find the best match for a given mime-type against DCNL a list of media _ ranges that have already been DCNL parsed by parse _ media _ range ( ) . Returns a tuple of DCNL the fitness value and the value of the \ &apos; q \ &apos; quality DCNL parameter of the best match , or ( -1 , 0 ) if no match DCNL was found . Just as for quality _ parsed ( ) , \ &apos; parsed _ ranges \ &apos; DCNL must be a list of parsed media ranges . &apos; 
def native ( s ) : DCNL &apos; Convert : py : class : `bytes` or : py : class : `unicode` to the native DCNL : py : class : `str` type , using UTF-8 encoding if conversion is necessary . DCNL : raise UnicodeError : The input string is not UTF-8 decodeable . DCNL : raise TypeError : The input is neither : py : class : `bytes` nor DCNL : py : class : `unicode` . &apos; 
def test _ init ( ) : DCNL &apos; Test the initialisation of the object&apos;
def bump _ version ( version ) : DCNL &apos; Update the version number in setup.py , docs config , changelog , DCNL and root module . &apos; 
def getRevisionNumber ( ) : DCNL &apos; Returns abbreviated commit hash number as retrieved with &quot; git rev-parse --short HEAD &quot; &apos;
def test _ ncr _ fit _ sample ( ) : DCNL &apos; Test the fit sample routine&apos;
def get _ selections ( pattern = None , state = None ) : DCNL &apos; View package state from the dpkg database . DCNL Returns a dict of dicts containing the state , and package names : DCNL .. code-block : : python DCNL { \ &apos; &lt; host &gt; \ &apos; : DCNL { \ &apos; &lt; state &gt; \ &apos; : &#91; \ &apos; pkg1 \ &apos; , DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; pkg.get _ selections DCNL salt \ &apos; * \ &apos; pkg.get _ selections \ &apos; python- * \ &apos; DCNL salt \ &apos; * \ &apos; pkg.get _ selections state = hold DCNL salt \ &apos; * \ &apos; pkg.get _ selections \ &apos; openssh * \ &apos; state = hold&apos;
def _ diff _ cache _ subnet _ group ( current , desired ) : DCNL &apos; If you need to enhance what modify _ cache _ subnet _ group ( ) considers when deciding what is to be DCNL ( or can be ) updated , add it to \ &apos; modifiable \ &apos; below . It \ &apos; s a dict mapping the param as used DCNL in modify _ cache _ subnet _ group ( ) to that in describe _ cache _ subnet _ group ( ) . Any data fiddlery that DCNL needs to be done to make the mappings meaningful should be done in the munging section DCNL below as well . DCNL This function will ONLY touch settings that are explicitly called out in \ &apos; desired \ &apos; - any DCNL settings which might have previously been changed from their \ &apos; default \ &apos; values will not be DCNL changed back simply by leaving them out of \ &apos; desired \ &apos; . This is both intentional , and DCNL much , much easier to code : ) &apos;
def clearCache ( indexerid = 0 ) : DCNL &apos; Deletes all &quot; unknown &quot; entries from the cache ( names with indexer _ id of 0 )  . &apos; 
def is _ staging ( srv ) : DCNL &apos; Determine whether a given ACME server is a known test / staging server . DCNL : param str srv : the URI for the ACME server DCNL : returns : True iff srv is a known test / staging server DCNL : rtype bool : &apos;
def _ get _ or _ default ( mylist , i , default = None ) : DCNL &apos; return list item number , or default if don \ &apos; t exist&apos;
def pseudo _ quoteattr ( value ) : DCNL &apos; Quote attributes for pseudo-xml&apos;
def getFillOfSurroundings ( surroundingLoops ) : DCNL &apos; Get extra fill loops of surrounding loops . &apos; 
def decorator ( caller , _ func = None ) : DCNL &apos; decorator ( caller ) converts a caller function into a decorator&apos;
def update _ exploration _ summary ( exploration _ id , contributor _ id _ to _ add ) : DCNL &apos; Update the summary of an exploration . &apos; 
def clean _ fuzzable _ request ( fuzzable _ request , dc _ handler = clean _ data _ container ) : DCNL &apos; We receive a fuzzable request and output includes the HTTP method and DCNL any parameters which might be sent over HTTP post-data in the request DCNL are appended to the result as query string params . DCNL : param fuzzable _ request : The fuzzable request instance to clean&apos;
def switchOff ( ) : DCNL &apos; ( Not needed as of v1.76.00 ; kept for backwards compatibility only . ) &apos;
@ register.simple _ tag DCNL def absolute _ asset _ url ( module , path ) : DCNL &apos; Returns a versioned absolute asset URL ( located within Sentry \ &apos; s static files ) . DCNL Example : DCNL { % absolute _ asset _ url \ &apos; sentry \ &apos; \ &apos; dist / sentry.css \ &apos; % } DCNL = &gt; &quot; http : / / sentry.example.com / _ static / 74d127b78dc7daf2c51f / sentry / dist / sentry.css &quot; &apos;
def create ( context , namespace _ name , values , session ) : DCNL &apos; Create an association , raise if already exists or ns not found . &apos; 
@ curry DCNL def as _ labelarray ( initial _ dtype , missing _ value , array ) : DCNL &apos; Curried wrapper around LabelArray , that round-trips the input data through DCNL `initial _ dtype` first . &apos; 
def is _ equal ( var , val ) : DCNL &apos; Returns True if `var` is always equal to `val` . DCNL This will only return True if the variable will always be equal to DCNL the value . If it might not be true in some cases then it returns False . DCNL Parameters DCNL var DCNL Variable to compare DCNL val DCNL Python value&apos;
def main ( argv ) : DCNL &apos; Main program body&apos;
def new _ figure _ manager _ given _ figure ( num , figure ) : DCNL &apos; Create a new figure manager instance for the given figure . &apos; 
def _ default _ selem ( ndim ) : DCNL &apos; Generates a cross-shaped structuring element ( connectivity = 1 ) . DCNL This is the default structuring element ( selem ) if no selem was specified . DCNL Parameters DCNL ndim : int DCNL Number of dimensions of the image . DCNL Returns DCNL selem : ndarray DCNL The structuring element where elements of the neighborhood DCNL are 1 and 0 otherwise . &apos; 
@ pytest.fixture DCNL def keyhint ( qtbot , config _ stub , key _ config _ stub ) : DCNL &apos; Fixture to initialize a KeyHintView . &apos; 
def decode _ feedback ( binary _ tuples ) : DCNL &apos; Returns a list of tuples in ( datetime , token _ str ) format DCNL binary _ tuples the binary-encoded feedback tuples&apos;
def _ partition _ tasks ( worker ) : DCNL &apos; Takes a worker and sorts out tasks based on their status . DCNL Still _ pending _ not _ ext is only used to get upstream _ failure , upstream _ missing _ dependency and run _ by _ other _ worker&apos;
def rmtree ( dirname ) : DCNL &apos; A threadsafe and idempotent version of shutil.rmtree ( ) . If the dir is DCNL already gone , do nothing and return without raising an exception . If this DCNL call removes the dir , return without raising an exception . If there is an DCNL error that prevents deletion or if the directory gets created again after DCNL rm _ dir ( ) deletes it and before rm _ dir ( ) checks that it is gone , raise an DCNL exception . &apos; 
def generate _ skip _ gram _ batch ( data , batch _ size , num _ skips , skip _ window , data _ index = 0 ) : DCNL &apos; Generate a training batch for the Skip-Gram model . DCNL Parameters DCNL data : a list DCNL To present context . DCNL batch _ size : an int DCNL Batch size to return . DCNL num _ skips : an int DCNL How many times to reuse an input to generate a label . DCNL skip _ window : an int DCNL How many words to consider left and right . DCNL data _ index : an int DCNL Index of the context location . DCNL without using yield , this code use data _ index to instead . DCNL Returns DCNL batch : a list DCNL Inputs DCNL labels : a list DCNL Labels DCNL data _ index : an int DCNL Index of the context location . DCNL Examples DCNL &gt; &gt; &gt; Setting num _ skips = 2 , skip _ window = 1 , use the right and left words . DCNL &gt; &gt; &gt; In the same way , num _ skips = 4 , skip _ window = 2 means use the nearby 4 words . DCNL &gt; &gt; &gt; data = &#91; 1,2,3,4,5,6,7,8,9,10,11 &#93; DCNL &gt; &gt; &gt; batch , labels , data _ index = tl.nlp.generate _ skip _ gram _ batch ( data = data , batch _ size = 8 , num _ skips = 2 , skip _ window = 1 , data _ index = 0 ) DCNL &gt; &gt; &gt; print ( batch ) DCNL ... &#91; 2 2 3 3 4 4 5 5 &#93; DCNL &gt; &gt; &gt; print ( labels ) DCNL ... &#91; &#91; 3 &#93; DCNL ... &#91; 1 &#93; DCNL ... &#91; 4 &#93; DCNL ... &#91; 2 &#93; DCNL ... &#91; 5 &#93; DCNL ... &#91; 3 &#93; DCNL ... &#91; 4 &#93; DCNL ... &#91; 6 &#93; &#93; DCNL References DCNL - `TensorFlow word2vec tutorial &lt; https : / / www.tensorflow.org / versions / r0.9 / tutorials / word2vec / index.html # vector-representations-of-words &gt; ` _ &apos;
def default _ sort _ key ( item , order = None ) : DCNL &apos; Return a key that can be used for sorting . DCNL The key has the structure : DCNL ( class _ key , ( len ( args ) , args ) , exponent.sort _ key ( ) , coefficient ) DCNL This key is supplied by the sort _ key routine of Basic objects when DCNL ``item`` is a Basic object or an object ( other than a string ) that DCNL sympifies to a Basic object . Otherwise , this function produces the DCNL key . DCNL The ``order`` argument is passed along to the sort _ key routine and is DCNL used to determine how the terms * within * an expression are ordered . DCNL ( See examples below ) ``order`` options are : \ &apos; lex \ &apos; , \ &apos; grlex \ &apos; , \ &apos; grevlex \ &apos; , DCNL and reversed values of the same ( e.g. \ &apos; rev-lex \ &apos; ) . The default order DCNL value is None ( which translates to \ &apos; lex \ &apos; ) . DCNL Examples DCNL &gt; &gt; &gt; from sympy import S , I , default _ sort _ key , sin , cos , sqrt DCNL &gt; &gt; &gt; from sympy.core.function import UndefinedFunction DCNL &gt; &gt; &gt; from sympy.abc import x DCNL The following are equivalent ways of getting the key for an object : DCNL &gt; &gt; &gt; x.sort _ key ( ) = = default _ sort _ key ( x ) DCNL True DCNL Here are some examples of the key that is produced : DCNL &gt; &gt; &gt; default _ sort _ key ( UndefinedFunction ( \ &apos; f \ &apos; ) ) DCNL ( ( 0 , 0 , \ &apos; UndefinedFunction \ &apos; ) , ( 1 , ( \ &apos; f \ &apos; , ) ) , ( ( 1 , 0 , \ &apos; Number \ &apos; ) , DCNL ( 0 , ( ) ) , ( ) , 1 ) , 1 ) DCNL &gt; &gt; &gt; default _ sort _ key ( \ &apos; 1 \ &apos; ) DCNL ( ( 0 , 0 , \ &apos; str \ &apos; ) , ( 1 , ( \ &apos; 1 \ &apos; , ) ) , ( ( 1 , 0 , \ &apos; Number \ &apos; ) , ( 0 , ( ) ) , ( ) , 1 ) , 1 ) DCNL &gt; &gt; &gt; default _ sort _ key ( S.One ) DCNL ( ( 1 , 0 , \ &apos; Number \ &apos; ) , ( 0 , ( ) ) , ( ) , 1 ) DCNL &gt; &gt; &gt; default _ sort _ key ( 2 ) DCNL ( ( 1 , 0 , \ &apos; Number \ &apos; ) , ( 0 , ( ) ) , ( ) , 2 ) DCNL While sort _ key is a method only defined for SymPy objects , DCNL default _ sort _ key will accept anything as an argument so it is DCNL more robust as a sorting key . For the following , using key = DCNL lambda i : i.sort _ key ( ) would fail because 2 doesn \ &apos; t have a sort _ key DCNL method ; that \ &apos; s why default _ sort _ key is used . Note , that it also DCNL handles sympification of non-string items likes ints : DCNL &gt; &gt; &gt; a = &#91; 2 , I , -I &#93; DCNL &gt; &gt; &gt; sorted ( a , key = default _ sort _ key ) DCNL &#91; 2 , -I , I &#93; DCNL The returned key can be used anywhere that a key can be specified for DCNL a function , e.g. sort , min , max , etc ... : DCNL &gt; &gt; &gt; a.sort ( key = default _ sort _ key ) ; a &#91; 0 &#93; DCNL 2 DCNL &gt; &gt; &gt; min ( a , key = default _ sort _ key ) DCNL 2 DCNL Note DCNL The key returned is useful for getting items into a canonical order DCNL that will be the same across platforms . It is not directly useful for DCNL sorting lists of expressions : DCNL &gt; &gt; &gt; a , b = x , 1 / x DCNL Since ``a`` has only 1 term , its value of sort _ key is unaffected by DCNL ``order`` : DCNL &gt; &gt; &gt; a.sort _ key ( ) = = a.sort _ key ( \ &apos; rev-lex \ &apos; ) DCNL True DCNL If ``a`` and ``b`` are combined then the key will differ because there DCNL are terms that can be ordered : DCNL &gt; &gt; &gt; eq = a + b DCNL &gt; &gt; &gt; eq.sort _ key ( ) = = eq.sort _ key ( \ &apos; rev-lex \ &apos; ) DCNL False DCNL &gt; &gt; &gt; eq.as _ ordered _ terms ( ) DCNL &#91; x , 1 / x &#93; DCNL &gt; &gt; &gt; eq.as _ ordered _ terms ( \ &apos; rev-lex \ &apos; ) DCNL &#91; 1 / x , x &#93; DCNL But since the keys for each of these terms are independent of ``order`` \ &apos; s DCNL value , they don \ &apos; t sort differently when they appear separately in a list : DCNL &gt; &gt; &gt; sorted ( eq.args , key = default _ sort _ key ) DCNL &#91; 1 / x , x &#93; DCNL &gt; &gt; &gt; sorted ( eq.args , key = lambda i : default _ sort _ key ( i , order = \ &apos; rev-lex \ &apos; ) ) DCNL &#91; 1 / x , x &#93; DCNL The order of terms obtained when using these keys is the order that would DCNL be obtained if those terms were * factors * in a product . DCNL Although it is useful for quickly putting expressions in canonical order , DCNL it does not sort expressions based on their complexity defined by the DCNL number of operations , power of variables and others : DCNL &gt; &gt; &gt; sorted ( &#91; sin ( x ) * cos ( x ) , sin ( x ) &#93; , key = default _ sort _ key ) DCNL &#91; sin ( x ) * cos ( x ) , sin ( x ) &#93; DCNL &gt; &gt; &gt; sorted ( &#91; x , x * * 2 , sqrt ( x ) , x * * 3 &#93; , key = default _ sort _ key ) DCNL &#91; sqrt ( x ) , x , x * * 2 , x * * 3 &#93; DCNL See Also DCNL ordered , sympy.core.expr.as _ ordered _ factors , sympy.core.expr.as _ ordered _ terms&apos;
def aggregate _ metadata _ add ( context , aggregate _ id , metadata , set _ delete = False ) : DCNL &apos; Add / update metadata . If set _ delete = True , it adds only . &apos; 
def remove _ comments ( code ) : DCNL &apos; Remove C-style comment from GLSL code string . &apos; 
def getGeometryOutput ( derivation , elementNode ) : DCNL &apos; Get vector3 vertexes from attribute dictionary . &apos; 
def serialize ( name , dataset = None , dataset _ pillar = None , user = None , group = None , mode = None , backup = &apos; &apos; , makedirs = False , show _ diff = True , create = True , merge _ if _ exists = False , * * kwargs ) : DCNL &apos; Serializes dataset and store it into managed file . Useful for sharing DCNL simple configuration files . DCNL name DCNL The location of the file to create DCNL dataset DCNL The dataset that will be serialized DCNL dataset _ pillar DCNL Operates like ``dataset`` , but draws from a value stored in pillar , DCNL using the pillar path syntax used in : mod : `pillar.get DCNL &lt; salt.modules.pillar.get &gt; ` . This is useful when the pillar value DCNL contains newlines , as referencing a pillar variable using a jinja / mako DCNL template can result in YAML formatting issues due to the newlines DCNL causing indentation mismatches . DCNL .. versionadded : : 2015.8.0 DCNL formatter DCNL Write the data as this format . See the list of : py : mod : `serializer DCNL modules &lt; salt.serializers &gt; ` for supported output formats . DCNL user DCNL The user to own the directory , this defaults to the user salt is DCNL running as on the minion DCNL group DCNL The group ownership set for the directory , this defaults to the group DCNL salt is running as on the minion DCNL mode DCNL The permissions to set on this file , e.g. ``644`` , ``0775`` , or DCNL ``4664`` . DCNL .. note : : DCNL This option is * * not * * supported on Windows . DCNL backup DCNL Overrides the default backup mode for this specific file . DCNL makedirs DCNL Create parent directories for destination file . DCNL .. versionadded : : 2014.1.3 DCNL show _ diff DCNL If set to False , the diff will not be shown . DCNL create DCNL Default is True , if create is set to False then the file will only be DCNL managed if the file already exists on the system . DCNL merge _ if _ exists DCNL Default is False , if merge _ if _ exists is True then the existing file will DCNL be parsed and the dataset passed in will be merged with the existing DCNL content DCNL .. versionadded : : 2014.7.0 DCNL For example , this state : DCNL .. code-block : : yaml DCNL / etc / dummy / package.json : DCNL file.serialize : DCNL - dataset : DCNL name : naive DCNL description : A package using naive versioning DCNL author : A confused individual &lt; iam @ confused.com &gt; DCNL dependencies : DCNL express : &gt; = 1.2.0 DCNL optimist : &gt; = 0.1.0 DCNL engine : node 0.4.1 DCNL - formatter : json DCNL will manage the file `` / etc / dummy / package.json`` : DCNL .. code-block : : json DCNL &quot; author &quot; : &quot; A confused individual &lt; iam @ confused.com &gt; &quot; , DCNL &quot; dependencies &quot; : { DCNL &quot; express &quot; : &quot; &gt; = 1.2.0 &quot; , DCNL &quot; optimist &quot; : &quot; &gt; = 0.1.0 &quot; DCNL &quot; description &quot; : &quot; A package using naive versioning &quot; , DCNL &quot; engine &quot; : &quot; node 0.4.1 &quot; , DCNL &quot; name &quot; : &quot; naive &quot; &apos;
def _ groupby _ and _ merge ( by , on , left , right , _ merge _ pieces , check _ duplicates = True ) : DCNL &apos; groupby &amp; merge ; we are always performing a left-by type operation DCNL Parameters DCNL by : field to group DCNL on : duplicates field DCNL left : left frame DCNL right : right frame DCNL _ merge _ pieces : function for merging DCNL check _ duplicates : boolean , default True DCNL should we check &amp; clean duplicates&apos;
def draw _ if _ interactive ( ) : DCNL &apos; For performance reasons , we don \ &apos; t want to redraw the figure after DCNL each draw command . Instead , we mark the figure as invalid , so that DCNL it will be redrawn as soon as the event loop resumes via PyOS _ InputHook . DCNL This function should be called after each draw event , even if DCNL matplotlib is not running interactively . &apos; 
def _ ( msg , lang = None ) : DCNL &apos; Returns translated string in current lang , if exists . &apos; 
def privileges _ revoke ( name , object _ name , object _ type , privileges = None , prepend = &apos; public &apos; , maintenance _ db = None , user = None , host = None , port = None , password = None , runas = None ) : DCNL &apos; .. versionadded : : 2016.3.0 DCNL Revoke privileges on a postgres object DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; postgres.privileges _ revoke user _ name table _ name table \ DCNL SELECT , UPDATE maintenance _ db = db _ name DCNL name DCNL Name of the role whose privileges should be revoked DCNL object _ name DCNL Name of the object on which the revoke is to be performed DCNL object _ type DCNL The object type , which can be one of the following : DCNL - table DCNL - sequence DCNL - schema DCNL - tablespace DCNL - language DCNL - database DCNL - group DCNL - function DCNL privileges DCNL Comma separated list of privileges to revoke , from the list below : DCNL - INSERT DCNL - CREATE DCNL - TRUNCATE DCNL - CONNECT DCNL - TRIGGER DCNL - SELECT DCNL - USAGE DCNL - TEMPORARY DCNL - UPDATE DCNL - EXECUTE DCNL - REFERENCES DCNL - DELETE DCNL - ALL DCNL maintenance _ db DCNL The database to connect to DCNL user DCNL database username if different from config or default DCNL password DCNL user password if any password for a specified user DCNL host DCNL Database host if different from config or default DCNL port DCNL Database port if different from config or default DCNL runas DCNL System user all operations should be performed on behalf of&apos;
def ensure _ distance ( dist ) : DCNL &apos; Makes sure the parameter passed in is a \ &apos; Distance \ &apos; object . &apos; 
def get _ file _ size ( fileobj ) : DCNL &apos; Returns the size of a file-like object . &apos; 
def cli ( ) : DCNL &apos; Command-line interface ( looks at sys.argv to decide what to do )  . &apos; 
def iter _ style _ files ( style _ dir ) : DCNL &apos; Yield file path and name of styles in the given directory . &apos; 
def run _ file ( path _ or _ file , context = None ) : DCNL &apos; Context must be EvalJS object . Runs given path as a JS program . Returns ( eval _ value , context )  . &apos; 
def try _ except ( cond ) : DCNL &apos; &gt; &gt; &gt; try _ except ( True ) DCNL &gt; &gt; &gt; try _ except ( False ) DCNL Traceback ( most recent call last ) : DCNL UnboundLocalError : local variable \ &apos; a \ &apos; referenced before assignment&apos;
def is _ trunk _ service _ port ( port _ name ) : DCNL &apos; True if the port is any of the ports used to realize a trunk . &apos; 
def deprecated ( func , name = &apos; Unknown &apos; ) : DCNL &apos; This is a decorator which can be used to mark functions DCNL as deprecated . It will result in a warning being emmitted DCNL when the function is used . &apos; 
def CDLADVANCEBLOCK ( barDs , count ) : DCNL &apos; Advance Block&apos;
def iradon ( radon _ image , theta = None , output _ size = None , filter = &apos; ramp &apos; , interpolation = &apos; linear &apos; , circle = None ) : DCNL &apos; Inverse radon transform . DCNL Reconstruct an image from the radon transform , using the filtered DCNL back projection algorithm . DCNL Parameters DCNL radon _ image : array _ like , dtype = float DCNL Image containing radon transform ( sinogram ) . Each column of DCNL the image corresponds to a projection along a different angle . The DCNL tomography rotation axis should lie at the pixel index DCNL ``radon _ image.shape &#91; 0 &#93; / / 2`` along the 0th dimension of DCNL ``radon _ image`` . DCNL theta : array _ like , dtype = float , optional DCNL Reconstruction angles ( in degrees ) . Default : m angles evenly spaced DCNL between 0 and 180 ( if the shape of `radon _ image` is ( N , M ) ) . DCNL output _ size : int DCNL Number of rows and columns in the reconstruction . DCNL filter : str , optional ( default ramp ) DCNL Filter used in frequency domain filtering . Ramp filter used by default . DCNL Filters available : ramp , shepp-logan , cosine , hamming , hann . DCNL Assign None to use no filter . DCNL interpolation : str , optional ( default \ &apos; linear \ &apos; ) DCNL Interpolation method used in reconstruction . Methods available : DCNL \ &apos; linear \ &apos; , \ &apos; nearest \ &apos; , and \ &apos; cubic \ &apos; ( \ &apos; cubic \ &apos; is slow ) . DCNL circle : boolean , optional DCNL Assume the reconstructed image is zero outside the inscribed circle . DCNL Also changes the default output _ size to match the behaviour of DCNL ``radon`` called with ``circle = True`` . DCNL The default behavior ( None ) is equivalent to False . DCNL Returns DCNL reconstructed : ndarray DCNL Reconstructed image . The rotation axis will be located in the pixel DCNL with indices DCNL `` ( reconstructed.shape &#91; 0 &#93; / / 2 , reconstructed.shape &#91; 1 &#93; / / 2 ) `` . DCNL References DCNL .. &#91; 1 &#93; AC Kak , M Slaney , &quot; Principles of Computerized Tomographic DCNL Imaging &quot; , IEEE Press 1988 . DCNL .. &#91; 2 &#93; B.R. Ramesh , N. Srinivasa , K. Rajgopal , &quot; An Algorithm for Computing DCNL the Discrete Radon Transform With Some Applications &quot; , Proceedings of DCNL the Fourth IEEE Region 10 International Conference , TENCON \ &apos; 89 , 1989 DCNL Notes DCNL It applies the Fourier slice theorem to reconstruct an image by DCNL multiplying the frequency domain of the filter with the FFT of the DCNL projection data . This algorithm is called filtered back projection . &apos; 
def spatial _ dist _ connectivity ( src , dist , verbose = None ) : DCNL &apos; Compute connectivity from distances in a source space . DCNL Parameters DCNL src : instance of SourceSpaces DCNL The source space must have distances between vertices computed , such DCNL that src &#91; \ &apos; dist \ &apos; &#93; exists and is useful . This can be obtained using MNE DCNL with a call to mne _ add _ patch _ info with the --dist option . DCNL dist : float DCNL Maximal geodesic distance ( in m ) between vertices in the DCNL source space to consider neighbors . DCNL verbose : bool , str , int , or None DCNL If not None , override default verbose level ( see : func : `mne.verbose` DCNL and : ref : `Logging documentation &lt; tut _ logging &gt; ` for more ) . DCNL Returns DCNL connectivity : sparse COO matrix DCNL The connectivity matrix describing the spatial graph structure . &apos; 
def test _ event _ schema ( ) : DCNL &apos; Test event _ schema validation . &apos; 
def get _ can _ enable _ dns ( ) : DCNL &apos; Check whether we can query DNS to find the domain controller to use . &apos; 
def findall ( pattern , string , flags = 0 , pos = None , endpos = None , overlapped = False , concurrent = None , * * kwargs ) : DCNL &apos; Return a list of all matches in the string . The matches may be overlapped DCNL if overlapped is True . If one or more groups are present in the pattern , DCNL return a list of groups ; this will be a list of tuples if the pattern has DCNL more than one group . Empty matches are included in the result . &apos; 
def store _ job ( opts , load , event = None , mminion = None ) : DCNL &apos; Store job information using the configured master _ job _ cache&apos;
def unparse ( input _ dict , output = None , encoding = &apos; utf-8 &apos; , full _ document = True , * * kwargs ) : DCNL &apos; Emit an XML document for the given `input _ dict` ( reverse of `parse` ) . DCNL The resulting XML document is returned as a string , but if `output` ( a DCNL file-like object ) is specified , it is written there instead . DCNL Dictionary keys prefixed with `attr _ prefix` ( default = ` \ &apos; @ \ &apos; ` ) are interpreted DCNL as XML node attributes , whereas keys equal to `cdata _ key` DCNL ( default = ` \ &apos; # text \ &apos; ` ) are treated as character data . DCNL The `pretty` parameter ( default = `False` ) enables pretty-printing . In this DCNL mode , lines are terminated with ` \ &apos; DCNL \ &apos; ` and indented with ` \ &apos; \ &apos; ` , but this DCNL can be customized with the `newl` and `indent` parameters . &apos; 
def get _ connection ( alias = DEFAULT _ CONNECTION _ NAME , reconnect = False ) : DCNL &apos; Return a connection with a given alias . &apos; 
def _ slice _ 1d ( dim _ shape , lengths , index ) : DCNL &apos; Returns a dict of { blocknum : slice } DCNL This function figures out where each slice should start in each DCNL block for a single dimension . If the slice won \ &apos; t return any elements DCNL in the block , that block will not be in the output . DCNL Parameters DCNL dim _ shape - the number of elements in this dimension . DCNL This should be a positive , non-zero integer DCNL blocksize - the number of elements per block in this dimension DCNL This should be a positive , non-zero integer DCNL index - a description of the elements in this dimension that we want DCNL This might be an integer , a slice ( ) , or an Ellipsis DCNL Returns DCNL dictionary where the keys are the integer index of the blocks that DCNL should be sliced and the values are the slices DCNL Examples DCNL Trivial slicing DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 60 , 40 &#93; , slice ( None , None , None ) ) DCNL { 0 : slice ( None , None , None ) , 1 : slice ( None , None , None ) } DCNL 100 length array cut into length 20 pieces , slice 0 : 35 DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 20 , 20 , 20 , 20 &#93; , slice ( 0 , 35 ) ) DCNL { 0 : slice ( None , None , None ) , 1 : slice ( 0 , 15 , 1 ) } DCNL Support irregular blocks and various slices DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 10 , 10 , 10 , 25 , 25 &#93; , slice ( 10 , 35 ) ) DCNL { 0 : slice ( 10 , 20 , 1 ) , 1 : slice ( None , None , None ) , 2 : slice ( 0 , 5 , 1 ) } DCNL Support step sizes DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 15 , 14 , 13 &#93; , slice ( 10 , 41 , 3 ) ) DCNL { 0 : slice ( 10 , 15 , 3 ) , 1 : slice ( 1 , 14 , 3 ) , 2 : slice ( 2 , 12 , 3 ) } DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 20 , 20 , 20 , 20 &#93; , slice ( 0 , 100 , 40 ) ) # step &gt; blocksize DCNL { 0 : slice ( 0 , 20 , 40 ) , 2 : slice ( 0 , 20 , 40 ) , 4 : slice ( 0 , 20 , 40 ) } DCNL Also support indexing single elements DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 20 , 20 , 20 , 20 &#93; , 25 ) DCNL { 1 : 5 } DCNL And negative slicing DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 20 , 20 , 20 , 20 &#93; , slice ( 100 , 0 , -3 ) ) DCNL { 0 : slice ( -2 , -20 , -3 ) , 1 : slice ( -1 , -21 , -3 ) , 2 : slice ( -3 , -21 , -3 ) , 3 : slice ( -2 , -21 , -3 ) , 4 : slice ( -1 , -21 , -3 ) } DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 20 , 20 , 20 , 20 &#93; , slice ( 100 , 12 , -3 ) ) DCNL { 0 : slice ( -2 , -8 , -3 ) , 1 : slice ( -1 , -21 , -3 ) , 2 : slice ( -3 , -21 , -3 ) , 3 : slice ( -2 , -21 , -3 ) , 4 : slice ( -1 , -21 , -3 ) } DCNL &gt; &gt; &gt; _ slice _ 1d ( 100 , &#91; 20 , 20 , 20 , 20 , 20 &#93; , slice ( 100 , -12 , -3 ) ) DCNL { 4 : slice ( -1 , -12 , -3 ) } &apos;
def diff _ states ( start , end , ignore = None ) : DCNL &apos; Differences two &quot; filesystem states &quot; as represented by dictionaries DCNL of FoundFile and FoundDir objects . DCNL Returns a dictionary with following keys : DCNL ``deleted`` DCNL Dictionary of files / directories found only in the start state . DCNL ``created`` DCNL Dictionary of files / directories found only in the end state . DCNL ``updated`` DCNL Dictionary of files whose size has changed ( FIXME not entirely DCNL reliable , but comparing contents is not possible because DCNL FoundFile.bytes is lazy , and comparing mtime doesn \ &apos; t help if DCNL we want to know if a file has been returned to its earlier DCNL state ) . DCNL Ignores mtime and other file attributes ; only presence / absence and DCNL size are considered . &apos; 
def add _ check ( module , check ) : DCNL &apos; registers a check with the given agent. currently there is no way DCNL retrieve the full metadata of an existing check through the consul api . DCNL Without this we can \ &apos; t compare to the supplied check and so we must assume DCNL a change . &apos; 
def get _ precreated _ datasets ( trans , params , data _ obj , controller = &apos; root &apos; ) : DCNL &apos; Get any precreated datasets ( when using asynchronous uploads )  . &apos; 
def HTTPInfoFromException ( value ) : DCNL &apos; Returns a tuple containing the HTTP status code and error message , based on the passed DCNL exception info . &apos; 
def usages _ add _ import _ modules ( evaluator , definitions ) : DCNL &apos; Adds the modules of the imports&apos;
def write _ with _ harness ( codefile , sourcefile , start _ linenum , linebuffer ) : DCNL &apos; write output with additional lines to make code likely compilable&apos;
def parse ( s , name = None ) : DCNL &apos; Parses a string into a kind of AST DCNL &gt; &gt; &gt; parse ( \ &apos; { { x } } \ &apos; ) DCNL &#91; ( \ &apos; expr \ &apos; , ( 1 , 3 ) , \ &apos; x \ &apos; ) &#93; DCNL &gt; &gt; &gt; parse ( \ &apos; foo \ &apos; ) DCNL &#91; \ &apos; foo \ &apos; &#93; DCNL &gt; &gt; &gt; parse ( \ &apos; { { if x } } test { { endif } } \ &apos; ) DCNL &#91; ( \ &apos; cond \ &apos; , ( 1 , 3 ) , ( \ &apos; if \ &apos; , ( 1 , 3 ) , \ &apos; x \ &apos; , &#91; \ &apos; test \ &apos; &#93; ) ) &#93; DCNL &gt; &gt; &gt; parse ( \ &apos; series- &gt; { { for x in y } } x = { { x } } { { endfor } } \ &apos; ) DCNL &#91; \ &apos; series- &gt; \ &apos; , ( \ &apos; for \ &apos; , ( 1 , 11 ) , ( \ &apos; x \ &apos; , ) , \ &apos; y \ &apos; , &#91; \ &apos; x = \ &apos; , ( \ &apos; expr \ &apos; , ( 1 , 27 ) , \ &apos; x \ &apos; ) &#93; ) &#93; DCNL &gt; &gt; &gt; parse ( \ &apos; { { for x , y in z : } } { { continue } } { { endfor } } \ &apos; ) DCNL &#91; ( \ &apos; for \ &apos; , ( 1 , 3 ) , ( \ &apos; x \ &apos; , \ &apos; y \ &apos; ) , \ &apos; z \ &apos; , &#91; ( \ &apos; continue \ &apos; , ( 1 , 21 ) ) &#93; ) &#93; DCNL &gt; &gt; &gt; parse ( \ &apos; { { py : x = 1 } } \ &apos; ) DCNL &#91; ( \ &apos; py \ &apos; , ( 1 , 3 ) , \ &apos; x = 1 \ &apos; ) &#93; DCNL &gt; &gt; &gt; parse ( \ &apos; { { if x } } a { { elif y } } b { { else } } c { { endif } } \ &apos; ) DCNL &#91; ( \ &apos; cond \ &apos; , ( 1 , 3 ) , ( \ &apos; if \ &apos; , ( 1 , 3 ) , \ &apos; x \ &apos; , &#91; \ &apos; a \ &apos; &#93; ) , ( \ &apos; elif \ &apos; , ( 1 , 12 ) , \ &apos; y \ &apos; , &#91; \ &apos; b \ &apos; &#93; ) , ( \ &apos; else \ &apos; , ( 1 , 23 ) , None , &#91; \ &apos; c \ &apos; &#93; ) ) &#93; DCNL Some exceptions : : DCNL &gt; &gt; &gt; parse ( \ &apos; { { continue } } \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : continue outside of for loop at line 1 column 3 DCNL &gt; &gt; &gt; parse ( \ &apos; { { if x } } foo \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : No { { endif } } at line 1 column 3 DCNL &gt; &gt; &gt; parse ( \ &apos; { { else } } \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : else outside of an if block at line 1 column 3 DCNL &gt; &gt; &gt; parse ( \ &apos; { { if x } } { { for x in y } } { { endif } } { { endfor } } \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : Unexpected endif at line 1 column 25 DCNL &gt; &gt; &gt; parse ( \ &apos; { { if } } { { endif } } \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : if with no expression at line 1 column 3 DCNL &gt; &gt; &gt; parse ( \ &apos; { { for x y } } { { endfor } } \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : Bad for ( no &quot; in &quot; ) in \ &apos; x y \ &apos; at line 1 column 3 DCNL &gt; &gt; &gt; parse ( \ &apos; { { py : x = 1 \ ny = 2 } } \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL TemplateError : Multi-line py blocks must start with a newline at line 1 column 3&apos;
def GetLabel ( plist ) : DCNL &apos; Plists have a label . &apos; 
def make _ scorer ( score _ func , greater _ is _ better = True , needs _ proba = False , needs _ threshold = False , * * kwargs ) : DCNL &apos; Make a scorer from a performance metric or loss function . DCNL This factory function wraps scoring functions for use in GridSearchCV DCNL and cross _ val _ score . It takes a score function , such as ``accuracy _ score`` , DCNL ``mean _ squared _ error`` , ``adjusted _ rand _ index`` or ``average _ precision`` DCNL and returns a callable that scores an estimator \ &apos; s output . DCNL Read more in the : ref : `User Guide &lt; scoring &gt; ` . DCNL Parameters DCNL score _ func : callable , DCNL Score function ( or loss function ) with signature DCNL ``score _ func ( y , y _ pred , * * kwargs ) `` . DCNL greater _ is _ better : boolean , default = True DCNL Whether score _ func is a score function ( default ) , meaning high is good , DCNL or a loss function , meaning low is good . In the latter case , the DCNL scorer object will sign-flip the outcome of the score _ func . DCNL needs _ proba : boolean , default = False DCNL Whether score _ func requires predict _ proba to get probability estimates DCNL out of a classifier . DCNL needs _ threshold : boolean , default = False DCNL Whether score _ func takes a continuous decision certainty . DCNL This only works for binary classification using estimators that DCNL have either a decision _ function or predict _ proba method . DCNL For example ``average _ precision`` or the area under the roc curve DCNL can not be computed using discrete predictions alone . DCNL * * kwargs : additional arguments DCNL Additional parameters to be passed to score _ func . DCNL Returns DCNL scorer : callable DCNL Callable object that returns a scalar score ; greater is better . DCNL Examples DCNL &gt; &gt; &gt; from sklearn.metrics import fbeta _ score , make _ scorer DCNL &gt; &gt; &gt; ftwo _ scorer = make _ scorer ( fbeta _ score , beta = 2 ) DCNL &gt; &gt; &gt; ftwo _ scorer DCNL make _ scorer ( fbeta _ score , beta = 2 ) DCNL &gt; &gt; &gt; from sklearn.model _ selection import GridSearchCV DCNL &gt; &gt; &gt; from sklearn.svm import LinearSVC DCNL &gt; &gt; &gt; grid = GridSearchCV ( LinearSVC ( ) , param _ grid = { \ &apos; C \ &apos; : &#91; 1 , 10 &#93; } , DCNL ... scoring = ftwo _ scorer ) &apos;
def _ get _ borrowing _ getitem ( context , seqty ) : DCNL &apos; Return a getitem ( ) implementation that doesn \ &apos; t incref its result . &apos; 
def _ make _ entity _ from _ pb ( annotations ) : DCNL &apos; Create an entity from a protobuf response . DCNL : type annotations : DCNL : class : ` ~ google.cloud.grpc.vision.v1.image _ annotator _ pb2.EntityAnnotation` DCNL : param annotations : protobuf instance of ``EntityAnnotation`` . DCNL : rtype : list DCNL : returns : List of ``EntityAnnotation`` . &apos; 
def route _ view ( request ) : DCNL &apos; &apos;
def splitByCommas ( str ) : DCNL &apos; Split a string by unenclosed commas : that is , commas which are not inside of quotes or brackets . DCNL splitByCommas ( \ &apos; foo , bar ( baz , quux ) , fwip = &quot; hey , hi &quot; \ &apos; ) DCNL = = &gt; &#91; \ &apos; foo \ &apos; , \ &apos; bar ( baz , quux ) \ &apos; , \ &apos; fwip = &quot; hey , hi &quot; \ &apos; &#93; &apos;
def read _ style _ directory ( style _ dir ) : DCNL &apos; Return dictionary of styles defined in `style _ dir` . &apos; 
def getNumberOfBezierPoints ( begin , end , xmlElement ) : DCNL &apos; Get the numberOfBezierPoints . &apos; 
def render _ home ( framework _ name ) : DCNL &apos; Renders the homepage&apos;
def educateDashesOldSchoolInverted ( str ) : DCNL &apos; Parameter : String . DCNL Returns : The string , with each instance of &quot; -- &quot; translated to DCNL an em-dash HTML entity , and each &quot; --- &quot; translated to DCNL an en-dash HTML entity . Two reasons why : First , unlike the DCNL en- and em-dash syntax supported by DCNL EducateDashesOldSchool ( ) , it \ &apos; s compatible with existing DCNL entries written before SmartyPants 1.1 , back when &quot; -- &quot; was DCNL only used for em-dashes . Second , em-dashes are more DCNL common than en-dashes , and so it sort of makes sense that DCNL the shortcut should be shorter to type . ( Thanks to Aaron DCNL Swartz for the idea . ) &apos;
def digest _ secure _ bootloader ( args ) : DCNL &apos; Calculate the digest of a bootloader image , in the same way the hardware DCNL secure boot engine would do so . Can be used with a pre-loaded key to update a DCNL secure bootloader . &apos; 
def get _ optional _ parameters ( dictionary ) : DCNL &apos; Extract all optional LTI parameters from a dictionary . This method does not DCNL fail if any parameters are missing . DCNL : param dictionary : A dictionary containing zero or more optional parameters . DCNL : return : A new dictionary containing all optional parameters from the DCNL original dictionary , or an empty dictionary if no optional parameters DCNL were present . &apos; 
def main ( ) : DCNL &apos; Generate SwitchPort objects for database&apos;
def title _ from _ columns ( cols ) : DCNL &apos; Creates standard string representation of columns . DCNL If cols is None , then None is returned . &apos; 
def retention _ action ( client , stream _ name , retention _ period = 24 , action = &apos; increase &apos; , check _ mode = False ) : DCNL &apos; Increase or Decreaste the retention of messages in the Kinesis stream . DCNL Args : DCNL client ( botocore.client.EC2 ) : Boto3 client . DCNL stream _ name ( str ) : The DCNL Kwargs : DCNL retention _ period ( int ) : This is how long messages will be kept before DCNL they are discarded . This can not be less than 24 hours . DCNL action ( str ) : The action to perform . DCNL valid actions = = create and delete DCNL default = create DCNL check _ mode ( bool ) : This will pass DryRun as one of the parameters to the aws api . DCNL default = False DCNL Basic Usage : DCNL &gt; &gt; &gt; client = boto3.client ( \ &apos; kinesis \ &apos; ) DCNL &gt; &gt; &gt; stream _ name = \ &apos; test-stream \ &apos; DCNL &gt; &gt; &gt; retention _ period = 48 DCNL &gt; &gt; &gt; stream _ action ( client , stream _ name , retention _ period , action = \ &apos; create \ &apos; ) DCNL Returns : DCNL Tuple ( bool , str ) &apos;
def test _ javascript _ url ( ) : DCNL &apos; javascript : urls should never be linkified . &apos; 
def sign _ string _ v2 ( string _ to _ sign ) : DCNL &apos; Sign a string with the secret key , returning base64 encoded results . DCNL By default the configured secret key is used , but may be overridden as DCNL an argument . DCNL Useful for REST authentication . See http : / / s3.amazonaws.com / doc / s3-developer-guide / RESTAuthentication.html&apos;
def getSquareLoopWiddershins ( beginComplex , endComplex ) : DCNL &apos; Get a square loop from the beginning to the end and back . &apos; 
@ treeio _ login _ required DCNL def ical _ all _ event ( request , response _ format = &apos; ical &apos; ) : DCNL &apos; Export upcoming events&apos;
def test _ read _ normal _ names _ include ( ) : DCNL &apos; Nice , typical fixed format table with col names provided&apos;
def get _ database _ string ( fname ) : DCNL &apos; Read an IRAF database file DCNL Parameters DCNL fname : str DCNL name of an IRAF database file DCNL Returns DCNL the database file as a string&apos;
def ipython _ display ( clip , filetype = None , maxduration = 60 , t = None , fps = None , rd _ kwargs = None , center = True , * * html _ kwargs ) : DCNL &apos; clip DCNL Either the name of a file , or a clip to preview . The clip will DCNL actually be written to a file and embedded as if a filename was DCNL provided . DCNL filetype : DCNL One of \ &apos; video \ &apos; , \ &apos; image \ &apos; , \ &apos; audio \ &apos; . If None is given , it is determined DCNL based on the extension of ``filename`` , but this can bug . DCNL maxduration DCNL An error will be raised if the clip \ &apos; s duration is more than the indicated DCNL value ( in seconds ) , to avoid spoiling the browser \ &apos; s cache and the RAM . DCNL t DCNL If not None , only the frame at time t will be displayed in the notebook , DCNL instead of a video of the clip DCNL fps DCNL Enables to specify an fps , as required for clips whose fps is unknown . DCNL * * kwargs : DCNL Allow you to give some options , like width = 260 , etc . When editing DCNL looping gifs , a good choice is loop = 1 , autoplay = 1 . DCNL Remarks : If your browser doesn \ &apos; t support HTML5 , this should warn you . DCNL If nothing is displayed , maybe your file or filename is wrong . DCNL Important : The media will be physically embedded in the notebook . DCNL Examples DCNL &gt; &gt; &gt; import moviepy.editor as mpy DCNL &gt; &gt; &gt; # later ... DCNL &gt; &gt; &gt; clip.write _ videofile ( &quot; test.mp4 &quot; ) DCNL &gt; &gt; &gt; mpy.ipython _ display ( &quot; test.mp4 &quot; , width = 360 ) DCNL &gt; &gt; &gt; clip.audio.write _ audiofile ( \ &apos; test.ogg \ &apos; ) # Sound ! DCNL &gt; &gt; &gt; mpy.ipython _ display ( \ &apos; test.ogg \ &apos; ) DCNL &gt; &gt; &gt; clip.write _ gif ( &quot; test.gif &quot; ) DCNL &gt; &gt; &gt; mpy.ipython _ display ( \ &apos; test.gif \ &apos; ) DCNL &gt; &gt; &gt; clip.save _ frame ( &quot; first _ frame.jpeg &quot; ) DCNL &gt; &gt; &gt; mpy.ipython _ display ( &quot; first _ frame.jpeg &quot; ) &apos;
def distance _ transform _ bf ( input , metric = &apos; euclidean &apos; , sampling = None , return _ distances = True , return _ indices = False , distances = None , indices = None ) : DCNL &apos; Distance transform function by a brute force algorithm . DCNL This function calculates the distance transform of the `input` , by DCNL replacing each background element ( zero values ) , with its DCNL shortest distance to the foreground ( any element non-zero ) . DCNL In addition to the distance transform , the feature transform can DCNL be calculated . In this case the index of the closest background DCNL element is returned along the first axis of the result . DCNL Parameters DCNL input : array _ like DCNL Input DCNL metric : str , optional DCNL Three types of distance metric are supported : \ &apos; euclidean \ &apos; , \ &apos; taxicab \ &apos; DCNL and \ &apos; chessboard \ &apos; . DCNL sampling : { int , sequence of ints } , optional DCNL This parameter is only used in the case of the euclidean `metric` DCNL distance transform . DCNL The sampling along each axis can be given by the `sampling` parameter DCNL which should be a sequence of length equal to the input rank , or a DCNL single number in which the `sampling` is assumed to be equal along all DCNL axes . DCNL return _ distances : bool , optional DCNL The `return _ distances` flag can be used to indicate if the distance DCNL transform is returned . DCNL The default is True . DCNL return _ indices : bool , optional DCNL The `return _ indices` flags can be used to indicate if the feature DCNL transform is returned . DCNL The default is False . DCNL distances : float64 ndarray , optional DCNL Optional output array to hold distances ( if `return _ distances` is DCNL True ) . DCNL indices : int64 ndarray , optional DCNL Optional output array to hold indices ( if `return _ indices` is True ) . DCNL Returns DCNL distances : ndarray DCNL Distance array if `return _ distances` is True . DCNL indices : ndarray DCNL Indices array if `return _ indices` is True . DCNL Notes DCNL This function employs a slow brute force algorithm , see also the DCNL function distance _ transform _ cdt for more efficient taxicab and DCNL chessboard algorithms . &apos; 
def upload _ dev _ pdf ( user = &apos; pandas &apos; ) : DCNL &apos; push a copy to the pydata dev directory&apos;
def load _ csr ( * names ) : DCNL &apos; Load certificate request . &apos; 
def auto _ openstack _ logging ( interface , original ) : DCNL &apos; Create a class decorator which will add OpenStack-specific exception DCNL logging versions versions of all of the methods on ``interface`` . DCNL Specifically , some Nova and Cinder client exceptions will have all of their DCNL details logged any time they are raised . DCNL : param zope.interface.InterfaceClass interface : The interface from which to DCNL take methods . DCNL : param str original : The name of an attribute on instances of the decorated DCNL class . The attribute should refer to a provider of ``interface`` . DCNL That object will have all of its methods called with additional DCNL exception logging to make more details of the underlying OpenStack API DCNL calls available . DCNL : return : The class decorator . &apos; 
def handle _ translate ( translation , request , user _ locked , this _ unit _ url , next _ unit _ url ) : DCNL &apos; Saves translation or suggestion to database and backend . &apos; 
def get _ group _ type _ by _ name ( context , name ) : DCNL &apos; Retrieves single group type by name . &apos; 
def get _ github _ releases ( project ) : DCNL &apos; Query the Github API for a list of version tags and return them in DCNL sorted order . DCNL See https : / / developer.github.com / v3 / repos / # list-tags&apos;
def get _ client ( host , port = None , timeout = None , use _ ssl = False , username = None , password = None , tenant = None , auth _ url = None , auth _ strategy = None , auth _ token = None , region = None , is _ silent _ upload = False , insecure = False ) : DCNL &apos; Returns a new client Glance client object based on common kwargs . DCNL If an option isn \ &apos; t specified falls back to common environment variable DCNL defaults . &apos; 
def load _ item _ types ( ) : DCNL &apos; Returns a dictionary containing the item _ types of all the MetaSources&apos;
def join _ options ( options ) : DCNL &apos; Given a list of option strings this joins them in the most appropriate DCNL way and returns them in the form `` ( formatted _ string , DCNL any _ prefix _ is _ slash ) `` where the second item in the tuple is a flag that DCNL indicates if any of the option prefixes was a slash . &apos; 
def fake _ view ( request ) : DCNL &apos; Fake view that returns the request META as a JSON-encoded string . &apos; 
def group _ membership ( ) : DCNL &apos; RESTful CRUD controller for options.s3json lookups&apos;
def user _ field ( user , field , * args ) : DCNL &apos; Gets or sets ( optional ) user model fields . No-op if fields do not exist . &apos; 
def set _ marker ( folder ) : DCNL &apos; Set marker file and return name&apos;
def bind _ floating _ ip ( floating _ ip , device ) : DCNL &apos; Bind ip to public interface . &apos; 
def test _ hermite _ cardinal ( Chart , datas ) : DCNL &apos; Test hermite cardinal interpolation&apos;
@ frappe.whitelist ( ) DCNL def rename _ doc ( doctype , old , new , force = False , merge = False , ignore _ permissions = False ) : DCNL &apos; Renames a doc ( dt , old ) to doc ( dt , new ) and DCNL updates all linked fields of type &quot; Link &quot; &apos;
def commit _ transaction ( hostname , username , password , label ) : DCNL &apos; A function to connect to a bigip device and commit an existing transaction . DCNL hostname DCNL The host / address of the bigip device DCNL username DCNL The iControl REST username DCNL password DCNL The iControl REST password DCNL label DCNL the label of this transaction stored within the grain : DCNL ``bigip _ f5 _ trans : &lt; label &gt; `` DCNL CLI Example : : DCNL salt \ &apos; * \ &apos; bigip.commit _ transaction bigip admin admin my _ transaction&apos;
def invoke _ cmd ( stdout , stderr , environ , prefix , cmd , cmd _ args , error _ msg , error _ status ) : DCNL &apos; Helper function to call command and subcommands of the hadoop binary . DCNL Basically , combines prefix and cmd to make a function name , and calls DCNL it with cmd _ args . If no such function exists , prints error _ msg DCNL to stderr , and exits with status error _ status . &apos; 
@ register _ stabilize DCNL @ register _ specialize DCNL @ register _ canonicalize DCNL @ gof.local _ optimizer ( &#91; T.Elemwise &#93; ) DCNL def local _ expm1 ( node ) : DCNL &apos; This optimization detects exp ( a ) -1 and converts this to expm1 ( a )  . &apos; 
@ register.tag DCNL def firstof ( parser , token ) : DCNL &apos; This is the future version of `firstof` with auto-escaping . DCNL This is equivalent to : : DCNL { % if var1 % } DCNL { { var1 } } DCNL { % elif var2 % } DCNL { { var2 } } DCNL { % elif var3 % } DCNL { { var3 } } DCNL { % endif % } DCNL If you want to disable auto-escaping of variables you can use : : DCNL { % autoescape off % } DCNL { % firstof var1 var2 var3 &quot; &lt; strong &gt; fallback value &lt; / strong &gt; &quot; % } DCNL { % autoescape % } DCNL Or if only some variables should be escaped , you can use : : DCNL { % firstof var1 var2 &#124; safe var3 &quot; &lt; strong &gt; fallback value &lt; / strong &gt; &quot; &#124; safe % } &apos;
def freecpu ( ) : DCNL &apos; Return an int representing the number of unallocated cpus on this DCNL hypervisor DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; virt.freecpu&apos;
def unexpected _ fail _ on _ npm _ install ( arg ) : DCNL &apos; For our tests , we need the call for diff-quality running pep8 reports to fail , since that is what DCNL is going to fail when we pass in a percentage ( &quot; p &quot; ) requirement . &apos; 
def _ list _ interface _ private _ addrs ( eni _ desc ) : DCNL &apos; Returns a list of all of the private IP addresses attached to a DCNL network interface . The \ &apos; primary \ &apos; address will be listed first . &apos; 
def ls _ ( path = &apos; / &apos; , profile = None ) : DCNL &apos; .. versionadded : : 2014.7.0 DCNL Return all keys and dirs inside a specific path . Returns an empty dict on DCNL failure . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion etcd.ls / path / to / dir / DCNL salt myminion etcd.ls / path / to / dir / profile = my _ etcd _ config&apos;
def _ detect _ gce _ environment ( ) : DCNL &apos; Determine if the current environment is Compute Engine . DCNL Returns : DCNL Boolean indicating whether or not the current environment is Google DCNL Compute Engine . &apos; 
@ testing.requires _ testing _ data DCNL def test _ dipole _ fitting _ fixed ( ) : DCNL &apos; Test dipole fitting with a fixed position . &apos; 
def _ rec _ list _ terms ( g , v , monom ) : DCNL &apos; Recursive helper for : func : `dmp _ list _ terms` . &apos; 
def update _ quota ( tenant _ id , subnet = None , router = None , network = None , floatingip = None , port = None , security _ group = None , security _ group _ rule = None , profile = None ) : DCNL &apos; Update a tenant \ &apos; s quota DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; neutron.update _ quota tenant-id subnet = 40 router = 50 DCNL network = 10 floatingip = 30 port = 30 DCNL : param tenant _ id : ID of tenant DCNL : param subnet : Value of subnet quota ( Optional ) DCNL : param router : Value of router quota ( Optional ) DCNL : param network : Value of network quota ( Optional ) DCNL : param floatingip : Value of floatingip quota ( Optional ) DCNL : param port : Value of port quota ( Optional ) DCNL : param security _ group : Value of security group ( Optional ) DCNL : param security _ group _ rule : Value of security group rule ( Optional ) DCNL : param profile : Profile to build on ( Optional ) DCNL : return : Value of updated quota&apos;
@ staff _ member _ required DCNL def static _ proxy ( request ) : DCNL &apos; Serves TinyMCE plugins inside the inline popups and the uploadify DCNL SWF , as these are normally static files , and will break with DCNL cross-domain JavaScript errors if ``STATIC _ URL`` is an external DCNL host . URL for the file is passed in via querystring in the inline DCNL popup plugin template , and we then attempt to pull out the relative DCNL path to the file , so that we can serve it locally via Django . &apos; 
def test _ cache _ remove _ data ( config _ stub , tmpdir ) : DCNL &apos; Test if a previously inserted entry can be removed from the cache . &apos; 
def _ executeExternalCmdAndReapStdout ( args ) : DCNL &apos; args : Args list as defined for the args parameter in subprocess.Popen ( ) DCNL Returns : result dicionary : DCNL \ &apos; exitStatus \ &apos; : &lt; exit-status-of-external-command &gt; , DCNL \ &apos; stdoutData \ &apos; : &quot; string &quot; , DCNL \ &apos; stderrData \ &apos; : &quot; string &quot; &apos;
def chars _ to _ ranges ( s ) : DCNL &apos; Return a list of character codes consisting of pairs DCNL &#91; code1a , code1b , code2a , code2b , ... &#93; which cover all DCNL the characters in &#124; s &#124;  . &apos; 
def sfv _ check ( sfv _ path ) : DCNL &apos; Verify files using SFV file , DCNL input : full path of sfv , file are assumed to be relative to sfv DCNL returns : List of failing files or &#91; &#93; when all is OK&apos;
def wait _ for _ image _ status ( client , image _ id , status ) : DCNL &apos; Waits for an image to reach a given status . DCNL The client should have a show _ image ( image _ id ) method to get the image . DCNL The client should also have build _ interval and build _ timeout attributes . &apos; 
def _ get _ profile _ image _ filename ( name , size , file _ extension = PROFILE _ IMAGE _ FILE _ EXTENSION ) : DCNL &apos; Returns the full filename for a profile image , given the name and size . &apos; 
def get _ loginclass ( name ) : DCNL &apos; Get the login class of the user DCNL .. note : : DCNL This function only applies to OpenBSD systems . DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; user.get _ loginclass foo&apos;
def find _ path _ file ( specific _ file , search _ directory ) : DCNL &apos; result _ path _ filename&apos;
def home _ link ( ) : DCNL &apos; Returns a link to the API entry point / home page . DCNL .. versionchanged : : 0.5 DCNL Link is relative to API root . DCNL .. versionchanged : : 0.0.3 DCNL Now returning a JSON link . &apos; 
def assert _ array _ less ( x , y , err _ msg = &apos; &apos; , verbose = True ) : DCNL &apos; Raises an AssertionError if array _ like objects are not ordered by less than . DCNL Args : DCNL x ( numpy.ndarray or cupy.ndarray ) : The smaller object to check . DCNL y ( numpy.ndarray or cupy.ndarray ) : The larger object to compare . DCNL err _ msg ( str ) : The error message to be printed in case of failure . DCNL verbose ( bool ) : If ``True`` , the conflicting values DCNL are appended to the error message . DCNL .. seealso : : : func : `numpy.testing.assert _ array _ less`&apos;
def load _ token ( session _ file ) : DCNL &apos; Load authentication tokens from persistent storage , if exists . &apos; 
def reload _ localzone ( ) : DCNL &apos; Reload the cached localzone . You need to call this if the timezone has changed . &apos; 
@ testing.requires _ testing _ data DCNL def test _ make _ field _ map _ eeg ( ) : DCNL &apos; Test interpolation of EEG field onto head&apos;
def main ( ) : DCNL &apos; The main program . &apos; 
def formstyle _ divs ( form , fields ) : DCNL &apos; divs only&apos;
def main ( ) : DCNL &apos; Obtain the uptime from the show version output DCNL Prints to STDOUT \ &apos; 12 weeks , 5 days , 1 hour , 4 minutes \ &apos; &apos;
def is _ list ( value , min = None , max = None ) : DCNL &apos; Check that the value is a list of values . DCNL You can optionally specify the minimum and maximum number of members . DCNL It does no check on list members . DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list \ &apos; , ( ) ) DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list \ &apos; , &#91; &#93; ) DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list \ &apos; , ( 1 , 2 ) ) DCNL &#91; 1 , 2 &#93; DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list \ &apos; , &#91; 1 , 2 &#93; ) DCNL &#91; 1 , 2 &#93; DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list ( 3 ) \ &apos; , ( 1 , 2 ) ) DCNL Traceback ( most recent call last ) : DCNL VdtValueTooShortError : the value &quot; ( 1 , 2 ) &quot; is too short . DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list ( max = 5 ) \ &apos; , ( 1 , 2 , 3 , 4 , 5 , 6 ) ) DCNL Traceback ( most recent call last ) : DCNL VdtValueTooLongError : the value &quot; ( 1 , 2 , 3 , 4 , 5 , 6 ) &quot; is too long . DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list ( min = 3 , max = 5 ) \ &apos; , ( 1 , 2 , 3 , 4 ) ) DCNL &#91; 1 , 2 , 3 , 4 &#93; DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list \ &apos; , 0 ) DCNL Traceback ( most recent call last ) : DCNL VdtTypeError : the value &quot; 0 &quot; is of the wrong type . DCNL &gt; &gt; &gt; vtor.check ( \ &apos; list \ &apos; , \ &apos; 12 \ &apos; ) DCNL Traceback ( most recent call last ) : DCNL VdtTypeError : the value &quot; 12 &quot; is of the wrong type . &apos; 
@ pytest.mark.xfail DCNL def test _ precision _ neg ( ) : DCNL &apos; Check precision when jd1 is negative . Currently fails because ERFA routines use a DCNL test like jd1 &gt; jd2 to decide which component to update . Should be DCNL abs ( jd1 ) &gt; abs ( jd2 )  . &apos; 
def _ _ virtual _ _ ( ) : DCNL &apos; Only load if the splunk _ search module is available in _ _ salt _ _ &apos;
def viewdefaults ( wrapped ) : DCNL &apos; Decorator for add _ view-like methods which takes into account DCNL _ _ view _ defaults _ _ attached to view it is passed . Not a documented API but DCNL used by some external systems . &apos; 
def insert ( tup , loc , val ) : DCNL &apos; &gt; &gt; &gt; insert ( ( \ &apos; a \ &apos; , \ &apos; b \ &apos; , \ &apos; c \ &apos; ) , 0 , \ &apos; x \ &apos; ) DCNL ( \ &apos; x \ &apos; , \ &apos; b \ &apos; , \ &apos; c \ &apos; ) &apos;
def parse _ date ( ims ) : DCNL &apos; Parse rfc1123 , rfc850 and asctime timestamps and return UTC epoch . &apos; 
def get _ pending _ file _ rename ( ) : DCNL &apos; Determine whether there are pending file rename operations that require a reboot . DCNL : return : A boolean representing whether there are pending file rename operations . DCNL : rtype : bool DCNL .. versionadded : : 2016.11.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; system.get _ pending _ file _ rename&apos;
def fix _ html ( container , raw ) : DCNL &apos; Fix any parsing errors in the HTML represented as a string in raw . Fixing is done using the HTML5 parsing algorithm . &apos; 
def bivariate _ normal ( X , Y , sigmax = 1.0 , sigmay = 1.0 , mux = 0.0 , muy = 0.0 , sigmaxy = 0.0 ) : DCNL &apos; Bivariate Gaussian distribution for equal shape * X * , * Y * . DCNL See `bivariate normal DCNL &lt; http : / / mathworld.wolfram.com / BivariateNormalDistribution.html &gt; ` _ DCNL at mathworld . &apos; 
@ require _ role ( &apos; admin &apos; ) DCNL def idc _ edit ( request ) : DCNL &apos; IDC edit view&apos;
def translate _ pattern ( pattern , anchor = 1 , prefix = None , is _ regex = 0 ) : DCNL &apos; Translate a shell-like wildcard pattern to a compiled regular DCNL expression . DCNL Return the compiled regex . If \ &apos; is _ regex \ &apos; true , DCNL then \ &apos; pattern \ &apos; is directly compiled to a regex ( if it \ &apos; s a string ) DCNL or just returned as-is ( assumes it \ &apos; s a regex object )  . &apos; 
def sample _ ids _ from _ metadata _ description ( mapping _ f , valid _ states _ str ) : DCNL &apos; Given a description of metadata , return the corresponding sample ids&apos;
def _ encode ( s ) : DCNL &apos; Encode the string for inclusion in a URL ( common to both DCNL LyricsWiki and Lyrics.com )  . &apos; 
def makeSplitter ( lstrip = None , sep = &apos; &#124; &apos; , comments = True , origNotesSep = &apos; DCSP ( &apos; , newNotesSep = &apos; : : ( &apos; , strip = None ) : DCNL &apos; Return a splitter function suitable for a given set of data . &apos; 
@ requires _ sklearn DCNL def test _ XdawnTransformer ( ) : DCNL &apos; Test _ XdawnTransformer . &apos; 
@ lower _ getattr _ generic ( types.BaseNamedTuple ) DCNL def namedtuple _ getattr ( context , builder , typ , value , attr ) : DCNL &apos; Fetch a namedtuple \ &apos; s field . &apos; 
def compute _ logarithmic _ scale ( min _ , max _ , min _ scale , max _ scale ) : DCNL &apos; Compute an optimal scale for logarithmic&apos;
def getGeometryOutputByArguments ( arguments , elementNode ) : DCNL &apos; Get vector3 vertexes from attribute dictionary by arguments . &apos; 
def graph _ process ( mg , lenmavlist ) : DCNL &apos; process for a graph&apos;
def is _ py2exe _ or _ cx _ Freeze ( ) : DCNL &apos; Return True if this is a py2exe / cx _ Freeze distribution of Spyder&apos;
def get _ profile _ image _ names ( username ) : DCNL &apos; Returns a dict containing the filenames for a complete set of profile DCNL images , keyed by pixel size . &apos; 
def _ wait _ until _ complete ( operation , max _ attempts = 5 ) : DCNL &apos; Wait until an operation has completed . DCNL : type operation : : class : `google.cloud.operation.Operation` DCNL : param operation : Operation that has not completed . DCNL : type max _ attempts : int DCNL : param max _ attempts : ( Optional ) The maximum number of times to check if DCNL the operation has completed . Defaults to 5 . DCNL : rtype : bool DCNL : returns : Boolean indicating if the operation is complete . &apos; 
def _ exit ( code = 0 ) : DCNL &apos; Internal function . Calling it will raise the exception SystemExit . &apos; 
def is _ list ( value ) : DCNL &apos; Check if a variable is a list . &apos; 
def randomRange ( start = 0 , stop = 1000 , seed = None ) : DCNL &apos; Returns random integer value in given range DCNL &gt; &gt; &gt; random.seed ( 0 ) DCNL &gt; &gt; &gt; randomRange ( 1 , 500 ) DCNL 423&apos;
def hash _ file ( filename , size = None , method = &apos; md5 &apos; ) : DCNL &apos; Calculate the hash of filename . DCNL If size is not None , limit to first size bytes . DCNL Throw exception if something is wrong with filename . DCNL Can be also implemented with bash one-liner ( assuming size % 1024 = = 0 ) : DCNL dd if = filename bs = 1024 count = size / 1024 &#124; sha1sum - DCNL : param filename : Path of the file that will have its hash calculated . DCNL : param method : Method used to calculate the hash . Supported methods : DCNL * md5 DCNL * sha1 DCNL : return : Hash of the file , if something goes wrong , return None . &apos; 
def correlate _ output _ formatter ( bt , test _ stats , pvals , fdr _ pvals , bon _ pvals , md _ key ) : DCNL &apos; Produce lines for a tab delimited text file for correlations.py. DCNL Paramaters DCNL bt : biom table object DCNL test _ stats : array-like DCNL Floats representing correlation coefficients or paired t test DCNL statistics . DCNL pvals : array-like DCNL Floats representing pvalues for given correlation coefficients . DCNL fdr _ pvals : array-like DCNL Floats representing FDR corrected pvals . DCNL bon _ pvals : array-like DCNL Floats representing Bonferroni corrected pvals . DCNL md _ key : str or None DCNL Key for extracting feature metadata from biom table . DCNL Returns DCNL list of strs&apos;
def format _ unixtime _ ms ( unixtime ) : DCNL &apos; Format a unix timestamp in ms to a human readable string&apos;
def md5SessionKey ( params , password ) : DCNL &apos; If the &quot; algorithm &quot; directive \ &apos; s value is &quot; MD5-sess &quot; , then A1 DCNL &#91; the session key &#93; is calculated only once - on the first request by the DCNL client following receipt of a WWW-Authenticate challenge from the server . DCNL This creates a \ &apos; session key \ &apos; for the authentication of subsequent DCNL requests and responses which is different for each &quot; authentication DCNL session &quot; , thus limiting the amount of material hashed with any one DCNL key . DCNL Because the server need only use the hash of the user DCNL credentials in order to create the A1 value , this construction could DCNL be used in conjunction with a third party authentication service so DCNL that the web server would not need the actual password value . The DCNL specification of such a protocol is beyond the scope of this DCNL specification . &apos; 
def get _ items ( xml ) : DCNL &apos; Opens a WordPress xml file and returns a list of items&apos;
def _ AddSetListenerMethod ( cls ) : DCNL &apos; Helper for _ AddMessageMethods ( )  . &apos; 
def eglQueryString ( display , name ) : DCNL &apos; Query string from display&apos;
@ register _ opt ( ) DCNL @ local _ optimizer ( &#91; SparseBlockOuter , GpuFromHost &#93; ) DCNL def gpu _ sparse _ block _ outer _ opt ( node ) : DCNL &apos; SparseBlockOuter ( HostFromGpu ( input ) ) - &gt; DCNL HostFromGpu ( GpuSparseBlockOuter ( input ) ) DCNL or DCNL GpuFromHost ( SparseBlockOuter ) - &gt; GpuSparseBlockOuter&apos;
def import _ library ( taglib _ module ) : DCNL &apos; Load a template tag library module . DCNL Verifies that the library contains a \ &apos; register \ &apos; attribute , and DCNL returns that attribute as the representation of the library&apos;
def do _ autopaginate ( parser , token ) : DCNL &apos; Splits the arguments to the autopaginate tag and formats them correctly . &apos; 
@ hook.command DCNL def escape ( text ) : DCNL &apos; &lt; string &gt; -- Unicode escapes &lt; string &gt;  . &apos; 
def _ validator ( code _ or _ name , validator _ type ) : DCNL &apos; Internal shared implementation to handle both error and warning DCNL validation checks . DCNL Args : DCNL code code _ or _ name ( int or str ) : a defined error code or custom message DCNL validator _ type ( str ) : either &quot; error &quot; or &quot; warning &quot; DCNL Returns : DCNL validation decorator&apos;
def lerp ( a , b , t ) : DCNL &apos; Returns the linear interpolation between a and b at time t between 0.0-1.0 . DCNL For example : lerp ( 100 , 200 , 0.5 ) = &gt; 150 . &apos; 
def filter _ factory ( global _ conf , * * local _ conf ) : DCNL &apos; Returns a WSGI filter app for use with paste.deploy . &apos; 
def _ get _ globals ( ) : DCNL &apos; Return current Python interpreter globals namespace&apos;
def mutShrink ( individual ) : DCNL &apos; This operator shrinks the * individual * by chosing randomly a branch and DCNL replacing it with one of the branch \ &apos; s arguments ( also randomly chosen ) . DCNL : param individual : The tree to be shrinked . DCNL : returns : A tuple of one tree . &apos; 
def logout _ then _ login ( request , login _ url = None , extra _ context = _ sentinel ) : DCNL &apos; Logs out the user if they are logged in . Then redirects to the log-in page . &apos; 
def create _ relationship ( model , instance , relation ) : DCNL &apos; Creates a relationship from the given relation name . DCNL Returns a dictionary representing a relationship as described in DCNL the `Relationships` _ section of the JSON API specification . DCNL `model` is the model class of the primary resource for which a DCNL relationship object is being created . DCNL `instance` is the instance of the model for which we are considering DCNL a related value . DCNL `relation` is the name of the relation of `instance` given as a DCNL string . DCNL This function may raise : exc : `ValueError` if an API has not been DCNL created for the primary model , `model` , or the model of the DCNL relation . DCNL .. _ Relationships : DCNL http : / / jsonapi.org / format / # document-resource-object-relationships&apos;
def _ validate _ post _ params ( params ) : DCNL &apos; Validate request POST parameters to the generate and regenerate certificates end-point . DCNL Arguments : DCNL params ( QueryDict ) : Request parameters . DCNL Returns : tuple of ( dict , HttpResponse ) &apos;
def to _ numpy _ matrix ( G , nodelist = None , dtype = None , order = None , multigraph _ weight = sum , weight = &apos; weight &apos; , nonedge = 0.0 ) : DCNL &apos; Return the graph adjacency matrix as a NumPy matrix . DCNL Parameters DCNL G : graph DCNL The NetworkX graph used to construct the NumPy matrix . DCNL nodelist : list , optional DCNL The rows and columns are ordered according to the nodes in `nodelist` . DCNL If `nodelist` is None , then the ordering is produced by G.nodes ( ) . DCNL dtype : NumPy data type , optional DCNL A valid single NumPy data type used to initialize the array . DCNL This must be a simple type such as int or numpy.float64 and DCNL not a compound data type ( see to _ numpy _ recarray ) DCNL If None , then the NumPy default is used . DCNL order : { \ &apos; C \ &apos; , \ &apos; F \ &apos; } , optional DCNL Whether to store multidimensional data in C- or Fortran-contiguous DCNL ( row- or column-wise ) order in memory . If None , then the NumPy default DCNL is used . DCNL multigraph _ weight : { sum , min , max } , optional DCNL An operator that determines how weights in multigraphs are handled . DCNL The default is to sum the weights of the multiple edges . DCNL weight : string or None optional ( default = \ &apos; weight \ &apos; ) DCNL The edge attribute that holds the numerical value used for DCNL the edge weight . If an edge does not have that attribute , then the DCNL value 1 is used instead . DCNL nonedge : float ( default = 0.0 ) DCNL The matrix values corresponding to nonedges are typically set to zero . DCNL However , this could be undesirable if there are matrix values DCNL corresponding to actual edges that also have the value zero . If so , DCNL one might prefer nonedges to have some other value , such as nan . DCNL Returns DCNL M : NumPy matrix DCNL Graph adjacency matrix DCNL See Also DCNL to _ numpy _ recarray , from _ numpy _ matrix DCNL Notes DCNL The matrix entries are assigned to the weight edge attribute . When DCNL an edge does not have a weight attribute , the value of the entry is set to DCNL the number 1 . For multiple ( parallel ) edges , the values of the entries DCNL are determined by the `multigraph _ weight` parameter . The default is to DCNL sum the weight attributes for each of the parallel edges . DCNL When `nodelist` does not contain every node in `G` , the matrix is built DCNL from the subgraph of `G` that is induced by the nodes in `nodelist` . DCNL The convention used for self-loop edges in graphs is to assign the DCNL diagonal matrix entry value to the weight attribute of the edge DCNL ( or the number 1 if the edge has no weight attribute ) . If the DCNL alternate convention of doubling the edge weight is desired the DCNL resulting Numpy matrix can be modified as follows : DCNL &gt; &gt; &gt; import numpy as np DCNL &gt; &gt; &gt; G = nx.Graph ( &#91; ( 1 , 1 ) &#93; ) DCNL &gt; &gt; &gt; A = nx.to _ numpy _ matrix ( G ) DCNL &gt; &gt; &gt; A DCNL matrix ( &#91; &#91; 1 . &#93; &#93; ) DCNL &gt; &gt; &gt; A.A &#91; np.diag _ indices _ from ( A ) &#93; * = 2 DCNL &gt; &gt; &gt; A DCNL matrix ( &#91; &#91; 2 . &#93; &#93; ) DCNL Examples DCNL &gt; &gt; &gt; G = nx.MultiDiGraph ( ) DCNL &gt; &gt; &gt; G.add _ edge ( 0,1 , weight = 2 ) DCNL 0 DCNL &gt; &gt; &gt; G.add _ edge ( 1,0 ) DCNL 0 DCNL &gt; &gt; &gt; G.add _ edge ( 2,2 , weight = 3 ) DCNL 0 DCNL &gt; &gt; &gt; G.add _ edge ( 2,2 ) DCNL 1 DCNL &gt; &gt; &gt; nx.to _ numpy _ matrix ( G , nodelist = &#91; 0,1,2 &#93; ) DCNL matrix ( &#91; &#91; 0 . , 2 . , 0 . &#93; , DCNL &#91; 1 . , 0 . , 0 . &#93; , DCNL &#91; 0 . , 0 . , 4 . &#93; &#93; ) &apos;
def zeros _ like ( a , dtype = None ) : DCNL &apos; Returns an array of zeros with same shape and dtype as a given array . DCNL This function currently does not support ``order`` and ``subok`` options . DCNL Args : DCNL a ( cupy.ndarray ) : Base array . DCNL dtype : Data type specifier . The dtype of ``a`` is used by default . DCNL Returns : DCNL cupy.ndarray : An array filled with ones . DCNL .. seealso : : : func : `numpy.zeros _ like`&apos;
def clean _ db ( ) : DCNL &apos; Delete kalite data associated with Zone , Facility and Device DCNL Does not remove the django admin accounts etc . &apos; 
def text _ ( s , encoding = &apos; latin-1 &apos; , errors = &apos; strict &apos; ) : DCNL &apos; If ``s`` is an instance of ``binary _ type`` , return DCNL ``s.decode ( encoding , errors ) `` , otherwise return ``s``&apos;
def delete _ object ( request , model , post _ delete _ redirect , object _ id = None , slug = None , slug _ field = &apos; slug &apos; , template _ name = None , template _ loader = loader , extra _ context = None , login _ required = False , context _ processors = None , template _ object _ name = &apos; object &apos; ) : DCNL &apos; Generic object-delete function . DCNL The given template will be used to confirm deletetion if this view is DCNL fetched using GET ; for safty , deletion will only be performed if this DCNL view is POSTed . DCNL Templates : `` &lt; app _ label &gt; / &lt; model _ name &gt; _ confirm _ delete.html`` DCNL Context : DCNL object DCNL the original object being deleted&apos;
def subscription _ check _ iam _ permissions ( client , to _ delete ) : DCNL &apos; Check subscription IAM permissions . &apos; 
def getPage ( url , contextFactory = None , response _ transform = None , * args , * * kwargs ) : DCNL &apos; Adapted version of twisted.web.client.getPage&apos;
def set _ var _ value ( hass , entity _ id , value ) : DCNL &apos; Change value of homematic system variable . &apos; 
def beacon ( config ) : DCNL &apos; Watch for changes on network settings DCNL By default , the beacon will emit when there is a value change on one of the DCNL settings on watch . The config also support the onvalue parameter for each DCNL setting , which instruct the beacon to only emit if the setting changed to the DCNL value defined . DCNL Example Config DCNL .. code-block : : yaml DCNL beacons : DCNL network _ settings : DCNL eth0 : DCNL ipaddr : DCNL promiscuity : DCNL onvalue : 1 DCNL eth1 : DCNL linkmode : DCNL The config above will check for value changes on eth0 ipaddr and eth1 linkmode . It will also DCNL emit if the promiscuity value changes to 1 . DCNL Beacon items can use the * wildcard to make a definition apply to several interfaces . For DCNL example an eth * would apply to all ethernet interfaces . DCNL Setting the argument coalesce = True will combine all the beacon results on a single event . DCNL The example below shows how to trigger coalesced results : DCNL .. code-block : : yaml DCNL beacons : DCNL network _ settings : DCNL coalesce : True DCNL eth0 : DCNL ipaddr : DCNL promiscuity : &apos;
def testIBP ( ) : DCNL &apos; Plot matrices generated by an IBP , for a few different settings . &apos; 
def train _ model ( name , g _ train , d _ train , sampler , generator , samples _ per _ epoch , nb _ epoch , z _ dim = 100 , verbose = 1 , callbacks = &#91; &#93; , validation _ data = None , nb _ val _ samples = None , saver = None ) : DCNL &apos; Main training loop . DCNL modified from Keras fit _ generator&apos;
def rebuild _ topictree ( remove _ unknown _ exercises = False , remove _ disabled _ topics = True , whitewash _ node _ data = whitewash _ node _ data , retrieve _ API _ data = retrieve _ API _ data , channel _ data = { } , channel = None ) : DCNL &apos; Downloads topictree ( and supporting ) data and uses it to DCNL rebuild the KA Lite topictree cache ( topics.json ) . DCNL Does this by collecting all relevant topic _ tree and content data from data source . DCNL Recurses over the entire topic tree to remove extraneous data . DCNL Denorms content data to reduce the bulk of the topic tree . DCNL Adds position data to every node in the topic tree . &apos; 
def p _ command _ let ( p ) : DCNL &apos; command : LET variable EQUALS expr&apos;
def _ get _ spec ( tree _ base , spec , template , saltenv = &apos; base &apos; ) : DCNL &apos; Get the spec file ( tarball of the debian sub-dir to use ) DCNL and place it in build area&apos;
def gf _ compose _ mod ( g , h , f , p , K ) : DCNL &apos; Compute polynomial composition ``g ( h ) `` in ``GF ( p ) &#91; x &#93; / ( f ) `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import ZZ DCNL &gt; &gt; &gt; from sympy.polys.galoistools import gf _ compose _ mod DCNL &gt; &gt; &gt; gf _ compose _ mod ( ZZ.map ( &#91; 3 , 2 , 4 &#93; ) , ZZ.map ( &#91; 2 , 2 , 2 &#93; ) , ZZ.map ( &#91; 4 , 3 &#93; ) , 5 , ZZ ) DCNL &#91; 4 &#93; &apos;
def queryset _ iterator ( queryset , chunksize = 1000 ) : DCNL &apos; The queryset iterator helps to keep the memory consumption down . DCNL And also making it easier to process for weaker computers . &apos; 
def tweet ( ) : DCNL &apos; Tweet&apos;
def patched ( f ) : DCNL &apos; &apos;
def _ remove _ intercept _ patsy ( terms ) : DCNL &apos; Remove intercept from Patsy terms . &apos; 
def ValidateStringLength ( name , value , max _ len ) : DCNL &apos; Raises an exception if the supplied string is too long . DCNL Args : DCNL name : Name of the property this is for . DCNL value : String value . DCNL max _ len : Maximum length the string may be . DCNL Raises : DCNL OverflowError if the value is larger than the maximum length . &apos; 
def compat _ tee ( iterable ) : DCNL &apos; Return two independent iterators from a single iterable . DCNL Based on http : / / www.python.org / doc / 2.3.5 / lib / itertools-example.html&apos;
def get _ protocol _ from _ tool _ shed _ url ( tool _ shed _ url ) : DCNL &apos; Return the protocol from the received tool _ shed _ url if it exists . &apos; 
def makeListCompatible ( fn ) : DCNL &apos; Return a new function allowing fn ( \ &apos; a 1 b \ &apos; ) to be called as DCNL newfn ( \ &apos; a \ &apos; , 1 , \ &apos; b \ &apos; ) &apos;
def register ( request ) : DCNL &apos; Allow external auth to intercept and handle a registration request . DCNL Arguments : DCNL request ( Request ) : A request for the registration page . DCNL Returns : DCNL Response or None&apos;
def _ reconstitute ( config , full _ path ) : DCNL &apos; Try to instantiate a RenewableCert , updating config with relevant items . DCNL This is specifically for use in renewal and enforces several checks DCNL and policies to ensure that we can try to proceed with the renewal DCNL request . The config argument is modified by including relevant options DCNL read from the renewal configuration file . DCNL : param configuration.NamespaceConfig config : configuration for the DCNL current lineage DCNL : param str full _ path : Absolute path to the configuration file that DCNL defines this lineage DCNL : returns : the RenewableCert object or None if a fatal error occurred DCNL : rtype : `storage.RenewableCert` or NoneType&apos;
def format _ acl _ v2 ( acl _ dict ) : DCNL &apos; Returns a version-2 Swift ACL JSON string . DCNL HTTP headers for Version 2 ACLs have the following form : DCNL Header-Name : { &quot; arbitrary &quot; : &quot; json &quot; , &quot; encoded &quot; : &quot; string &quot; } DCNL JSON will be forced ASCII ( containing six-char \ uNNNN sequences rather DCNL than UTF-8 ; UTF-8 is valid JSON but clients vary in their support for DCNL UTF-8 headers ) , and without extraneous whitespace . DCNL Advantages over V1 : forward compatibility ( new keys don \ &apos; t cause parsing DCNL exceptions ) ; Unicode support ; no reserved words ( you can have a user DCNL named .rlistings if you want ) . DCNL : param acl _ dict : dict of arbitrary data to put in the ACL ; see specific DCNL auth systems such as tempauth for supported values DCNL : returns : a JSON string which encodes the ACL&apos;
def test _ version ( ) : DCNL &apos; Should have a version string&apos;
def done _ command ( client , args ) : DCNL &apos; Marks a task as done . &apos; 
def package _ relationship _ update ( context , data _ dict ) : DCNL &apos; Update a relationship between two datasets ( packages ) . DCNL The subject , object and type parameters are required to identify the DCNL relationship . Only the comment can be updated . DCNL You must be authorized to edit both the subject and the object datasets . DCNL : param subject : the name or id of the dataset that is the subject of the DCNL relationship DCNL : type subject : string DCNL : param object : the name or id of the dataset that is the object of the DCNL relationship DCNL : param type : the type of the relationship , one of `` \ &apos; depends _ on \ &apos; `` , DCNL `` \ &apos; dependency _ of \ &apos; `` , `` \ &apos; derives _ from \ &apos; `` , `` \ &apos; has _ derivation \ &apos; `` , DCNL `` \ &apos; links _ to \ &apos; `` , `` \ &apos; linked _ from \ &apos; `` , `` \ &apos; child _ of \ &apos; `` or `` \ &apos; parent _ of \ &apos; `` DCNL : type type : string DCNL : param comment : a comment about the relationship ( optional ) DCNL : type comment : string DCNL : returns : the updated relationship DCNL : rtype : dictionary&apos;
def scp ( reactor , username , host , remote _ path , local _ path , direction , port = 22 , identity _ file = None ) : DCNL &apos; : param reactor : A ``twisted.internet.reactor``. DCNL : param bytes username : The SSH username . DCNL : param bytes host : The SSH host . DCNL : param FilePath remote _ path : The path to the remote file . DCNL : param FilePath local _ path : The path to the local file . DCNL : param direction : One of ``DOWNLOAD`` or ``UPLOAD`` . DCNL : param int port : The SSH TCP port . DCNL : param FilePath identity _ file : The path to an SSH private key . DCNL : returns : A ``Deferred`` that fires when the process is ended . &apos; 
def stitch _ rbms ( batch _ size , rbm _ list , niter , inference _ procedure = None , targets = False ) : DCNL &apos; Returns a DBM initialized with pre-trained RBMs , with weights and biases DCNL initialized according to R. Salakhutdinov \ &apos; s policy . DCNL This method assumes the RBMs were trained normally . It divides the first DCNL and last hidden layer \ &apos; s weights by two and initialized a hidden layer \ &apos; s DCNL biases as the mean of its biases and the biases of the visible layer of the DCNL RBM above it . &apos; 
def add _ required _ label _ tag ( original _ function ) : DCNL &apos; Adds the \ &apos; required \ &apos; CSS class and an asterisks to required field labels . &apos; 
def make _ script _ tests ( executable ) : DCNL &apos; Generate a test suite which applies to any Flocker-installed node script . DCNL : param bytes executable : The basename of the script to be tested . DCNL : return : A ``TestCase`` subclass which defines some tests applied to the DCNL given executable . &apos; 
def no _ import _ translation _ in _ tests ( logical _ line , filename ) : DCNL &apos; Check for \ &apos; from nova.i18n import _ \ &apos; DCNL N337&apos;
def _ find _ clickable _ elem _ with _ wait ( context , by , wait _ time = MAX _ WAIT _ TIME ) : DCNL &apos; Tries to find an enabled element with an explicit timeout . DCNL &quot; Private &quot; function to hide Selenium details . DCNL context : a behave context DCNL by : A tuple selector used by Selenium DCNL wait _ time : The max time to wait in seconds DCNL Returns the element if found or raises TimeoutException&apos;
def get _ issues _ from _ bulk ( bulk _ data , * * additional _ fields ) : DCNL &apos; Convert `bulk _ data` into a list of issues . DCNL : param bulk _ data : List of issues in bulk format . DCNL : param additional _ fields : Additional fields when instantiating each issue . DCNL : return : List of `Issue` instances . &apos; 
def parse _ kwarg ( string _ ) : DCNL &apos; Parses the string and looks for the following kwarg format : DCNL &quot; { argument name } = { argument value } &quot; DCNL For example : &quot; my _ message = Hello world &quot; DCNL Returns the kwarg name and value , or ( None , None ) if the regex was not DCNL matched . &apos; 
def short _ group _ names ( groups ) : DCNL &apos; Find AniDB short group names for release groups DCNL : param groups : list of groups to find short group names for DCNL : return : list of shortened group names&apos;
def Internaldate2Time ( resp ) : DCNL &apos; time _ tuple = Internaldate2Time ( resp ) DCNL Convert IMAP4 INTERNALDATE to UT . &apos; 
def ftdi _ to _ clkbits ( baudrate ) : DCNL &apos; 10,27 = &gt; divisor = 10000 , rate = 300 DCNL 88,13 = &gt; divisor = 5000 , rate = 600 DCNL C4,09 = &gt; divisor = 2500 , rate = 1200 DCNL E2,04 = &gt; divisor = 1250 , rate = 2,400 DCNL 71,02 = &gt; divisor = 625 , rate = 4,800 DCNL 38,41 = &gt; divisor = 312.5 , rate = 9,600 DCNL D0,80 = &gt; divisor = 208.25 , rate = 14406 DCNL 9C , 80 = &gt; divisor = 156 , rate = 19,230 DCNL 4E , C0 = &gt; divisor = 78 , rate = 38,461 DCNL 34,00 = &gt; divisor = 52 , rate = 57,692 DCNL 1A , 00 = &gt; divisor = 26 , rate = 115,384 DCNL 0D , 00 = &gt; divisor = 13 , rate = 230,769&apos;
def question _ metadata ( ) : DCNL &apos; RESTful CRUD controller&apos;
def _ find _ es _ dict _ by _ key ( lookup _ dict , term ) : DCNL &apos; Performs iterative dictionary search based upon the following conditions : DCNL 1 . Subkeys may either appear behind a full stop ( . ) or at one lookup _ dict level lower in the tree . DCNL 2 . No wildcards exist within the provided ES search terms ( these are treated as string literals ) DCNL This is necessary to get around inconsistencies in ES data . DCNL For example : DCNL { \ &apos; ad.account _ name \ &apos; : \ &apos; bob \ &apos; } DCNL Or : DCNL { \ &apos; csp _ report \ &apos; : { \ &apos; blocked _ uri \ &apos; : \ &apos; bob.com \ &apos; } } DCNL And even : DCNL { \ &apos; juniper _ duo.geoip \ &apos; : { \ &apos; country _ name \ &apos; : \ &apos; Democratic People \ &apos; s Republic of Korea \ &apos; } } DCNL We want a search term of form &quot; key.subkey.subsubkey &quot; to match in all cases . DCNL : returns : A tuple with the first element being the dict that contains the key and the second DCNL element which is the last subkey used to access the target specified by the term . None is DCNL returned for both if the key can not be found . &apos; 
def set _ ip _ nonlocal _ bind _ for _ namespace ( namespace ) : DCNL &apos; Set ip _ nonlocal _ bind but don \ &apos; t raise exception on failure . &apos; 
def get _ today _ all ( ) : DCNL &apos; return DCNL DataFrame&apos;
def block ( bdaddr ) : DCNL &apos; Block a specific bluetooth device by BD Address DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; bluetooth.block DE : AD : BE : EF : CA : FE&apos;
def delete _ comment ( request , comment _ id ) : DCNL &apos; Delete a comment . DCNL Arguments : DCNL request : The django request object used for build _ absolute _ uri and DCNL determining the requesting user . DCNL comment _ id : The id of the comment to delete DCNL Raises : DCNL PermissionDenied : if user does not have permission to delete thread&apos;
def regex _ uri ( e , regexes , tag , default = None ) : DCNL &apos; Filters incoming URI against a list of regexes&apos;
def sort _ otu _ table ( otu _ table , sorted _ sample _ ids ) : DCNL &apos; Sort an OTU table by sorted sample ids&apos;
def ordinal ( value ) : DCNL &apos; Converts an integer to its ordinal as a string . 1 is \ &apos; 1st \ &apos; , 2 is \ &apos; 2nd \ &apos; , DCNL 3 is \ &apos; 3rd \ &apos; , etc . Works for any integer . &apos; 
def destroy ( name , call = None ) : DCNL &apos; This function irreversibly destroys a virtual machine on the cloud provider . DCNL Before doing so , it should fire an event on the Salt event bus . DCNL The tag for this event is `salt / cloud / &lt; vm name &gt; / destroying` . DCNL Once the virtual machine has been destroyed , another event is fired . DCNL The tag for that event is `salt / cloud / &lt; vm name &gt; / destroyed` . DCNL Dependencies : DCNL list _ nodes DCNL @ param name : DCNL @ type name : str DCNL @ param call : DCNL @ type call : DCNL @ return : True if all went well , otherwise an error message DCNL @ rtype : bool &#124; str&apos;
def get _ images _ table ( meta ) : DCNL &apos; No changes to the images table from 008 ... &apos;
def concatenate _ paths ( paths ) : DCNL &apos; concatenate list of paths into a single path . &apos; 
def label _ table ( dataset _ id , table _ id , label _ key , label _ value , project _ id = None ) : DCNL &apos; Add or modify a label on a table . &apos; 
def prepro ( I ) : DCNL &apos; prepro 210x160x3 uint8 frame into 6400 ( 80x80 ) 1D float vector&apos;
def put _ meta ( module , cf , container , src , dest , meta , clear _ meta ) : DCNL &apos; Set metadata on a container , single file , or comma-separated list . DCNL Passing a true value to clear _ meta clears the metadata stored in Cloud DCNL Files before setting the new metadata to the value of &quot; meta &quot;  . &apos; 
def parse _ ntlm _ resp ( msg3 , seq ) : DCNL &apos; Parse the 3rd msg in NTLM handshake DCNL Thanks to psychomario&apos;
def test _ prefer _ deep ( ) : DCNL &apos; c DCNL y b DCNL x a DCNL Prefer longer chains first so we should start with c&apos;
def _ gs _ decorrelation ( w , W , j ) : DCNL &apos; Orthonormalize w wrt the first j rows of W DCNL Parameters DCNL w : ndarray of shape ( n ) DCNL Array to be orthogonalized DCNL W : ndarray of shape ( p , n ) DCNL Null space definition DCNL j : int &lt; p DCNL The no of ( from the first ) rows of Null space W wrt which w is DCNL orthogonalized . DCNL Notes DCNL Assumes that W is orthogonal DCNL w changed in place&apos;
def removed ( name , dir = None , user = None ) : DCNL &apos; Verify that the given package is not installed . DCNL dir DCNL The target directory in which to install the package , or None for DCNL global installation DCNL user DCNL The user to run NPM with DCNL .. versionadded : : 0.17.0&apos;
def create _ gzip _ message ( payloads , key = None , compresslevel = None ) : DCNL &apos; Construct a Gzipped Message containing multiple Messages DCNL The given payloads will be encoded , compressed , and sent as a single atomic DCNL message to Kafka . DCNL Arguments : DCNL payloads : list ( bytes ) , a list of payload to send be sent to Kafka DCNL key : bytes , a key used for partition routing ( optional ) &apos;
def unpublish _ exploration ( committer _ id , exploration _ id ) : DCNL &apos; Unpublishes an exploration . Commits changes . &apos; 
def fork _ exec ( cmd , exec _ env = None , logfile = None , pass _ fds = None ) : DCNL &apos; Execute a command using fork / exec . DCNL This is needed for programs system executions that need path DCNL searching but cannot have a shell as their parent process , for DCNL example : glance-api . When glance-api starts it sets itself as DCNL the parent process for its own process group . Thus the pid that DCNL a Popen process would have is not the right pid to use for killing DCNL the process group . This patch gives the test env direct access DCNL to the actual pid . DCNL : param cmd : Command to execute as an array of arguments . DCNL : param exec _ env : A dictionary representing the environment with DCNL which to run the command . DCNL : param logfile : A path to a file which will hold the stdout / err of DCNL the child process . DCNL : param pass _ fds : Sequence of file descriptors passed to the child . &apos; 
def custom _ create ( request ) : DCNL &apos; Calls create _ object generic view with a custom form class . &apos; 
def getMinimumByPathsComplex ( paths ) : DCNL &apos; Get a complex with each component the minimum of the respective components of lists of complex points . &apos; 
def iter _ texts _ from _ json _ bz2 ( loc ) : DCNL &apos; Iterator of unicode strings , one per document ( here , a comment ) . DCNL Expects a a path to a BZ2 file , which should be new-line delimited JSON . The DCNL document text should be in a string field titled \ &apos; body \ &apos; . DCNL This is the data format of the Reddit comments corpus . &apos; 
def query _ package ( module , name ) : DCNL &apos; Search for the package by name . DCNL Possible return values : DCNL * &quot; present &quot; - installed , no upgrade needed DCNL * &quot; outdated &quot; - installed , but can be upgraded DCNL * False - not installed or not found&apos;
def find _ indentation ( node ) : DCNL &apos; Find the indentation of * node *  . &apos; 
def expect _ warnings ( * messages , * * kw ) : DCNL &apos; Context manager which expects one or more warnings . DCNL With no arguments , squelches all SAWarnings emitted via DCNL sqlalchemy.util.warn and sqlalchemy.util.warn _ limited . Otherwise DCNL pass string expressions that will match selected warnings via regex ; DCNL all non-matching warnings are sent through . DCNL The expect version * * asserts * * that the warnings were in fact seen . DCNL Note that the test suite sets SAWarning warnings to raise exceptions . &apos; 
def get _ max _ age ( response ) : DCNL &apos; Returns the max-age from the response Cache-Control header as an integer DCNL ( or ``None`` if it wasn \ &apos; t found or wasn \ &apos; t an integer . &apos; 
def disabled _ xblocks ( ) : DCNL &apos; Return the QuerySet of disabled XBlock types ( which should not render in the LMS ) . DCNL Note that this method is independent of `XBlockStudioConfigurationFlag` and `XBlockStudioConfiguration` . &apos; 
@ register.tag ( name = &apos; crispy &apos; ) DCNL def do _ uni _ form ( parser , token ) : DCNL &apos; You need to pass in at least the form / formset object , and can also pass in the DCNL optional `crispy _ forms.helpers.FormHelper` object . DCNL helper ( optional ) : A `crispy _ forms.helper.FormHelper` object . DCNL Usage : : DCNL { % load crispy _ tags % } DCNL { % crispy form form.helper % } DCNL You can also provide the template pack as the third argument : : DCNL { % crispy form form.helper \ &apos; bootstrap \ &apos; % } DCNL If the `FormHelper` attribute is named `helper` you can simply do : : DCNL { % crispy form % } DCNL { % crispy form \ &apos; bootstrap \ &apos; % } &apos;
def t _ CPP _ CHAR ( t ) : DCNL &apos; ( L ) ? \ \ &apos; ( &#91; ^ \ \ \ n &#93; &#124; ( \ \ ( . &#124; \ n ) ) ) * ? \ \ &apos; &apos;
def _ CreateDbOperationMap ( entry _ list ) : DCNL &apos; Create an operation map from a list of OpMapEntry objects . Note DCNL that operation handlers must be classmethods , not staticmethods . &apos; 
def make _ envvar ( name ) : DCNL &apos; Makes a StoreNonEmpty node for an environment variable . &apos; 
def parse _ rarefaction _ record ( line ) : DCNL &apos; Return ( rarefaction _ fn , &#91; data &#93; ) &apos;
def validate _ key ( key , shape ) : DCNL &apos; Check if the key is a valid index . DCNL Args : DCNL key : The key used to index / slice . DCNL shape : The shape ( rows , cols ) of the expression . DCNL Returns : DCNL The key as a tuple of slices . DCNL Raises : DCNL Error : Index / slice out of bounds . &apos; 
def export _ to _ files ( record _ list = None , record _ module = None , verbose = 0 , create _ init = None ) : DCNL &apos; Export record _ list to files. record _ list is a list of lists ( &#91; doctype &#93; , &#91; docname &#93; ) , &apos;
def mkAssocResponse ( * keys ) : DCNL &apos; Build an association response message that contains the DCNL specified subset of keys . The values come from DCNL `association _ response _ values` . DCNL This is useful for testing for missing keys and other times that DCNL we don \ &apos; t care what the values are . &apos; 
def test _ end _ pos _ error _ correction ( ) : DCNL &apos; Source code without ending newline are given one , because the Python DCNL grammar needs it . However , they are removed again . We still want the right DCNL end _ pos , even if something breaks in the parser ( error correction )  . &apos; 
def int _ from _ geom ( func , zero = False ) : DCNL &apos; Argument is a geometry , return type is an integer . &apos; 
def check _ header _ validity ( header ) : DCNL &apos; Verifies that header value is a string which doesn \ &apos; t contain DCNL leading whitespace or return characters . This prevents unintended DCNL header injection . DCNL : param header : tuple , in the format ( name , value )  . &apos; 
def defoveate _ channel ( img , rings , dense _ input , start _ idx ) : DCNL &apos; Defoveate a single channel of the DenseDesignMatrix dense _ input into the DCNL variable , stored in topological ordering . DCNL Parameters DCNL img : WRITEME DCNL channel for defoveated image of shape ( batch , img _ h , img _ w ) DCNL rings : WRITEME DCNL list of ring _ sizes which were used to generate dense _ input DCNL dense _ input : WRITEME DCNL DenseDesignMatrix containing foveated dataset , of shape DCNL ( batch , dims ) DCNL start _ idx : WRITEME DCNL channel pointed to by img starts at dense _ input &#91; start _ idx &#93; &apos;
def _ get _ options ( ret = None ) : DCNL &apos; Get the SQLite3 options from salt . &apos; 
def create _ resource ( ) : DCNL &apos; Images resource factory method . &apos; 
def _ get _ constant ( name ) : DCNL &apos; Read a _ _ magic _ _ constant from qutebrowser / _ _ init _ _ .py. DCNL We don \ &apos; t import qutebrowser here because it can go wrong for multiple DCNL reasons . Instead we use re / ast to get the value directly from the source DCNL file . DCNL Args : DCNL name : The name of the argument to get . DCNL Return : DCNL The value of the argument . &apos; 
def assert _ regex ( result , expected , msg = &apos; &apos; ) : DCNL &apos; Assert that ``expected`` matches the result . DCNL Parameters DCNL result : str DCNL The string to search . DCNL expected : str or compiled regex DCNL The pattern to search for in ``result`` . DCNL msg : str , optional DCNL An extra assertion message to print if this fails . &apos; 
def scatter _ plot ( ) : DCNL &apos; scatter plot&apos;
@ webob.dec.wsgify DCNL @ util.check _ accept ( &apos; application / json &apos; ) DCNL def get _ resource _ provider ( req ) : DCNL &apos; Get a single resource provider . DCNL On success return a 200 with an application / json body representing DCNL the resource provider . &apos; 
@ require _ admin _ context DCNL def purge _ deleted _ rows ( context , age _ in _ days ) : DCNL &apos; Purge deleted rows older than age from cinder tables . &apos; 
def has _ module ( module _ name , members = &#91; &#93; ) : DCNL &apos; Return whether or not a given module can be imported . &apos; 
def create _ realign _ flow ( name = u &apos;realign &apos; ) : DCNL &apos; Realign a time series to the middle volume using spline interpolation DCNL Uses MCFLIRT to realign the time series and ApplyWarp to apply the rigid DCNL body transformations using spline interpolation ( unknown order ) . DCNL Example DCNL &gt; &gt; &gt; wf = create _ realign _ flow ( ) DCNL &gt; &gt; &gt; wf.inputs.inputspec.func = \ &apos; f3.nii \ &apos; DCNL &gt; &gt; &gt; wf.run ( ) # doctest : + SKIP&apos;
def dmp _ rem ( f , g , u , K ) : DCNL &apos; Returns polynomial remainder in ``K &#91; X &#93; `` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys import ring , ZZ , QQ DCNL &gt; &gt; &gt; R , x , y = ring ( &quot; x , y &quot; , ZZ ) DCNL &gt; &gt; &gt; R.dmp _ rem ( x * * 2 + x * y , 2 * x + 2 ) DCNL x * * 2 + x * y DCNL &gt; &gt; &gt; R , x , y = ring ( &quot; x , y &quot; , QQ ) DCNL &gt; &gt; &gt; R.dmp _ rem ( x * * 2 + x * y , 2 * x + 2 ) DCNL -y + 1&apos;
def get _ request _ location ( request , context ) : DCNL &apos; Determine country of origin of the `request` for the given `context` DCNL This is done by : DCNL * checking the CDN headers for country of origin if set DCNL * falling back on geocoding request.ip address against the geocoder service DCNL The resulting location is memoized on context on `context.location` DCNL request , context : Should be pylons.request &amp; pylons.c respectively ; &apos;
def service _ get _ all _ by _ host ( context , host ) : DCNL &apos; Get all services for a given host . &apos; 
def _ quote _ domain ( domain ) : DCNL &apos; Special quoting rule for placing domain names on a url line . DCNL Domain names tend to have . \ &apos; s in them . Urllib doesn \ &apos; t quote dots , DCNL but Routes tends to choke on them , so we need an extra level of DCNL by-hand quoting here . &apos; 
def cache _ key _ prefix ( request ) : DCNL &apos; Cache key for Mezzanine \ &apos; s cache middleware . Adds the current DCNL device and site ID . &apos; 
def forward ( data , impulse _ response = None , filter _ params = { } , predefined _ filter = None ) : DCNL &apos; Apply the given filter to data . DCNL Parameters DCNL data : ( M , N ) ndarray DCNL Input data . DCNL impulse _ response : callable `f ( r , c , * * filter _ params ) ` DCNL Impulse response of the filter . See LPIFilter2D . _ _ init _ _ . DCNL filter _ params : dict DCNL Additional keyword parameters to the impulse _ response function . DCNL Other Parameters DCNL predefined _ filter : LPIFilter2D DCNL If you need to apply the same filter multiple times over different DCNL images , construct the LPIFilter2D and specify it here . DCNL Examples DCNL Gaussian filter : DCNL &gt; &gt; &gt; def filt _ func ( r , c ) : DCNL ... return np.exp ( -np.hypot ( r , c ) / 1 ) DCNL &gt; &gt; &gt; from skimage import data DCNL &gt; &gt; &gt; filtered = forward ( data.coins ( ) , filt _ func ) &apos;
def import _ key ( extern _ key , passphrase = None ) : DCNL &apos; Import an RSA key ( public or private half ) , encoded in standard DCNL form . DCNL : Parameter extern _ key : DCNL The RSA key to import , encoded as a byte string . DCNL An RSA public key can be in any of the following formats : DCNL - X.509 certificate ( binary or PEM format ) DCNL - X.509 ``subjectPublicKeyInfo`` DER SEQUENCE ( binary or PEM DCNL encoding ) DCNL - `PKCS # 1` _ ``RSAPublicKey`` DER SEQUENCE ( binary or PEM encoding ) DCNL - OpenSSH ( textual public key only ) DCNL An RSA private key can be in any of the following formats : DCNL - PKCS # 1 ``RSAPrivateKey`` DER SEQUENCE ( binary or PEM encoding ) DCNL - `PKCS # 8` _ ``PrivateKeyInfo`` or ``EncryptedPrivateKeyInfo`` DCNL DER SEQUENCE ( binary or PEM encoding ) DCNL - OpenSSH ( textual public key only ) DCNL For details about the PEM encoding , see `RFC1421` _ / `RFC1423` _ . DCNL The private key may be encrypted by means of a certain pass phrase DCNL either at the PEM level or at the PKCS # 8 level . DCNL : Type extern _ key : string DCNL : Parameter passphrase : DCNL In case of an encrypted private key , this is the pass phrase from DCNL which the decryption key is derived . DCNL : Type passphrase : string DCNL : Return : An RSA key object ( `RsaKey` ) . DCNL : Raise ValueError / IndexError / TypeError : DCNL When the given key cannot be parsed ( possibly because the pass DCNL phrase is wrong ) . DCNL .. _ RFC1421 : http : / / www.ietf.org / rfc / rfc1421.txt DCNL .. _ RFC1423 : http : / / www.ietf.org / rfc / rfc1423.txt DCNL .. _ `PKCS # 1` : http : / / www.ietf.org / rfc / rfc3447.txt DCNL .. _ `PKCS # 8` : http : / / www.ietf.org / rfc / rfc5208.txt&apos;
def computeComprRate ( meta , compr _ size ) : DCNL &apos; Compute image compression rate . Skip size of color palette , focus on DCNL image pixels . Original size is width x height x bpp . Compressed size DCNL is an argument ( in bits ) . DCNL Set &quot; compr _ data &quot; with a string like &quot; 1.52x &quot;  . &apos; 
def buildAllTarballs ( checkout , destination ) : DCNL &apos; Build complete tarballs ( including documentation ) for Twisted and all DCNL subprojects . DCNL This should be called after the version numbers have been updated and DCNL NEWS files created . DCNL @ type checkout : L { FilePath } DCNL @ param checkout : The SVN working copy from which a pristine source tree DCNL will be exported . DCNL @ type destination : L { FilePath } DCNL @ param destination : The directory in which tarballs will be placed . DCNL @ raise UncleanWorkingDirectory : if there are modifications to the DCNL working directory of C { checkout } . DCNL @ raise NotWorkingDirectory : if the checkout path is not an SVN checkout . &apos; 
def sp _ sum ( x , axis = None , sparse _ grad = False ) : DCNL &apos; Calculate the sum of a sparse matrix along the specified axis . DCNL It operates a reduction along the specified axis . When `axis` is `None` , DCNL it is applied along all axes . DCNL Parameters DCNL x DCNL Sparse matrix . DCNL axis DCNL Axis along which the sum is applied . Integer or `None` . DCNL sparse _ grad : bool DCNL `True` to have a structured grad . DCNL Returns DCNL object DCNL The sum of `x` in a dense format . DCNL Notes DCNL The grad implementation is controlled with the `sparse _ grad` parameter . DCNL `True` will provide a structured grad and `False` will provide a regular DCNL grad . For both choices , the grad returns a sparse matrix having the same DCNL format as `x` . DCNL This op does not return a sparse matrix , but a dense tensor matrix . &apos; 
def start _ debugger ( rpchandler , gui _ adap _ oid ) : DCNL &apos; Start the debugger and its RPC link in the Python subprocess DCNL Start the subprocess side of the split debugger and set up that side of the DCNL RPC link by instantiating the GUIProxy , Idb debugger , and IdbAdapter DCNL objects and linking them together . Register the IdbAdapter with the DCNL RPCServer to handle RPC requests from the split debugger GUI via the DCNL IdbProxy . &apos; 
def console ( ) : DCNL &apos; Defines the behavior of the console web2py execution&apos;
def check _ valid _ abd _ naming ( pattern = None ) : DCNL &apos; Checks if the name is can be parsed back to its original form for an air-by-date format . DCNL : return : true if the naming is valid , false if not . &apos; 
def prepare _ to _ notify ( doc , print _ html = None , print _ format = None , attachments = None ) : DCNL &apos; Prepare to make multipart MIME Email DCNL : param print _ html : Send given value as HTML attachment . DCNL : param print _ format : Attach print format of parent document . &apos; 
@ register.simple _ tag ( takes _ context = True ) DCNL def admin _ widget ( context , widget ) : DCNL &apos; Render a widget with the given information . DCNL The widget will be created and returned as HTML . Any states in the DCNL database will be loaded into the rendered widget . &apos; 
def ego _ graph ( G , n , radius = 1 , center = True , undirected = False , distance = None ) : DCNL &apos; Returns induced subgraph of neighbors centered at node n within DCNL a given radius . DCNL Parameters DCNL G : graph DCNL A NetworkX Graph or DiGraph DCNL n : node DCNL A single node DCNL radius : number , optional DCNL Include all neighbors of distance &lt; = radius from n . DCNL center : bool , optional DCNL If False , do not include center node in graph DCNL undirected : bool , optional DCNL If True use both in- and out-neighbors of directed graphs . DCNL distance : key , optional DCNL Use specified edge data key as distance . For example , setting DCNL distance = \ &apos; weight \ &apos; will use the edge weight to measure the DCNL distance from the node n . DCNL Notes DCNL For directed graphs D this produces the &quot; out &quot; neighborhood DCNL or successors . If you want the neighborhood of predecessors DCNL first reverse the graph with D.reverse ( ) . If you want both DCNL directions use the keyword argument undirected = True . DCNL Node , edge , and graph attributes are copied to the returned subgraph . &apos; 
def delete _ pool _ member ( hostname , username , password , name , member ) : DCNL &apos; Delete an existing pool member . DCNL hostname DCNL The host / address of the bigip device DCNL username DCNL The iControl REST username DCNL password DCNL The iControl REST password DCNL name DCNL The name of the pool to be modified DCNL member DCNL The name of the member to delete from the pool&apos;
def _ app _ path ( dirname , entry ) : DCNL &apos; Construct ( dirname , &#91; glob-expanded-entries relative to dirname &#93; ) &apos;
def commit _ on _ success ( using = None , read _ committed = False ) : DCNL &apos; This function implements the commit _ on _ success ( ) API that was available till Django 1.5 . DCNL It can be used either as a decorator or as a context manager . However , it DCNL cannot be nested inside an atomic block . DCNL If the wrapped function or block returns a response the transaction is committed DCNL and if it raises an exception the transaction is rolled back . DCNL Arguments : DCNL using ( str ) : the name of the database . DCNL read _ committed ( bool ) : Whether to use read committed isolation level . DCNL Raises : DCNL TransactionManagementError : if already inside an atomic block . &apos; 
def ttost _ paired ( x1 , x2 , low , upp , transform = None , weights = None ) : DCNL &apos; test of ( non- ) equivalence for two dependent , paired sample DCNL TOST : two one-sided t tests DCNL null hypothesis : md &lt; low or md &gt; upp DCNL alternative hypothesis : low &lt; md &lt; upp DCNL where md is the mean , expected value of the difference x1 - x2 DCNL If the pvalue is smaller than a threshold , say 0.05 , then we reject the DCNL hypothesis that the difference between the two samples is larger than the DCNL the thresholds given by low and upp . DCNL Parameters DCNL x1 , x2 : array _ like DCNL two dependent samples DCNL low , upp : float DCNL equivalence interval low &lt; mean of difference &lt; upp DCNL weights : None or ndarray DCNL case weights for the two samples . For details on weights see DCNL ``DescrStatsW`` DCNL transform : None or function DCNL If None ( default ) , then the data is not transformed . Given a function DCNL sample data and thresholds are transformed . If transform is log the DCNL the equivalence interval is in ratio : low &lt; x1 / x2 &lt; upp DCNL Returns DCNL pvalue : float DCNL pvalue of the non-equivalence test DCNL t1 , pv1 , df1 : tuple DCNL test statistic , pvalue and degrees of freedom for lower threshold test DCNL t2 , pv2 , df2 : tuple DCNL test statistic , pvalue and degrees of freedom for upper threshold test&apos;
def s3 _ addrow ( form , label , widget , comment , formstyle , row _ id , position = ( -1 ) ) : DCNL &apos; Add a row to a form , applying formstyle DCNL @ param form : the FORM DCNL @ param label : the label DCNL @ param widget : the widget DCNL @ param comment : the comment DCNL @ param formstyle : the formstyle DCNL @ param row _ id : the form row HTML id DCNL @ param position : position where to insert the row&apos;
def eq _ ( result , expected , msg = None ) : DCNL &apos; Shadow of the Nose builtin which presents easier to read multiline output . &apos; 
def maven _ metadata _ param ( registry , xml _ parent , data ) : DCNL &apos; yaml : maven-metadata DCNL This parameter allows the resolution of maven artifact versions DCNL by contacting the repository and reading the maven-metadata.xml. DCNL Requires the Jenkins : jenkins-wiki : `Maven Metadata Plugin DCNL &lt; Maven + Metadata + Plugin &gt; ` . DCNL : arg str name : Name of the parameter DCNL : arg str description : Description of the parameter ( optional ) DCNL : arg str repository-base-url : URL from where you retrieve your artifacts DCNL ( default \ &apos; \ &apos; ) DCNL : arg str repository-username : Repository \ &apos; s username if authentication is DCNL required . ( default \ &apos; \ &apos; ) DCNL : arg str repository-password : Repository \ &apos; s password if authentication is DCNL required . ( default \ &apos; \ &apos; ) DCNL : arg str artifact-group-id : Unique project identifier ( default \ &apos; \ &apos; ) DCNL : arg str artifact-id : Name of the artifact without version ( default \ &apos; \ &apos; ) DCNL : arg str packaging : Artifact packaging option . Could be something such as DCNL jar , zip , pom .... ( default \ &apos; \ &apos; ) DCNL : arg str versions-filter : Specify a regular expression which will be used DCNL to filter the versions which are actually displayed when triggering a DCNL new build . ( default \ &apos; \ &apos; ) DCNL : arg str default-value : For features such as SVN polling a default value DCNL is required . If job will only be started manually , this field is not DCNL necessary . ( default \ &apos; \ &apos; ) DCNL : arg str maximum-versions-to-display : The maximum number of versions to DCNL display in the drop-down . Any non-number value as well as 0 or negative DCNL values will default to all . ( default 10 ) DCNL : arg str sorting-order : ascending or descending DCNL ( default descending ) DCNL Example : DCNL .. literalinclude : : DCNL / .. / .. / tests / parameters / fixtures / maven-metadata-param001.yaml DCNL : language : yaml&apos;
def modularity ( G , communities , weight = &apos; weight &apos; ) : DCNL &apos; Returns the modularity of the given partition of the graph . DCNL Modularity is defined in &#91; 1 &#93; _ as DCNL .. math : : DCNL Q = \ frac { 1 } { 2m } \ sum _ { ij } \ left ( A _ { ij } - \ frac { k _ ik _ j } { 2m } \ right ) DCNL \ delta ( c _ i , c _ j ) DCNL where * m * is the number of edges , * A * is the adjacency matrix of DCNL `G` , : math : `k _ i` is the degree of * i * and : math : ` \ delta ( c _ i , c _ j ) ` DCNL is 1 if * i * and * j * are in the same community and 0 otherwise . DCNL Parameters DCNL G : NetworkX Graph DCNL communities : list DCNL List of sets of nodes of `G` representing a partition of the DCNL nodes . DCNL Returns DCNL Q : float DCNL The modularity of the paritition . DCNL Raises DCNL NotAPartition DCNL If `communities` is not a partition of the nodes of `G` . DCNL Examples DCNL &gt; &gt; &gt; G = nx.barbell _ graph ( 3 , 0 ) DCNL &gt; &gt; &gt; nx.modularity ( G , &#91; { 0 , 1 , 2 } , { 3 , 4 , 5 } &#93; ) DCNL 0.35714285714285704 DCNL References DCNL .. &#91; 1 &#93; M. E. J. Newman * Networks : An Introduction * , page 224 . DCNL Oxford University Press , 2011 . &apos; 
def load _ object ( path ) : DCNL &apos; Load an object given its absolute object path , and return it . DCNL object can be a class , function , variable or an instance . DCNL path ie : \ &apos; scrapy.downloadermiddlewares.redirect.RedirectMiddleware \ &apos; &apos;
def GetResources ( filename , types = None , names = None , languages = None ) : DCNL &apos; Get resources from dll / exe file . DCNL types = a list of resource types to search for ( None = all ) DCNL names = a list of resource names to search for ( None = all ) DCNL languages = a list of resource languages to search for ( None = all ) DCNL Return a dict of the form { type _ : { name : { language : data } } } which DCNL might also be empty if no matching resources were found . &apos; 
def template ( ) : DCNL &apos; RESTful CRUD controller&apos;
def sync _ output ( saltenv = None , refresh = True ) : DCNL &apos; Sync outputters from ``salt : / / _ output`` to the minion DCNL saltenv : base DCNL The fileserver environment from which to sync . To sync from more than DCNL one environment , pass a comma-separated list . DCNL refresh : True DCNL If ``True`` , refresh the available execution modules on the minion . DCNL This refresh will be performed even if no new outputters are synced . DCNL Set to ``False`` to prevent this refresh . DCNL CLI Examples : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; saltutil.sync _ output DCNL salt \ &apos; * \ &apos; saltutil.sync _ output saltenv = dev DCNL salt \ &apos; * \ &apos; saltutil.sync _ output saltenv = base , dev&apos;
def _ list _ items ( queue ) : DCNL &apos; Private function to list contents of a queue&apos;
def test _ duplicate _ output ( ) : DCNL &apos; An error is raised if within a single bundle , two jobs override DCNL each other . &apos; 
def closeness _ centrality ( G , nodes , normalized = True ) : DCNL &apos; Compute the closeness centrality for nodes in a bipartite network . DCNL The closeness of a node is the distance to all other nodes in the DCNL graph or in the case that the graph is not connected to all other nodes DCNL in the connected component containing that node . DCNL Parameters DCNL G : graph DCNL A bipartite network DCNL nodes : list or container DCNL Container with all nodes in one bipartite node set . DCNL normalized : bool , optional DCNL If True ( default ) normalize by connected component size . DCNL Returns DCNL closeness : dictionary DCNL Dictionary keyed by node with bipartite closeness centrality DCNL as the value . DCNL See Also DCNL betweenness _ centrality , DCNL degree _ centrality DCNL sets , DCNL is _ bipartite DCNL Notes DCNL The nodes input parameter must conatin all nodes in one bipartite node set , DCNL but the dictionary returned contains all nodes from both node sets . DCNL Closeness centrality is normalized by the minimum distance possible . DCNL In the bipartite case the minimum distance for a node in one bipartite DCNL node set is 1 from all nodes in the other node set and 2 from all DCNL other nodes in its own set &#91; 1 &#93; _ . Thus the closeness centrality DCNL for node `v` in the two bipartite sets `U` with DCNL `n` nodes and `V` with `m` nodes is DCNL .. math : : DCNL c _ { v } = \ frac { m + 2 ( n - 1 ) } { d } , \ mbox { for } v \ in U , DCNL c _ { v } = \ frac { n + 2 ( m - 1 ) } { d } , \ mbox { for } v \ in V , DCNL where `d` is the sum of the distances from `v` to all DCNL other nodes . DCNL Higher values of closeness indicate higher centrality . DCNL As in the unipartite case , setting normalized = True causes the DCNL values to normalized further to n-1 / size ( G ) -1 where n is the DCNL number of nodes in the connected part of graph containing the DCNL node . If the graph is not completely connected , this algorithm DCNL computes the closeness centrality for each connected part DCNL separately . DCNL References DCNL .. &#91; 1 &#93; Borgatti , S.P. and Halgin , D. In press . &quot; Analyzing Affiliation DCNL Networks &quot; . In Carrington , P. and Scott , J. ( eds ) The Sage Handbook DCNL of Social Network Analysis . Sage Publications . DCNL http : / / www.steveborgatti.com / papers / bhaffiliations.pdf&apos;
def test _ unicode _ labels _ python3 ( Chart ) : DCNL &apos; Test unicode labels in python 3&apos;
def newton _ cg ( grad _ hess , func , grad , x0 , args = ( ) , tol = 0.0001 , maxiter = 100 , maxinner = 200 , line _ search = True , warn = True ) : DCNL &apos; Minimization of scalar function of one or more variables using the DCNL Newton-CG algorithm . DCNL Parameters DCNL grad _ hess : callable DCNL Should return the gradient and a callable returning the matvec product DCNL of the Hessian . DCNL func : callable DCNL Should return the value of the function . DCNL grad : callable DCNL Should return the function value and the gradient . This is used DCNL by the linesearch functions . DCNL x0 : array of float DCNL Initial guess . DCNL args : tuple , optional DCNL Arguments passed to func _ grad _ hess , func and grad . DCNL tol : float DCNL Stopping criterion . The iteration will stop when DCNL ``max { &#124; g _ i &#124; i = 1 , ... , n } &lt; = tol`` DCNL where ``g _ i`` is the i-th component of the gradient . DCNL maxiter : int DCNL Number of Newton iterations . DCNL maxinner : int DCNL Number of CG iterations . DCNL line _ search : boolean DCNL Whether to use a line search or not . DCNL warn : boolean DCNL Whether to warn when didn \ &apos; t converge . DCNL Returns DCNL xk : ndarray of float DCNL Estimated minimum . &apos; 
def classof ( A , B ) : DCNL &apos; Get the type of the result when combining matrices of different types . DCNL Currently the strategy is that immutability is contagious . DCNL Examples DCNL &gt; &gt; &gt; from sympy import Matrix , ImmutableMatrix DCNL &gt; &gt; &gt; from sympy.matrices.matrices import classof DCNL &gt; &gt; &gt; M = Matrix ( &#91; &#91; 1 , 2 &#93; , &#91; 3 , 4 &#93; &#93; ) # a Mutable Matrix DCNL &gt; &gt; &gt; IM = ImmutableMatrix ( &#91; &#91; 1 , 2 &#93; , &#91; 3 , 4 &#93; &#93; ) DCNL &gt; &gt; &gt; classof ( M , IM ) DCNL &lt; class \ &apos; sympy.matrices.immutable.ImmutableMatrix \ &apos; &gt; &apos;
def _ sparse _ blockify ( tuples , dtype = None ) : DCNL &apos; return an array of blocks that potentially have different dtypes ( and DCNL are sparse ) &apos;
def chunks ( l , n ) : DCNL &apos; Yield successive n-sized chunks from l . &apos; 
def compose _ all ( stream , Loader = Loader ) : DCNL &apos; Parse all YAML documents in a stream DCNL and produce corresponding representation trees . &apos; 
def send _ commit ( ) : DCNL &apos; Send a Shipment containing all items in a Commitment DCNL @ ToDo : Rewrite as S3Method DCNL - means that permissions are better-controlled&apos;
def getRandomInteger ( N , randfunc = None ) : DCNL &apos; getRandomInteger ( N : int , randfunc : callable ) : long DCNL Return a random number with at most N bits . DCNL If randfunc is omitted , then Random.new ( ) .read is used . DCNL This function is for internal use only and may be renamed or removed in DCNL the future . &apos; 
def get _ item _ inventory _ size ( ) : DCNL &apos; Access to the Item inventory size . DCNL : return : Item inventory size . DCNL : rtype : int&apos;
def test _ private _ browsing ( qtbot , tmpdir , fake _ save _ manager , config _ stub ) : DCNL &apos; Make sure no data is saved at all with private browsing . &apos; 
def uptodate ( name , bin _ env = None , user = None , cwd = None , use _ vt = False ) : DCNL &apos; .. versionadded : : 2015.5.0 DCNL Verify that the system is completely up to date . DCNL name DCNL The name has no functional value and is only used as a tracking DCNL reference DCNL user DCNL The user under which to run pip DCNL bin _ env DCNL the pip executable or virtualenenv to use DCNL use _ vt DCNL Use VT terminal emulation ( see output while installing ) &apos;
def objString ( obj ) : DCNL &apos; Return a short but descriptive string for any object&apos;
def human _ bytes ( size ) : DCNL &apos; Formats size , a number of bytes , in a human-readable way . &apos; 
@ bdd.given ( bdd.parsers.parse ( &apos; I DCSP set DCSP { sect } DCSP - &gt; DCSP { opt } DCSP to DCSP { value } &apos; ) ) DCNL def set _ setting _ given ( quteproc , httpbin , sect , opt , value ) : DCNL &apos; Set a qutebrowser setting . DCNL This is available as &quot; Given : &quot; step so it can be used as &quot; Background : &quot;  . &apos; 
def metric _ cleanup ( ) : DCNL &apos; Clean up the metric module . &apos; 
@ register.filter ( is _ safe = True ) DCNL def stringformat ( value , arg ) : DCNL &apos; Formats the variable according to the arg , a string formatting specifier . DCNL This specifier uses Python string formating syntax , with the exception that DCNL the leading &quot; % &quot; is dropped . DCNL See http : / / docs.python.org / lib / typesseq-strings.html for documentation DCNL of Python string formatting&apos;
def is _ nvcc _ available ( ) : DCNL &apos; Return True iff the nvcc compiler is found . &apos; 
def list _ quota _ volume ( name ) : DCNL &apos; List quotas of glusterfs volume . DCNL name DCNL Name of the gluster volume&apos;
def get _ cache _ slug ( ) : DCNL &apos; Returns cache slug depending whether dev or prod . &apos; 
def _ copy _ py _ state ( r , ptr ) : DCNL &apos; Copy state of Python random * r * to Numba state * ptr *  . &apos; 
def parse _ xreply ( xreply ) : DCNL &apos; Parse the reply from xqueue . Messages are JSON-serialized dict : DCNL { \ &apos; return _ code \ &apos; : 0 ( success ) , 1 ( fail ) DCNL \ &apos; content \ &apos; : Message from xqueue ( string ) &apos;
@ protocol.commands.add ( u &apos;next &apos; ) DCNL def next _ ( context ) : DCNL &apos; * musicpd.org , playback section : * DCNL ``next`` DCNL Plays next song in the playlist . DCNL * MPD \ &apos; s behaviour when affected by repeat / random / single / consume : * DCNL Given a playlist of three tracks numbered 1 , 2 , 3 , and a currently DCNL playing track ``c`` . ``next _ track`` is defined at the track that DCNL will be played upon calls to ``next`` . DCNL Tests performed on MPD 0.15.4-1ubuntu3. DCNL Inputs next _ track DCNL repeat random single consume c = 1 c = 2 c = 3 Notes DCNL T T T T 2 3 EOPL DCNL T T T . Rand Rand Rand &#91; 1 &#93; DCNL T T . T Rand Rand Rand &#91; 4 &#93; DCNL T T . . Rand Rand Rand &#91; 4 &#93; DCNL T . T T 2 3 EOPL DCNL T . T . 2 3 1 DCNL T . . T 3 3 EOPL DCNL T . . . 2 3 1 DCNL . T T T Rand Rand Rand &#91; 3 &#93; DCNL . T T . Rand Rand Rand &#91; 3 &#93; DCNL . T . T Rand Rand Rand &#91; 2 &#93; DCNL . T . . Rand Rand Rand &#91; 2 &#93; DCNL . . T T 2 3 EOPL DCNL . . T . 2 3 EOPL DCNL . . . T 2 3 EOPL DCNL . . . . 2 3 EOPL DCNL - When end of playlist ( EOPL ) is reached , the current track is DCNL unset . DCNL - &#91; 1 &#93; When * random * and * single * is combined , ``next`` selects DCNL a track randomly at each invocation , and not just the next track DCNL in an internal prerandomized playlist . DCNL - &#91; 2 &#93; When * random * is active , ``next`` will skip through DCNL all tracks in the playlist in random order , and finally EOPL is DCNL reached . DCNL - &#91; 3 &#93; * single * has no effect in combination with * random * DCNL alone , or * random * and * consume * . DCNL - &#91; 4 &#93; When * random * and * repeat * is active , EOPL is never DCNL reached , but the playlist is played again , in the same random DCNL order as the first time . &apos; 
def collect _ driver _ info ( driver ) : DCNL &apos; Build the dictionary that describes this driver . &apos; 
def rand _ text _ alphanumeric ( length , bad = &apos; &apos; ) : DCNL &apos; generate a random string with alpha and numerals chars&apos;
@ app.route ( &apos; / raise-500 &apos; , methods = &#91; &apos; GET &apos; &#93; ) DCNL @ requires _ auth DCNL def raise _ 500 ( ) : DCNL &apos; This exists for testing error _ 500 _ handler&apos;
def getGammaRamp ( pygletWindow ) : DCNL &apos; Ramp will be returned as 3x256 array in range 0 : 1&apos;
def _ unary _ int _ input _ wrapper _ impl ( wrapped _ impl ) : DCNL &apos; Return an implementation factory to convert the single integral input DCNL argument to a float64 , then defer to the * wrapped _ impl *  . &apos; 
def OAuthTokenFromHttpBody ( http _ body ) : DCNL &apos; Parses the HTTP response body and returns an OAuth token . DCNL The returned OAuth token will just have key and secret parameters set . DCNL It won \ &apos; t have any knowledge about the scopes or oauth _ input _ params . It is DCNL your responsibility to make it aware of the remaining parameters . DCNL Returns : DCNL OAuthToken OAuth token . &apos; 
def unintegrate _ levels ( x , d ) : DCNL &apos; Returns the successive differences needed to unintegrate the series . DCNL Parameters DCNL x : array-like DCNL The original series DCNL d : int DCNL The number of differences of the differenced series . DCNL Returns DCNL y : array-like DCNL The increasing differences from 0 to d-1 of the first d elements DCNL of x . DCNL See Also DCNL unintegrate&apos;
def render _ git _ describe ( pieces ) : DCNL &apos; TAG &#91; -DISTANCE-gHEX &#93; &#91; -dirty &#93; . DCNL Like \ &apos; git describe --tags --dirty --always \ &apos; . DCNL Exceptions : DCNL 1 : no tags . HEX &#91; -dirty &#93; ( note : no \ &apos; g \ &apos; prefix ) &apos;
def dtlz5 ( ind , n _ objs ) : DCNL &apos; DTLZ5 multiobjective function . It returns a tuple of * obj * values . The DCNL individual must have at least * obj * elements . DCNL From : K. Deb , L. Thiele , M. Laumanns and E. Zitzler . Scalable Multi-Objective DCNL Optimization Test Problems . CEC 2002 , p . 825-830 , IEEE Press , 2002 . &apos; 
def _ safe _ getattr ( obj , attr , default = None ) : DCNL &apos; Safe version of getattr . DCNL Same as getattr , but will return ``default`` on any Exception , DCNL rather than raising . &apos; 
def _ fileobj _ normalize _ mode ( f ) : DCNL &apos; Takes care of some corner cases in Python where the mode string DCNL is either oddly formatted or does not truly represent the file mode . &apos; 
def nC ( n , k = None , replacement = False ) : DCNL &apos; Return the number of combinations of ``n`` items taken ``k`` at a time . DCNL Possible values for ``n`` : : DCNL integer - set of length ``n`` DCNL sequence - converted to a multiset internally DCNL multiset - { element : multiplicity } DCNL If ``k`` is None then the total of all combinations of length 0 DCNL through the number of items represented in ``n`` will be returned . DCNL If ``replacement`` is True then a given item can appear more than once DCNL in the ``k`` items . ( For example , for \ &apos; ab \ &apos; sets of 2 would include \ &apos; aa \ &apos; , DCNL \ &apos; ab \ &apos; , and \ &apos; bb \ &apos; . ) The multiplicity of elements in ``n`` is ignored when DCNL ``replacement`` is True but the total number of elements is considered DCNL since no element can appear more times than the number of elements in DCNL ``n`` . DCNL Examples DCNL &gt; &gt; &gt; from sympy.functions.combinatorial.numbers import nC DCNL &gt; &gt; &gt; from sympy.utilities.iterables import multiset _ combinations DCNL &gt; &gt; &gt; nC ( 3 , 2 ) DCNL 3 DCNL &gt; &gt; &gt; nC ( \ &apos; abc \ &apos; , 2 ) DCNL 3 DCNL &gt; &gt; &gt; nC ( \ &apos; aab \ &apos; , 2 ) DCNL 2 DCNL When ``replacement`` is True , each item can have multiplicity DCNL equal to the length represented by ``n`` : DCNL &gt; &gt; &gt; nC ( \ &apos; aabc \ &apos; , replacement = True ) DCNL 35 DCNL &gt; &gt; &gt; &#91; len ( list ( multiset _ combinations ( \ &apos; aaaabbbbcccc \ &apos; , i ) ) ) for i in range ( 5 ) &#93; DCNL &#91; 1 , 3 , 6 , 10 , 15 &#93; DCNL &gt; &gt; &gt; sum ( _ ) DCNL 35 DCNL If there are ``k`` items with multiplicities ``m _ 1 , m _ 2 , ... , m _ k`` DCNL then the total of all combinations of length 0 hrough ``k`` is the DCNL product , `` ( m _ 1 + 1 ) * ( m _ 2 + 1 ) * ... * ( m _ k + 1 ) `` . When the multiplicity DCNL of each item is 1 ( i.e. , k unique items ) then there are 2 * * k DCNL combinations . For example , if there are 4 unique items , the total number DCNL of combinations is 16 : DCNL &gt; &gt; &gt; sum ( nC ( 4 , i ) for i in range ( 5 ) ) DCNL 16 DCNL References DCNL .. &#91; 1 &#93; http : / / en.wikipedia.org / wiki / Combination DCNL .. &#91; 2 &#93; http : / / tinyurl.com / cep849r DCNL See Also DCNL sympy.utilities.iterables.multiset _ combinations&apos;
def DESL ( K , D ) : DCNL &apos; References : DCNL - http : / / ubiqx.org / cifs / SMB.html ( 2.8.3.4 ) DCNL - &#91; MS-NLMP &#93; : Section 6&apos;
def rol ( value , count ) : DCNL &apos; A rotate-left instruction in Python&apos;
def _ pop _ header _ name ( row , index _ col ) : DCNL &apos; ( header , new _ data ) for header rows in MultiIndex parsing&apos;
def remux _ audio ( filename , title ) : DCNL &apos; Remux audio file . Insert limited metadata tags . &apos; 
def make _ history _ query ( cls , interval ) : DCNL &apos; Build a generic query showing the history of a given aggregate . &apos; 
def makeBasicResponseCycles ( cycles = 10 , nCorrect = 4 , nIncorrect = 4 , length = None ) : DCNL &apos; Helper function to create a basic set of responses . DCNL : Parameters : DCNL cycles : int , optional DCNL The number of response cycles to generate . One cycle consists of a DCNL number of correct and incorrect responses . DCNL Defaults to 10 . DCNL nCorrect , nIncorrect : int , optional DCNL The number of correct and incorrect responses per cycle . DCNL Defaults to 4 . DCNL length : int or None , optional DCNL : Returns : DCNL responses : list DCNL A list of simulated responses with length DCNL `cycles * ( nCorrect + nIncorrect ) ` . &apos; 
def time2int ( t ) : DCNL &apos; datetime转化为unix毫秒时间 。 &apos;
def GenerateAndroid9Patch ( referenced _ images ) : DCNL &apos; Iterate over all referenced images with insets and check against the android 9-patch images . &apos; 
def is _ cached ( path , saltenv = &apos; base &apos; ) : DCNL &apos; Return a boolean if the given path on the master has been cached on the DCNL minion DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; cp.is _ cached salt : / / path / to / file&apos;
def getWindowAnalyzeFileGivenText ( fileName , gcodeText , repository = None ) : DCNL &apos; Write statistics for a gcode file . &apos; 
def rs _ LambertW ( p , x , prec ) : DCNL &apos; Calculate the series expansion of the principal branch of the Lambert W DCNL function . DCNL Examples DCNL &gt; &gt; &gt; from sympy.polys.domains import QQ DCNL &gt; &gt; &gt; from sympy.polys.rings import ring DCNL &gt; &gt; &gt; from sympy.polys.ring _ series import rs _ LambertW DCNL &gt; &gt; &gt; R , x , y = ring ( \ &apos; x , y \ &apos; , QQ ) DCNL &gt; &gt; &gt; rs _ LambertW ( x + x * y , x , 3 ) DCNL -x * * 2 * y * * 2 - 2 * x * * 2 * y - x * * 2 + x * y + x DCNL See Also DCNL LambertW&apos;
def _ writen ( fd , data ) : DCNL &apos; Write all the data to a descriptor . &apos; 
def checkGoogle ( words ) : DCNL &apos; Check google for a match . DCNL @ returns : a Deferred which will callback with a URL or errback with a DCNL Failure . &apos; 
def pretty _ try _ use _ unicode ( ) : DCNL &apos; See if unicode output is available and leverage it if possible&apos;
def visitors ( start _ date , end _ date ) : DCNL &apos; Return the number of daily unique visitors for a given date range . DCNL Returns a dict with daily numbers : DCNL { u \ &apos; 2012-01-22 \ &apos; : 404971 , DCNL u \ &apos; 2012-01-23 \ &apos; : 434618 , DCNL u \ &apos; 2012-01-24 \ &apos; : 501687 , ... } &apos;
def require _ driver _ initialized ( driver ) : DCNL &apos; Verifies if `driver` is initialized DCNL If the driver is not initialized , an exception will be raised . DCNL : params driver : The driver instance . DCNL : raises : `exception.DriverNotInitialized`&apos;
def copy _ asset _ file ( source , destination , context = None , renderer = None ) : DCNL &apos; Copy an asset file to destination . DCNL On copying , it expands the template variables if context argument is given and DCNL the asset is a template file . DCNL : param source : The path to source file DCNL : param destination : The path to destination file or directory DCNL : param context : The template variables . If not given , template files are simply copied DCNL : param renderer : The template engine . If not given , SphinxRenderer is used by default&apos;
def test _ invalid _ config ( ) : DCNL &apos; An invalid config file should raise an `InvalidConfiguration` exception . &apos; 
def sample _ role ( name , rawtext , text , lineno , inliner , options = { } , content = &#91; &#93; ) : DCNL &apos; Custom role . DCNL Parameters DCNL name : str DCNL The name of the role , as used in the document . DCNL rawtext : str DCNL The markup , including the role declaration . DCNL text : str DCNL The text to be marked up by the role . DCNL lineno : int DCNL The line number where `rawtext` appears . DCNL inliner : Inliner DCNL The instance that called the role . DCNL options : dict DCNL Directive options for customizatoin . DCNL content : list DCNL The directive content for customization . DCNL Returns DCNL nodes : list DCNL The list of nodes to insert into the document . DCNL msgs : list DCNL The list of system messages , perhaps an error message . &apos; 
def update _ session _ plot _ options ( * * kwargs ) : DCNL &apos; Update the _ session plot _ options DCNL : param ( str &#124; optional ) filename : What the file will be named in Plotly DCNL : param ( str &#124; optional ) fileopt : \ &apos; overwrite \ &apos; , \ &apos; append \ &apos; , \ &apos; new \ &apos; , or \ &apos; extend \ &apos; DCNL : param ( bool &#124; optional ) world _ readable : Make public or private . DCNL : param ( dict &#124; optional ) sharing : \ &apos; public \ &apos; , \ &apos; private \ &apos; , \ &apos; secret \ &apos; DCNL : param ( bool &#124; optional ) auto _ open : For `plot` , open in new browser tab ? DCNL : param ( bool &#124; optional ) validate : Error locally if data doesn \ &apos; t pass ? &apos;
def automodel ( doctype ) : DCNL &apos; return doctype template&apos;
def layers ( name ) : DCNL &apos; Returns a list of the IDs of layers belonging to the specified image , with DCNL the top-most layer ( the one correspnding to the passed name ) appearing DCNL last . DCNL name DCNL Image name or ID DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion dockerng.layers centos : 7&apos;
@ pytest.mark.not _ frozen DCNL def test _ python2 ( ) : DCNL &apos; Run checkpyver with python 2 . &apos; 
def item ( * args , * * kwargs ) : DCNL &apos; Return one or more grains DCNL CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; grains.item os DCNL salt \ &apos; * \ &apos; grains.item os osrelease oscodename DCNL Sanitized CLI Example : DCNL .. code-block : : bash DCNL salt \ &apos; * \ &apos; grains.item host sanitize = True&apos;
def candidates ( items , artist , album , va _ likely ) : DCNL &apos; Gets MusicBrainz candidates for an album from each plugin . &apos; 
def p _ statement _ assign ( p ) : DCNL &apos; statement : NAME &quot; = &quot; expression&apos;
@ depends ( HAS _ PYVMOMI ) DCNL def service _ restart ( host , username , password , service _ name , protocol = None , port = None , host _ names = None ) : DCNL &apos; Restart the named service for the given host or list of hosts . DCNL host DCNL The location of the host . DCNL username DCNL The username used to login to the host , such as ``root`` . DCNL password DCNL The password used to login to the host . DCNL service _ name DCNL The name of the service for which to set the policy . Supported service names are : DCNL - DCUI DCNL - TSM DCNL - SSH DCNL - lbtd DCNL - lsassd DCNL - lwiod DCNL - netlogond DCNL - ntpd DCNL - sfcbd-watchdog DCNL - snmpd DCNL - vprobed DCNL - vpxa DCNL - xorg DCNL protocol DCNL Optionally set to alternate protocol if the host is not using the default DCNL protocol . Default protocol is ``https`` . DCNL port DCNL Optionally set to alternate port if the host is not using the default DCNL port . Default port is ``443`` . DCNL host _ names DCNL List of ESXi host names . When the host , username , and password credentials DCNL are provided for a vCenter Server , the host _ names argument is required to tell DCNL vCenter the hosts for which to restart the service . DCNL If host _ names is not provided , the service will be restarted for the ``host`` DCNL location instead . This is useful for when service instance connection information DCNL is used for a single ESXi host . DCNL CLI Example : DCNL .. code-block : : bash DCNL # Used for single ESXi host connection information DCNL salt \ &apos; * \ &apos; vsphere.service _ restart my.esxi.host root bad-password \ &apos; ntpd \ &apos; DCNL # Used for connecting to a vCenter Server DCNL salt \ &apos; * \ &apos; vsphere.service _ restart my.vcenter.location root bad-password \ &apos; ntpd \ &apos; host _ names = \ &apos; &#91; esxi-1.host.com , esxi-2.host.com &#93; \ &apos; &apos;
def file _ list _ emptydirs ( load ) : DCNL &apos; Return a list of all empty directories on the master&apos;
def string _ to _ timedelta ( s ) : DCNL &apos; Parse a string s and return a standard datetime.timedelta object . DCNL Handles days , hours , minutes , seconds , and microseconds . DCNL Accepts strings in these formats : DCNL 2 days DCNL 14 days DCNL 4 : 35 : 00 ( hours , minutes and seconds ) DCNL 4 : 35 : 12.087465 ( hours , minutes , seconds and microseconds ) DCNL 7 days , 3 : 23 : 34 DCNL 7 days , 3 : 23 : 34.087465 DCNL .087465 ( microseconds only ) DCNL : raises ckan.logic.ValidationError : if the given string does not match any DCNL of the recognised formats&apos;
def connect _ user ( request , access _ token = None , facebook _ graph = None , connect _ facebook = False ) : DCNL &apos; Given a request either DCNL - ( if authenticated ) connect the user DCNL - login DCNL - register&apos;
def hasDependency ( module , fake _ module = None ) : DCNL &apos; Use this function in your test class setUp to DCNL mock modules into your namespace DCNL : param module : The module name DCNL : type module : ``str`` DCNL : param fake _ module : The module to inject into sys.modules DCNL if not provided , a mock will be injected . If ``False`` DCNL is passed explicitly , the module injection does not DCNL occur . DCNL : type fake _ module : ``object`` DCNL hasDependency ( \ &apos; super _ module \ &apos; ) &apos;
def _ partial _ regression ( endog , exog _ i , exog _ others ) : DCNL &apos; Partial regression . DCNL regress endog on exog _ i conditional on exog _ others DCNL uses OLS DCNL Parameters DCNL endog : array _ like DCNL exog : array _ like DCNL exog _ others : array _ like DCNL Returns DCNL res1c : OLS results instance DCNL ( res1a , res1b ) : tuple of OLS results instances DCNL results from regression of endog on exog _ others and of exog _ i on DCNL exog _ others&apos;
def update _ nested _ dict ( main _ dict , new _ dict ) : DCNL &apos; Update nested dict ( only level of nesting ) with new values . DCNL Unlike dict.update , this assumes that the values of the parent dict are DCNL dicts ( or dict-like ) , so you shouldn \ &apos; t replace the nested dict if it DCNL already exists . Instead you should update the sub-dict . &apos; 
def cast ( value ) : DCNL &apos; Cast value to float or int , if possible&apos;
def get _ lti _ consumer ( ) : DCNL &apos; Helper method for all Signature Validator tests to get an LtiConsumer object . &apos; 
def make _ line _ plot ( dir _ path , data _ file _ link , background _ color , label _ color , xy _ coords , props , x _ len = 8 , y _ len = 4 , draw _ axes = False , generate _ eps = True ) : DCNL &apos; Write a line plot DCNL xy _ coords : a dict of form DCNL { series _ label : ( &#91; x data &#93; , &#91; y data &#93; , point _ marker , color ) } DCNL ( code adapted from Micah Hamady \ &apos; s code ) &apos;
def pid _ exists ( pid ) : DCNL &apos; Check whether pid exists in the current process table . &apos; 
def get _ all _ credentials ( tenant _ id ) : DCNL &apos; Lists all the creds for a tenant&apos;
def catch _ exception _ and _ warn ( warning = Warning , return _ on _ exception = None , excepts = Exception ) : DCNL &apos; .. function : : warn _ on _ exception ( func , &#91; warning _ class , return _ on _ failure , DCNL excepts &#93; ) DCNL attempts to call func. catches exception or exception tuple and issues DCNL a warning instead. returns value of return _ on _ failure when the DCNL specified exception is raised . DCNL : param func : a callable to be wrapped DCNL : param warning : the warning class to issue if an exception is DCNL raised DCNL : param return _ on _ exception : the default return value of the function DCNL if an exception is raised DCNL : param excepts : an exception class ( or tuple of exception classes ) to DCNL catch during the execution of func DCNL : type excepts : Exception or tuple of Exception classes DCNL : type warning : Warning DCNL : rtype : a callable&apos;
def get _ service ( hass , config , discovery _ info = None ) : DCNL &apos; Get the Command Line notification service . &apos; 
def oneOf ( strs , caseless = False , useRegex = True ) : DCNL &apos; Helper to quickly define a set of alternative Literals , and makes sure to do DCNL longest-first testing when there is a conflict , regardless of the input order , DCNL but returns a C { L { MatchFirst } } for best performance . DCNL Parameters : DCNL - strs - a string of space-delimited literals , or a list of string literals DCNL - caseless - ( default = False ) - treat all literals as caseless DCNL - useRegex - ( default = True ) - as an optimization , will generate a Regex DCNL object ; otherwise , will generate a C { MatchFirst } object ( if C { caseless = True } , or DCNL if creating a C { Regex } raises an exception ) &apos;
def CanonicalPathToLocalPath ( path ) : DCNL &apos; Converts the canonical paths as used by GRR to OS specific paths . DCNL Due to the inconsistencies between handling paths in windows we need to DCNL convert a path to an OS specific version prior to using it . This function DCNL should be called just before any OS specific functions . DCNL Canonical paths on windows have : DCNL - / instead of \ . DCNL - Begin with / X : / / where X is the drive letter . DCNL Args : DCNL path : A canonical path specification . DCNL Returns : DCNL A windows specific path . &apos; 
def const ( result ) : DCNL &apos; Return a function that ignores any arguments and just returns DCNL the specified result&apos;
def fast _ denoiser ( sff _ fps , fasta _ fp , tmp _ outdir , num _ cpus , primer , verbose = True , titanium = False ) : DCNL &apos; wrapper function calling methods from the Denoiser package . &apos; 
def get _ path ( * args ) : DCNL &apos; Returns API base path with passed arguments appended as path DCNL parameters . DCNL \ &apos; / api / v1 / events \ &apos; + \ &apos; / arg1 / arg2 / arg3 \ &apos; DCNL e.g. create _ url ( 2 , \ &apos; tracks \ &apos; , 7 ) - &gt; \ &apos; / api / v1 / events / 2 / tracks / 7 \ &apos; &apos;
def str _ translate ( arr , table , deletechars = None ) : DCNL &apos; Map all characters in the string through the given mapping table . DCNL Equivalent to standard : meth : `str.translate`. Note that the optional DCNL argument deletechars is only valid if you are using python 2 . For python 3 , DCNL character deletion should be specified via the table argument . DCNL Parameters DCNL table : dict ( python 3 ) , str or None ( python 2 ) DCNL In python 3 , table is a mapping of Unicode ordinals to Unicode DCNL ordinals , strings , or None . Unmapped characters are left untouched . DCNL Characters mapped to None are deleted . : meth : `str.maketrans` is a DCNL helper function for making translation tables . DCNL In python 2 , table is either a string of length 256 or None . If the DCNL table argument is None , no translation is applied and the operation DCNL simply removes the characters in deletechars . : func : `string.maketrans` DCNL is a helper function for making translation tables . DCNL deletechars : str , optional ( python 2 ) DCNL A string of characters to delete . This argument is only valid DCNL in python 2 . DCNL Returns DCNL translated : Series / Index of objects&apos;
def _ mobius _ from _ interval ( I , field ) : DCNL &apos; Convert an open interval to a Mobius transform . &apos; 
def get _ course _ cohorts ( course , assignment _ type = None ) : DCNL &apos; Get a list of all the cohorts in the given course . This will include auto cohorts , DCNL regardless of whether or not the auto cohorts include any users . DCNL Arguments : DCNL course : the course for which cohorts should be returned DCNL assignment _ type : cohort assignment type DCNL Returns : DCNL A list of CourseUserGroup objects . Empty if there are no cohorts . Does DCNL not check whether the course is cohorted . &apos; 
def assert _ any _ equal ( output , alternatives ) : DCNL &apos; Assert `output` is equal to at least one element in `alternatives`&apos;
def s3 _ URLise ( text ) : DCNL &apos; Convert all URLs in a text into an HTML &lt; A &gt; tag . DCNL @ param text : the text&apos;
def runSubprocess ( command , return _ code = False , * * kwargs ) : DCNL &apos; Run command using subprocess.Popen DCNL Similar to subprocess.check _ output ( ) , which is not available in 2.6 . DCNL Run command and wait for command to complete . If the return code was zero DCNL then return , otherwise raise CalledProcessError . DCNL By default , this will also add stdout = and stderr = subproces.PIPE DCNL to the call to Popen to suppress printing to the terminal . DCNL Parameters DCNL command : list of str DCNL Command to run as subprocess ( see subprocess.Popen documentation ) . DCNL * * kwargs : dict DCNL Additional kwargs to pass to ``subprocess.Popen``. DCNL Returns DCNL stdout : str DCNL Stdout returned by the process . &apos; 
def _ ls _ emr _ step _ stderr _ logs ( fs , log _ dir _ stream , step _ id = None ) : DCNL &apos; Yield matching step logs , optionally filtering by * step _ id * . DCNL Yields dicts with the keys : DCNL path : path / URI of step file DCNL step _ id : step _ id in * path * ( must match * step _ id * if set ) &apos;
def cellname ( rowx , colx ) : DCNL &apos; ( 5 , 7 ) = &gt; \ &apos; H6 \ &apos; &apos;
def _ translate _ conductor _ detail _ view ( context , vol , image _ id = None ) : DCNL &apos; Maps keys for conductors details view . &apos; 
def xmlsec ( ) : DCNL &apos; xmlsec path&apos;
@ csrf _ protect DCNL def render _ flatpage ( request , f ) : DCNL &apos; Internal interface to the flat page view . &apos; 
def create _ network _ interface ( name , subnet _ id = None , subnet _ name = None , private _ ip _ address = None , description = None , groups = None , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Create an Elastic Network Interface . DCNL .. versionadded : : 2016.3.0 DCNL CLI Example : DCNL .. code-block : : bash DCNL salt myminion boto _ ec2.create _ network _ interface my _ eni subnet-12345 description = my _ eni groups = &#91; \ &apos; my _ group \ &apos; &#93; &apos;
def network _ disassociate ( context , network _ id , disassociate _ host = True , disassociate _ project = True ) : DCNL &apos; Disassociate the network from project or host and raise if it does DCNL not exist . &apos; 
def prod ( F , E ) : DCNL &apos; Check that the factorization of P-1 is correct . F is the list of DCNL factors of P-1 , E lists the number of occurrences of each factor . &apos; 
def get _ public _ certificates ( deadline = None ) : DCNL &apos; Get public certificates . DCNL Args : DCNL deadline : Optional deadline in seconds for the operation ; the default DCNL is a system-specific deadline ( typically 5 seconds ) . DCNL Returns : DCNL A list of PublicCertificate object . &apos; 
def _ maybe _ encrypt _ password ( role , password , encrypted = _ DEFAULT _ PASSWORDS _ ENCRYPTION ) : DCNL &apos; pgsql passwords are md5 hashes of the string : \ &apos; md5 { password } { rolename } \ &apos; &apos;
def get _ pr _ info ( num ) : DCNL &apos; Returns the info from the GitHub API&apos;
def _ is _ ignorable _ 404 ( uri ) : DCNL &apos; Returns True if a 404 at the given URL * shouldn \ &apos; t * notify the site managers . &apos; 
def qt4 ( ) : DCNL &apos; PyOS _ InputHook python hook for Qt4 . DCNL Process pending Qt events and if there \ &apos; s no pending keyboard DCNL input , spend a short slice of time ( 50ms ) running the Qt event DCNL loop . DCNL As a Python ctypes callback can \ &apos; t raise an exception , we catch DCNL the KeyboardInterrupt and temporarily deactivate the hook , DCNL which will let a * second * CTRL + C be processed normally and go DCNL back to a clean prompt line . &apos; 
def str _ to _ list ( s ) : DCNL &apos; Convert string to list . &apos; 
@ contextlib.contextmanager DCNL def capture _ output ( stream , loglevel = None ) : DCNL &apos; Context manager which captures all log and console output to given `stream` while in scope . &apos; 
def build _ feed ( instruments , fromYear , toYear , storage , frequency = bar.Frequency.DAY , timezone = None , skipErrors = False ) : DCNL &apos; Build and load a : class : `pyalgotrade.barfeed.yahoofeed.Feed` using CSV files downloaded from Yahoo ! Finance . DCNL CSV files are downloaded if they haven \ &apos; t been downloaded before . DCNL : param instruments : Instrument identifiers . DCNL : type instruments : list . DCNL : param fromYear : The first year . DCNL : type fromYear : int . DCNL : param toYear : The last year . DCNL : type toYear : int . DCNL : param storage : The path were the files will be loaded from , or downloaded to . DCNL : type storage : string . DCNL : param frequency : The frequency of the bars . Only * * pyalgotrade.bar.Frequency.DAY * * or * * pyalgotrade.bar.Frequency.WEEK * * DCNL are supported . DCNL : param timezone : The default timezone to use to localize bars . Check : mod : `pyalgotrade.marketsession`. DCNL : type timezone : A pytz timezone . DCNL : param skipErrors : True to keep on loading / downloading files in case of errors . DCNL : type skipErrors : boolean . DCNL : rtype : : class : `pyalgotrade.barfeed.yahoofeed.Feed` . &apos; 
def valid _ doc _ types ( ) : DCNL &apos; Return a comma-separated string of valid doc types . &apos; 
def issues _ closed _ since ( period = timedelta ( days = 365 ) , project = &apos; statsmodels / statsmodels &apos; , pulls = False ) : DCNL &apos; Get all issues closed since a particular point in time. period DCNL can either be a datetime object , or a timedelta object . In the DCNL latter case , it is used as a time before the present . &apos; 
@ contextmanager DCNL def expected _ warnings ( matching ) : DCNL &apos; Context for use in testing to catch known warnings matching regexes DCNL Parameters DCNL matching : list of strings or compiled regexes DCNL Regexes for the desired warning to catch DCNL Examples DCNL &gt; &gt; &gt; from skimage import data , img _ as _ ubyte , img _ as _ float DCNL &gt; &gt; &gt; with expected _ warnings ( &#91; \ &apos; precision loss \ &apos; &#93; ) : DCNL ... d = img _ as _ ubyte ( img _ as _ float ( data.coins ( ) ) ) DCNL Notes DCNL Uses `all _ warnings` to ensure all warnings are raised . DCNL Upon exiting , it checks the recorded warnings for the desired matching DCNL pattern ( s ) . DCNL Raises a ValueError if any match was not found or an unexpected DCNL warning was raised . DCNL Allows for three types of behaviors : `and` , `or` , and `optional` matches . DCNL This is done to accomodate different build enviroments or loop conditions DCNL that may produce different warnings . The behaviors can be combined . DCNL If you pass multiple patterns , you get an orderless `and` , where all of the DCNL warnings must be raised . DCNL If you use the ` &#124; ` operator in a pattern , you can catch one of several DCNL warnings . DCNL Finally , you can use ` &#124; \ A \ Z` in a pattern to signify it as optional . &apos; 
def pending _ deprecation ( version , message = None , add _ deprecation _ to _ docstring = True ) : DCNL &apos; Decorates a function and issues a pending deprecation warning on use . DCNL : param version : DCNL An approximate future version at which point the pending deprecation DCNL will become deprecated . Not used in messaging . DCNL : param message : DCNL If provided , issue message in the warning . A sensible default DCNL is used if not provided . DCNL : param add _ deprecation _ to _ docstring : DCNL Default True . If False , the wrapped function \ &apos; s _ _ doc _ _ is left DCNL as-is . If True , the \ &apos; message \ &apos; is prepended to the docs if DCNL provided , or sensible default if message is omitted . &apos; 
def capture _ exceptions ( async _ result ) : DCNL &apos; Return a new decorated function that propagates the exceptions of the DCNL wrapped function to an async _ result . DCNL : param async _ result : An async result implementing : class : `IAsyncResult`&apos;
def guess _ filename ( obj ) : DCNL &apos; Tries to guess the filename of the given object . &apos; 
def get _ catalog _ by _ name ( name ) : DCNL &apos; Grabs a catalog by name , if its there on the api key . DCNL Otherwise , an error is thrown ( mirroring the API ) &apos;
def run _ epoch ( sess , cost _ op , ops , reset , num _ unrolls ) : DCNL &apos; Runs one optimization epoch . &apos; 
def _ update _ usage _ plan _ apis ( plan _ id , apis , op , region = None , key = None , keyid = None , profile = None ) : DCNL &apos; Helper function that updates the usage plan identified by plan _ id by adding or removing it to each of the stages , specified by apis parameter . DCNL apis DCNL a list of dictionaries , where each dictionary contains the following : DCNL apiId DCNL a string , which is the id of the created API in AWS ApiGateway DCNL stage DCNL a string , which is the stage that the created API is deployed to . DCNL op DCNL \ &apos; add \ &apos; or \ &apos; remove \ &apos; &apos;
def store _ media _ files ( document , resource , original = None ) : DCNL &apos; Store any media file in the underlying media store and update the DCNL document with unique ids of stored files . DCNL : param document : the document eventually containing the media files . DCNL : param resource : the resource being consumed by the request . DCNL : param original : original document being replaced or edited . DCNL .. versionchanged : : 0.4 DCNL Renamed to store _ media _ files to deconflict with new resolve _ media _ files . DCNL .. versionadded : : 0.3&apos;
def init ( name , cpu , mem , image , hypervisor = &apos; kvm &apos; , host = None , seed = True , nic = &apos; default &apos; , install = True , start = True , disk = &apos; default &apos; , saltenv = &apos; base &apos; , enable _ vnc = False ) : DCNL &apos; This routine is used to create a new virtual machine . This routines takes DCNL a number of options to determine what the newly created virtual machine DCNL will look like . DCNL name DCNL The mandatory name of the new virtual machine . The name option is DCNL also the minion id , all minions must have an id . DCNL cpu DCNL The number of cpus to allocate to this new virtual machine . DCNL mem DCNL The amount of memory to allocate tot his virtual machine . The number DCNL is interpreted in megabytes . DCNL image DCNL The network location of the virtual machine image , commonly a location DCNL on the salt fileserver , but http , https and ftp can also be used . DCNL hypervisor DCNL The hypervisor to use for the new virtual machine . Default is \ &apos; kvm \ &apos; . DCNL host DCNL The host to use for the new virtual machine , if this is omitted DCNL Salt will automatically detect what host to use . DCNL seed DCNL Set to False to prevent Salt from seeding the new virtual machine . DCNL nic DCNL The nic profile to use , defaults to the &quot; default &quot; nic profile which DCNL assumes a single network interface per VM associated with the &quot; br0 &quot; DCNL bridge on the master . DCNL install DCNL Set to False to prevent Salt from installing a minion on the new VM DCNL before it spins up . DCNL disk DCNL The disk profile to use DCNL saltenv DCNL The Salt environment to use&apos;
def GetSingleListItem ( list , default = None ) : DCNL &apos; Return the first item in the list , or &quot; default &quot; if the list is None DCNL or empty . Assert that the list contains at most one item . &apos; 
def try _ alt _ nzb ( nzo ) : DCNL &apos; Try to get a new NZB if available&apos;
def log _ 1 _ plus _ exp ( mat , target = None , exact = False ) : DCNL &apos; Apply log ( 1 + exp ( x ) ) to each element of the matrix mat . If exact is True , use DCNL slow and accurate log and exp . &apos; 
@ connect _ on _ app _ finalize DCNL def add _ backend _ cleanup _ task ( app ) : DCNL &apos; Task used to clean up expired results . DCNL If the configured backend requires periodic cleanup this task is also DCNL automatically configured to run every day at 4am ( requires DCNL : program : `celery beat` to be running )  . &apos; 
def _ morph _ sparse ( stc , subject _ from , subject _ to , subjects _ dir = None ) : DCNL &apos; Morph sparse source estimates to an other subject . DCNL Parameters DCNL stc : SourceEstimate DCNL The sparse STC . DCNL subject _ from : str DCNL The subject on which stc is defined . DCNL subject _ to : str DCNL The target subject . DCNL subjects _ dir : str DCNL Path to SUBJECTS _ DIR if it is not set in the environment . DCNL Returns DCNL stc _ morph : SourceEstimate DCNL The morphed source estimates . &apos; 
def getDocumentationPath ( subName = &apos; &apos; ) : DCNL &apos; Get the documentation file path . &apos; 
def fix _ accounts _ alt _ src _ langs ( apps , schema _ editor ) : DCNL &apos; Remove pootleprofile _ id column from accounts _ user _ alt _ src _ langs DCNL After migration from 2.5.x the pootleprofile _ id column is left on DCNL the m2m table accounts _ user _ alt _ src _ langs causing uniqueness issues DCNL ( # 3856 ) . This migration removes the problem column on mysql . &apos; 
def get _ delta ( name ) : DCNL &apos; Return change over time for the requested metric&apos;
def description ( ) : DCNL &apos; Get description of brainstorm ( bst _ auditory ) dataset . &apos; 
def register ( mgr ) : DCNL &apos; Register language support with the Manager . &apos; 
def remove _ comments ( string ) : DCNL &apos; Remove comments in powershell script&apos;
def test _ install _ from _ local _ directory _ with _ no _ setup _ py ( script , data ) : DCNL &apos; Test installing from a local directory with no \ &apos; setup.py \ &apos;  . &apos; 
def autolink _ role ( typ , rawtext , etext , lineno , inliner , options = { } , content = &#91; &#93; ) : DCNL &apos; Smart linking role . DCNL Expands to \ &apos; : obj : `text` \ &apos; if `text` is an object that can be imported ; DCNL otherwise expands to \ &apos; * text * \ &apos;  . &apos; 
def mkdirs ( newdir , mode = 511 ) : DCNL &apos; make directory * newdir * recursively , and set * mode * . Equivalent to : : DCNL &gt; mkdir -p NEWDIR DCNL &gt; chmod MODE NEWDIR&apos;
def repeat ( a , repeats , axis = None ) : DCNL &apos; Repeat arrays along an axis . DCNL Args : DCNL a ( cupy.ndarray ) : Array to transform . DCNL repeats ( int , list or tuple ) : The number of repeats . DCNL axis ( int ) : The axis to repeat . DCNL Returns : DCNL cupy.ndarray : Transformed array with repeats . DCNL .. seealso : : : func : `numpy.repeat`&apos;
def test _ format ( method , prec , exp _ range , restricted _ range , itr , stat ) : DCNL &apos; Iterate the _ _ format _ _ method through many test cases . &apos; 
def runLengthEncode ( stream ) : DCNL &apos; Method to encode streams using the Run-Length algorithm ( NOT IMPLEMENTED YET ) DCNL @ param stream : A PDF stream DCNL @ return : A tuple ( status , statusContent ) , where statusContent is the encoded PDF stream in case status = 0 or an error in case status = -1&apos;
def split _ keyword ( keyword ) : DCNL &apos; Split a keyword in multiple ones on any non-alphanumeric character DCNL : param string keyword : keyword DCNL : return : keywords DCNL : rtype : set&apos;
def get _ subscribers _ query ( stream , requesting _ user ) : DCNL &apos; Build a query to get the subscribers list for a stream , raising a JsonableError if : DCNL \ &apos; realm \ &apos; is optional in stream . DCNL The caller can refine this query with select _ related ( ) , values ( ) , etc. depending DCNL on whether it wants objects or just certain fields&apos;
def setup _ platform ( hass , config , add _ devices , discovery _ info = None ) : DCNL &apos; Setup Hikvision camera . &apos; 
def get _ parent _ xblock ( xblock ) : DCNL &apos; Returns the xblock that is the parent of the specified xblock , or None if it has no parent . &apos; 
def getCraftedText ( fileName , text = &apos; &apos; , repository = None ) : DCNL &apos; Multiply the fill file or text . &apos; 
def multicall ( conf , context , topic , msg , timeout , connection _ pool ) : DCNL &apos; Make a call that returns multiple times . &apos; 
def test _ install _ from _ wheel _ installs _ deps ( script , data ) : DCNL &apos; Test can install dependencies of wheels&apos;
@ utils.arg ( &apos; secgroup &apos; , metavar = &apos; &lt; secgroup &gt; &apos; , help = _ ( &apos; ID DCSP or DCSP name DCSP of DCSP security DCSP group . &apos; ) ) DCNL @ deprecated _ network DCNL def do _ secgroup _ delete ( cs , args ) : DCNL &apos; Delete a security group . &apos; 
def _ save _ attachment ( attachment , filepath ) : DCNL &apos; Saves an attachment and returns the filename . &apos; 
def downgrade _ wsgi _ ux _ to _ 1x ( environ ) : DCNL &apos; Return a new environ dict for WSGI 1.x from the given WSGI u.x environ . &apos; 
def restoreConfigZip ( archive , targetDir ) : DCNL &apos; Restores a Config ZIP file back in place DCNL : param archive : ZIP filename DCNL : param targetDir : Directory to restore to DCNL : return : True on success , False on failure&apos;
